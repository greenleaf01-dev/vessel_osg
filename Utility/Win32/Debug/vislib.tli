// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (beac7b4c).
//
// f:\hitetouchpro_work\test_cross_1\utility\win32\debug\vislib.tli
//
// Wrapper implementations for Win32 type library ./ImportFile/VISLIB.DLL
// compiler-generated file created 03/06/18 at 09:29:27 - DO NOT EDIT!


//
// dispinterface EDocument wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT MSVISIO::EDocument::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(2)
inline HRESULT MSVISIO::EDocument::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(3)
inline HRESULT MSVISIO::EDocument::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(4)
inline HRESULT MSVISIO::EDocument::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(5)
inline HRESULT MSVISIO::EDocument::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(6)
inline HRESULT MSVISIO::EDocument::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(7)
inline HRESULT MSVISIO::EDocument::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(8)
inline HRESULT MSVISIO::EDocument::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(9)
inline HRESULT MSVISIO::EDocument::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(10)
inline HRESULT MSVISIO::EDocument::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(11)
inline HRESULT MSVISIO::EDocument::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(12)
inline HRESULT MSVISIO::EDocument::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(13)
inline HRESULT MSVISIO::EDocument::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(14)
inline HRESULT MSVISIO::EDocument::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(15)
inline HRESULT MSVISIO::EDocument::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(16)
inline HRESULT MSVISIO::EDocument::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(17)
inline HRESULT MSVISIO::EDocument::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(18)
inline HRESULT MSVISIO::EDocument::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(19)
inline HRESULT MSVISIO::EDocument::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(20)
inline HRESULT MSVISIO::EDocument::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(21)
inline HRESULT MSVISIO::EDocument::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(22)
inline HRESULT MSVISIO::EDocument::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

#pragma implementation_key(23)
inline HRESULT MSVISIO::EDocument::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(24)
inline HRESULT MSVISIO::EDocument::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

#pragma implementation_key(25)
inline HRESULT MSVISIO::EDocument::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(26)
inline HRESULT MSVISIO::EDocument::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

#pragma implementation_key(27)
inline HRESULT MSVISIO::EDocument::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(28)
inline HRESULT MSVISIO::EDocument::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

#pragma implementation_key(29)
inline HRESULT MSVISIO::EDocument::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(30)
inline HRESULT MSVISIO::EDocument::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(31)
inline HRESULT MSVISIO::EDocument::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(32)
inline HRESULT MSVISIO::EDocument::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(33)
inline HRESULT MSVISIO::EDocument::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(34)
inline HRESULT MSVISIO::EDocument::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(35)
inline HRESULT MSVISIO::EDocument::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(36)
inline HRESULT MSVISIO::EDocument::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(37)
inline HRESULT MSVISIO::EDocument::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(38)
inline HRESULT MSVISIO::EDocument::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(39)
inline HRESULT MSVISIO::EDocument::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(40)
inline HRESULT MSVISIO::EDocument::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(41)
inline HRESULT MSVISIO::EDocument::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(42)
inline HRESULT MSVISIO::EDocument::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(43)
inline HRESULT MSVISIO::EDocument::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(44)
inline HRESULT MSVISIO::EDocument::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

//
// dispinterface EApplication wrapper method implementations
//

#pragma implementation_key(45)
inline HRESULT MSVISIO::EApplication::AppActivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(46)
inline HRESULT MSVISIO::EApplication::AppDeactivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(47)
inline HRESULT MSVISIO::EApplication::AppObjActivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(48)
inline HRESULT MSVISIO::EApplication::AppObjDeactivated ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(49)
inline HRESULT MSVISIO::EApplication::BeforeQuit ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(50)
inline HRESULT MSVISIO::EApplication::BeforeModal ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(51)
inline HRESULT MSVISIO::EApplication::AfterModal ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(52)
inline HRESULT MSVISIO::EApplication::WindowOpened ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x8001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(53)
inline HRESULT MSVISIO::EApplication::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(54)
inline HRESULT MSVISIO::EApplication::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(55)
inline HRESULT MSVISIO::EApplication::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(56)
inline HRESULT MSVISIO::EApplication::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(57)
inline HRESULT MSVISIO::EApplication::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(58)
inline HRESULT MSVISIO::EApplication::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(59)
inline HRESULT MSVISIO::EApplication::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(60)
inline HRESULT MSVISIO::EApplication::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(61)
inline HRESULT MSVISIO::EApplication::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(62)
inline HRESULT MSVISIO::EApplication::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(63)
inline HRESULT MSVISIO::EApplication::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(64)
inline HRESULT MSVISIO::EApplication::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(65)
inline HRESULT MSVISIO::EApplication::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(66)
inline HRESULT MSVISIO::EApplication::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(67)
inline HRESULT MSVISIO::EApplication::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(68)
inline HRESULT MSVISIO::EApplication::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(69)
inline HRESULT MSVISIO::EApplication::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(70)
inline HRESULT MSVISIO::EApplication::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(71)
inline HRESULT MSVISIO::EApplication::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(72)
inline HRESULT MSVISIO::EApplication::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(73)
inline HRESULT MSVISIO::EApplication::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(74)
inline HRESULT MSVISIO::EApplication::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(75)
inline HRESULT MSVISIO::EApplication::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(76)
inline HRESULT MSVISIO::EApplication::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(77)
inline HRESULT MSVISIO::EApplication::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(78)
inline HRESULT MSVISIO::EApplication::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(79)
inline HRESULT MSVISIO::EApplication::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(80)
inline HRESULT MSVISIO::EApplication::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(81)
inline HRESULT MSVISIO::EApplication::MarkerEvent ( struct IVApplication * app, long SequenceNum, _bstr_t ContextString ) {
    return _com_dispatch_method(this, 0x1100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008", app, SequenceNum, (BSTR)ContextString);
}

#pragma implementation_key(82)
inline HRESULT MSVISIO::EApplication::NoEventsPending ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1200, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(83)
inline HRESULT MSVISIO::EApplication::VisioIsIdle ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0x1400, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(84)
inline HRESULT MSVISIO::EApplication::MustFlushScopeBeginning ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xc8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(85)
inline HRESULT MSVISIO::EApplication::MustFlushScopeEnded ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(86)
inline HRESULT MSVISIO::EApplication::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(87)
inline HRESULT MSVISIO::EApplication::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(88)
inline HRESULT MSVISIO::EApplication::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(89)
inline HRESULT MSVISIO::EApplication::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(90)
inline HRESULT MSVISIO::EApplication::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(91)
inline HRESULT MSVISIO::EApplication::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(92)
inline HRESULT MSVISIO::EApplication::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(93)
inline HRESULT MSVISIO::EApplication::EnterScope ( struct IVApplication * app, long nScopeID, _bstr_t bstrDescription ) {
    return _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008", app, nScopeID, (BSTR)bstrDescription);
}

#pragma implementation_key(94)
inline HRESULT MSVISIO::EApplication::ExitScope ( struct IVApplication * app, long nScopeID, _bstr_t bstrDescription, VARIANT_BOOL bErrOrCancelled ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0008\x000b", app, nScopeID, (BSTR)bstrDescription, bErrOrCancelled);
}

#pragma implementation_key(95)
inline HRESULT MSVISIO::EApplication::QueryCancelQuit ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

#pragma implementation_key(96)
inline HRESULT MSVISIO::EApplication::QuitCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(97)
inline HRESULT MSVISIO::EApplication::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(98)
inline HRESULT MSVISIO::EApplication::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(99)
inline HRESULT MSVISIO::EApplication::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

#pragma implementation_key(100)
inline HRESULT MSVISIO::EApplication::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(101)
inline HRESULT MSVISIO::EApplication::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

#pragma implementation_key(102)
inline HRESULT MSVISIO::EApplication::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(103)
inline HRESULT MSVISIO::EApplication::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

#pragma implementation_key(104)
inline HRESULT MSVISIO::EApplication::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(105)
inline HRESULT MSVISIO::EApplication::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

#pragma implementation_key(106)
inline HRESULT MSVISIO::EApplication::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(107)
inline HRESULT MSVISIO::EApplication::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

#pragma implementation_key(108)
inline HRESULT MSVISIO::EApplication::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(109)
inline HRESULT MSVISIO::EApplication::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(110)
inline HRESULT MSVISIO::EApplication::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(111)
inline HRESULT MSVISIO::EApplication::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(112)
inline HRESULT MSVISIO::EApplication::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(113)
inline HRESULT MSVISIO::EApplication::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(114)
inline HRESULT MSVISIO::EApplication::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(115)
inline HRESULT MSVISIO::EApplication::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(116)
inline HRESULT MSVISIO::EApplication::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(117)
inline HRESULT MSVISIO::EApplication::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(118)
inline HRESULT MSVISIO::EApplication::QueryCancelSuspend ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xce, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

#pragma implementation_key(119)
inline HRESULT MSVISIO::EApplication::SuspendCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(120)
inline HRESULT MSVISIO::EApplication::BeforeSuspend ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(121)
inline HRESULT MSVISIO::EApplication::AfterResume ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(122)
inline HRESULT MSVISIO::EApplication::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

#pragma implementation_key(123)
inline HRESULT MSVISIO::EApplication::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(124)
inline HRESULT MSVISIO::EApplication::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(125)
inline HRESULT MSVISIO::EApplication::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(126)
inline HRESULT MSVISIO::EApplication::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

#pragma implementation_key(127)
inline HRESULT MSVISIO::EApplication::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

#pragma implementation_key(128)
inline HRESULT MSVISIO::EApplication::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

#pragma implementation_key(129)
inline HRESULT MSVISIO::EApplication::QueryCancelSuspendEvents ( struct IVApplication * app, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0xd2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", app);
}

#pragma implementation_key(130)
inline HRESULT MSVISIO::EApplication::SuspendEventsCanceled ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(131)
inline HRESULT MSVISIO::EApplication::BeforeSuspendEvents ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(132)
inline HRESULT MSVISIO::EApplication::AfterResumeEvents ( struct IVApplication * app ) {
    return _com_dispatch_method(this, 0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", app);
}

#pragma implementation_key(133)
inline HRESULT MSVISIO::EApplication::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(134)
inline HRESULT MSVISIO::EApplication::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(135)
inline HRESULT MSVISIO::EApplication::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(136)
inline HRESULT MSVISIO::EApplication::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(137)
inline HRESULT MSVISIO::EApplication::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

#pragma implementation_key(138)
inline HRESULT MSVISIO::EApplication::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(139)
inline HRESULT MSVISIO::EApplication::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(140)
inline HRESULT MSVISIO::EApplication::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(141)
inline HRESULT MSVISIO::EApplication::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

//
// dispinterface EWindows wrapper method implementations
//

#pragma implementation_key(142)
inline HRESULT MSVISIO::EWindows::WindowOpened ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x8001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(143)
inline HRESULT MSVISIO::EWindows::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(144)
inline HRESULT MSVISIO::EWindows::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(145)
inline HRESULT MSVISIO::EWindows::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(146)
inline HRESULT MSVISIO::EWindows::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(147)
inline HRESULT MSVISIO::EWindows::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(148)
inline HRESULT MSVISIO::EWindows::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(149)
inline HRESULT MSVISIO::EWindows::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(150)
inline HRESULT MSVISIO::EWindows::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(151)
inline HRESULT MSVISIO::EWindows::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

#pragma implementation_key(152)
inline HRESULT MSVISIO::EWindows::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(153)
inline HRESULT MSVISIO::EWindows::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

#pragma implementation_key(154)
inline HRESULT MSVISIO::EWindows::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(155)
inline HRESULT MSVISIO::EWindows::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(156)
inline HRESULT MSVISIO::EWindows::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(157)
inline HRESULT MSVISIO::EWindows::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

#pragma implementation_key(158)
inline HRESULT MSVISIO::EWindows::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

#pragma implementation_key(159)
inline HRESULT MSVISIO::EWindows::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

//
// dispinterface EWindow wrapper method implementations
//

#pragma implementation_key(160)
inline HRESULT MSVISIO::EWindow::SelectionChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(161)
inline HRESULT MSVISIO::EWindow::BeforeWindowClosed ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x4001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(162)
inline HRESULT MSVISIO::EWindow::WindowActivated ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x1080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(163)
inline HRESULT MSVISIO::EWindow::BeforeWindowSelDelete ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2be, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(164)
inline HRESULT MSVISIO::EWindow::BeforeWindowPageTurn ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2bf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(165)
inline HRESULT MSVISIO::EWindow::WindowTurnedToPage ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(166)
inline HRESULT MSVISIO::EWindow::WindowChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(167)
inline HRESULT MSVISIO::EWindow::ViewChanged ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(168)
inline HRESULT MSVISIO::EWindow::QueryCancelWindowClose ( struct IVWindow * Window, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c2, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Window);
}

#pragma implementation_key(169)
inline HRESULT MSVISIO::EWindow::WindowCloseCanceled ( struct IVWindow * Window ) {
    return _com_dispatch_method(this, 0x2c3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Window);
}

#pragma implementation_key(170)
inline HRESULT MSVISIO::EWindow::OnKeystrokeMessageForAddon ( struct IVMSGWrap * MSG, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x2c4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", MSG);
}

#pragma implementation_key(171)
inline HRESULT MSVISIO::EWindow::MouseDown ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(172)
inline HRESULT MSVISIO::EWindow::MouseMove ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(173)
inline HRESULT MSVISIO::EWindow::MouseUp ( long Button, long KeyButtonState, double x, double y, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0005\x0005\x400b", Button, KeyButtonState, x, y, CancelDefault);
}

#pragma implementation_key(174)
inline HRESULT MSVISIO::EWindow::KeyDown ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

#pragma implementation_key(175)
inline HRESULT MSVISIO::EWindow::KeyPress ( long KeyAscii, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2c9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400b", KeyAscii, CancelDefault);
}

#pragma implementation_key(176)
inline HRESULT MSVISIO::EWindow::KeyUp ( long KeyCode, long KeyButtonState, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x2ca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", KeyCode, KeyButtonState, CancelDefault);
}

//
// dispinterface EDocuments wrapper method implementations
//

#pragma implementation_key(177)
inline HRESULT MSVISIO::EDocuments::DocumentOpened ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(178)
inline HRESULT MSVISIO::EDocuments::DocumentCreated ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(179)
inline HRESULT MSVISIO::EDocuments::DocumentSaved ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(180)
inline HRESULT MSVISIO::EDocuments::DocumentSavedAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(181)
inline HRESULT MSVISIO::EDocuments::DocumentChanged ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(182)
inline HRESULT MSVISIO::EDocuments::BeforeDocumentClose ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x4002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(183)
inline HRESULT MSVISIO::EDocuments::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(184)
inline HRESULT MSVISIO::EDocuments::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(185)
inline HRESULT MSVISIO::EDocuments::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(186)
inline HRESULT MSVISIO::EDocuments::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(187)
inline HRESULT MSVISIO::EDocuments::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(188)
inline HRESULT MSVISIO::EDocuments::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(189)
inline HRESULT MSVISIO::EDocuments::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(190)
inline HRESULT MSVISIO::EDocuments::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(191)
inline HRESULT MSVISIO::EDocuments::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(192)
inline HRESULT MSVISIO::EDocuments::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(193)
inline HRESULT MSVISIO::EDocuments::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(194)
inline HRESULT MSVISIO::EDocuments::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(195)
inline HRESULT MSVISIO::EDocuments::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(196)
inline HRESULT MSVISIO::EDocuments::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(197)
inline HRESULT MSVISIO::EDocuments::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(198)
inline HRESULT MSVISIO::EDocuments::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(199)
inline HRESULT MSVISIO::EDocuments::RunModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(200)
inline HRESULT MSVISIO::EDocuments::DesignModeEntered ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(201)
inline HRESULT MSVISIO::EDocuments::BeforeDocumentSave ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(202)
inline HRESULT MSVISIO::EDocuments::BeforeDocumentSaveAs ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(203)
inline HRESULT MSVISIO::EDocuments::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(204)
inline HRESULT MSVISIO::EDocuments::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(205)
inline HRESULT MSVISIO::EDocuments::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(206)
inline HRESULT MSVISIO::EDocuments::QueryCancelDocumentClose ( struct IVDocument * doc, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", doc);
}

#pragma implementation_key(207)
inline HRESULT MSVISIO::EDocuments::DocumentCloseCanceled ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

#pragma implementation_key(208)
inline HRESULT MSVISIO::EDocuments::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

#pragma implementation_key(209)
inline HRESULT MSVISIO::EDocuments::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(210)
inline HRESULT MSVISIO::EDocuments::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

#pragma implementation_key(211)
inline HRESULT MSVISIO::EDocuments::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(212)
inline HRESULT MSVISIO::EDocuments::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

#pragma implementation_key(213)
inline HRESULT MSVISIO::EDocuments::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(214)
inline HRESULT MSVISIO::EDocuments::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(215)
inline HRESULT MSVISIO::EDocuments::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(216)
inline HRESULT MSVISIO::EDocuments::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(217)
inline HRESULT MSVISIO::EDocuments::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(218)
inline HRESULT MSVISIO::EDocuments::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(219)
inline HRESULT MSVISIO::EDocuments::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(220)
inline HRESULT MSVISIO::EDocuments::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(221)
inline HRESULT MSVISIO::EDocuments::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(222)
inline HRESULT MSVISIO::EDocuments::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(223)
inline HRESULT MSVISIO::EDocuments::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(224)
inline HRESULT MSVISIO::EDocuments::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(225)
inline HRESULT MSVISIO::EDocuments::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(226)
inline HRESULT MSVISIO::EDocuments::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(227)
inline HRESULT MSVISIO::EDocuments::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

#pragma implementation_key(228)
inline HRESULT MSVISIO::EDocuments::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(229)
inline HRESULT MSVISIO::EDocuments::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(230)
inline HRESULT MSVISIO::EDocuments::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(231)
inline HRESULT MSVISIO::EDocuments::AfterRemoveHiddenInformation ( struct IVDocument * doc ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", doc);
}

//
// dispinterface EStyles wrapper method implementations
//

#pragma implementation_key(232)
inline HRESULT MSVISIO::EStyles::StyleAdded ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x8004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(233)
inline HRESULT MSVISIO::EStyles::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(234)
inline HRESULT MSVISIO::EStyles::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(235)
inline HRESULT MSVISIO::EStyles::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

#pragma implementation_key(236)
inline HRESULT MSVISIO::EStyles::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

//
// dispinterface EStyle wrapper method implementations
//

#pragma implementation_key(237)
inline HRESULT MSVISIO::EStyle::StyleChanged ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(238)
inline HRESULT MSVISIO::EStyle::BeforeStyleDelete ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x4004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

#pragma implementation_key(239)
inline HRESULT MSVISIO::EStyle::QueryCancelStyleDelete ( struct IVStyle * Style, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Style);
}

#pragma implementation_key(240)
inline HRESULT MSVISIO::EStyle::StyleDeleteCanceled ( struct IVStyle * Style ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Style);
}

//
// dispinterface EMasters wrapper method implementations
//

#pragma implementation_key(241)
inline HRESULT MSVISIO::EMasters::MasterAdded ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x8008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(242)
inline HRESULT MSVISIO::EMasters::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(243)
inline HRESULT MSVISIO::EMasters::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(244)
inline HRESULT MSVISIO::EMasters::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(245)
inline HRESULT MSVISIO::EMasters::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(246)
inline HRESULT MSVISIO::EMasters::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(247)
inline HRESULT MSVISIO::EMasters::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(248)
inline HRESULT MSVISIO::EMasters::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(249)
inline HRESULT MSVISIO::EMasters::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(250)
inline HRESULT MSVISIO::EMasters::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(251)
inline HRESULT MSVISIO::EMasters::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(252)
inline HRESULT MSVISIO::EMasters::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(253)
inline HRESULT MSVISIO::EMasters::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(254)
inline HRESULT MSVISIO::EMasters::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

#pragma implementation_key(255)
inline HRESULT MSVISIO::EMasters::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(256)
inline HRESULT MSVISIO::EMasters::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(257)
inline HRESULT MSVISIO::EMasters::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(258)
inline HRESULT MSVISIO::EMasters::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(259)
inline HRESULT MSVISIO::EMasters::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(260)
inline HRESULT MSVISIO::EMasters::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(261)
inline HRESULT MSVISIO::EMasters::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(262)
inline HRESULT MSVISIO::EMasters::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(263)
inline HRESULT MSVISIO::EMasters::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(264)
inline HRESULT MSVISIO::EMasters::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(265)
inline HRESULT MSVISIO::EMasters::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(266)
inline HRESULT MSVISIO::EMasters::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(267)
inline HRESULT MSVISIO::EMasters::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface EMaster wrapper method implementations
//

#pragma implementation_key(268)
inline HRESULT MSVISIO::EMaster::MasterChanged ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(269)
inline HRESULT MSVISIO::EMaster::BeforeMasterDelete ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x4008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(270)
inline HRESULT MSVISIO::EMaster::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(271)
inline HRESULT MSVISIO::EMaster::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(272)
inline HRESULT MSVISIO::EMaster::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(273)
inline HRESULT MSVISIO::EMaster::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(274)
inline HRESULT MSVISIO::EMaster::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(275)
inline HRESULT MSVISIO::EMaster::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(276)
inline HRESULT MSVISIO::EMaster::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(277)
inline HRESULT MSVISIO::EMaster::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(278)
inline HRESULT MSVISIO::EMaster::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(279)
inline HRESULT MSVISIO::EMaster::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(280)
inline HRESULT MSVISIO::EMaster::QueryCancelMasterDelete ( struct IVMaster * Master, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Master);
}

#pragma implementation_key(281)
inline HRESULT MSVISIO::EMaster::MasterDeleteCanceled ( struct IVMaster * Master ) {
    return _com_dispatch_method(this, 0x191, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Master);
}

#pragma implementation_key(282)
inline HRESULT MSVISIO::EMaster::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(283)
inline HRESULT MSVISIO::EMaster::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(284)
inline HRESULT MSVISIO::EMaster::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(285)
inline HRESULT MSVISIO::EMaster::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(286)
inline HRESULT MSVISIO::EMaster::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(287)
inline HRESULT MSVISIO::EMaster::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(288)
inline HRESULT MSVISIO::EMaster::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(289)
inline HRESULT MSVISIO::EMaster::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(290)
inline HRESULT MSVISIO::EMaster::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(291)
inline HRESULT MSVISIO::EMaster::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(292)
inline HRESULT MSVISIO::EMaster::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(293)
inline HRESULT MSVISIO::EMaster::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface EPages wrapper method implementations
//

#pragma implementation_key(294)
inline HRESULT MSVISIO::EPages::PageAdded ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x8010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(295)
inline HRESULT MSVISIO::EPages::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(296)
inline HRESULT MSVISIO::EPages::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(297)
inline HRESULT MSVISIO::EPages::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(298)
inline HRESULT MSVISIO::EPages::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(299)
inline HRESULT MSVISIO::EPages::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(300)
inline HRESULT MSVISIO::EPages::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(301)
inline HRESULT MSVISIO::EPages::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(302)
inline HRESULT MSVISIO::EPages::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(303)
inline HRESULT MSVISIO::EPages::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(304)
inline HRESULT MSVISIO::EPages::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(305)
inline HRESULT MSVISIO::EPages::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(306)
inline HRESULT MSVISIO::EPages::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(307)
inline HRESULT MSVISIO::EPages::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

#pragma implementation_key(308)
inline HRESULT MSVISIO::EPages::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(309)
inline HRESULT MSVISIO::EPages::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(310)
inline HRESULT MSVISIO::EPages::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(311)
inline HRESULT MSVISIO::EPages::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(312)
inline HRESULT MSVISIO::EPages::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(313)
inline HRESULT MSVISIO::EPages::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(314)
inline HRESULT MSVISIO::EPages::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(315)
inline HRESULT MSVISIO::EPages::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(316)
inline HRESULT MSVISIO::EPages::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(317)
inline HRESULT MSVISIO::EPages::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(318)
inline HRESULT MSVISIO::EPages::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(319)
inline HRESULT MSVISIO::EPages::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(320)
inline HRESULT MSVISIO::EPages::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(321)
inline HRESULT MSVISIO::EPages::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(322)
inline HRESULT MSVISIO::EPages::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

//
// dispinterface EPage wrapper method implementations
//

#pragma implementation_key(323)
inline HRESULT MSVISIO::EPage::PageChanged ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x2010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(324)
inline HRESULT MSVISIO::EPage::BeforePageDelete ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x4010, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(325)
inline HRESULT MSVISIO::EPage::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(326)
inline HRESULT MSVISIO::EPage::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(327)
inline HRESULT MSVISIO::EPage::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(328)
inline HRESULT MSVISIO::EPage::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(329)
inline HRESULT MSVISIO::EPage::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(330)
inline HRESULT MSVISIO::EPage::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(331)
inline HRESULT MSVISIO::EPage::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(332)
inline HRESULT MSVISIO::EPage::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(333)
inline HRESULT MSVISIO::EPage::ConnectionsAdded ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x8100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(334)
inline HRESULT MSVISIO::EPage::ConnectionsDeleted ( struct IVConnects * Connects ) {
    return _com_dispatch_method(this, 0x4100, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Connects);
}

#pragma implementation_key(335)
inline HRESULT MSVISIO::EPage::QueryCancelPageDelete ( struct IVPage * Page, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x1f4, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Page);
}

#pragma implementation_key(336)
inline HRESULT MSVISIO::EPage::PageDeleteCanceled ( struct IVPage * Page ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Page);
}

#pragma implementation_key(337)
inline HRESULT MSVISIO::EPage::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(338)
inline HRESULT MSVISIO::EPage::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(339)
inline HRESULT MSVISIO::EPage::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(340)
inline HRESULT MSVISIO::EPage::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(341)
inline HRESULT MSVISIO::EPage::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(342)
inline HRESULT MSVISIO::EPage::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(343)
inline HRESULT MSVISIO::EPage::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(344)
inline HRESULT MSVISIO::EPage::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(345)
inline HRESULT MSVISIO::EPage::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(346)
inline HRESULT MSVISIO::EPage::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(347)
inline HRESULT MSVISIO::EPage::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(348)
inline HRESULT MSVISIO::EPage::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(349)
inline HRESULT MSVISIO::EPage::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(350)
inline HRESULT MSVISIO::EPage::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

//
// dispinterface EShape wrapper method implementations
//

#pragma implementation_key(351)
inline HRESULT MSVISIO::EShape::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(352)
inline HRESULT MSVISIO::EShape::ShapeAdded ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x8040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(353)
inline HRESULT MSVISIO::EShape::BeforeSelectionDelete ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x385, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(354)
inline HRESULT MSVISIO::EShape::ShapeChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(355)
inline HRESULT MSVISIO::EShape::SelectionAdded ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x386, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(356)
inline HRESULT MSVISIO::EShape::BeforeShapeDelete ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x4040, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(357)
inline HRESULT MSVISIO::EShape::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(358)
inline HRESULT MSVISIO::EShape::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(359)
inline HRESULT MSVISIO::EShape::ShapeParentChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x322, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(360)
inline HRESULT MSVISIO::EShape::BeforeShapeTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x323, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(361)
inline HRESULT MSVISIO::EShape::ShapeExitedTextEdit ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x324, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(362)
inline HRESULT MSVISIO::EShape::QueryCancelSelectionDelete ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x387, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(363)
inline HRESULT MSVISIO::EShape::SelectionDeleteCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x388, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(364)
inline HRESULT MSVISIO::EShape::QueryCancelUngroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x389, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(365)
inline HRESULT MSVISIO::EShape::UngroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(366)
inline HRESULT MSVISIO::EShape::QueryCancelConvertToGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38b, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(367)
inline HRESULT MSVISIO::EShape::ConvertToGroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(368)
inline HRESULT MSVISIO::EShape::QueryCancelGroup ( struct IVSelection * Selection, VARIANT_BOOL * lpboolRet ) {
    return _com_dispatch_method(this, 0x38d, DISPATCH_METHOD, VT_BOOL, (void*)lpboolRet, 
        L"\x0009", Selection);
}

#pragma implementation_key(369)
inline HRESULT MSVISIO::EShape::GroupCanceled ( struct IVSelection * Selection ) {
    return _com_dispatch_method(this, 0x38e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Selection);
}

#pragma implementation_key(370)
inline HRESULT MSVISIO::EShape::ShapeDataGraphicChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x327, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

#pragma implementation_key(371)
inline HRESULT MSVISIO::EShape::ShapeLinkAdded ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x325, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

#pragma implementation_key(372)
inline HRESULT MSVISIO::EShape::ShapeLinkDeleted ( struct IVShape * Shape, long DataRecordsetID, long DataRowID ) {
    return _com_dispatch_method(this, 0x326, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003\x0003", Shape, DataRecordsetID, DataRowID);
}

//
// dispinterface ECharacters wrapper method implementations
//

#pragma implementation_key(373)
inline HRESULT MSVISIO::ECharacters::TextChanged ( struct IVShape * Shape ) {
    return _com_dispatch_method(this, 0x2080, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Shape);
}

//
// dispinterface ECell wrapper method implementations
//

#pragma implementation_key(374)
inline HRESULT MSVISIO::ECell::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(375)
inline HRESULT MSVISIO::ECell::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface IVDispExtender wrapper method implementations
//

#pragma implementation_key(376)
inline _bstr_t MSVISIO::IVDispExtender::GetName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(377)
inline void MSVISIO::IVDispExtender::PutName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(378)
inline IUnknownPtr MSVISIO::IVDispExtender::GetObject ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, DISPID_Object, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(379)
inline IUnknownPtr MSVISIO::IVDispExtender::GetParent ( ) {
    IUnknown * _result = 0;
    _com_dispatch_method(this, 0x80010008, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&_result, NULL);
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(380)
inline HRESULT MSVISIO::IVDispExtender::Delete ( ) {
    return _com_dispatch_method(this, DISPID_Delete, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(381)
inline HRESULT MSVISIO::IVDispExtender::Index ( ) {
    return _com_dispatch_method(this, 0xfffffcdc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(382)
inline MSVISIO::IVShapePtr MSVISIO::IVDispExtender::GetShape ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010100, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

#pragma implementation_key(383)
inline HRESULT MSVISIO::IVDispExtender::VoidGroup ( ) {
    return _com_dispatch_method(this, 0x8001012d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(384)
inline HRESULT MSVISIO::IVDispExtender::BringForward ( ) {
    return _com_dispatch_method(this, 0x8001012e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(385)
inline HRESULT MSVISIO::IVDispExtender::BringToFront ( ) {
    return _com_dispatch_method(this, 0x8001012f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(386)
inline HRESULT MSVISIO::IVDispExtender::ConvertToGroup ( ) {
    return _com_dispatch_method(this, 0x80010130, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(387)
inline HRESULT MSVISIO::IVDispExtender::SendBackward ( ) {
    return _com_dispatch_method(this, 0x80010134, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(388)
inline HRESULT MSVISIO::IVDispExtender::SendToBack ( ) {
    return _com_dispatch_method(this, 0x80010135, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(389)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDispExtender::GetDocument ( ) {
    struct IVDocument * _result = 0;
    _com_dispatch_method(this, 0x8001012c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(390)
inline IDispatchPtr MSVISIO::IVDispExtender::GetShapeParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010138, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(391)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDispExtender::GetApplication ( ) {
    struct IVApplication * _result = 0;
    _com_dispatch_method(this, 0x80010101, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(392)
inline MSVISIO::IVMasterPtr MSVISIO::IVDispExtender::GetMaster ( ) {
    struct IVMaster * _result = 0;
    _com_dispatch_method(this, 0x80010115, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(393)
inline MSVISIO::IVCellPtr MSVISIO::IVDispExtender::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    _com_dispatch_method(this, 0x8001010d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0008", (BSTR)localeSpecificCellName);
    return IVCellPtr(_result, false);
}

#pragma implementation_key(394)
inline MSVISIO::IVCellPtr MSVISIO::IVDispExtender::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    _com_dispatch_method(this, 0x8001010e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, Column);
    return IVCellPtr(_result, false);
}

#pragma implementation_key(395)
inline _bstr_t MSVISIO::IVDispExtender::GetData1 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001010f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(396)
inline void MSVISIO::IVDispExtender::PutData1 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001010f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(397)
inline _bstr_t MSVISIO::IVDispExtender::GetData2 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010110, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(398)
inline void MSVISIO::IVDispExtender::PutData2 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010110, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(399)
inline _bstr_t MSVISIO::IVDispExtender::GetData3 ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010111, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(400)
inline void MSVISIO::IVDispExtender::PutData3 ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010111, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(401)
inline _bstr_t MSVISIO::IVDispExtender::GetHelp ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010112, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(402)
inline void MSVISIO::IVDispExtender::PutHelp ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010112, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(403)
inline _bstr_t MSVISIO::IVDispExtender::GetNameID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010104, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(404)
inline HRESULT MSVISIO::IVDispExtender::ShapeCopy ( ) {
    return _com_dispatch_method(this, 0x80010109, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(405)
inline HRESULT MSVISIO::IVDispExtender::ShapeCut ( ) {
    return _com_dispatch_method(this, 0x8001010a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(406)
inline HRESULT MSVISIO::IVDispExtender::ShapeDelete ( ) {
    return _com_dispatch_method(this, 0x8001010b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(407)
inline HRESULT MSVISIO::IVDispExtender::VoidShapeDuplicate ( ) {
    return _com_dispatch_method(this, 0x8001010c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(408)
inline short MSVISIO::IVDispExtender::GetRowCount ( short Section ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010118, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002", Section);
    return _result;
}

#pragma implementation_key(409)
inline short MSVISIO::IVDispExtender::AddSection ( short Section ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010119, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002", Section);
    return _result;
}

#pragma implementation_key(410)
inline HRESULT MSVISIO::IVDispExtender::DeleteSection ( short Section ) {
    return _com_dispatch_method(this, 0x8001011a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002", Section);
}

#pragma implementation_key(411)
inline short MSVISIO::IVDispExtender::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011b, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, RowTag);
    return _result;
}

#pragma implementation_key(412)
inline HRESULT MSVISIO::IVDispExtender::DeleteRow ( short Section, short Row ) {
    return _com_dispatch_method(this, 0x8001011c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x0002", Section, Row);
}

#pragma implementation_key(413)
inline short MSVISIO::IVDispExtender::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011d, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, Row);
    return _result;
}

#pragma implementation_key(414)
inline short MSVISIO::IVDispExtender::GetRowType ( short Section, short Row ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001011e, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, Row);
    return _result;
}

#pragma implementation_key(415)
inline void MSVISIO::IVDispExtender::PutRowType ( short Section, short Row, short _arg3 ) {
    _com_dispatch_method(this, 0x8001011e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0002\x0002\x0002", Section, Row, _arg3);
}

#pragma implementation_key(416)
inline HRESULT MSVISIO::IVDispExtender::SetCenter ( double xPos, double yPos ) {
    return _com_dispatch_method(this, 0x8001011f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005", xPos, yPos);
}

#pragma implementation_key(417)
inline MSVISIO::IVConnectsPtr MSVISIO::IVDispExtender::GetConnects ( ) {
    struct IVConnects * _result = 0;
    _com_dispatch_method(this, 0x80010122, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(418)
inline short MSVISIO::IVDispExtender::GetShapeIndex16 ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010123, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(419)
inline _bstr_t MSVISIO::IVDispExtender::GetStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010124, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(420)
inline void MSVISIO::IVDispExtender::PutStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010124, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(421)
inline void MSVISIO::IVDispExtender::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010128, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(422)
inline _bstr_t MSVISIO::IVDispExtender::GetLineStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010125, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(423)
inline void MSVISIO::IVDispExtender::PutLineStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010125, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(424)
inline void MSVISIO::IVDispExtender::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010129, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(425)
inline _bstr_t MSVISIO::IVDispExtender::GetFillStyle ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010126, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(426)
inline void MSVISIO::IVDispExtender::PutFillStyle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x80010126, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(427)
inline void MSVISIO::IVDispExtender::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x8001012a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

#pragma implementation_key(428)
inline HRESULT MSVISIO::IVDispExtender::Export ( _bstr_t FileName ) {
    return _com_dispatch_method(this, 0x80010139, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)FileName);
}

#pragma implementation_key(429)
inline _bstr_t MSVISIO::IVDispExtender::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x8001013d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, 
        L"\x0002", fUniqueID);
    return _bstr_t(_result, false);
}

#pragma implementation_key(430)
inline MSVISIO::IVPagePtr MSVISIO::IVDispExtender::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    _com_dispatch_method(this, 0x8001013e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVPagePtr(_result, false);
}

#pragma implementation_key(431)
inline MSVISIO::IVMasterPtr MSVISIO::IVDispExtender::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    _com_dispatch_method(this, 0x8001013f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(432)
inline MSVISIO::IVShapePtr MSVISIO::IVDispExtender::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010140, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

#pragma implementation_key(433)
inline short MSVISIO::IVDispExtender::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010141, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002", Section, fExistsLocally);
    return _result;
}

#pragma implementation_key(434)
inline short MSVISIO::IVDispExtender::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010142, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002", Section, Row, fExistsLocally);
    return _result;
}

#pragma implementation_key(435)
inline short MSVISIO::IVDispExtender::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010143, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0008\x0002", (BSTR)localeSpecificCellName, fExistsLocally);
    return _result;
}

#pragma implementation_key(436)
inline short MSVISIO::IVDispExtender::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010144, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002\x0002", Section, Row, Column, fExistsLocally);
    return _result;
}

#pragma implementation_key(437)
inline short MSVISIO::IVDispExtender::GetLayerCount ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010145, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(438)
inline MSVISIO::IVLayerPtr MSVISIO::IVDispExtender::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    _com_dispatch_method(this, 0x80010146, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0002", Index);
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(439)
inline short MSVISIO::IVDispExtender::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010147, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0008\x0002", Section, (BSTR)RowName, RowTag);
    return _result;
}

#pragma implementation_key(440)
inline short MSVISIO::IVDispExtender::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010148, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0002\x0002\x0002\x0002", Section, Row, RowTag, RowCount);
    return _result;
}

#pragma implementation_key(441)
inline MSVISIO::IVEventListPtr MSVISIO::IVDispExtender::GetEventList ( ) {
    struct IVEventList * _result = 0;
    _com_dispatch_method(this, 0x80010149, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(442)
inline short MSVISIO::IVDispExtender::GetPersistsEvents ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001014a, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(443)
inline _bstr_t MSVISIO::IVDispExtender::GetClassID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010156, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(444)
inline IDispatchPtr MSVISIO::IVDispExtender::GetShapeObject ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x80010158, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(445)
inline MSVISIO::IVWindowPtr MSVISIO::IVDispExtender::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    _com_dispatch_method(this, 0x8001015a, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(446)
inline short MSVISIO::IVDispExtender::GetShapeID16 ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001015b, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(447)
inline HRESULT MSVISIO::IVDispExtender::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    return _com_dispatch_method(this, 0x8001015d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6002\x600c", SRCStream, formulaArray);
}

#pragma implementation_key(448)
inline HRESULT MSVISIO::IVDispExtender::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    return _com_dispatch_method(this, 0x8001015e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6002\x0002\x600c\x600c", SRCStream, Flags, UnitsNamesOrCodes, resultArray);
}

#pragma implementation_key(449)
inline short MSVISIO::IVDispExtender::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    _com_dispatch_method(this, 0x8001015f, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x6002\x600c\x0002", SRCStream, formulaArray, Flags);
    return _result;
}

#pragma implementation_key(450)
inline short MSVISIO::IVDispExtender::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010160, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x6002\x600c\x600c\x0002", SRCStream, UnitsNamesOrCodes, resultArray, Flags);
    return _result;
}

#pragma implementation_key(451)
inline MSVISIO::IVConnectsPtr MSVISIO::IVDispExtender::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    _com_dispatch_method(this, 0x80010161, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(452)
inline HRESULT MSVISIO::IVDispExtender::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    return _com_dispatch_method(this, 0x80010163, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0002\x4005\x4005\x4005\x4005", Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
}

#pragma implementation_key(453)
inline short MSVISIO::IVDispExtender::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010164, DISPATCH_METHOD, VT_I2, (void*)&_result, 
        L"\x0005\x0005\x0005", xPos, yPos, Tolerance);
    return _result;
}

#pragma implementation_key(454)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVDispExtender::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    _com_dispatch_method(this, 0x80010165, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(455)
inline _bstr_t MSVISIO::IVDispExtender::GetProgID ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x80010166, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

#pragma implementation_key(456)
inline short MSVISIO::IVDispExtender::GetObjectIsInherited ( ) {
    short _result = 0;
    _com_dispatch_method(this, 0x80010167, DISPATCH_PROPERTYGET, VT_I2, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(457)
inline long MSVISIO::IVDispExtender::GetShapeID ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8001016b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(458)
inline long MSVISIO::IVDispExtender::GetShapeIndex ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x8001016c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(459)
inline MSVISIO::IVShapePtr MSVISIO::IVDispExtender::Group ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010182, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

#pragma implementation_key(460)
inline MSVISIO::IVShapePtr MSVISIO::IVDispExtender::ShapeDuplicate ( ) {
    struct IVShape * _result = 0;
    _com_dispatch_method(this, 0x80010183, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, NULL);
    return IVShapePtr(_result, false);
}

//
// interface IVisEventProc wrapper method implementations
//

#pragma implementation_key(461)
inline _variant_t MSVISIO::IVisEventProc::VisEventProc ( short nEventCode, IDispatch * pSourceObj, long nEventID, long nEventSeqNum, IDispatch * pSubjectObj, const _variant_t & vMoreInfo ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_VisEventProc(nEventCode, pSourceObj, nEventID, nEventSeqNum, pSubjectObj, vMoreInfo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// dispinterface ESection wrapper method implementations
//

#pragma implementation_key(462)
inline HRESULT MSVISIO::ESection::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(463)
inline HRESULT MSVISIO::ESection::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface ERow wrapper method implementations
//

#pragma implementation_key(464)
inline HRESULT MSVISIO::ERow::CellChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x2800, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

#pragma implementation_key(465)
inline HRESULT MSVISIO::ERow::FormulaChanged ( struct IVCell * Cell ) {
    return _com_dispatch_method(this, 0x3000, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Cell);
}

//
// dispinterface EDataRecordset wrapper method implementations
//

#pragma implementation_key(466)
inline HRESULT MSVISIO::EDataRecordset::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

#pragma implementation_key(467)
inline HRESULT MSVISIO::EDataRecordset::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

//
// dispinterface EDataRecordsets wrapper method implementations
//

#pragma implementation_key(468)
inline HRESULT MSVISIO::EDataRecordsets::DataRecordsetAdded ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x8020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(469)
inline HRESULT MSVISIO::EDataRecordsets::BeforeDataRecordsetDelete ( struct IVDataRecordset * DataRecordset ) {
    return _com_dispatch_method(this, 0x4020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordset);
}

#pragma implementation_key(470)
inline HRESULT MSVISIO::EDataRecordsets::DataRecordsetChanged ( struct IVDataRecordsetChangedEvent * DataRecordsetChanged ) {
    return _com_dispatch_method(this, 0x2020, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", DataRecordsetChanged);
}

//
// interface IVApplication wrapper method implementations
//

#pragma implementation_key(471)
inline MSVISIO::IVDocumentPtr MSVISIO::IVApplication::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(472)
inline MSVISIO::IVPagePtr MSVISIO::IVApplication::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(473)
inline MSVISIO::IVWindowPtr MSVISIO::IVApplication::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(474)
inline MSVISIO::IVApplicationPtr MSVISIO::IVApplication::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(475)
inline MSVISIO::IVDocumentsPtr MSVISIO::IVApplication::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

#pragma implementation_key(476)
inline short MSVISIO::IVApplication::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline long MSVISIO::IVApplication::GetOnDataChangeDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_OnDataChangeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline void MSVISIO::IVApplication::PutOnDataChangeDelay ( long lpi4Ret ) {
    HRESULT _hr = put_OnDataChangeDelay(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(479)
inline long MSVISIO::IVApplication::GetProcessID ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline HRESULT MSVISIO::IVApplication::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(481)
inline HRESULT MSVISIO::IVApplication::Redo ( ) {
    HRESULT _hr = raw_Redo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(482)
inline short MSVISIO::IVApplication::GetScreenUpdating ( ) {
    short _result = 0;
    HRESULT _hr = get_ScreenUpdating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void MSVISIO::IVApplication::PutScreenUpdating ( short lpi2Ret ) {
    HRESULT _hr = put_ScreenUpdating(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline short MSVISIO::IVApplication::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(485)
inline HRESULT MSVISIO::IVApplication::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(486)
inline _bstr_t MSVISIO::IVApplication::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(487)
inline short MSVISIO::IVApplication::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(488)
inline MSVISIO::IVWindowsPtr MSVISIO::IVApplication::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

#pragma implementation_key(489)
inline long MSVISIO::IVApplication::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline short MSVISIO::IVApplication::GetIsVisio16 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(491)
inline short MSVISIO::IVApplication::GetIsVisio32 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline long MSVISIO::IVApplication::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline short MSVISIO::IVApplication::GetInstanceHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_InstanceHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(494)
inline long MSVISIO::IVApplication::GetInstanceHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVApplication::GetBuiltInMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(496)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVApplication::GetBuiltInToolbars ( short fIgnored ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInToolbars(fIgnored, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(497)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVApplication::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(498)
inline HRESULT MSVISIO::IVApplication::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(499)
inline _bstr_t MSVISIO::IVApplication::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(500)
inline void MSVISIO::IVApplication::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline HRESULT MSVISIO::IVApplication::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(502)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVApplication::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(503)
inline HRESULT MSVISIO::IVApplication::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(504)
inline _bstr_t MSVISIO::IVApplication::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(505)
inline void MSVISIO::IVApplication::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline HRESULT MSVISIO::IVApplication::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(507)
inline _bstr_t MSVISIO::IVApplication::GetAddonPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddonPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(508)
inline void MSVISIO::IVApplication::PutAddonPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AddonPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline _bstr_t MSVISIO::IVApplication::GetDrawingPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(510)
inline void MSVISIO::IVApplication::PutDrawingPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DrawingPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline _bstr_t MSVISIO::IVApplication::GetFilterPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(512)
inline void MSVISIO::IVApplication::PutFilterPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FilterPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline _bstr_t MSVISIO::IVApplication::GetHelpPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(514)
inline void MSVISIO::IVApplication::PutHelpPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HelpPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline _bstr_t MSVISIO::IVApplication::GetStartupPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartupPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(516)
inline void MSVISIO::IVApplication::PutStartupPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StartupPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(517)
inline _bstr_t MSVISIO::IVApplication::GetStencilPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StencilPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(518)
inline void MSVISIO::IVApplication::PutStencilPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StencilPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline _bstr_t MSVISIO::IVApplication::GetTemplatePaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(520)
inline void MSVISIO::IVApplication::PutTemplatePaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TemplatePaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline _bstr_t MSVISIO::IVApplication::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(522)
inline void MSVISIO::IVApplication::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline short MSVISIO::IVApplication::GetPromptForSummary ( ) {
    short _result = 0;
    HRESULT _hr = get_PromptForSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(524)
inline void MSVISIO::IVApplication::PutPromptForSummary ( short lpi2Ret ) {
    HRESULT _hr = put_PromptForSummary(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline MSVISIO::IVAddonsPtr MSVISIO::IVApplication::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

#pragma implementation_key(526)
inline HRESULT MSVISIO::IVApplication::SaveWorkspaceAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveWorkspaceAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(527)
inline HRESULT MSVISIO::IVApplication::DoCmd ( short CommandID ) {
    HRESULT _hr = raw_DoCmd(CommandID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(528)
inline _bstr_t MSVISIO::IVApplication::GetProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(529)
inline _bstr_t MSVISIO::IVApplication::GetEventInfo ( long eventSeqNum ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventInfo(eventSeqNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(530)
inline MSVISIO::IVEventListPtr MSVISIO::IVApplication::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(531)
inline short MSVISIO::IVApplication::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline short MSVISIO::IVApplication::GetActive ( ) {
    short _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(533)
inline short MSVISIO::IVApplication::GetDeferRecalc ( ) {
    short _result = 0;
    HRESULT _hr = get_DeferRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline void MSVISIO::IVApplication::PutDeferRecalc ( short lpi2Ret ) {
    HRESULT _hr = put_DeferRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(535)
inline short MSVISIO::IVApplication::GetAlertResponse ( ) {
    short _result = 0;
    HRESULT _hr = get_AlertResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(536)
inline void MSVISIO::IVApplication::PutAlertResponse ( short lpi2Ret ) {
    HRESULT _hr = put_AlertResponse(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(537)
inline short MSVISIO::IVApplication::GetShowProgress ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void MSVISIO::IVApplication::PutShowProgress ( short lpi2Ret ) {
    HRESULT _hr = put_ShowProgress(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline IDispatchPtr MSVISIO::IVApplication::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(540)
inline short MSVISIO::IVApplication::GetShowMenus ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void MSVISIO::IVApplication::PutShowMenus ( short lpi2Ret ) {
    HRESULT _hr = put_ShowMenus(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline short MSVISIO::IVApplication::GetToolbarStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_ToolbarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void MSVISIO::IVApplication::PutToolbarStyle ( short lpi2Ret ) {
    HRESULT _hr = put_ToolbarStyle(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline short MSVISIO::IVApplication::GetShowStatusBar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowStatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void MSVISIO::IVApplication::PutShowStatusBar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowStatusBar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline short MSVISIO::IVApplication::GetEventsEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_EventsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline void MSVISIO::IVApplication::PutEventsEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_EventsEnabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline _bstr_t MSVISIO::IVApplication::FormatResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResult(StringOrNumber, UnitsIn, UnitsOut, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(549)
inline double MSVISIO::IVApplication::ConvertResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut ) {
    double _result = 0;
    HRESULT _hr = raw_ConvertResult(StringOrNumber, UnitsIn, UnitsOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(550)
inline _bstr_t MSVISIO::IVApplication::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(551)
inline HRESULT MSVISIO::IVApplication::EnumDirectories ( _bstr_t PathsString, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_EnumDirectories(PathsString, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(552)
inline long MSVISIO::IVApplication::GetTraceFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_TraceFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline void MSVISIO::IVApplication::PutTraceFlags ( long lpi4Ret ) {
    HRESULT _hr = put_TraceFlags(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline HRESULT MSVISIO::IVApplication::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(555)
inline long MSVISIO::IVApplication::QueueMarkerEvent ( _bstr_t ContextString ) {
    long _result = 0;
    HRESULT _hr = raw_QueueMarkerEvent(ContextString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline short MSVISIO::IVApplication::GetShowToolbar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline void MSVISIO::IVApplication::PutShowToolbar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowToolbar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(558)
inline VARIANT_BOOL MSVISIO::IVApplication::GetLiveDynamics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LiveDynamics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(559)
inline void MSVISIO::IVApplication::PutLiveDynamics ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_LiveDynamics(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(560)
inline VARIANT_BOOL MSVISIO::IVApplication::GetAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline void MSVISIO::IVApplication::PutAutoLayout ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoLayout(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(562)
inline VARIANT_BOOL MSVISIO::IVApplication::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(563)
inline void MSVISIO::IVApplication::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(564)
inline long MSVISIO::IVApplication::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline HRESULT MSVISIO::IVApplication::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(566)
inline HRESULT MSVISIO::IVApplication::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline _bstr_t MSVISIO::IVApplication::GetCommandLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(568)
inline VARIANT_BOOL MSVISIO::IVApplication::GetIsUndoingOrRedoing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUndoingOrRedoing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline long MSVISIO::IVApplication::GetCurrentScope ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline VARIANT_BOOL MSVISIO::IVApplication::GetIsInScope ( long nCmdID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInScope(nCmdID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline IDispatchPtr MSVISIO::IVApplication::Getold_Addins ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_old_Addins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(572)
inline _bstr_t MSVISIO::IVApplication::GetProductName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(573)
inline VARIANT_BOOL MSVISIO::IVApplication::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline void MSVISIO::IVApplication::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(575)
inline VARIANT_BOOL MSVISIO::IVApplication::GetShowChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline void MSVISIO::IVApplication::PutShowChanges ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_ShowChanges(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline short MSVISIO::IVApplication::GetTypelibMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline short MSVISIO::IVApplication::GetTypelibMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline short MSVISIO::IVApplication::GetAutoRecoverInterval ( ) {
    short _result = 0;
    HRESULT _hr = get_AutoRecoverInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void MSVISIO::IVApplication::PutAutoRecoverInterval ( short lpi2Ret ) {
    HRESULT _hr = put_AutoRecoverInterval(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline VARIANT_BOOL MSVISIO::IVApplication::GetInhibitSelectChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InhibitSelectChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(582)
inline void MSVISIO::IVApplication::PutInhibitSelectChange ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_InhibitSelectChange(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline _bstr_t MSVISIO::IVApplication::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(584)
inline void MSVISIO::IVApplication::PutActivePrinter ( _bstr_t pbstrPrinterName ) {
    HRESULT _hr = put_ActivePrinter(pbstrPrinterName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline SAFEARRAY * MSVISIO::IVApplication::GetAvailablePrinters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePrinters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(586)
inline HRESULT MSVISIO::IVApplication::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(587)
inline HRESULT MSVISIO::IVApplication::InvokeHelp ( _bstr_t bstrHelpFileName, long Command, long Data ) {
    HRESULT _hr = raw_InvokeHelp(bstrHelpFileName, Command, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(588)
inline IDispatchPtr MSVISIO::IVApplication::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(589)
inline long MSVISIO::IVApplication::GetBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline IDispatchPtr MSVISIO::IVApplication::GetCOMAddIns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(591)
inline _variant_t MSVISIO::IVApplication::GetDefaultPageUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultPageUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(592)
inline void MSVISIO::IVApplication::PutDefaultPageUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultPageUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline _variant_t MSVISIO::IVApplication::GetDefaultTextUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultTextUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(594)
inline void MSVISIO::IVApplication::PutDefaultTextUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultTextUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline _variant_t MSVISIO::IVApplication::GetDefaultAngleUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultAngleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(596)
inline void MSVISIO::IVApplication::PutDefaultAngleUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultAngleUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline _variant_t MSVISIO::IVApplication::GetDefaultDurationUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultDurationUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(598)
inline void MSVISIO::IVApplication::PutDefaultDurationUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultDurationUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline long MSVISIO::IVApplication::GetFullBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline HRESULT MSVISIO::IVApplication::OnComponentEnterState ( enum VisOnComponentEnterCodes uStateID, VARIANT_BOOL bEnter ) {
    HRESULT _hr = raw_OnComponentEnterState(uStateID, bEnter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(601)
inline VARIANT_BOOL MSVISIO::IVApplication::GetVBAEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VBAEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline enum MSVISIO::VisZoomBehavior MSVISIO::IVApplication::GetDefaultZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_DefaultZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void MSVISIO::IVApplication::PutDefaultZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_DefaultZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline _variant_t MSVISIO::IVApplication::GetUsageStatistic ( long nWhichStatistic ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUsageStatistic(nWhichStatistic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(605)
inline IFontDisp * MSVISIO::IVApplication::GetDialogFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_DialogFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(606)
inline long MSVISIO::IVApplication::GetLanguageHelp ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline MSVISIO::IVWindowPtr MSVISIO::IVApplication::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(608)
inline _bstr_t MSVISIO::IVApplication::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(609)
inline IUnknownPtr MSVISIO::IVApplication::GetConnectorToolDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ConnectorToolDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(610)
inline MSVISIO::IVApplicationSettingsPtr MSVISIO::IVApplication::GetSettings ( ) {
    struct IVApplicationSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationSettingsPtr(_result, false);
}

#pragma implementation_key(611)
inline _bstr_t MSVISIO::IVApplication::FormatResultEx ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format, long LangID, long CalendarID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResultEx(StringOrNumber, UnitsIn, UnitsOut, Format, LangID, CalendarID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(612)
inline IDispatchPtr MSVISIO::IVApplication::GetSaveAsWebObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SaveAsWebObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(613)
inline IDispatchPtr MSVISIO::IVApplication::GetMsoDebugOptions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(614)
inline _bstr_t MSVISIO::IVApplication::GetMyShapesPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyShapesPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(615)
inline void MSVISIO::IVApplication::PutMyShapesPath ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_MyShapesPath(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline IUnknownPtr MSVISIO::IVApplication::GetDefaultRectangleDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DefaultRectangleDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(617)
inline VARIANT_BOOL MSVISIO::IVApplication::GetDataFeaturesEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataFeaturesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(618)
inline IDispatchPtr MSVISIO::IVApplication::GetLanguageSettings ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(619)
inline IDispatchPtr MSVISIO::IVApplication::GetAssistance ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVCurve wrapper method implementations
//

#pragma implementation_key(620)
inline MSVISIO::IVApplicationPtr MSVISIO::IVCurve::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(621)
inline short MSVISIO::IVCurve::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline short MSVISIO::IVCurve::GetClosed ( ) {
    short _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline HRESULT MSVISIO::IVCurve::Points ( double Tolerance, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_Points(Tolerance, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(624)
inline double MSVISIO::IVCurve::GetStart ( ) {
    double _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline double MSVISIO::IVCurve::GetEnd ( ) {
    double _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline HRESULT MSVISIO::IVCurve::Point ( double t, double * x, double * y ) {
    HRESULT _hr = raw_Point(t, x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(627)
inline HRESULT MSVISIO::IVCurve::PointAndDerivatives ( double t, short n, double * x, double * y, double * dxdt, double * dydt, double * ddxdt, double * ddydt ) {
    HRESULT _hr = raw_PointAndDerivatives(t, n, x, y, dxdt, dydt, ddxdt, ddydt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVPath wrapper method implementations
//

#pragma implementation_key(628)
inline MSVISIO::IVApplicationPtr MSVISIO::IVPath::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(629)
inline short MSVISIO::IVPath::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline MSVISIO::IVCurvePtr MSVISIO::IVPath::GetItem16 ( short Index ) {
    struct IVCurve * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCurvePtr(_result, false);
}

#pragma implementation_key(631)
inline short MSVISIO::IVPath::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline short MSVISIO::IVPath::GetClosed ( ) {
    short _result = 0;
    HRESULT _hr = get_Closed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(633)
inline HRESULT MSVISIO::IVPath::Points ( double Tolerance, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_Points(Tolerance, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(634)
inline MSVISIO::IVCurvePtr MSVISIO::IVPath::GetItem ( long Index ) {
    struct IVCurve * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCurvePtr(_result, false);
}

#pragma implementation_key(635)
inline long MSVISIO::IVPath::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline IUnknownPtr MSVISIO::IVPath::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVPaths wrapper method implementations
//

#pragma implementation_key(637)
inline MSVISIO::IVApplicationPtr MSVISIO::IVPaths::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(638)
inline short MSVISIO::IVPaths::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(639)
inline MSVISIO::IVPathPtr MSVISIO::IVPaths::GetItem16 ( short Index ) {
    struct IVPath * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathPtr(_result, false);
}

#pragma implementation_key(640)
inline short MSVISIO::IVPaths::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(641)
inline MSVISIO::IVPathPtr MSVISIO::IVPaths::GetItem ( long Index ) {
    struct IVPath * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathPtr(_result, false);
}

#pragma implementation_key(642)
inline long MSVISIO::IVPaths::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline IUnknownPtr MSVISIO::IVPaths::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVAddon wrapper method implementations
//

#pragma implementation_key(644)
inline MSVISIO::IVApplicationPtr MSVISIO::IVAddon::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(645)
inline short MSVISIO::IVAddon::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(646)
inline _bstr_t MSVISIO::IVAddon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(647)
inline short MSVISIO::IVAddon::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline short MSVISIO::IVAddon::GetEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline HRESULT MSVISIO::IVAddon::Run ( _bstr_t ArgString ) {
    HRESULT _hr = raw_Run(ArgString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(650)
inline _bstr_t MSVISIO::IVAddon::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVAddons wrapper method implementations
//

#pragma implementation_key(651)
inline MSVISIO::IVApplicationPtr MSVISIO::IVAddons::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(652)
inline short MSVISIO::IVAddons::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline MSVISIO::IVAddonPtr MSVISIO::IVAddons::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

#pragma implementation_key(654)
inline short MSVISIO::IVAddons::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline MSVISIO::IVAddonPtr MSVISIO::IVAddons::Add ( _bstr_t FileName ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

#pragma implementation_key(656)
inline HRESULT MSVISIO::IVAddons::GetNames ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNames(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(657)
inline IUnknownPtr MSVISIO::IVAddons::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(658)
inline MSVISIO::IVAddonPtr MSVISIO::IVAddons::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVAddon * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonPtr(_result, false);
}

#pragma implementation_key(659)
inline HRESULT MSVISIO::IVAddons::GetNamesU ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNamesU(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVApplicationSettings wrapper method implementations
//

#pragma implementation_key(660)
inline MSVISIO::IVApplicationPtr MSVISIO::IVApplicationSettings::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(661)
inline enum MSVISIO::VisObjectTypes MSVISIO::IVApplicationSettings::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetDrawingAids ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DrawingAids(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void MSVISIO::IVApplicationSettings::PutDrawingAids ( VARIANT_BOOL RetVal ) {
    HRESULT _hr = put_DrawingAids(RetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthRulerX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthRulerX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(665)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthRulerX ( long strength ) {
    HRESULT _hr = put_SnapStrengthRulerX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(666)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthRulerY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthRulerY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthRulerY ( long strength ) {
    HRESULT _hr = put_SnapStrengthRulerY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(668)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGridX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGridX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGridX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGridX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGridY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGridY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGridY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGridY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGuidesX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGuidesX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGuidesX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGuidesX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGuidesY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGuidesY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGuidesY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGuidesY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthPointsX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthPointsX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthPointsX ( long strength ) {
    HRESULT _hr = put_SnapStrengthPointsX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthPointsY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthPointsY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthPointsY ( long strength ) {
    HRESULT _hr = put_SnapStrengthPointsY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGeometryX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGeometryX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGeometryX ( long strength ) {
    HRESULT _hr = put_SnapStrengthGeometryX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthGeometryY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthGeometryY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(683)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthGeometryY ( long strength ) {
    HRESULT _hr = put_SnapStrengthGeometryY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(684)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthExtensionsX ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthExtensionsX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthExtensionsX ( long strength ) {
    HRESULT _hr = put_SnapStrengthExtensionsX(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline long MSVISIO::IVApplicationSettings::GetSnapStrengthExtensionsY ( ) {
    long _result = 0;
    HRESULT _hr = get_SnapStrengthExtensionsY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void MSVISIO::IVApplicationSettings::PutSnapStrengthExtensionsY ( long strength ) {
    HRESULT _hr = put_SnapStrengthExtensionsY(strength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowFileSaveWarnings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFileSaveWarnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void MSVISIO::IVApplicationSettings::PutShowFileSaveWarnings ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowFileSaveWarnings(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowFileOpenWarnings ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFileOpenWarnings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void MSVISIO::IVApplicationSettings::PutShowFileOpenWarnings ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowFileOpenWarnings(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline enum MSVISIO::VisDefaultSaveFormats MSVISIO::IVApplicationSettings::GetDefaultSaveFormat ( ) {
    enum VisDefaultSaveFormats _result;
    HRESULT _hr = get_DefaultSaveFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void MSVISIO::IVApplicationSettings::PutDefaultSaveFormat ( enum VisDefaultSaveFormats pFormatType ) {
    HRESULT _hr = put_DefaultSaveFormat(pFormatType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetDrawingPageColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingPageColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(695)
inline void MSVISIO::IVApplicationSettings::PutDrawingPageColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingPageColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(696)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetDrawingBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(697)
inline void MSVISIO::IVApplicationSettings::PutDrawingBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(698)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetDrawingBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_DrawingBackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(699)
inline void MSVISIO::IVApplicationSettings::PutDrawingBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_DrawingBackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetStencilBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline void MSVISIO::IVApplicationSettings::PutStencilBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetStencilBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilBackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void MSVISIO::IVApplicationSettings::PutStencilBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilBackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetStencilTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_StencilTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline void MSVISIO::IVApplicationSettings::PutStencilTextColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_StencilTextColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetPrintPreviewBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_PrintPreviewBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(707)
inline void MSVISIO::IVApplicationSettings::PutPrintPreviewBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_PrintPreviewBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(708)
inline OLE_COLOR MSVISIO::IVApplicationSettings::GetFullScreenBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FullScreenBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(709)
inline void MSVISIO::IVApplicationSettings::PutFullScreenBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_FullScreenBackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(710)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowStartupDialog ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowStartupDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline void MSVISIO::IVApplicationSettings::PutShowStartupDialog ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowStartupDialog(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(712)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowSmartTags ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSmartTags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(713)
inline void MSVISIO::IVApplicationSettings::PutShowSmartTags ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowSmartTags(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(714)
inline enum MSVISIO::VisTextDisplayQualityTypes MSVISIO::IVApplicationSettings::GetTextDisplayQuality ( ) {
    enum VisTextDisplayQualityTypes _result;
    HRESULT _hr = get_TextDisplayQuality(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline void MSVISIO::IVApplicationSettings::PutTextDisplayQuality ( enum VisTextDisplayQualityTypes pTextQuality ) {
    HRESULT _hr = put_TextDisplayQuality(pTextQuality);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(716)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetHigherQualityShapeDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HigherQualityShapeDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline void MSVISIO::IVApplicationSettings::PutHigherQualityShapeDisplay ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_HigherQualityShapeDisplay(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(718)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetSmoothDrawing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmoothDrawing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(719)
inline void MSVISIO::IVApplicationSettings::PutSmoothDrawing ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_SmoothDrawing(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(720)
inline long MSVISIO::IVApplicationSettings::GetStencilCharactersPerLine ( ) {
    long _result = 0;
    HRESULT _hr = get_StencilCharactersPerLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline void MSVISIO::IVApplicationSettings::PutStencilCharactersPerLine ( long pCharCount ) {
    HRESULT _hr = put_StencilCharactersPerLine(pCharCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline long MSVISIO::IVApplicationSettings::GetStencilLinesPerMaster ( ) {
    long _result = 0;
    HRESULT _hr = get_StencilLinesPerMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(723)
inline void MSVISIO::IVApplicationSettings::PutStencilLinesPerMaster ( long pLineCount ) {
    HRESULT _hr = put_StencilLinesPerMaster(pLineCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(724)
inline _bstr_t MSVISIO::IVApplicationSettings::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(725)
inline void MSVISIO::IVApplicationSettings::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline _bstr_t MSVISIO::IVApplicationSettings::GetUserInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserInitials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(727)
inline void MSVISIO::IVApplicationSettings::PutUserInitials ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserInitials(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(728)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetZoomOnRoll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomOnRoll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(729)
inline void MSVISIO::IVApplicationSettings::PutZoomOnRoll ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ZoomOnRoll(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(730)
inline long MSVISIO::IVApplicationSettings::GetUndoLevels ( ) {
    long _result = 0;
    HRESULT _hr = get_UndoLevels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(731)
inline void MSVISIO::IVApplicationSettings::PutUndoLevels ( long pNumLevels ) {
    HRESULT _hr = put_UndoLevels(pNumLevels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(732)
inline long MSVISIO::IVApplicationSettings::GetRecentFilesListSize ( ) {
    long _result = 0;
    HRESULT _hr = get_RecentFilesListSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline void MSVISIO::IVApplicationSettings::PutRecentFilesListSize ( long pNumFiles ) {
    HRESULT _hr = put_RecentFilesListSize(pNumFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(734)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetCenterSelectionOnZoom ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CenterSelectionOnZoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(735)
inline void MSVISIO::IVApplicationSettings::PutCenterSelectionOnZoom ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CenterSelectionOnZoom(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetConnectorSplittingEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConnectorSplittingEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(737)
inline void MSVISIO::IVApplicationSettings::PutConnectorSplittingEnabled ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ConnectorSplittingEnabled(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetAsianTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_AsianTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(739)
inline void MSVISIO::IVApplicationSettings::PutAsianTextUI ( enum VisRegionalUIOptions pAsianTextUIOption ) {
    HRESULT _hr = put_AsianTextUI(pAsianTextUIOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(740)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetComplexTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_ComplexTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(741)
inline void MSVISIO::IVApplicationSettings::PutComplexTextUI ( enum VisRegionalUIOptions pComplexTextUIOption ) {
    HRESULT _hr = put_ComplexTextUI(pComplexTextUIOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(742)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetKanaFindAndReplace ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_KanaFindAndReplace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline void MSVISIO::IVApplicationSettings::PutKanaFindAndReplace ( enum VisRegionalUIOptions pKanaOption ) {
    HRESULT _hr = put_KanaFindAndReplace(pKanaOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline long MSVISIO::IVApplicationSettings::GetFreeformDrawingPrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_FreeformDrawingPrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void MSVISIO::IVApplicationSettings::PutFreeformDrawingPrecision ( long plVal ) {
    HRESULT _hr = put_FreeformDrawingPrecision(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline long MSVISIO::IVApplicationSettings::GetFreeformDrawingSmoothing ( ) {
    long _result = 0;
    HRESULT _hr = get_FreeformDrawingSmoothing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline void MSVISIO::IVApplicationSettings::PutFreeformDrawingSmoothing ( long plVal ) {
    HRESULT _hr = put_FreeformDrawingSmoothing(plVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(748)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetDeveloperMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeveloperMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void MSVISIO::IVApplicationSettings::PutDeveloperMode ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_DeveloperMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(750)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowChooseDrawingTypePane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChooseDrawingTypePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline void MSVISIO::IVApplicationSettings::PutShowChooseDrawingTypePane ( VARIANT_BOOL pShow ) {
    HRESULT _hr = put_ShowChooseDrawingTypePane(pShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(752)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowShapeSearchPane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowShapeSearchPane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(753)
inline void MSVISIO::IVApplicationSettings::PutShowShapeSearchPane ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowShapeSearchPane(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetApplyThemesOnShapeAdd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyThemesOnShapeAdd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline void MSVISIO::IVApplicationSettings::PutApplyThemesOnShapeAdd ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ApplyThemesOnShapeAdd(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(756)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetSATextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_SATextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetBIDITextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_BIDITextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline enum MSVISIO::VisRegionalUIOptions MSVISIO::IVApplicationSettings::GetKashidaTextUI ( ) {
    enum VisRegionalUIOptions _result;
    HRESULT _hr = get_KashidaTextUI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline short MSVISIO::IVApplicationSettings::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(760)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetShowMoreShapeHandlesOnHover ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowMoreShapeHandlesOnHover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(761)
inline void MSVISIO::IVApplicationSettings::PutShowMoreShapeHandlesOnHover ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_ShowMoreShapeHandlesOnHover(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(762)
inline VARIANT_BOOL MSVISIO::IVApplicationSettings::GetEnableAutoConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableAutoConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void MSVISIO::IVApplicationSettings::PutEnableAutoConnect ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_EnableAutoConnect(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVMSGWrap wrapper method implementations
//

#pragma implementation_key(764)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMSGWrap::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(765)
inline short MSVISIO::IVMSGWrap::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(766)
inline long MSVISIO::IVMSGWrap::Gethwnd ( ) {
    long _result = 0;
    HRESULT _hr = get_hwnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void MSVISIO::IVMSGWrap::Puthwnd ( long lpi4Ret ) {
    HRESULT _hr = put_hwnd(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline long MSVISIO::IVMSGWrap::Getmessage ( ) {
    long _result = 0;
    HRESULT _hr = get_message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline void MSVISIO::IVMSGWrap::Putmessage ( long lpi4Ret ) {
    HRESULT _hr = put_message(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(770)
inline long MSVISIO::IVMSGWrap::GetwParam ( ) {
    long _result = 0;
    HRESULT _hr = get_wParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void MSVISIO::IVMSGWrap::PutwParam ( long lpi4Ret ) {
    HRESULT _hr = put_wParam(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline long MSVISIO::IVMSGWrap::GetlParam ( ) {
    long _result = 0;
    HRESULT _hr = get_lParam(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void MSVISIO::IVMSGWrap::PutlParam ( long lpi4Ret ) {
    HRESULT _hr = put_lParam(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline long MSVISIO::IVMSGWrap::Getposttime ( ) {
    long _result = 0;
    HRESULT _hr = get_posttime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void MSVISIO::IVMSGWrap::Putposttime ( long lpi4Ret ) {
    HRESULT _hr = put_posttime(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline long MSVISIO::IVMSGWrap::Getptx ( ) {
    long _result = 0;
    HRESULT _hr = get_ptx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void MSVISIO::IVMSGWrap::Putptx ( long lpi4Ret ) {
    HRESULT _hr = put_ptx(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline long MSVISIO::IVMSGWrap::Getpty ( ) {
    long _result = 0;
    HRESULT _hr = get_pty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void MSVISIO::IVMSGWrap::Putpty ( long lpi4Ret ) {
    HRESULT _hr = put_pty(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDocument wrapper method implementations
//

#pragma implementation_key(780)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDocument::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(781)
inline short MSVISIO::IVDocument::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline short MSVISIO::IVDocument::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline short MSVISIO::IVDocument::GetInPlace ( ) {
    short _result = 0;
    HRESULT _hr = get_InPlace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline MSVISIO::IVMastersPtr MSVISIO::IVDocument::GetMasters ( ) {
    struct IVMasters * _result = 0;
    HRESULT _hr = get_Masters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMastersPtr(_result, false);
}

#pragma implementation_key(785)
inline MSVISIO::IVPagesPtr MSVISIO::IVDocument::GetPages ( ) {
    struct IVPages * _result = 0;
    HRESULT _hr = get_Pages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagesPtr(_result, false);
}

#pragma implementation_key(786)
inline MSVISIO::IVStylesPtr MSVISIO::IVDocument::GetStyles ( ) {
    struct IVStyles * _result = 0;
    HRESULT _hr = get_Styles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylesPtr(_result, false);
}

#pragma implementation_key(787)
inline _bstr_t MSVISIO::IVDocument::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(788)
inline _bstr_t MSVISIO::IVDocument::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(789)
inline _bstr_t MSVISIO::IVDocument::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(790)
inline MSVISIO::IVMasterPtr MSVISIO::IVDocument::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(791)
inline short MSVISIO::IVDocument::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline short MSVISIO::IVDocument::Getold_Saved ( ) {
    short _result = 0;
    HRESULT _hr = get_old_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline void MSVISIO::IVDocument::Putold_Saved ( short lpi2Ret ) {
    HRESULT _hr = put_old_Saved(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(794)
inline short MSVISIO::IVDocument::GetReadOnly ( ) {
    short _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline short MSVISIO::IVDocument::Save ( ) {
    short _result = 0;
    HRESULT _hr = raw_Save(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(796)
inline short MSVISIO::IVDocument::SaveAs ( _bstr_t FileName ) {
    short _result = 0;
    HRESULT _hr = raw_SaveAs(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline long MSVISIO::IVDocument::Getold_Version ( ) {
    long _result = 0;
    HRESULT _hr = get_old_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(798)
inline void MSVISIO::IVDocument::Putold_Version ( long lpi4Ret ) {
    HRESULT _hr = put_old_Version(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline _bstr_t MSVISIO::IVDocument::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(800)
inline void MSVISIO::IVDocument::PutTitle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Title(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(801)
inline _bstr_t MSVISIO::IVDocument::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(802)
inline void MSVISIO::IVDocument::PutSubject ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Subject(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline _bstr_t MSVISIO::IVDocument::GetCreator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(804)
inline void MSVISIO::IVDocument::PutCreator ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Creator(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(805)
inline _bstr_t MSVISIO::IVDocument::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(806)
inline void MSVISIO::IVDocument::PutKeywords ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Keywords(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(807)
inline _bstr_t MSVISIO::IVDocument::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(808)
inline void MSVISIO::IVDocument::PutDescription ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Description(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(809)
inline HRESULT MSVISIO::IVDocument::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(810)
inline HRESULT MSVISIO::IVDocument::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(811)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVDocument::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(812)
inline HRESULT MSVISIO::IVDocument::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline _bstr_t MSVISIO::IVDocument::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(814)
inline void MSVISIO::IVDocument::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(815)
inline HRESULT MSVISIO::IVDocument::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(816)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVDocument::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(817)
inline HRESULT MSVISIO::IVDocument::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(818)
inline _bstr_t MSVISIO::IVDocument::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(819)
inline void MSVISIO::IVDocument::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline HRESULT MSVISIO::IVDocument::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(821)
inline MSVISIO::IVFontsPtr MSVISIO::IVDocument::GetFonts ( ) {
    struct IVFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontsPtr(_result, false);
}

#pragma implementation_key(822)
inline MSVISIO::IVColorsPtr MSVISIO::IVDocument::GetColors ( ) {
    struct IVColors * _result = 0;
    HRESULT _hr = get_Colors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorsPtr(_result, false);
}

#pragma implementation_key(823)
inline MSVISIO::IVEventListPtr MSVISIO::IVDocument::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(824)
inline _bstr_t MSVISIO::IVDocument::GetTemplate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(825)
inline HRESULT MSVISIO::IVDocument::SaveAsEx ( _bstr_t FileName, short SaveFlags ) {
    HRESULT _hr = raw_SaveAsEx(FileName, SaveFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(826)
inline short MSVISIO::IVDocument::Getold_SavePreviewMode ( ) {
    short _result = 0;
    HRESULT _hr = get_old_SavePreviewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline void MSVISIO::IVDocument::Putold_SavePreviewMode ( short lpi2Ret ) {
    HRESULT _hr = put_old_SavePreviewMode(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(828)
inline HRESULT MSVISIO::IVDocument::GetIcon ( short ID, _bstr_t FileName ) {
    HRESULT _hr = raw_GetIcon(ID, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(829)
inline HRESULT MSVISIO::IVDocument::SetIcon ( short ID, short Index, _bstr_t FileName ) {
    HRESULT _hr = raw_SetIcon(ID, Index, FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(830)
inline double MSVISIO::IVDocument::GetLeftMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_LeftMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline void MSVISIO::IVDocument::PutLeftMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_LeftMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(832)
inline double MSVISIO::IVDocument::GetRightMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_RightMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline void MSVISIO::IVDocument::PutRightMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_RightMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(834)
inline double MSVISIO::IVDocument::GetTopMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_TopMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline void MSVISIO::IVDocument::PutTopMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_TopMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(836)
inline double MSVISIO::IVDocument::GetBottomMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_BottomMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline void MSVISIO::IVDocument::PutBottomMargin ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_BottomMargin(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline short MSVISIO::IVDocument::Getold_PrintLandscape ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintLandscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline void MSVISIO::IVDocument::Putold_PrintLandscape ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintLandscape(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(840)
inline short MSVISIO::IVDocument::Getold_PrintCenteredH ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintCenteredH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(841)
inline void MSVISIO::IVDocument::Putold_PrintCenteredH ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintCenteredH(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(842)
inline short MSVISIO::IVDocument::Getold_PrintCenteredV ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintCenteredV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline void MSVISIO::IVDocument::Putold_PrintCenteredV ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintCenteredV(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(844)
inline double MSVISIO::IVDocument::GetPrintScale ( ) {
    double _result = 0;
    HRESULT _hr = get_PrintScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(845)
inline void MSVISIO::IVDocument::PutPrintScale ( double lpr8Ret ) {
    HRESULT _hr = put_PrintScale(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline short MSVISIO::IVDocument::Getold_PrintFitOnPages ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PrintFitOnPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline void MSVISIO::IVDocument::Putold_PrintFitOnPages ( short lpi2Ret ) {
    HRESULT _hr = put_old_PrintFitOnPages(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(848)
inline short MSVISIO::IVDocument::GetPrintPagesAcross ( ) {
    short _result = 0;
    HRESULT _hr = get_PrintPagesAcross(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(849)
inline void MSVISIO::IVDocument::PutPrintPagesAcross ( short lpi2Ret ) {
    HRESULT _hr = put_PrintPagesAcross(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(850)
inline short MSVISIO::IVDocument::GetPrintPagesDown ( ) {
    short _result = 0;
    HRESULT _hr = get_PrintPagesDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(851)
inline void MSVISIO::IVDocument::PutPrintPagesDown ( short lpi2Ret ) {
    HRESULT _hr = put_PrintPagesDown(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(852)
inline _bstr_t MSVISIO::IVDocument::GetDefaultStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(853)
inline void MSVISIO::IVDocument::PutDefaultStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline _bstr_t MSVISIO::IVDocument::GetDefaultLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(855)
inline void MSVISIO::IVDocument::PutDefaultLineStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultLineStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline _bstr_t MSVISIO::IVDocument::GetDefaultFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultFillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(857)
inline void MSVISIO::IVDocument::PutDefaultFillStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultFillStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(858)
inline _bstr_t MSVISIO::IVDocument::GetDefaultTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultTextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(859)
inline void MSVISIO::IVDocument::PutDefaultTextStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultTextStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline short MSVISIO::IVDocument::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline MSVISIO::IVWindowPtr MSVISIO::IVDocument::OpenStencilWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenStencilWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(862)
inline HRESULT MSVISIO::IVDocument::ParseLine ( _bstr_t Line ) {
    HRESULT _hr = raw_ParseLine(Line);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(863)
inline HRESULT MSVISIO::IVDocument::ExecuteLine ( _bstr_t Line ) {
    HRESULT _hr = raw_ExecuteLine(Line);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(864)
inline IDispatchPtr MSVISIO::IVDocument::GetVBProject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(865)
inline double MSVISIO::IVDocument::GetPaperWidth ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_PaperWidth(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline double MSVISIO::IVDocument::GetPaperHeight ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_PaperHeight(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline short MSVISIO::IVDocument::Getold_PaperSize ( ) {
    short _result = 0;
    HRESULT _hr = get_old_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void MSVISIO::IVDocument::Putold_PaperSize ( short lpi2Ret ) {
    HRESULT _hr = put_old_PaperSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(869)
inline HRESULT MSVISIO::IVDocument::FollowHyperlink45 ( _bstr_t Target, _bstr_t Location ) {
    HRESULT _hr = raw_FollowHyperlink45(Target, Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(870)
inline _bstr_t MSVISIO::IVDocument::GetCodeName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CodeName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(871)
inline short MSVISIO::IVDocument::Getold_Mode ( ) {
    short _result = 0;
    HRESULT _hr = get_old_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(872)
inline void MSVISIO::IVDocument::Putold_Mode ( short lpi2Ret ) {
    HRESULT _hr = put_old_Mode(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(873)
inline MSVISIO::IVOLEObjectsPtr MSVISIO::IVDocument::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

#pragma implementation_key(874)
inline HRESULT MSVISIO::IVDocument::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, const _variant_t & ExtraInfo, const _variant_t & Frame, const _variant_t & NewWindow, const _variant_t & res1, const _variant_t & res2, const _variant_t & res3 ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, ExtraInfo, Frame, NewWindow, res1, res2, res3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(875)
inline _bstr_t MSVISIO::IVDocument::GetManager ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(876)
inline void MSVISIO::IVDocument::PutManager ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Manager(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(877)
inline _bstr_t MSVISIO::IVDocument::GetCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Company(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(878)
inline void MSVISIO::IVDocument::PutCompany ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Company(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline _bstr_t MSVISIO::IVDocument::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(880)
inline void MSVISIO::IVDocument::PutCategory ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Category(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline _bstr_t MSVISIO::IVDocument::GetHyperlinkBase ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HyperlinkBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(882)
inline void MSVISIO::IVDocument::PutHyperlinkBase ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HyperlinkBase(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline MSVISIO::IVShapePtr MSVISIO::IVDocument::GetDocumentSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_DocumentSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(884)
inline IDispatchPtr MSVISIO::IVDocument::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(885)
inline _bstr_t MSVISIO::IVDocument::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(886)
inline _bstr_t MSVISIO::IVDocument::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(887)
inline MSVISIO::IVMasterShortcutsPtr MSVISIO::IVDocument::GetMasterShortcuts ( ) {
    struct IVMasterShortcuts * _result = 0;
    HRESULT _hr = get_MasterShortcuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutsPtr(_result, false);
}

#pragma implementation_key(888)
inline _bstr_t MSVISIO::IVDocument::GetAlternateNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternateNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline void MSVISIO::IVDocument::PutAlternateNames ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AlternateNames(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline MSVISIO::IVShapePtr MSVISIO::IVDocument::GetGestureFormatSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_GestureFormatSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(891)
inline HRESULT MSVISIO::IVDocument::ClearGestureFormatSheet ( ) {
    HRESULT _hr = raw_ClearGestureFormatSheet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(892)
inline VARIANT_BOOL MSVISIO::IVDocument::GetAutoRecover ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRecover(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline void MSVISIO::IVDocument::PutAutoRecover ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoRecover(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline VARIANT_BOOL MSVISIO::IVDocument::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void MSVISIO::IVDocument::PutSaved ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_Saved(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline enum MSVISIO::VisDocVersions MSVISIO::IVDocument::GetVersion ( ) {
    enum VisDocVersions _result;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline void MSVISIO::IVDocument::PutVersion ( enum VisDocVersions lpi4Ret ) {
    HRESULT _hr = put_Version(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(898)
inline enum MSVISIO::VisSavePreviewMode MSVISIO::IVDocument::GetSavePreviewMode ( ) {
    enum VisSavePreviewMode _result;
    HRESULT _hr = get_SavePreviewMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline void MSVISIO::IVDocument::PutSavePreviewMode ( enum VisSavePreviewMode lpi4Ret ) {
    HRESULT _hr = put_SavePreviewMode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline VARIANT_BOOL MSVISIO::IVDocument::GetPrintLandscape ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintLandscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline void MSVISIO::IVDocument::PutPrintLandscape ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintLandscape(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline VARIANT_BOOL MSVISIO::IVDocument::GetPrintCenteredH ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintCenteredH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline void MSVISIO::IVDocument::PutPrintCenteredH ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintCenteredH(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline VARIANT_BOOL MSVISIO::IVDocument::GetPrintCenteredV ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintCenteredV(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void MSVISIO::IVDocument::PutPrintCenteredV ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintCenteredV(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline VARIANT_BOOL MSVISIO::IVDocument::GetPrintFitOnPages ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PrintFitOnPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline void MSVISIO::IVDocument::PutPrintFitOnPages ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_PrintFitOnPages(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline enum MSVISIO::VisPaperSizes MSVISIO::IVDocument::GetPaperSize ( ) {
    enum VisPaperSizes _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline void MSVISIO::IVDocument::PutPaperSize ( enum VisPaperSizes lpi4Ret ) {
    HRESULT _hr = put_PaperSize(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline enum MSVISIO::VisDocModeArgs MSVISIO::IVDocument::GetMode ( ) {
    enum VisDocModeArgs _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(911)
inline void MSVISIO::IVDocument::PutMode ( enum VisDocModeArgs lpi4Ret ) {
    HRESULT _hr = put_Mode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(912)
inline VARIANT_BOOL MSVISIO::IVDocument::GetSnapEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SnapEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(913)
inline void MSVISIO::IVDocument::PutSnapEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_SnapEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline enum MSVISIO::VisSnapSettings MSVISIO::IVDocument::GetSnapSettings ( ) {
    enum VisSnapSettings _result;
    HRESULT _hr = get_SnapSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline void MSVISIO::IVDocument::PutSnapSettings ( enum VisSnapSettings pnRet ) {
    HRESULT _hr = put_SnapSettings(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline enum MSVISIO::VisSnapExtensions MSVISIO::IVDocument::GetSnapExtensions ( ) {
    enum VisSnapExtensions _result;
    HRESULT _hr = get_SnapExtensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline void MSVISIO::IVDocument::PutSnapExtensions ( enum VisSnapExtensions pnRet ) {
    HRESULT _hr = put_SnapExtensions(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline SAFEARRAY * MSVISIO::IVDocument::GetSnapAngles ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SnapAngles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline void MSVISIO::IVDocument::PutSnapAngles ( SAFEARRAY * * dAngles ) {
    HRESULT _hr = put_SnapAngles(dAngles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline VARIANT_BOOL MSVISIO::IVDocument::GetGlueEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GlueEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline void MSVISIO::IVDocument::PutGlueEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_GlueEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline enum MSVISIO::VisGlueSettings MSVISIO::IVDocument::GetGlueSettings ( ) {
    enum VisGlueSettings _result;
    HRESULT _hr = get_GlueSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(923)
inline void MSVISIO::IVDocument::PutGlueSettings ( enum VisGlueSettings pnRet ) {
    HRESULT _hr = put_GlueSettings(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline VARIANT_BOOL MSVISIO::IVDocument::GetDynamicGridEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DynamicGridEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void MSVISIO::IVDocument::PutDynamicGridEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_DynamicGridEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline _bstr_t MSVISIO::IVDocument::GetDefaultGuideStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultGuideStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline void MSVISIO::IVDocument::PutDefaultGuideStyle ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_DefaultGuideStyle(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline enum MSVISIO::VisProtection MSVISIO::IVDocument::GetProtection ( const _variant_t & bstrPassword ) {
    enum VisProtection _result;
    HRESULT _hr = get_Protection(bstrPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(929)
inline void MSVISIO::IVDocument::PutProtection ( const _variant_t & bstrPassword, enum VisProtection pnRet ) {
    HRESULT _hr = put_Protection(bstrPassword, pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(930)
inline _bstr_t MSVISIO::IVDocument::GetPrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Printer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(931)
inline void MSVISIO::IVDocument::PutPrinter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_Printer(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline long MSVISIO::IVDocument::GetPrintCopies ( ) {
    long _result = 0;
    HRESULT _hr = get_PrintCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline void MSVISIO::IVDocument::PutPrintCopies ( long pnRet ) {
    HRESULT _hr = put_PrintCopies(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline _bstr_t MSVISIO::IVDocument::GetHeaderLeft ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(935)
inline void MSVISIO::IVDocument::PutHeaderLeft ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderLeft(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline _bstr_t MSVISIO::IVDocument::GetHeaderCenter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(937)
inline void MSVISIO::IVDocument::PutHeaderCenter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderCenter(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline _bstr_t MSVISIO::IVDocument::GetHeaderRight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HeaderRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(939)
inline void MSVISIO::IVDocument::PutHeaderRight ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_HeaderRight(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline double MSVISIO::IVDocument::GetHeaderMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_HeaderMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void MSVISIO::IVDocument::PutHeaderMargin ( const _variant_t & UnitsNameOrCode, double pdRet ) {
    HRESULT _hr = put_HeaderMargin(UnitsNameOrCode, pdRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline _bstr_t MSVISIO::IVDocument::GetFooterLeft ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(943)
inline void MSVISIO::IVDocument::PutFooterLeft ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterLeft(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline _bstr_t MSVISIO::IVDocument::GetFooterCenter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterCenter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(945)
inline void MSVISIO::IVDocument::PutFooterCenter ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterCenter(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline _bstr_t MSVISIO::IVDocument::GetFooterRight ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FooterRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(947)
inline void MSVISIO::IVDocument::PutFooterRight ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_FooterRight(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline double MSVISIO::IVDocument::GetFooterMargin ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_FooterMargin(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void MSVISIO::IVDocument::PutFooterMargin ( const _variant_t & UnitsNameOrCode, double pdRet ) {
    HRESULT _hr = put_FooterMargin(UnitsNameOrCode, pdRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline IFontDisp * MSVISIO::IVDocument::GetHeaderFooterFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_HeaderFooterFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void MSVISIO::IVDocument::PutRefHeaderFooterFont ( IFontDisp * ppFontDisp ) {
    HRESULT _hr = putref_HeaderFooterFont(ppFontDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline OLE_COLOR MSVISIO::IVDocument::GetHeaderFooterColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_HeaderFooterColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void MSVISIO::IVDocument::PutHeaderFooterColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_HeaderFooterColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline void MSVISIO::IVDocument::PutPassword ( const _variant_t & bstrExistingPassword, _bstr_t _arg2 ) {
    HRESULT _hr = put_Password(bstrExistingPassword, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline IPictureDisp * MSVISIO::IVDocument::GetPreviewPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_PreviewPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline void MSVISIO::IVDocument::PutRefPreviewPicture ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_PreviewPicture(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(957)
inline HRESULT MSVISIO::IVDocument::Clean ( const _variant_t & nTargets, const _variant_t & nActions, const _variant_t & nAlerts, const _variant_t & nFixes, const _variant_t & bStopOnError, const _variant_t & bLogFileName, const _variant_t & nReserved ) {
    HRESULT _hr = raw_Clean(nTargets, nActions, nAlerts, nFixes, bStopOnError, bLogFileName, nReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(958)
inline long MSVISIO::IVDocument::GetBuildNumberCreated ( ) {
    long _result = 0;
    HRESULT _hr = get_BuildNumberCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline long MSVISIO::IVDocument::GetBuildNumberEdited ( ) {
    long _result = 0;
    HRESULT _hr = get_BuildNumberEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline DATE MSVISIO::IVDocument::GetTimeCreated ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline DATE MSVISIO::IVDocument::GetTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline DATE MSVISIO::IVDocument::GetTimeEdited ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline DATE MSVISIO::IVDocument::GetTimePrinted ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimePrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(964)
inline DATE MSVISIO::IVDocument::GetTimeSaved ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeSaved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline HRESULT MSVISIO::IVDocument::CopyPreviewPicture ( struct IVDocument * pSourceDoc ) {
    HRESULT _hr = raw_CopyPreviewPicture(pSourceDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(966)
inline VARIANT_BOOL MSVISIO::IVDocument::GetContainsWorkspace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContainsWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline SAFEARRAY * MSVISIO::IVDocument::GetEmailRoutingData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_EmailRoutingData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(968)
inline SAFEARRAY * MSVISIO::IVDocument::GetVBProjectData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_VBProjectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline long MSVISIO::IVDocument::GetSolutionXMLElementCount ( ) {
    long _result = 0;
    HRESULT _hr = get_SolutionXMLElementCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(970)
inline _bstr_t MSVISIO::IVDocument::GetSolutionXMLElementName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionXMLElementName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(971)
inline VARIANT_BOOL MSVISIO::IVDocument::GetSolutionXMLElementExists ( _bstr_t ElementName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SolutionXMLElementExists(ElementName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline _bstr_t MSVISIO::IVDocument::GetSolutionXMLElement ( _bstr_t ElementName ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionXMLElement(ElementName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(973)
inline void MSVISIO::IVDocument::PutSolutionXMLElement ( _bstr_t ElementName, _bstr_t pWellFormedXML ) {
    HRESULT _hr = put_SolutionXMLElement(ElementName, pWellFormedXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline HRESULT MSVISIO::IVDocument::DeleteSolutionXMLElement ( _bstr_t ElementName ) {
    HRESULT _hr = raw_DeleteSolutionXMLElement(ElementName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(975)
inline long MSVISIO::IVDocument::GetFullBuildNumberCreated ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuildNumberCreated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline long MSVISIO::IVDocument::GetFullBuildNumberEdited ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuildNumberEdited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline long MSVISIO::IVDocument::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(978)
inline VARIANT_BOOL MSVISIO::IVDocument::GetMacrosEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MacrosEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline enum MSVISIO::VisZoomBehavior MSVISIO::IVDocument::GetZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_ZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline void MSVISIO::IVDocument::PutZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_ZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline VARIANT_BOOL MSVISIO::IVDocument::CanCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline HRESULT MSVISIO::IVDocument::CheckIn ( VARIANT_BOOL SaveChanges, VARIANT * Comments, VARIANT_BOOL MakePublic ) {
    HRESULT _hr = raw_CheckIn(SaveChanges, Comments, MakePublic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(983)
inline enum MSVISIO::VisDocumentTypes MSVISIO::IVDocument::GetType ( ) {
    enum VisDocumentTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline long MSVISIO::IVDocument::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(985)
inline void MSVISIO::IVDocument::PutLanguage ( long lpLangID ) {
    HRESULT _hr = put_Language(lpLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline VARIANT_BOOL MSVISIO::IVDocument::GetRemovePersonalInformation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemovePersonalInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(987)
inline void MSVISIO::IVDocument::PutRemovePersonalInformation ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_RemovePersonalInformation(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline HRESULT MSVISIO::IVDocument::PrintOut ( enum VisPrintOutRange PrintRange, long FromPage, long ToPage, VARIANT_BOOL ScaleCurrentViewToPaper, _bstr_t PrinterName, VARIANT_BOOL PrintToFile, _bstr_t OutputFileName, long Copies, VARIANT_BOOL Collate, VARIANT_BOOL ColorAsBlack ) {
    HRESULT _hr = raw_PrintOut(PrintRange, FromPage, ToPage, ScaleCurrentViewToPaper, PrinterName, PrintToFile, OutputFileName, Copies, Collate, ColorAsBlack);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(989)
inline long MSVISIO::IVDocument::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline HRESULT MSVISIO::IVDocument::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(991)
inline HRESULT MSVISIO::IVDocument::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(992)
inline HRESULT MSVISIO::IVDocument::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(993)
inline VARIANT_BOOL MSVISIO::IVDocument::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void MSVISIO::IVDocument::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline HRESULT MSVISIO::IVDocument::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(996)
inline IDispatchPtr MSVISIO::IVDocument::GetSharedWorkspace ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SharedWorkspace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(997)
inline IDispatchPtr MSVISIO::IVDocument::GetSync ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Sync(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(998)
inline HRESULT MSVISIO::IVDocument::RemoveHiddenInformation ( long RemoveHiddenInfoItems ) {
    HRESULT _hr = raw_RemoveHiddenInformation(RemoveHiddenInfoItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(999)
inline MSVISIO::IVDataRecordsetsPtr MSVISIO::IVDocument::GetDataRecordsets ( ) {
    struct IVDataRecordsets * _result = 0;
    HRESULT _hr = get_DataRecordsets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetsPtr(_result, false);
}

#pragma implementation_key(1000)
inline HRESULT MSVISIO::IVDocument::GetThemeNames ( enum VisThemeTypes eType, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetThemeNames(eType, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1001)
inline HRESULT MSVISIO::IVDocument::GetThemeNamesU ( enum VisThemeTypes eType, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetThemeNamesU(eType, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1002)
inline VARIANT_BOOL MSVISIO::IVDocument::CanUndoCheckOut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanUndoCheckOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1003)
inline HRESULT MSVISIO::IVDocument::UndoCheckOut ( ) {
    HRESULT _hr = raw_UndoCheckOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1004)
inline VARIANT_BOOL MSVISIO::IVDocument::GetContainsWorkspaceEx ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ContainsWorkspaceEx(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void MSVISIO::IVDocument::PutContainsWorkspaceEx ( VARIANT_BOOL TrueOrFalse ) {
    HRESULT _hr = put_ContainsWorkspaceEx(TrueOrFalse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline HRESULT MSVISIO::IVDocument::ExportAsFixedFormat ( enum VisFixedFormatTypes FixedFormat, _bstr_t OutputFileName, enum VisDocExIntent Intent, enum VisPrintOutRange PrintRange, long FromPage, long ToPage, VARIANT_BOOL ColorAsBlack, VARIANT_BOOL IncludeBackground, VARIANT_BOOL IncludeDocumentProperties, VARIANT_BOOL IncludeStructureTags, VARIANT_BOOL UseISO19005_1, const _variant_t & FixedFormatExtClass ) {
    HRESULT _hr = raw_ExportAsFixedFormat(FixedFormat, OutputFileName, Intent, PrintRange, FromPage, ToPage, ColorAsBlack, IncludeBackground, IncludeDocumentProperties, IncludeStructureTags, UseISO19005_1, FixedFormatExtClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1007)
inline _bstr_t MSVISIO::IVDocument::GetDefaultSavePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultSavePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1008)
inline void MSVISIO::IVDocument::PutDefaultSavePath ( _bstr_t SaveLocation ) {
    HRESULT _hr = put_DefaultSavePath(SaveLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDataConnection wrapper method implementations
//

#pragma implementation_key(1009)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataConnection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1010)
inline short MSVISIO::IVDataConnection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDataConnection::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1012)
inline short MSVISIO::IVDataConnection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1013)
inline long MSVISIO::IVDataConnection::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline _bstr_t MSVISIO::IVDataConnection::GetConnectionString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1015)
inline void MSVISIO::IVDataConnection::PutConnectionString ( _bstr_t ConnectionString ) {
    HRESULT _hr = put_ConnectionString(ConnectionString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1016)
inline _bstr_t MSVISIO::IVDataConnection::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1017)
inline long MSVISIO::IVDataConnection::GetTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_Timeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void MSVISIO::IVDataConnection::PutTimeout ( long Timeout ) {
    HRESULT _hr = put_Timeout(Timeout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVFont wrapper method implementations
//

#pragma implementation_key(1019)
inline MSVISIO::IVApplicationPtr MSVISIO::IVFont::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1020)
inline MSVISIO::IVDocumentPtr MSVISIO::IVFont::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1021)
inline short MSVISIO::IVFont::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline _bstr_t MSVISIO::IVFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1023)
inline short MSVISIO::IVFont::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline short MSVISIO::IVFont::GetAttributes ( ) {
    short _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline short MSVISIO::IVFont::GetCharSet ( ) {
    short _result = 0;
    HRESULT _hr = get_CharSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline short MSVISIO::IVFont::GetPitchAndFamily ( ) {
    short _result = 0;
    HRESULT _hr = get_PitchAndFamily(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1027)
inline short MSVISIO::IVFont::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline short MSVISIO::IVFont::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1029)
inline long MSVISIO::IVFont::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVFonts wrapper method implementations
//

#pragma implementation_key(1030)
inline MSVISIO::IVApplicationPtr MSVISIO::IVFonts::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1031)
inline MSVISIO::IVDocumentPtr MSVISIO::IVFonts::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1032)
inline short MSVISIO::IVFonts::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1033)
inline MSVISIO::IVFontPtr MSVISIO::IVFonts::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVFont * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontPtr(_result, false);
}

#pragma implementation_key(1034)
inline MSVISIO::IVFontPtr MSVISIO::IVFonts::GetItemFromID ( long ObjectID ) {
    struct IVFont * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVFontPtr(_result, false);
}

#pragma implementation_key(1035)
inline short MSVISIO::IVFonts::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline short MSVISIO::IVFonts::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1037)
inline IUnknownPtr MSVISIO::IVFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVColor wrapper method implementations
//

#pragma implementation_key(1038)
inline MSVISIO::IVApplicationPtr MSVISIO::IVColor::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1039)
inline MSVISIO::IVDocumentPtr MSVISIO::IVColor::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1040)
inline short MSVISIO::IVColor::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline short MSVISIO::IVColor::GetRed ( ) {
    short _result = 0;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void MSVISIO::IVColor::PutRed ( short lpi2Ret ) {
    HRESULT _hr = put_Red(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline short MSVISIO::IVColor::GetGreen ( ) {
    short _result = 0;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void MSVISIO::IVColor::PutGreen ( short lpi2Ret ) {
    HRESULT _hr = put_Green(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline short MSVISIO::IVColor::GetBlue ( ) {
    short _result = 0;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void MSVISIO::IVColor::PutBlue ( short lpi2Ret ) {
    HRESULT _hr = put_Blue(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline short MSVISIO::IVColor::GetFlags ( ) {
    short _result = 0;
    HRESULT _hr = get_Flags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void MSVISIO::IVColor::PutFlags ( short lpi2Ret ) {
    HRESULT _hr = put_Flags(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline long MSVISIO::IVColor::GetPaletteEntry ( ) {
    long _result = 0;
    HRESULT _hr = get_PaletteEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void MSVISIO::IVColor::PutPaletteEntry ( long lpi4Ret ) {
    HRESULT _hr = put_PaletteEntry(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline short MSVISIO::IVColor::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline short MSVISIO::IVColor::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1053)
inline long MSVISIO::IVColor::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVColors wrapper method implementations
//

#pragma implementation_key(1054)
inline MSVISIO::IVApplicationPtr MSVISIO::IVColors::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1055)
inline MSVISIO::IVDocumentPtr MSVISIO::IVColors::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1056)
inline short MSVISIO::IVColors::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline MSVISIO::IVColorPtr MSVISIO::IVColors::GetItem16 ( short Index ) {
    struct IVColor * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorPtr(_result, false);
}

#pragma implementation_key(1058)
inline short MSVISIO::IVColors::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1059)
inline short MSVISIO::IVColors::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline MSVISIO::IVColorPtr MSVISIO::IVColors::GetItem ( long Index ) {
    struct IVColor * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVColorPtr(_result, false);
}

#pragma implementation_key(1061)
inline long MSVISIO::IVColors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline IUnknownPtr MSVISIO::IVColors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVMasters wrapper method implementations
//

#pragma implementation_key(1063)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMasters::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1064)
inline short MSVISIO::IVMasters::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::GetItem ( const _variant_t & NameUIDOrIndex ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Item(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1066)
inline short MSVISIO::IVMasters::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1067)
inline MSVISIO::IVDocumentPtr MSVISIO::IVMasters::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1068)
inline short MSVISIO::IVMasters::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1069)
inline MSVISIO::IVEventListPtr MSVISIO::IVMasters::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1070)
inline short MSVISIO::IVMasters::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1071)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::Add ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1072)
inline HRESULT MSVISIO::IVMasters::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1073)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1074)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::GetItemU ( const _variant_t & NameUIDOrIndex ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ItemU(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1075)
inline HRESULT MSVISIO::IVMasters::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline IUnknownPtr MSVISIO::IVMasters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1077)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::GetItemFromID ( long nID ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1078)
inline HRESULT MSVISIO::IVMasters::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1079)
inline MSVISIO::IVMasterPtr MSVISIO::IVMasters::AddEx ( enum VisMasterTypes Type ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_AddEx(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

//
// interface IVMaster wrapper method implementations
//

#pragma implementation_key(1080)
inline MSVISIO::IVDocumentPtr MSVISIO::IVMaster::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1081)
inline _bstr_t MSVISIO::IVMaster::GetPrompt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1082)
inline void MSVISIO::IVMaster::PutPrompt ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Prompt(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1083)
inline short MSVISIO::IVMaster::GetAlignName ( ) {
    short _result = 0;
    HRESULT _hr = get_AlignName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline void MSVISIO::IVMaster::PutAlignName ( short lpi2Ret ) {
    HRESULT _hr = put_AlignName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline short MSVISIO::IVMaster::GetIconSize ( ) {
    short _result = 0;
    HRESULT _hr = get_IconSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline void MSVISIO::IVMaster::PutIconSize ( short lpi2Ret ) {
    HRESULT _hr = put_IconSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline short MSVISIO::IVMaster::GetIconUpdate ( ) {
    short _result = 0;
    HRESULT _hr = get_IconUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline void MSVISIO::IVMaster::PutIconUpdate ( short lpi2Ret ) {
    HRESULT _hr = put_IconUpdate(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMaster::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1090)
inline short MSVISIO::IVMaster::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1091)
inline short MSVISIO::IVMaster::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline _bstr_t MSVISIO::IVMaster::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1093)
inline void MSVISIO::IVMaster::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline MSVISIO::IVShapesPtr MSVISIO::IVMaster::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

#pragma implementation_key(1095)
inline short MSVISIO::IVMaster::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1096)
inline short MSVISIO::IVMaster::GetOneD ( ) {
    short _result = 0;
    HRESULT _hr = get_OneD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline HRESULT MSVISIO::IVMaster::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1098)
inline _bstr_t MSVISIO::IVMaster::GetUniqueID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1099)
inline MSVISIO::IVLayersPtr MSVISIO::IVMaster::GetLayers ( ) {
    struct IVLayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayersPtr(_result, false);
}

#pragma implementation_key(1100)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::GetPageSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PageSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1101)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1102)
inline HRESULT MSVISIO::IVMaster::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1103)
inline MSVISIO::IVEventListPtr MSVISIO::IVMaster::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1104)
inline short MSVISIO::IVMaster::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1106)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1107)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1108)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1109)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1110)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1111)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1112)
inline HRESULT MSVISIO::IVMaster::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1113)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1114)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1115)
inline MSVISIO::IVWindowPtr MSVISIO::IVMaster::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(1116)
inline MSVISIO::IVWindowPtr MSVISIO::IVMaster::OpenIconWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenIconWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(1117)
inline MSVISIO::IVMasterPtr MSVISIO::IVMaster::Open ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1118)
inline HRESULT MSVISIO::IVMaster::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1119)
inline short MSVISIO::IVMaster::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline HRESULT MSVISIO::IVMaster::GetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1121)
inline HRESULT MSVISIO::IVMaster::GetResults ( SAFEARRAY * * SID_SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1122)
inline short MSVISIO::IVMaster::SetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SID_SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline short MSVISIO::IVMaster::SetResults ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline MSVISIO::IVConnectsPtr MSVISIO::IVMaster::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(1125)
inline HRESULT MSVISIO::IVMaster::ImportIcon ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportIcon(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1126)
inline HRESULT MSVISIO::IVMaster::ExportIconTransparentAsBlack ( _bstr_t FileName, short Flags ) {
    HRESULT _hr = raw_ExportIconTransparentAsBlack(FileName, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1127)
inline HRESULT MSVISIO::IVMaster::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1128)
inline HRESULT MSVISIO::IVMaster::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1129)
inline short MSVISIO::IVMaster::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1130)
inline MSVISIO::IVOLEObjectsPtr MSVISIO::IVMaster::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

#pragma implementation_key(1131)
inline short MSVISIO::IVMaster::GetPatternFlags ( ) {
    short _result = 0;
    HRESULT _hr = get_PatternFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void MSVISIO::IVMaster::PutPatternFlags ( short lpi2Ret ) {
    HRESULT _hr = put_PatternFlags(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline short MSVISIO::IVMaster::GetMatchByName ( ) {
    short _result = 0;
    HRESULT _hr = get_MatchByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void MSVISIO::IVMaster::PutMatchByName ( short lpi2Ret ) {
    HRESULT _hr = put_MatchByName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline long MSVISIO::IVMaster::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline short MSVISIO::IVMaster::GetHidden ( ) {
    short _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void MSVISIO::IVMaster::PutHidden ( short lpi2Ret ) {
    HRESULT _hr = put_Hidden(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline _bstr_t MSVISIO::IVMaster::GetBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1139)
inline _bstr_t MSVISIO::IVMaster::GetNewBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NewBaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1140)
inline MSVISIO::IVSelectionPtr MSVISIO::IVMaster::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1141)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVMaster::CreateShortcut ( ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = raw_CreateShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(1142)
inline _bstr_t MSVISIO::IVMaster::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1143)
inline void MSVISIO::IVMaster::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline short MSVISIO::IVMaster::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline HRESULT MSVISIO::IVMaster::GetFormulasU ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1146)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1147)
inline HRESULT MSVISIO::IVMaster::ExportIcon ( _bstr_t FileName, short Flags, const _variant_t & TransparentRGB ) {
    HRESULT _hr = raw_ExportIcon(FileName, Flags, TransparentRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1148)
inline short MSVISIO::IVMaster::GetIndexInStencil ( ) {
    short _result = 0;
    HRESULT _hr = get_IndexInStencil(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1149)
inline IPictureDisp * MSVISIO::IVMaster::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline IPictureDisp * MSVISIO::IVMaster::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void MSVISIO::IVMaster::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline MSVISIO::IVMasterPtr MSVISIO::IVMaster::GetEditCopy ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_EditCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1153)
inline MSVISIO::IVMasterPtr MSVISIO::IVMaster::GetOriginal ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Original(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1154)
inline VARIANT_BOOL MSVISIO::IVMaster::GetIsChanged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void MSVISIO::IVMaster::PutIndexInStencil ( short lpi2Ret ) {
    HRESULT _hr = put_IndexInStencil(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline HRESULT MSVISIO::IVMaster::ResizeToFitContents ( ) {
    HRESULT _hr = raw_ResizeToFitContents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1157)
inline HRESULT MSVISIO::IVMaster::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1158)
inline HRESULT MSVISIO::IVMaster::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1159)
inline MSVISIO::IVSelectionPtr MSVISIO::IVMaster::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1160)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1161)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1162)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1163)
inline MSVISIO::IVShapePtr MSVISIO::IVMaster::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1164)
inline enum MSVISIO::VisMasterTypes MSVISIO::IVMaster::GetType ( ) {
    enum VisMasterTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline VARIANT_BOOL MSVISIO::IVMaster::GetDataGraphicHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline void MSVISIO::IVMaster::PutDataGraphicHidden ( VARIANT_BOOL Hidden ) {
    HRESULT _hr = put_DataGraphicHidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1167)
inline VARIANT_BOOL MSVISIO::IVMaster::GetDataGraphicHidesText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicHidesText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1168)
inline void MSVISIO::IVMaster::PutDataGraphicHidesText ( VARIANT_BOOL HideText ) {
    HRESULT _hr = put_DataGraphicHidesText(HideText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1169)
inline VARIANT_BOOL MSVISIO::IVMaster::GetDataGraphicShowBorder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataGraphicShowBorder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1170)
inline void MSVISIO::IVMaster::PutDataGraphicShowBorder ( VARIANT_BOOL ShowBorder ) {
    HRESULT _hr = put_DataGraphicShowBorder(ShowBorder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1171)
inline enum MSVISIO::VisGraphicPositionHorizontal MSVISIO::IVMaster::GetDataGraphicHorizontalPosition ( ) {
    enum VisGraphicPositionHorizontal _result;
    HRESULT _hr = get_DataGraphicHorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void MSVISIO::IVMaster::PutDataGraphicHorizontalPosition ( enum VisGraphicPositionHorizontal Position ) {
    HRESULT _hr = put_DataGraphicHorizontalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline enum MSVISIO::VisGraphicPositionVertical MSVISIO::IVMaster::GetDataGraphicVerticalPosition ( ) {
    enum VisGraphicPositionVertical _result;
    HRESULT _hr = get_DataGraphicVerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void MSVISIO::IVMaster::PutDataGraphicVerticalPosition ( enum VisGraphicPositionVertical Position ) {
    HRESULT _hr = put_DataGraphicVerticalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline MSVISIO::IVGraphicItemsPtr MSVISIO::IVMaster::GetGraphicItems ( ) {
    struct IVGraphicItems * _result = 0;
    HRESULT _hr = get_GraphicItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemsPtr(_result, false);
}

#pragma implementation_key(1176)
inline HRESULT MSVISIO::IVMaster::DataGraphicDelete ( ) {
    HRESULT _hr = raw_DataGraphicDelete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVGraphicItem wrapper method implementations
//

#pragma implementation_key(1177)
inline MSVISIO::IVApplicationPtr MSVISIO::IVGraphicItem::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1178)
inline MSVISIO::IVDocumentPtr MSVISIO::IVGraphicItem::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1179)
inline enum MSVISIO::VisObjectTypes MSVISIO::IVGraphicItem::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline HRESULT MSVISIO::IVGraphicItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1181)
inline long MSVISIO::IVGraphicItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline void MSVISIO::IVGraphicItem::PutIndex ( long Index ) {
    HRESULT _hr = put_Index(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1183)
inline long MSVISIO::IVGraphicItem::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1184)
inline _bstr_t MSVISIO::IVGraphicItem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1185)
inline enum MSVISIO::VisGraphicItemTypes MSVISIO::IVGraphicItem::GetType ( ) {
    enum VisGraphicItemTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1186)
inline HRESULT MSVISIO::IVGraphicItem::GetExpression ( enum VisGraphicField * Field, BSTR * Expression ) {
    HRESULT _hr = raw_GetExpression(Field, Expression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1187)
inline HRESULT MSVISIO::IVGraphicItem::SetExpression ( enum VisGraphicField Field, _bstr_t Expression ) {
    HRESULT _hr = raw_SetExpression(Field, Expression);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1188)
inline MSVISIO::IVMasterPtr MSVISIO::IVGraphicItem::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1189)
inline short MSVISIO::IVGraphicItem::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1190)
inline _bstr_t MSVISIO::IVGraphicItem::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1191)
inline void MSVISIO::IVGraphicItem::PutTag ( _bstr_t Tag ) {
    HRESULT _hr = put_Tag(Tag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1192)
inline enum MSVISIO::VisGraphicPositionHorizontal MSVISIO::IVGraphicItem::GetHorizontalPosition ( ) {
    enum VisGraphicPositionHorizontal _result;
    HRESULT _hr = get_HorizontalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1193)
inline void MSVISIO::IVGraphicItem::PutHorizontalPosition ( enum VisGraphicPositionHorizontal Position ) {
    HRESULT _hr = put_HorizontalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1194)
inline enum MSVISIO::VisGraphicPositionVertical MSVISIO::IVGraphicItem::GetVerticalPosition ( ) {
    enum VisGraphicPositionVertical _result;
    HRESULT _hr = get_VerticalPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline void MSVISIO::IVGraphicItem::PutVerticalPosition ( enum VisGraphicPositionVertical Position ) {
    HRESULT _hr = put_VerticalPosition(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1196)
inline VARIANT_BOOL MSVISIO::IVGraphicItem::GetUseDataGraphicPosition ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseDataGraphicPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1197)
inline void MSVISIO::IVGraphicItem::PutUseDataGraphicPosition ( VARIANT_BOOL UseDataGraphicPosition ) {
    HRESULT _hr = put_UseDataGraphicPosition(UseDataGraphicPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVGraphicItems wrapper method implementations
//

#pragma implementation_key(1198)
inline MSVISIO::IVApplicationPtr MSVISIO::IVGraphicItems::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1199)
inline MSVISIO::IVDocumentPtr MSVISIO::IVGraphicItems::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1200)
inline enum MSVISIO::VisObjectTypes MSVISIO::IVGraphicItems::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1201)
inline MSVISIO::IVMasterPtr MSVISIO::IVGraphicItems::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1202)
inline IUnknownPtr MSVISIO::IVGraphicItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1203)
inline long MSVISIO::IVGraphicItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1204)
inline MSVISIO::IVGraphicItemPtr MSVISIO::IVGraphicItems::AddCopy ( struct IVGraphicItem * GraphicItem ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = raw_AddCopy(GraphicItem, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

#pragma implementation_key(1205)
inline MSVISIO::IVGraphicItemPtr MSVISIO::IVGraphicItems::GetItem ( long Index ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

#pragma implementation_key(1206)
inline MSVISIO::IVGraphicItemPtr MSVISIO::IVGraphicItems::GetItemFromID ( long ObjectID ) {
    struct IVGraphicItem * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVGraphicItemPtr(_result, false);
}

#pragma implementation_key(1207)
inline short MSVISIO::IVGraphicItems::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVShapes wrapper method implementations
//

#pragma implementation_key(1208)
inline MSVISIO::IVApplicationPtr MSVISIO::IVShapes::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1209)
inline short MSVISIO::IVShapes::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1210)
inline MSVISIO::IVShapePtr MSVISIO::IVShapes::GetItem ( const _variant_t & NameUIDOrIndex ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1211)
inline short MSVISIO::IVShapes::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline MSVISIO::IVDocumentPtr MSVISIO::IVShapes::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1213)
inline MSVISIO::IVPagePtr MSVISIO::IVShapes::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1214)
inline MSVISIO::IVMasterPtr MSVISIO::IVShapes::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1215)
inline MSVISIO::IVShapePtr MSVISIO::IVShapes::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1216)
inline HRESULT MSVISIO::IVShapes::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1217)
inline short MSVISIO::IVShapes::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline MSVISIO::IVEventListPtr MSVISIO::IVShapes::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1219)
inline short MSVISIO::IVShapes::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1220)
inline MSVISIO::IVShapePtr MSVISIO::IVShapes::GetItemFromID16 ( short ObjectID ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemFromID16(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1221)
inline long MSVISIO::IVShapes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline MSVISIO::IVShapePtr MSVISIO::IVShapes::GetItemFromID ( long ObjectID ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1223)
inline MSVISIO::IVShapePtr MSVISIO::IVShapes::GetItemU ( const _variant_t & NameUIDOrIndex ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ItemU(NameUIDOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1224)
inline IUnknownPtr MSVISIO::IVShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVShape wrapper method implementations
//

#pragma implementation_key(1225)
inline HRESULT MSVISIO::IVShape::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1226)
inline HRESULT MSVISIO::IVShape::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT MSVISIO::IVShape::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1228)
inline HRESULT MSVISIO::IVShape::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1229)
inline HRESULT MSVISIO::IVShape::FlipHorizontal ( ) {
    HRESULT _hr = raw_FlipHorizontal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1230)
inline HRESULT MSVISIO::IVShape::FlipVertical ( ) {
    HRESULT _hr = raw_FlipVertical();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1231)
inline HRESULT MSVISIO::IVShape::ReverseEnds ( ) {
    HRESULT _hr = raw_ReverseEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1232)
inline HRESULT MSVISIO::IVShape::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1233)
inline HRESULT MSVISIO::IVShape::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1234)
inline HRESULT MSVISIO::IVShape::Rotate90 ( ) {
    HRESULT _hr = raw_Rotate90();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1235)
inline HRESULT MSVISIO::IVShape::Ungroup ( ) {
    HRESULT _hr = raw_Ungroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1236)
inline MSVISIO::IVDocumentPtr MSVISIO::IVShape::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1237)
inline IDispatchPtr MSVISIO::IVShape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1238)
inline MSVISIO::IVApplicationPtr MSVISIO::IVShape::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1239)
inline short MSVISIO::IVShape::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline MSVISIO::IVMasterPtr MSVISIO::IVShape::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1241)
inline short MSVISIO::IVShape::GetType ( ) {
    short _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1242)
inline short MSVISIO::IVShape::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1243)
inline MSVISIO::IVCellPtr MSVISIO::IVShape::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1244)
inline MSVISIO::IVCellPtr MSVISIO::IVShape::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1245)
inline MSVISIO::IVShapesPtr MSVISIO::IVShape::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

#pragma implementation_key(1246)
inline _bstr_t MSVISIO::IVShape::GetData1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1247)
inline void MSVISIO::IVShape::PutData1 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data1(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1248)
inline _bstr_t MSVISIO::IVShape::GetData2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1249)
inline void MSVISIO::IVShape::PutData2 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data2(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1250)
inline _bstr_t MSVISIO::IVShape::GetData3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1251)
inline void MSVISIO::IVShape::PutData3 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data3(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline _bstr_t MSVISIO::IVShape::GetHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1253)
inline void MSVISIO::IVShape::PutHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Help(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline _bstr_t MSVISIO::IVShape::GetNameID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1255)
inline _bstr_t MSVISIO::IVShape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1256)
inline void MSVISIO::IVShape::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1257)
inline _bstr_t MSVISIO::IVShape::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1258)
inline void MSVISIO::IVShape::PutText ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Text(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1259)
inline long MSVISIO::IVShape::GetCharCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CharCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1260)
inline MSVISIO::IVCharactersPtr MSVISIO::IVShape::GetCharacters ( ) {
    struct IVCharacters * _result = 0;
    HRESULT _hr = get_Characters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCharactersPtr(_result, false);
}

#pragma implementation_key(1261)
inline HRESULT MSVISIO::IVShape::old_Copy ( ) {
    HRESULT _hr = raw_old_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1262)
inline HRESULT MSVISIO::IVShape::old_Cut ( ) {
    HRESULT _hr = raw_old_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1263)
inline HRESULT MSVISIO::IVShape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1264)
inline HRESULT MSVISIO::IVShape::VoidDuplicate ( ) {
    HRESULT _hr = raw_VoidDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1265)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1266)
inline short MSVISIO::IVShape::GetOneD ( ) {
    short _result = 0;
    HRESULT _hr = get_OneD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline void MSVISIO::IVShape::PutOneD ( short lpi2Ret ) {
    HRESULT _hr = put_OneD(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline short MSVISIO::IVShape::GetGeometryCount ( ) {
    short _result = 0;
    HRESULT _hr = get_GeometryCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline short MSVISIO::IVShape::GetRowCount ( short Section ) {
    short _result = 0;
    HRESULT _hr = get_RowCount(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline short MSVISIO::IVShape::AddSection ( short Section ) {
    short _result = 0;
    HRESULT _hr = raw_AddSection(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline HRESULT MSVISIO::IVShape::DeleteSection ( short Section ) {
    HRESULT _hr = raw_DeleteSection(Section);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1272)
inline short MSVISIO::IVShape::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddRow(Section, Row, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1273)
inline HRESULT MSVISIO::IVShape::DeleteRow ( short Section, short Row ) {
    HRESULT _hr = raw_DeleteRow(Section, Row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1274)
inline short MSVISIO::IVShape::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowsCellCount(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline short MSVISIO::IVShape::GetRowType ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowType(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline void MSVISIO::IVShape::PutRowType ( short Section, short Row, short lpi2Ret ) {
    HRESULT _hr = put_RowType(Section, Row, lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1277)
inline HRESULT MSVISIO::IVShape::SetCenter ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetCenter(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1278)
inline HRESULT MSVISIO::IVShape::SetBegin ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetBegin(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1279)
inline HRESULT MSVISIO::IVShape::SetEnd ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetEnd(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1280)
inline MSVISIO::IVConnectsPtr MSVISIO::IVShape::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(1281)
inline short MSVISIO::IVShape::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1282)
inline _bstr_t MSVISIO::IVShape::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1283)
inline void MSVISIO::IVShape::PutStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_Style(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline void MSVISIO::IVShape::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1285)
inline _bstr_t MSVISIO::IVShape::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1286)
inline void MSVISIO::IVShape::PutLineStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1287)
inline void MSVISIO::IVShape::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline _bstr_t MSVISIO::IVShape::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1289)
inline void MSVISIO::IVShape::PutFillStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline void MSVISIO::IVShape::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1291)
inline _bstr_t MSVISIO::IVShape::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1292)
inline void MSVISIO::IVShape::PutTextStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline void MSVISIO::IVShape::PutTextStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_TextStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1294)
inline HRESULT MSVISIO::IVShape::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1295)
inline double MSVISIO::IVShape::Getold_AreaIU ( ) {
    double _result = 0;
    HRESULT _hr = get_old_AreaIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1296)
inline double MSVISIO::IVShape::Getold_LengthIU ( ) {
    double _result = 0;
    HRESULT _hr = get_old_LengthIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline IUnknownPtr MSVISIO::IVShape::GetGeomExIf ( short fFill, double LineRes ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_GeomExIf(fFill, LineRes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1298)
inline _bstr_t MSVISIO::IVShape::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(fUniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1299)
inline MSVISIO::IVPagePtr MSVISIO::IVShape::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1300)
inline MSVISIO::IVMasterPtr MSVISIO::IVShape::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1301)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1302)
inline short MSVISIO::IVShape::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_SectionExists(Section, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1303)
inline short MSVISIO::IVShape::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_RowExists(Section, Row, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1304)
inline short MSVISIO::IVShape::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline short MSVISIO::IVShape::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1306)
inline short MSVISIO::IVShape::GetLayerCount ( ) {
    short _result = 0;
    HRESULT _hr = get_LayerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline MSVISIO::IVLayerPtr MSVISIO::IVShape::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Layer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(1308)
inline short MSVISIO::IVShape::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddNamedRow(Section, RowName, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline short MSVISIO::IVShape::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    HRESULT _hr = raw_AddRows(Section, Row, RowTag, RowCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1310)
inline MSVISIO::IVEventListPtr MSVISIO::IVShape::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1311)
inline short MSVISIO::IVShape::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1312)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1313)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1314)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1315)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1316)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1317)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1318)
inline HRESULT MSVISIO::IVShape::FitCurve ( double Tolerance, short Flags ) {
    HRESULT _hr = raw_FitCurve(Tolerance, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1319)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1320)
inline HRESULT MSVISIO::IVShape::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1321)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1322)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1323)
inline _bstr_t MSVISIO::IVShape::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1324)
inline short MSVISIO::IVShape::GetForeignType ( ) {
    short _result = 0;
    HRESULT _hr = get_ForeignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1325)
inline IDispatchPtr MSVISIO::IVShape::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1326)
inline MSVISIO::IVWindowPtr MSVISIO::IVShape::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(1327)
inline MSVISIO::IVWindowPtr MSVISIO::IVShape::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenSheetWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(1328)
inline short MSVISIO::IVShape::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1329)
inline short MSVISIO::IVShape::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline HRESULT MSVISIO::IVShape::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1331)
inline HRESULT MSVISIO::IVShape::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1332)
inline short MSVISIO::IVShape::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1333)
inline short MSVISIO::IVShape::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline MSVISIO::IVConnectsPtr MSVISIO::IVShape::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_FromConnects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(1335)
inline HRESULT MSVISIO::IVShape::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1336)
inline HRESULT MSVISIO::IVShape::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1337)
inline short MSVISIO::IVShape::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    HRESULT _hr = raw_HitTest(xPos, yPos, Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVShape::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(1339)
inline _bstr_t MSVISIO::IVShape::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1340)
inline short MSVISIO::IVShape::GetObjectIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectIsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1341)
inline MSVISIO::IVPathsPtr MSVISIO::IVShape::GetPaths ( ) {
    struct IVPaths * _result = 0;
    HRESULT _hr = get_Paths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathsPtr(_result, false);
}

#pragma implementation_key(1342)
inline MSVISIO::IVPathsPtr MSVISIO::IVShape::GetPathsLocal ( ) {
    struct IVPaths * _result = 0;
    HRESULT _hr = get_PathsLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPathsPtr(_result, false);
}

#pragma implementation_key(1343)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVShape::AddHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = raw_AddHyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(1344)
inline long MSVISIO::IVShape::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline long MSVISIO::IVShape::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1346)
inline MSVISIO::IVSectionPtr MSVISIO::IVShape::GetSection ( short Index ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_Section(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

#pragma implementation_key(1347)
inline MSVISIO::IVHyperlinksPtr MSVISIO::IVShape::GetHyperlinks ( ) {
    struct IVHyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinksPtr(_result, false);
}

#pragma implementation_key(1348)
inline short MSVISIO::IVShape::GetSpatialRelation ( struct IVShape * OtherShape, double Tolerance, short Flags ) {
    short _result = 0;
    HRESULT _hr = get_SpatialRelation(OtherShape, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1349)
inline double MSVISIO::IVShape::GetDistanceFrom ( struct IVShape * OtherShape, short Flags ) {
    double _result = 0;
    HRESULT _hr = get_DistanceFrom(OtherShape, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1350)
inline double MSVISIO::IVShape::GetDistanceFromPoint ( double x, double y, short Flags, VARIANT * pvPathIndex, VARIANT * pvCurveIndex, VARIANT * pvt ) {
    double _result = 0;
    HRESULT _hr = get_DistanceFromPoint(x, y, Flags, pvPathIndex, pvCurveIndex, pvt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1351)
inline MSVISIO::IVSelectionPtr MSVISIO::IVShape::GetSpatialNeighbors ( short Relation, double Tolerance, short Flags, const _variant_t & ResultRoot ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialNeighbors(Relation, Tolerance, Flags, ResultRoot, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1352)
inline MSVISIO::IVSelectionPtr MSVISIO::IVShape::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1353)
inline HRESULT MSVISIO::IVShape::TransformXYTo ( struct IVShape * OtherShape, double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_TransformXYTo(OtherShape, x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1354)
inline HRESULT MSVISIO::IVShape::TransformXYFrom ( struct IVShape * OtherShape, double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_TransformXYFrom(OtherShape, x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1355)
inline HRESULT MSVISIO::IVShape::XYToPage ( double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_XYToPage(x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1356)
inline HRESULT MSVISIO::IVShape::XYFromPage ( double x, double y, double * xprime, double * yprime ) {
    HRESULT _hr = raw_XYFromPage(x, y, xprime, yprime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1357)
inline HRESULT MSVISIO::IVShape::UpdateAlignmentBox ( ) {
    HRESULT _hr = raw_UpdateAlignmentBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1358)
inline MSVISIO::IVCellPtr MSVISIO::IVShape::GetCellsU ( _bstr_t localeIndependentCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1359)
inline _bstr_t MSVISIO::IVShape::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1360)
inline void MSVISIO::IVShape::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline short MSVISIO::IVShape::GetCellExistsU ( _bstr_t localeIndependentCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExistsU(localeIndependentCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline short MSVISIO::IVShape::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline HRESULT MSVISIO::IVShape::GetFormulasU ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1364)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1365)
inline short MSVISIO::IVShape::GetCellsRowIndex ( _bstr_t localeSpecificCellName ) {
    short _result = 0;
    HRESULT _hr = get_CellsRowIndex(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline short MSVISIO::IVShape::GetCellsRowIndexU ( _bstr_t localeIndependentCellName ) {
    short _result = 0;
    HRESULT _hr = get_CellsRowIndexU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1367)
inline VARIANT_BOOL MSVISIO::IVShape::GetIsOpenForTextEdit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpenForTextEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1368)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::GetRootShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_RootShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1369)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::GetMasterShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_MasterShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1370)
inline IPictureDisp * MSVISIO::IVShape::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1371)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1372)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::Duplicate ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1373)
inline HRESULT MSVISIO::IVShape::SwapEnds ( ) {
    HRESULT _hr = raw_SwapEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1374)
inline void MSVISIO::IVShape::PutParent ( IDispatch * lpdispRet ) {
    HRESULT _hr = put_Parent(lpdispRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1375)
inline SAFEARRAY * MSVISIO::IVShape::GetForeignData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_ForeignData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1376)
inline HRESULT MSVISIO::IVShape::Copy ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Copy(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline HRESULT MSVISIO::IVShape::Cut ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Cut(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1378)
inline HRESULT MSVISIO::IVShape::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1379)
inline HRESULT MSVISIO::IVShape::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1380)
inline MSVISIO::IVSelectionPtr MSVISIO::IVShape::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1381)
inline long MSVISIO::IVShape::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1382)
inline void MSVISIO::IVShape::PutLanguage ( long lpLangID ) {
    HRESULT _hr = put_Language(lpLangID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1383)
inline HRESULT MSVISIO::IVShape::Offset ( double Distance ) {
    HRESULT _hr = raw_Offset(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1384)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1385)
inline double MSVISIO::IVShape::GetAreaIU ( VARIANT_BOOL fIncludeSubShapes ) {
    double _result = 0;
    HRESULT _hr = get_AreaIU(fIncludeSubShapes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1386)
inline double MSVISIO::IVShape::GetLengthIU ( VARIANT_BOOL fIncludeSubShapes ) {
    double _result = 0;
    HRESULT _hr = get_LengthIU(fIncludeSubShapes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1387)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1388)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1389)
inline MSVISIO::IVShapePtr MSVISIO::IVShape::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1390)
inline long MSVISIO::IVShape::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline long MSVISIO::IVShape::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1392)
inline HRESULT MSVISIO::IVShape::LinkToData ( long DataRecordsetID, long RowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkToData(DataRecordsetID, RowID, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1393)
inline HRESULT MSVISIO::IVShape::BreakLinkToData ( long DataRecordsetID ) {
    HRESULT _hr = raw_BreakLinkToData(DataRecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1394)
inline long MSVISIO::IVShape::GetLinkedDataRow ( long DataRecordsetID ) {
    long _result = 0;
    HRESULT _hr = raw_GetLinkedDataRow(DataRecordsetID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1395)
inline HRESULT MSVISIO::IVShape::GetLinkedDataRecordsetIDs ( SAFEARRAY * * DataRecordsetIDs ) {
    HRESULT _hr = raw_GetLinkedDataRecordsetIDs(DataRecordsetIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1396)
inline HRESULT MSVISIO::IVShape::GetCustomPropertiesLinkedToData ( long DataRecordsetID, SAFEARRAY * * CustomPropertyIndices ) {
    HRESULT _hr = raw_GetCustomPropertiesLinkedToData(DataRecordsetID, CustomPropertyIndices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1397)
inline VARIANT_BOOL MSVISIO::IVShape::IsCustomPropertyLinked ( long DataRecordsetID, long CustomPropertyIndex ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCustomPropertyLinked(DataRecordsetID, CustomPropertyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline _bstr_t MSVISIO::IVShape::GetCustomPropertyLinkedColumn ( long DataRecordsetID, long CustomPropertyIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomPropertyLinkedColumn(DataRecordsetID, CustomPropertyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1399)
inline HRESULT MSVISIO::IVShape::AutoConnect ( struct IVShape * ToShape, enum VisAutoConnectDir PlacementDir, IUnknown * Connector ) {
    HRESULT _hr = raw_AutoConnect(ToShape, PlacementDir, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1400)
inline MSVISIO::IVMasterPtr MSVISIO::IVShape::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1401)
inline void MSVISIO::IVShape::PutDataGraphic ( struct IVMaster * DataGraphic ) {
    HRESULT _hr = put_DataGraphic(DataGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1402)
inline VARIANT_BOOL MSVISIO::IVShape::GetIsDataGraphicCallout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDataGraphicCallout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVOLEObject wrapper method implementations
//

#pragma implementation_key(1403)
inline MSVISIO::IVApplicationPtr MSVISIO::IVOLEObject::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1404)
inline MSVISIO::IVShapePtr MSVISIO::IVOLEObject::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1405)
inline short MSVISIO::IVOLEObject::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline short MSVISIO::IVOLEObject::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1407)
inline _bstr_t MSVISIO::IVOLEObject::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1408)
inline _bstr_t MSVISIO::IVOLEObject::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1409)
inline short MSVISIO::IVOLEObject::GetForeignType ( ) {
    short _result = 0;
    HRESULT _hr = get_ForeignType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1410)
inline IDispatchPtr MSVISIO::IVOLEObject::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVOLEObjects wrapper method implementations
//

#pragma implementation_key(1411)
inline MSVISIO::IVApplicationPtr MSVISIO::IVOLEObjects::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1412)
inline short MSVISIO::IVOLEObjects::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1413)
inline short MSVISIO::IVOLEObjects::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1414)
inline MSVISIO::IVOLEObjectPtr MSVISIO::IVOLEObjects::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVOLEObject * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectPtr(_result, false);
}

#pragma implementation_key(1415)
inline short MSVISIO::IVOLEObjects::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1416)
inline long MSVISIO::IVOLEObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline IUnknownPtr MSVISIO::IVOLEObjects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVHyperlink wrapper method implementations
//

#pragma implementation_key(1418)
inline _bstr_t MSVISIO::IVHyperlink::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1419)
inline void MSVISIO::IVHyperlink::PutDescription ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Description(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline MSVISIO::IVApplicationPtr MSVISIO::IVHyperlink::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1421)
inline MSVISIO::IVShapePtr MSVISIO::IVHyperlink::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1422)
inline short MSVISIO::IVHyperlink::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1423)
inline short MSVISIO::IVHyperlink::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1424)
inline _bstr_t MSVISIO::IVHyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1425)
inline void MSVISIO::IVHyperlink::PutAddress ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Address(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1426)
inline _bstr_t MSVISIO::IVHyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1427)
inline void MSVISIO::IVHyperlink::PutSubAddress ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_SubAddress(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline short MSVISIO::IVHyperlink::GetNewWindow ( ) {
    short _result = 0;
    HRESULT _hr = get_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1429)
inline void MSVISIO::IVHyperlink::PutNewWindow ( short lpi2Ret ) {
    HRESULT _hr = put_NewWindow(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1430)
inline _bstr_t MSVISIO::IVHyperlink::GetExtraInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ExtraInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1431)
inline void MSVISIO::IVHyperlink::PutExtraInfo ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_ExtraInfo(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1432)
inline _bstr_t MSVISIO::IVHyperlink::GetFrame ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Frame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1433)
inline void MSVISIO::IVHyperlink::PutFrame ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Frame(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1434)
inline HRESULT MSVISIO::IVHyperlink::AddToFavorites ( const _variant_t & FavoritesTitle ) {
    HRESULT _hr = raw_AddToFavorites(FavoritesTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1435)
inline HRESULT MSVISIO::IVHyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1436)
inline HRESULT MSVISIO::IVHyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1437)
inline HRESULT MSVISIO::IVHyperlink::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1438)
inline _bstr_t MSVISIO::IVHyperlink::CreateURL ( short CanonicalForm ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CreateURL(CanonicalForm, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1439)
inline short MSVISIO::IVHyperlink::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1440)
inline short MSVISIO::IVHyperlink::GetIsDefaultLink ( ) {
    short _result = 0;
    HRESULT _hr = get_IsDefaultLink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1441)
inline void MSVISIO::IVHyperlink::PutIsDefaultLink ( short lpi2Ret ) {
    HRESULT _hr = put_IsDefaultLink(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline _bstr_t MSVISIO::IVHyperlink::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1443)
inline void MSVISIO::IVHyperlink::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline _bstr_t MSVISIO::IVHyperlink::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void MSVISIO::IVHyperlink::PutNameU ( _bstr_t lpLocaleIndepenentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndepenentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVHyperlinks wrapper method implementations
//

#pragma implementation_key(1446)
inline MSVISIO::IVApplicationPtr MSVISIO::IVHyperlinks::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1447)
inline MSVISIO::IVShapePtr MSVISIO::IVHyperlinks::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1448)
inline short MSVISIO::IVHyperlinks::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1449)
inline short MSVISIO::IVHyperlinks::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1450)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVHyperlinks::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(1451)
inline short MSVISIO::IVHyperlinks::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1452)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVHyperlinks::Add ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(1453)
inline IUnknownPtr MSVISIO::IVHyperlinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1454)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVHyperlinks::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

//
// interface IVAmbients wrapper method implementations
//

#pragma implementation_key(1455)
inline long MSVISIO::IVAmbients::GetBackColor ( ) {
    long _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1456)
inline _bstr_t MSVISIO::IVAmbients::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1457)
inline IDispatchPtr MSVISIO::IVAmbients::GetFont ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1458)
inline long MSVISIO::IVAmbients::GetForeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1459)
inline long MSVISIO::IVAmbients::GetLocaleID ( ) {
    long _result = 0;
    HRESULT _hr = get_LocaleID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1460)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetMessageReflect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MessageReflect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1461)
inline _bstr_t MSVISIO::IVAmbients::GetScaleUnits ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScaleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1462)
inline short MSVISIO::IVAmbients::GetTextAlign ( ) {
    short _result = 0;
    HRESULT _hr = get_TextAlign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1463)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetUserMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1464)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetUIDead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UIDead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetShowGrabHandles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowGrabHandles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1466)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetShowHatching ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowHatching(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1467)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetDisplayAsDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayAsDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1468)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetSupportsMnemonics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SupportsMnemonics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline VARIANT_BOOL MSVISIO::IVAmbients::GetAutoClip ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoClip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1470)
inline long MSVISIO::IVAmbients::GetAppearance ( ) {
    long _result = 0;
    HRESULT _hr = get_Appearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline MSVISIO::IVShapePtr MSVISIO::IVAmbients::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

//
// interface IVClientSite wrapper method implementations
//

#pragma implementation_key(1472)
inline MSVISIO::IVShapePtr MSVISIO::IVClientSite::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

//
// interface IVCell wrapper method implementations
//

#pragma implementation_key(1473)
inline MSVISIO::IVApplicationPtr MSVISIO::IVCell::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1474)
inline short MSVISIO::IVCell::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1475)
inline short MSVISIO::IVCell::GetError ( ) {
    short _result = 0;
    HRESULT _hr = get_Error(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline _bstr_t MSVISIO::IVCell::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1477)
inline void MSVISIO::IVCell::PutFormula ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Formula(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1478)
inline void MSVISIO::IVCell::PutFormulaForce ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FormulaForce(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline HRESULT MSVISIO::IVCell::GlueTo ( struct IVCell * CellObject ) {
    HRESULT _hr = raw_GlueTo(CellObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1480)
inline HRESULT MSVISIO::IVCell::GlueToPos ( struct IVShape * SheetObject, double xPercent, double yPercent ) {
    HRESULT _hr = raw_GlueToPos(SheetObject, xPercent, yPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1481)
inline double MSVISIO::IVCell::GetResult ( const _variant_t & UnitsNameOrCode ) {
    double _result = 0;
    HRESULT _hr = get_Result(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1482)
inline void MSVISIO::IVCell::PutResult ( const _variant_t & UnitsNameOrCode, double lpr8Ret ) {
    HRESULT _hr = put_Result(UnitsNameOrCode, lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline void MSVISIO::IVCell::PutResultForce ( const _variant_t & UnitsNameOrCode, double _arg2 ) {
    HRESULT _hr = put_ResultForce(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1484)
inline double MSVISIO::IVCell::GetResultIU ( ) {
    double _result = 0;
    HRESULT _hr = get_ResultIU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline void MSVISIO::IVCell::PutResultIU ( double lpr8Ret ) {
    HRESULT _hr = put_ResultIU(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline void MSVISIO::IVCell::PutResultIUForce ( double _arg1 ) {
    HRESULT _hr = put_ResultIUForce(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline short MSVISIO::IVCell::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline short MSVISIO::IVCell::GetUnits ( ) {
    short _result = 0;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline _bstr_t MSVISIO::IVCell::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1490)
inline _bstr_t MSVISIO::IVCell::GetLocalName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LocalName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1491)
inline void MSVISIO::IVCell::PutRowName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_RowName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1492)
inline MSVISIO::IVDocumentPtr MSVISIO::IVCell::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1493)
inline MSVISIO::IVShapePtr MSVISIO::IVCell::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1494)
inline MSVISIO::IVStylePtr MSVISIO::IVCell::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1495)
inline short MSVISIO::IVCell::GetSection ( ) {
    short _result = 0;
    HRESULT _hr = get_Section(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1496)
inline short MSVISIO::IVCell::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline short MSVISIO::IVCell::GetColumn ( ) {
    short _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1498)
inline short MSVISIO::IVCell::GetIsConstant ( ) {
    short _result = 0;
    HRESULT _hr = get_IsConstant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline short MSVISIO::IVCell::GetIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_IsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline long MSVISIO::IVCell::GetResultInt ( const _variant_t & UnitsNameOrCode, short fRound ) {
    long _result = 0;
    HRESULT _hr = get_ResultInt(UnitsNameOrCode, fRound, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline void MSVISIO::IVCell::PutResultFromInt ( const _variant_t & UnitsNameOrCode, long _arg2 ) {
    HRESULT _hr = put_ResultFromInt(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1502)
inline void MSVISIO::IVCell::PutResultFromIntForce ( const _variant_t & UnitsNameOrCode, long _arg2 ) {
    HRESULT _hr = put_ResultFromIntForce(UnitsNameOrCode, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline _bstr_t MSVISIO::IVCell::GetResultStr ( const _variant_t & UnitsNameOrCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultStr(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1504)
inline HRESULT MSVISIO::IVCell::Trigger ( ) {
    HRESULT _hr = raw_Trigger();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1505)
inline _bstr_t MSVISIO::IVCell::GetRowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1506)
inline MSVISIO::IVEventListPtr MSVISIO::IVCell::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1507)
inline short MSVISIO::IVCell::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1508)
inline MSVISIO::IVRowPtr MSVISIO::IVCell::GetContainingRow ( ) {
    struct IVRow * _result = 0;
    HRESULT _hr = get_ContainingRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVRowPtr(_result, false);
}

#pragma implementation_key(1509)
inline _bstr_t MSVISIO::IVCell::GetFormulaU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1510)
inline void MSVISIO::IVCell::PutFormulaU ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FormulaU(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline void MSVISIO::IVCell::PutFormulaForceU ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FormulaForceU(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1512)
inline _bstr_t MSVISIO::IVCell::GetRowNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RowNameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1513)
inline void MSVISIO::IVCell::PutRowNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_RowNameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1514)
inline MSVISIO::IVCellPtr MSVISIO::IVCell::GetInheritedValueSource ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_InheritedValueSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1515)
inline MSVISIO::IVCellPtr MSVISIO::IVCell::GetInheritedFormulaSource ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_InheritedFormulaSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1516)
inline SAFEARRAY * MSVISIO::IVCell::GetDependents ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Dependents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline SAFEARRAY * MSVISIO::IVCell::GetPrecedents ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Precedents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1518)
inline long MSVISIO::IVCell::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline long MSVISIO::IVCell::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline _bstr_t MSVISIO::IVCell::GetResultStrU ( const _variant_t & UnitsNameOrCode ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultStrU(UnitsNameOrCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IVConnect wrapper method implementations
//

#pragma implementation_key(1521)
inline MSVISIO::IVApplicationPtr MSVISIO::IVConnect::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1522)
inline short MSVISIO::IVConnect::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1523)
inline MSVISIO::IVShapePtr MSVISIO::IVConnect::GetFromSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_FromSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1524)
inline MSVISIO::IVShapePtr MSVISIO::IVConnect::GetToSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ToSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1525)
inline MSVISIO::IVCellPtr MSVISIO::IVConnect::GetFromCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_FromCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1526)
inline MSVISIO::IVCellPtr MSVISIO::IVConnect::GetToCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_ToCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1527)
inline short MSVISIO::IVConnect::GetFromPart ( ) {
    short _result = 0;
    HRESULT _hr = get_FromPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline short MSVISIO::IVConnect::GetToPart ( ) {
    short _result = 0;
    HRESULT _hr = get_ToPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1529)
inline short MSVISIO::IVConnect::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1530)
inline short MSVISIO::IVConnect::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline MSVISIO::IVDocumentPtr MSVISIO::IVConnect::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1532)
inline long MSVISIO::IVConnect::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1533)
inline long MSVISIO::IVConnect::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline long MSVISIO::IVConnect::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVConnects wrapper method implementations
//

#pragma implementation_key(1535)
inline MSVISIO::IVApplicationPtr MSVISIO::IVConnects::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1536)
inline MSVISIO::IVConnectPtr MSVISIO::IVConnects::GetItem16 ( short Index ) {
    struct IVConnect * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectPtr(_result, false);
}

#pragma implementation_key(1537)
inline short MSVISIO::IVConnects::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1538)
inline MSVISIO::IVShapePtr MSVISIO::IVConnects::GetFromSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_FromSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1539)
inline short MSVISIO::IVConnects::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1540)
inline MSVISIO::IVDocumentPtr MSVISIO::IVConnects::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1541)
inline short MSVISIO::IVConnects::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1542)
inline MSVISIO::IVShapePtr MSVISIO::IVConnects::GetToSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ToSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1543)
inline MSVISIO::IVConnectPtr MSVISIO::IVConnects::GetItem ( long Index ) {
    struct IVConnect * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectPtr(_result, false);
}

#pragma implementation_key(1544)
inline long MSVISIO::IVConnects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline IUnknownPtr MSVISIO::IVConnects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVStyle wrapper method implementations
//

#pragma implementation_key(1546)
inline MSVISIO::IVApplicationPtr MSVISIO::IVStyle::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1547)
inline short MSVISIO::IVStyle::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1548)
inline short MSVISIO::IVStyle::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1549)
inline _bstr_t MSVISIO::IVStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1550)
inline void MSVISIO::IVStyle::PutName ( _bstr_t localeSpecificCellName ) {
    HRESULT _hr = put_Name(localeSpecificCellName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1551)
inline short MSVISIO::IVStyle::GetIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Index16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline MSVISIO::IVDocumentPtr MSVISIO::IVStyle::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1553)
inline _bstr_t MSVISIO::IVStyle::GetBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1554)
inline void MSVISIO::IVStyle::PutBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_BasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1555)
inline _bstr_t MSVISIO::IVStyle::GetTextBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1556)
inline void MSVISIO::IVStyle::PutTextBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1557)
inline _bstr_t MSVISIO::IVStyle::GetLineBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1558)
inline void MSVISIO::IVStyle::PutLineBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1559)
inline _bstr_t MSVISIO::IVStyle::GetFillBasedOn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillBasedOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1560)
inline void MSVISIO::IVStyle::PutFillBasedOn ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillBasedOn(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1561)
inline short MSVISIO::IVStyle::GetIncludesText ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1562)
inline void MSVISIO::IVStyle::PutIncludesText ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesText(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1563)
inline short MSVISIO::IVStyle::GetIncludesLine ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1564)
inline void MSVISIO::IVStyle::PutIncludesLine ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesLine(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1565)
inline short MSVISIO::IVStyle::GetIncludesFill ( ) {
    short _result = 0;
    HRESULT _hr = get_IncludesFill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1566)
inline void MSVISIO::IVStyle::PutIncludesFill ( short lpi2Ret ) {
    HRESULT _hr = put_IncludesFill(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1567)
inline MSVISIO::IVCellPtr MSVISIO::IVStyle::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1568)
inline HRESULT MSVISIO::IVStyle::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1569)
inline MSVISIO::IVEventListPtr MSVISIO::IVStyle::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1570)
inline short MSVISIO::IVStyle::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline short MSVISIO::IVStyle::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1572)
inline HRESULT MSVISIO::IVStyle::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1573)
inline HRESULT MSVISIO::IVStyle::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1574)
inline short MSVISIO::IVStyle::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline short MSVISIO::IVStyle::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1576)
inline long MSVISIO::IVStyle::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline long MSVISIO::IVStyle::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1578)
inline MSVISIO::IVSectionPtr MSVISIO::IVStyle::GetSection ( short Index ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_Section(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

#pragma implementation_key(1579)
inline short MSVISIO::IVStyle::GetHidden ( ) {
    short _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline void MSVISIO::IVStyle::PutHidden ( short lpi2Ret ) {
    HRESULT _hr = put_Hidden(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1581)
inline _bstr_t MSVISIO::IVStyle::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1582)
inline void MSVISIO::IVStyle::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1583)
inline MSVISIO::IVCellPtr MSVISIO::IVStyle::GetCellsU ( _bstr_t localeIndependentCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsU(localeIndependentCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1584)
inline short MSVISIO::IVStyle::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline short MSVISIO::IVStyle::GetCellExistsU ( _bstr_t localeIndependentCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExistsU(localeIndependentCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1586)
inline HRESULT MSVISIO::IVStyle::GetFormulasU ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1587)
inline MSVISIO::IVCellPtr MSVISIO::IVStyle::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1588)
inline short MSVISIO::IVStyle::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVEventList wrapper method implementations
//

#pragma implementation_key(1589)
inline MSVISIO::IVApplicationPtr MSVISIO::IVEventList::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1590)
inline short MSVISIO::IVEventList::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1591)
inline MSVISIO::IVEventPtr MSVISIO::IVEventList::GetItem ( short Index ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

#pragma implementation_key(1592)
inline short MSVISIO::IVEventList::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline MSVISIO::IVEventPtr MSVISIO::IVEventList::Add ( short EventCode, short Action, _bstr_t Target, _bstr_t TargetArgs ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = raw_Add(EventCode, Action, Target, TargetArgs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

#pragma implementation_key(1594)
inline MSVISIO::IVEventPtr MSVISIO::IVEventList::AddAdvise ( short EventCode, const _variant_t & SinkIUnkOrIDisp, _bstr_t IIDSink, _bstr_t TargetArgs ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = raw_AddAdvise(EventCode, SinkIUnkOrIDisp, IIDSink, TargetArgs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

#pragma implementation_key(1595)
inline MSVISIO::IVEventPtr MSVISIO::IVEventList::GetItemFromID ( long ObjectID ) {
    struct IVEvent * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventPtr(_result, false);
}

#pragma implementation_key(1596)
inline IUnknownPtr MSVISIO::IVEventList::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVEvent wrapper method implementations
//

#pragma implementation_key(1597)
inline MSVISIO::IVApplicationPtr MSVISIO::IVEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1598)
inline MSVISIO::IVEventListPtr MSVISIO::IVEvent::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1599)
inline short MSVISIO::IVEvent::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1600)
inline short MSVISIO::IVEvent::GetEvent ( ) {
    short _result = 0;
    HRESULT _hr = get_Event(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1601)
inline void MSVISIO::IVEvent::PutEvent ( short lpi2Ret ) {
    HRESULT _hr = put_Event(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1602)
inline short MSVISIO::IVEvent::GetAction ( ) {
    short _result = 0;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline void MSVISIO::IVEvent::PutAction ( short lpi2Ret ) {
    HRESULT _hr = put_Action(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1604)
inline _bstr_t MSVISIO::IVEvent::GetTarget ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1605)
inline void MSVISIO::IVEvent::PutTarget ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Target(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1606)
inline _bstr_t MSVISIO::IVEvent::GetTargetArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1607)
inline void MSVISIO::IVEvent::PutTargetArgs ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetArgs(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1608)
inline HRESULT MSVISIO::IVEvent::Trigger ( _bstr_t ContextString ) {
    HRESULT _hr = raw_Trigger(ContextString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1609)
inline HRESULT MSVISIO::IVEvent::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1610)
inline short MSVISIO::IVEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline long MSVISIO::IVEvent::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1612)
inline short MSVISIO::IVEvent::GetEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1613)
inline void MSVISIO::IVEvent::PutEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_Enabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1614)
inline short MSVISIO::IVEvent::GetPersistable ( ) {
    short _result = 0;
    HRESULT _hr = get_Persistable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline short MSVISIO::IVEvent::GetPersistent ( ) {
    short _result = 0;
    HRESULT _hr = get_Persistent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1616)
inline void MSVISIO::IVEvent::PutPersistent ( short lpi2Ret ) {
    HRESULT _hr = put_Persistent(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1617)
inline SAFEARRAY * MSVISIO::IVEvent::GetFilterObjects ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1618)
inline HRESULT MSVISIO::IVEvent::SetFilterObjects ( SAFEARRAY * * Objects ) {
    HRESULT _hr = raw_SetFilterObjects(Objects);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1619)
inline SAFEARRAY * MSVISIO::IVEvent::GetFilterCommands ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterCommands(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1620)
inline HRESULT MSVISIO::IVEvent::SetFilterCommands ( SAFEARRAY * * Commands ) {
    HRESULT _hr = raw_SetFilterCommands(Commands);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1621)
inline SAFEARRAY * MSVISIO::IVEvent::GetFilterSRC ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterSRC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1622)
inline HRESULT MSVISIO::IVEvent::SetFilterSRC ( SAFEARRAY * * SRCStream ) {
    HRESULT _hr = raw_SetFilterSRC(SRCStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1623)
inline SAFEARRAY * MSVISIO::IVEvent::GetFilterActions ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetFilterActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1624)
inline HRESULT MSVISIO::IVEvent::SetFilterActions ( SAFEARRAY * * filterActionStream ) {
    HRESULT _hr = raw_SetFilterActions(filterActionStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVCharacters wrapper method implementations
//

#pragma implementation_key(1625)
inline HRESULT MSVISIO::IVCharacters::AddCustomField ( _bstr_t Formula, short Format ) {
    HRESULT _hr = raw_AddCustomField(Formula, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1626)
inline HRESULT MSVISIO::IVCharacters::AddField ( short Category, short Code, short Format ) {
    HRESULT _hr = raw_AddField(Category, Code, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1627)
inline MSVISIO::IVApplicationPtr MSVISIO::IVCharacters::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1628)
inline long MSVISIO::IVCharacters::GetBegin ( ) {
    long _result = 0;
    HRESULT _hr = get_Begin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline void MSVISIO::IVCharacters::PutBegin ( long lpi4Ret ) {
    HRESULT _hr = put_Begin(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1630)
inline long MSVISIO::IVCharacters::GetCharCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CharCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1631)
inline void MSVISIO::IVCharacters::PutCharProps ( short CellIndex, short _arg2 ) {
    HRESULT _hr = put_CharProps(CellIndex, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1632)
inline short MSVISIO::IVCharacters::GetCharPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_CharPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1633)
inline HRESULT MSVISIO::IVCharacters::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1634)
inline HRESULT MSVISIO::IVCharacters::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1635)
inline short MSVISIO::IVCharacters::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1636)
inline long MSVISIO::IVCharacters::GetEnd ( ) {
    long _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline void MSVISIO::IVCharacters::PutEnd ( long lpi4Ret ) {
    HRESULT _hr = put_End(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1638)
inline short MSVISIO::IVCharacters::GetFieldCategory ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldCategory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1639)
inline short MSVISIO::IVCharacters::GetFieldCode ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1640)
inline short MSVISIO::IVCharacters::GetFieldFormat ( ) {
    short _result = 0;
    HRESULT _hr = get_FieldFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline _bstr_t MSVISIO::IVCharacters::GetFieldFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1642)
inline short MSVISIO::IVCharacters::GetIsField ( ) {
    short _result = 0;
    HRESULT _hr = get_IsField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1643)
inline void MSVISIO::IVCharacters::PutParaProps ( short CellIndex, short _arg2 ) {
    HRESULT _hr = put_ParaProps(CellIndex, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1644)
inline short MSVISIO::IVCharacters::GetParaPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_ParaPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline HRESULT MSVISIO::IVCharacters::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1646)
inline short MSVISIO::IVCharacters::GetTabPropsRow ( short BiasLorR ) {
    short _result = 0;
    HRESULT _hr = get_TabPropsRow(BiasLorR, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1647)
inline long MSVISIO::IVCharacters::GetRunBegin ( short RunType ) {
    long _result = 0;
    HRESULT _hr = get_RunBegin(RunType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline long MSVISIO::IVCharacters::GetRunEnd ( short RunType ) {
    long _result = 0;
    HRESULT _hr = get_RunEnd(RunType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1649)
inline MSVISIO::IVShapePtr MSVISIO::IVCharacters::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1650)
inline short MSVISIO::IVCharacters::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline _bstr_t MSVISIO::IVCharacters::GetTextAsString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextAsString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1652)
inline void MSVISIO::IVCharacters::PutText ( const _variant_t & lpvarRet ) {
    HRESULT _hr = put_Text(lpvarRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1653)
inline MSVISIO::IVDocumentPtr MSVISIO::IVCharacters::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1654)
inline MSVISIO::IVEventListPtr MSVISIO::IVCharacters::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1655)
inline short MSVISIO::IVCharacters::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1656)
inline _variant_t MSVISIO::IVCharacters::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1657)
inline HRESULT MSVISIO::IVCharacters::AddCustomFieldU ( _bstr_t Formula, short Format ) {
    HRESULT _hr = raw_AddCustomFieldU(Formula, Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1658)
inline _bstr_t MSVISIO::IVCharacters::GetFieldFormulaU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FieldFormulaU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1659)
inline HRESULT MSVISIO::IVCharacters::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1660)
inline HRESULT MSVISIO::IVCharacters::AddFieldEx ( enum VisFieldCategories Category, enum VisFieldCodes Code, enum VisFieldFormats Format, long LangID, long CalendarID ) {
    HRESULT _hr = raw_AddFieldEx(Category, Code, Format, LangID, CalendarID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline long MSVISIO::IVCharacters::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1662)
inline long MSVISIO::IVCharacters::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVStyles wrapper method implementations
//

#pragma implementation_key(1663)
inline MSVISIO::IVApplicationPtr MSVISIO::IVStyles::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1664)
inline short MSVISIO::IVStyles::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1665)
inline MSVISIO::IVStylePtr MSVISIO::IVStyles::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1666)
inline short MSVISIO::IVStyles::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline MSVISIO::IVDocumentPtr MSVISIO::IVStyles::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1668)
inline MSVISIO::IVStylePtr MSVISIO::IVStyles::Add ( _bstr_t StyleName, _bstr_t BasedOn, short fIncludesText, short fIncludesLine, short fIncludesFill ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = raw_Add(StyleName, BasedOn, fIncludesText, fIncludesLine, fIncludesFill, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1669)
inline short MSVISIO::IVStyles::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline MSVISIO::IVEventListPtr MSVISIO::IVStyles::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1671)
inline short MSVISIO::IVStyles::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline MSVISIO::IVStylePtr MSVISIO::IVStyles::GetItemFromID16 ( short ObjectID ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemFromID16(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1673)
inline HRESULT MSVISIO::IVStyles::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1674)
inline long MSVISIO::IVStyles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1675)
inline MSVISIO::IVStylePtr MSVISIO::IVStyles::GetItemFromID ( long ObjectID ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1676)
inline MSVISIO::IVStylePtr MSVISIO::IVStyles::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1677)
inline HRESULT MSVISIO::IVStyles::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1678)
inline IUnknownPtr MSVISIO::IVStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVDocuments wrapper method implementations
//

#pragma implementation_key(1679)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::Add ( _bstr_t FileName ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1680)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::Open ( _bstr_t FileName ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_Open(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1681)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDocuments::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1682)
inline short MSVISIO::IVDocuments::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1683)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1684)
inline short MSVISIO::IVDocuments::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1685)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::OpenEx ( _bstr_t FileName, short Flags ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_OpenEx(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1686)
inline MSVISIO::IVEventListPtr MSVISIO::IVDocuments::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1687)
inline short MSVISIO::IVDocuments::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline HRESULT MSVISIO::IVDocuments::GetNames ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_GetNames(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1689)
inline IUnknownPtr MSVISIO::IVDocuments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1690)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::GetItemFromID ( long ObjectID ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ItemFromID(ObjectID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1691)
inline VARIANT_BOOL MSVISIO::IVDocuments::CanCheckOut ( _bstr_t FileName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CanCheckOut(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline HRESULT MSVISIO::IVDocuments::CheckOut ( _bstr_t FileName ) {
    HRESULT _hr = raw_CheckOut(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1693)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDocuments::AddEx ( _bstr_t FileName, enum VisMeasurementSystem MeasurementSystem, long Flags, long LangID ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = raw_AddEx(FileName, MeasurementSystem, Flags, LangID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

//
// interface IVSection wrapper method implementations
//

#pragma implementation_key(1694)
inline MSVISIO::IVApplicationPtr MSVISIO::IVSection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1695)
inline MSVISIO::IVShapePtr MSVISIO::IVSection::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1696)
inline MSVISIO::IVStylePtr MSVISIO::IVSection::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1697)
inline short MSVISIO::IVSection::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline short MSVISIO::IVSection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1699)
inline MSVISIO::IVEventListPtr MSVISIO::IVSection::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1700)
inline short MSVISIO::IVSection::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1701)
inline short MSVISIO::IVSection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline short MSVISIO::IVSection::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1703)
inline MSVISIO::IVRowPtr MSVISIO::IVSection::GetRow ( short Index ) {
    struct IVRow * _result = 0;
    HRESULT _hr = get_Row(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVRowPtr(_result, false);
}

#pragma implementation_key(1704)
inline long MSVISIO::IVSection::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline long MSVISIO::IVSection::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVRow wrapper method implementations
//

#pragma implementation_key(1706)
inline MSVISIO::IVApplicationPtr MSVISIO::IVRow::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1707)
inline MSVISIO::IVShapePtr MSVISIO::IVRow::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1708)
inline MSVISIO::IVStylePtr MSVISIO::IVRow::GetStyle ( ) {
    struct IVStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStylePtr(_result, false);
}

#pragma implementation_key(1709)
inline MSVISIO::IVSectionPtr MSVISIO::IVRow::GetContainingSection ( ) {
    struct IVSection * _result = 0;
    HRESULT _hr = get_ContainingSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSectionPtr(_result, false);
}

#pragma implementation_key(1710)
inline short MSVISIO::IVRow::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline short MSVISIO::IVRow::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1712)
inline MSVISIO::IVEventListPtr MSVISIO::IVRow::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1713)
inline short MSVISIO::IVRow::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline short MSVISIO::IVRow::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline _bstr_t MSVISIO::IVRow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1716)
inline void MSVISIO::IVRow::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline short MSVISIO::IVRow::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline MSVISIO::IVCellPtr MSVISIO::IVRow::GetCell ( const _variant_t & NameOrIndex ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cell(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1719)
inline _bstr_t MSVISIO::IVRow::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1720)
inline void MSVISIO::IVRow::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline MSVISIO::IVCellPtr MSVISIO::IVRow::GetCellU ( const _variant_t & NameOrIndex ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1722)
inline HRESULT MSVISIO::IVRow::GetPolylineData ( short Flags, SAFEARRAY * * xyArray ) {
    HRESULT _hr = raw_GetPolylineData(Flags, xyArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1723)
inline long MSVISIO::IVRow::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1724)
inline long MSVISIO::IVRow::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVPage wrapper method implementations
//

#pragma implementation_key(1725)
inline MSVISIO::IVDocumentPtr MSVISIO::IVPage::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1726)
inline MSVISIO::IVApplicationPtr MSVISIO::IVPage::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1727)
inline short MSVISIO::IVPage::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1728)
inline short MSVISIO::IVPage::GetBackground ( ) {
    short _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1729)
inline void MSVISIO::IVPage::PutBackground ( short lpi2Ret ) {
    HRESULT _hr = put_Background(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline HRESULT MSVISIO::IVPage::old_Paste ( ) {
    HRESULT _hr = raw_old_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1731)
inline HRESULT MSVISIO::IVPage::old_PasteSpecial ( short Format ) {
    HRESULT _hr = raw_old_PasteSpecial(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1732)
inline short MSVISIO::IVPage::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawLine ( double xBegin, double yBegin, double xEnd, double yEnd ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawLine(xBegin, yBegin, xEnd, yEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1734)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawRectangle ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRectangle(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1735)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawOval ( double x1, double y1, double x2, double y2 ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawOval(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1736)
inline short MSVISIO::IVPage::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline _bstr_t MSVISIO::IVPage::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1738)
inline void MSVISIO::IVPage::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1739)
inline MSVISIO::IVShapesPtr MSVISIO::IVPage::GetShapes ( ) {
    struct IVShapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapesPtr(_result, false);
}

#pragma implementation_key(1740)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::Drop ( IUnknown * ObjectToDrop, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1741)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::AddGuide ( short Type, double xPos, double yPos ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_AddGuide(Type, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1742)
inline MSVISIO::IVPagePtr MSVISIO::IVPage::GetBackPageAsObj ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_BackPageAsObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1743)
inline void MSVISIO::IVPage::PutBackPageFromName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_BackPageFromName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1744)
inline HRESULT MSVISIO::IVPage::Print ( ) {
    HRESULT _hr = raw_Print();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1745)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::Import ( _bstr_t FileName ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Import(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1746)
inline HRESULT MSVISIO::IVPage::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1747)
inline MSVISIO::IVLayersPtr MSVISIO::IVPage::GetLayers ( ) {
    struct IVLayers * _result = 0;
    HRESULT _hr = get_Layers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayersPtr(_result, false);
}

#pragma implementation_key(1748)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::GetPageSheet ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PageSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1749)
inline HRESULT MSVISIO::IVPage::Delete ( short fRenumberPages ) {
    HRESULT _hr = raw_Delete(fRenumberPages);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1750)
inline HRESULT MSVISIO::IVPage::CenterDrawing ( ) {
    HRESULT _hr = raw_CenterDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1751)
inline MSVISIO::IVEventListPtr MSVISIO::IVPage::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1752)
inline short MSVISIO::IVPage::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1753)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawSpline ( SAFEARRAY * * xyArray, double Tolerance, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawSpline(xyArray, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1754)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawBezier ( SAFEARRAY * * xyArray, short degree, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawBezier(xyArray, degree, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1755)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawPolyline ( SAFEARRAY * * xyArray, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawPolyline(xyArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1756)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::InsertFromFile ( _bstr_t FileName, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1757)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::InsertObject ( _bstr_t ClassOrProgID, short Flags ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_InsertObject(ClassOrProgID, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1758)
inline MSVISIO::IVWindowPtr MSVISIO::IVPage::OpenDrawWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenDrawWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(1759)
inline short MSVISIO::IVPage::DropMany ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropMany(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline HRESULT MSVISIO::IVPage::GetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1761)
inline HRESULT MSVISIO::IVPage::GetResults ( SAFEARRAY * * SID_SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1762)
inline short MSVISIO::IVPage::SetFormulas ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SID_SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1763)
inline short MSVISIO::IVPage::SetResults ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1764)
inline MSVISIO::IVConnectsPtr MSVISIO::IVPage::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(1765)
inline _variant_t MSVISIO::IVPage::GetBackPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BackPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1766)
inline void MSVISIO::IVPage::PutBackPage ( const _variant_t & lpobjRet ) {
    HRESULT _hr = put_BackPage(lpobjRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline HRESULT MSVISIO::IVPage::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1768)
inline HRESULT MSVISIO::IVPage::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1769)
inline short MSVISIO::IVPage::GetID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline MSVISIO::IVOLEObjectsPtr MSVISIO::IVPage::GetOLEObjects ( ) {
    struct IVOLEObjects * _result = 0;
    HRESULT _hr = get_OLEObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVOLEObjectsPtr(_result, false);
}

#pragma implementation_key(1771)
inline long MSVISIO::IVPage::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1772)
inline MSVISIO::IVSelectionPtr MSVISIO::IVPage::GetSpatialSearch ( double x, double y, short Relation, double Tolerance, short Flags ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_SpatialSearch(x, y, Relation, Tolerance, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1773)
inline _bstr_t MSVISIO::IVPage::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void MSVISIO::IVPage::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline short MSVISIO::IVPage::DropManyU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * xyArray, SAFEARRAY * * IDArray ) {
    short _result = 0;
    HRESULT _hr = raw_DropManyU(ObjectsToInstance, xyArray, IDArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline HRESULT MSVISIO::IVPage::GetFormulasU ( SAFEARRAY * * SID_SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulasU(SID_SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1777)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawNURBS ( short degree, short Flags, SAFEARRAY * * xyArray, SAFEARRAY * * knots, const _variant_t & weights ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawNURBS(degree, Flags, xyArray, knots, weights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1778)
inline IPictureDisp * MSVISIO::IVPage::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1779)
inline void MSVISIO::IVPage::PutIndex ( short lpi2Ret ) {
    HRESULT _hr = put_Index(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1780)
inline long MSVISIO::IVPage::GetPrintTileCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PrintTileCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1781)
inline HRESULT MSVISIO::IVPage::PrintTile ( long nTile ) {
    HRESULT _hr = raw_PrintTile(nTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1782)
inline HRESULT MSVISIO::IVPage::ResizeToFitContents ( ) {
    HRESULT _hr = raw_ResizeToFitContents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1783)
inline HRESULT MSVISIO::IVPage::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1784)
inline HRESULT MSVISIO::IVPage::PasteSpecial ( long Format, const _variant_t & Link, const _variant_t & DisplayAsIcon ) {
    HRESULT _hr = raw_PasteSpecial(Format, Link, DisplayAsIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1785)
inline MSVISIO::IVSelectionPtr MSVISIO::IVPage::CreateSelection ( enum VisSelectionTypes SelType, enum VisSelectMode IterationMode, const _variant_t & Data ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_CreateSelection(SelType, IterationMode, Data, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1786)
inline enum MSVISIO::VisPageTypes MSVISIO::IVPage::GetType ( ) {
    enum VisPageTypes _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawArcByThreePoints ( double xBegin, double yBegin, double xEnd, double yEnd, double xControl, double yControl ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawArcByThreePoints(xBegin, yBegin, xEnd, yEnd, xControl, yControl, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1788)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawQuarterArc ( double xBegin, double yBegin, double xEnd, double yEnd, enum VisArcSweepFlags SweepFlag ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawQuarterArc(xBegin, yBegin, xEnd, yEnd, SweepFlag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1789)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DrawCircularArc ( double xCenter, double yCenter, double Radius, double StartAngle, double EndAngle ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawCircularArc(xCenter, yCenter, Radius, StartAngle, EndAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1790)
inline long MSVISIO::IVPage::GetReviewerID ( ) {
    long _result = 0;
    HRESULT _hr = get_ReviewerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline MSVISIO::IVPagePtr MSVISIO::IVPage::GetOriginalPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_OriginalPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1792)
inline HRESULT MSVISIO::IVPage::GetShapesLinkedToData ( long DataRecordsetID, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetShapesLinkedToData(DataRecordsetID, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1793)
inline HRESULT MSVISIO::IVPage::GetShapesLinkedToDataRow ( long DataRecordsetID, long DataRowID, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetShapesLinkedToDataRow(DataRecordsetID, DataRowID, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1794)
inline HRESULT MSVISIO::IVPage::LinkShapesToDataRows ( long DataRecordsetID, SAFEARRAY * * DataRowIDs, SAFEARRAY * * ShapeIDs, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkShapesToDataRows(DataRecordsetID, DataRowIDs, ShapeIDs, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1795)
inline HRESULT MSVISIO::IVPage::ShapeIDsToUniqueIDs ( SAFEARRAY * * ShapeIDs, enum VisUniqueIDArgs UniqueIDArgs, SAFEARRAY * * GUIDs ) {
    HRESULT _hr = raw_ShapeIDsToUniqueIDs(ShapeIDs, UniqueIDArgs, GUIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1796)
inline HRESULT MSVISIO::IVPage::UniqueIDsToShapeIDs ( SAFEARRAY * * GUIDs, SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_UniqueIDsToShapeIDs(GUIDs, ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1797)
inline MSVISIO::IVShapePtr MSVISIO::IVPage::DropLinked ( IUnknown * ObjectToDrop, double x, double y, long DataRecordsetID, long DataRowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DropLinked(ObjectToDrop, x, y, DataRecordsetID, DataRowID, ApplyDataGraphicAfterLink, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1798)
inline long MSVISIO::IVPage::DropManyLinkedU ( SAFEARRAY * * ObjectsToInstance, SAFEARRAY * * XYs, long DataRecordsetID, SAFEARRAY * * DataRowIDs, VARIANT_BOOL ApplyDataGraphicAfterLink, SAFEARRAY * * ShapeIDs ) {
    long _result = 0;
    HRESULT _hr = raw_DropManyLinkedU(ObjectsToInstance, XYs, DataRecordsetID, DataRowIDs, ApplyDataGraphicAfterLink, ShapeIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1799)
inline _variant_t MSVISIO::IVPage::GetThemeColors ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ThemeColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1800)
inline void MSVISIO::IVPage::PutThemeColors ( const _variant_t & pVar ) {
    HRESULT _hr = put_ThemeColors(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1801)
inline _variant_t MSVISIO::IVPage::GetThemeEffects ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ThemeEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1802)
inline void MSVISIO::IVPage::PutThemeEffects ( const _variant_t & pVar ) {
    HRESULT _hr = put_ThemeEffects(pVar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVLayer wrapper method implementations
//

#pragma implementation_key(1803)
inline MSVISIO::IVApplicationPtr MSVISIO::IVLayer::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1804)
inline MSVISIO::IVDocumentPtr MSVISIO::IVLayer::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1805)
inline MSVISIO::IVPagePtr MSVISIO::IVLayer::GetPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1806)
inline MSVISIO::IVMasterPtr MSVISIO::IVLayer::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1807)
inline short MSVISIO::IVLayer::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline short MSVISIO::IVLayer::GetRow ( ) {
    short _result = 0;
    HRESULT _hr = get_Row(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline HRESULT MSVISIO::IVLayer::Add ( struct IVShape * SheetObject, short fPresMems ) {
    HRESULT _hr = raw_Add(SheetObject, fPresMems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1810)
inline HRESULT MSVISIO::IVLayer::Remove ( struct IVShape * SheetObject, short fPresMems ) {
    HRESULT _hr = raw_Remove(SheetObject, fPresMems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1811)
inline HRESULT MSVISIO::IVLayer::Delete ( short fDeleteShapes ) {
    HRESULT _hr = raw_Delete(fDeleteShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1812)
inline _bstr_t MSVISIO::IVLayer::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1813)
inline void MSVISIO::IVLayer::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1814)
inline MSVISIO::IVCellPtr MSVISIO::IVLayer::GetCellsC ( short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsC(Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(1815)
inline short MSVISIO::IVLayer::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1816)
inline short MSVISIO::IVLayer::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1817)
inline MSVISIO::IVEventListPtr MSVISIO::IVLayer::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1818)
inline short MSVISIO::IVLayer::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1819)
inline _bstr_t MSVISIO::IVLayer::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1820)
inline void MSVISIO::IVLayer::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVLayers wrapper method implementations
//

#pragma implementation_key(1821)
inline MSVISIO::IVApplicationPtr MSVISIO::IVLayers::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1822)
inline MSVISIO::IVDocumentPtr MSVISIO::IVLayers::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1823)
inline MSVISIO::IVPagePtr MSVISIO::IVLayers::GetPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1824)
inline MSVISIO::IVMasterPtr MSVISIO::IVLayers::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1825)
inline short MSVISIO::IVLayers::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1826)
inline MSVISIO::IVLayerPtr MSVISIO::IVLayers::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(1827)
inline MSVISIO::IVLayerPtr MSVISIO::IVLayers::Add ( _bstr_t LayerName ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = raw_Add(LayerName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(1828)
inline short MSVISIO::IVLayers::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1829)
inline short MSVISIO::IVLayers::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline MSVISIO::IVEventListPtr MSVISIO::IVLayers::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1831)
inline short MSVISIO::IVLayers::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1832)
inline MSVISIO::IVLayerPtr MSVISIO::IVLayers::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(1833)
inline IUnknownPtr MSVISIO::IVLayers::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVSelection wrapper method implementations
//

#pragma implementation_key(1834)
inline MSVISIO::IVApplicationPtr MSVISIO::IVSelection::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1835)
inline short MSVISIO::IVSelection::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline short MSVISIO::IVSelection::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1837)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::GetItem16 ( short Index ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item16(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1838)
inline short MSVISIO::IVSelection::GetCount16 ( ) {
    short _result = 0;
    HRESULT _hr = get_Count16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1839)
inline HRESULT MSVISIO::IVSelection::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1840)
inline MSVISIO::IVDocumentPtr MSVISIO::IVSelection::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1841)
inline MSVISIO::IVPagePtr MSVISIO::IVSelection::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1842)
inline MSVISIO::IVMasterPtr MSVISIO::IVSelection::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1843)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1844)
inline HRESULT MSVISIO::IVSelection::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1845)
inline HRESULT MSVISIO::IVSelection::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1846)
inline HRESULT MSVISIO::IVSelection::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1847)
inline HRESULT MSVISIO::IVSelection::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1848)
inline _bstr_t MSVISIO::IVSelection::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1849)
inline void MSVISIO::IVSelection::PutStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_Style(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1850)
inline void MSVISIO::IVSelection::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1851)
inline _bstr_t MSVISIO::IVSelection::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1852)
inline void MSVISIO::IVSelection::PutLineStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_LineStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline void MSVISIO::IVSelection::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1854)
inline _bstr_t MSVISIO::IVSelection::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1855)
inline void MSVISIO::IVSelection::PutFillStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_FillStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1856)
inline void MSVISIO::IVSelection::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1857)
inline _bstr_t MSVISIO::IVSelection::GetTextStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1858)
inline void MSVISIO::IVSelection::PutTextStyle ( _bstr_t lpLocaleSpecificStyleName ) {
    HRESULT _hr = put_TextStyle(lpLocaleSpecificStyleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1859)
inline void MSVISIO::IVSelection::PutTextStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_TextStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1860)
inline HRESULT MSVISIO::IVSelection::Combine ( ) {
    HRESULT _hr = raw_Combine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1861)
inline HRESULT MSVISIO::IVSelection::Fragment ( ) {
    HRESULT _hr = raw_Fragment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1862)
inline HRESULT MSVISIO::IVSelection::Intersect ( ) {
    HRESULT _hr = raw_Intersect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1863)
inline HRESULT MSVISIO::IVSelection::Subtract ( ) {
    HRESULT _hr = raw_Subtract();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1864)
inline HRESULT MSVISIO::IVSelection::Union ( ) {
    HRESULT _hr = raw_Union();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1865)
inline HRESULT MSVISIO::IVSelection::FlipHorizontal ( ) {
    HRESULT _hr = raw_FlipHorizontal();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1866)
inline HRESULT MSVISIO::IVSelection::FlipVertical ( ) {
    HRESULT _hr = raw_FlipVertical();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1867)
inline HRESULT MSVISIO::IVSelection::ReverseEnds ( ) {
    HRESULT _hr = raw_ReverseEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1868)
inline HRESULT MSVISIO::IVSelection::Rotate90 ( ) {
    HRESULT _hr = raw_Rotate90();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1869)
inline HRESULT MSVISIO::IVSelection::old_Copy ( ) {
    HRESULT _hr = raw_old_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1870)
inline HRESULT MSVISIO::IVSelection::old_Cut ( ) {
    HRESULT _hr = raw_old_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1871)
inline HRESULT MSVISIO::IVSelection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1872)
inline HRESULT MSVISIO::IVSelection::VoidDuplicate ( ) {
    HRESULT _hr = raw_VoidDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1873)
inline HRESULT MSVISIO::IVSelection::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1874)
inline HRESULT MSVISIO::IVSelection::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1875)
inline HRESULT MSVISIO::IVSelection::Ungroup ( ) {
    HRESULT _hr = raw_Ungroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1876)
inline HRESULT MSVISIO::IVSelection::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1877)
inline HRESULT MSVISIO::IVSelection::DeselectAll ( ) {
    HRESULT _hr = raw_DeselectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1878)
inline HRESULT MSVISIO::IVSelection::Select ( struct IVShape * SheetObject, short SelectAction ) {
    HRESULT _hr = raw_Select(SheetObject, SelectAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1879)
inline MSVISIO::IVEventListPtr MSVISIO::IVSelection::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1880)
inline short MSVISIO::IVSelection::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1881)
inline HRESULT MSVISIO::IVSelection::Trim ( ) {
    HRESULT _hr = raw_Trim();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1882)
inline HRESULT MSVISIO::IVSelection::Join ( ) {
    HRESULT _hr = raw_Join();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1883)
inline HRESULT MSVISIO::IVSelection::FitCurve ( double Tolerance, short Flags ) {
    HRESULT _hr = raw_FitCurve(Tolerance, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1884)
inline HRESULT MSVISIO::IVSelection::Layout ( ) {
    HRESULT _hr = raw_Layout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1885)
inline HRESULT MSVISIO::IVSelection::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1886)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::GetItem ( long Index ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1887)
inline long MSVISIO::IVSelection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1888)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::DrawRegion ( double Tolerance, short Flags, const _variant_t & x, const _variant_t & y, const _variant_t & ResultsMaster ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_DrawRegion(Tolerance, Flags, x, y, ResultsMaster, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1889)
inline IUnknownPtr MSVISIO::IVSelection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1890)
inline long MSVISIO::IVSelection::GetIterationMode ( ) {
    long _result = 0;
    HRESULT _hr = get_IterationMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1891)
inline void MSVISIO::IVSelection::PutIterationMode ( long lpi4Ret ) {
    HRESULT _hr = put_IterationMode(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1892)
inline short MSVISIO::IVSelection::GetItemStatus ( long Index ) {
    short _result = 0;
    HRESULT _hr = get_ItemStatus(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1893)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::GetPrimaryItem ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_PrimaryItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1894)
inline IPictureDisp * MSVISIO::IVSelection::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1895)
inline MSVISIO::IVShapePtr MSVISIO::IVSelection::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(1896)
inline HRESULT MSVISIO::IVSelection::SwapEnds ( ) {
    HRESULT _hr = raw_SwapEnds();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1897)
inline HRESULT MSVISIO::IVSelection::AddToGroup ( ) {
    HRESULT _hr = raw_AddToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1898)
inline HRESULT MSVISIO::IVSelection::RemoveFromGroup ( ) {
    HRESULT _hr = raw_RemoveFromGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1899)
inline MSVISIO::IVSelectionPtr MSVISIO::IVSelection::Duplicate ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1900)
inline HRESULT MSVISIO::IVSelection::Copy ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Copy(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1901)
inline HRESULT MSVISIO::IVSelection::Cut ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Cut(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1902)
inline HRESULT MSVISIO::IVSelection::Move ( double dx, double dy, const _variant_t & UnitsNameOrCode ) {
    HRESULT _hr = raw_Move(dx, dy, UnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1903)
inline HRESULT MSVISIO::IVSelection::Rotate ( double Angle, const _variant_t & AngleUnitsNameOrCode, VARIANT_BOOL BlastGuards, enum VisRotationTypes RotationType, double PinX, double PinY, const _variant_t & PinUnitsNameOrCode ) {
    HRESULT _hr = raw_Rotate(Angle, AngleUnitsNameOrCode, BlastGuards, RotationType, PinX, PinY, PinUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1904)
inline HRESULT MSVISIO::IVSelection::Align ( enum VisHorizontalAlignTypes AlignHorizontal, enum VisVerticalAlignTypes AlignVertical, VARIANT_BOOL GlueToGuide ) {
    HRESULT _hr = raw_Align(AlignHorizontal, AlignVertical, GlueToGuide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1905)
inline HRESULT MSVISIO::IVSelection::Distribute ( enum VisDistributeTypes Distribute, VARIANT_BOOL GlueToGuide ) {
    HRESULT _hr = raw_Distribute(Distribute, GlueToGuide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1906)
inline HRESULT MSVISIO::IVSelection::UpdateAlignmentBox ( ) {
    HRESULT _hr = raw_UpdateAlignmentBox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1907)
inline HRESULT MSVISIO::IVSelection::Offset ( double Distance ) {
    HRESULT _hr = raw_Offset(Distance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1908)
inline HRESULT MSVISIO::IVSelection::ConnectShapes ( ) {
    HRESULT _hr = raw_ConnectShapes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1909)
inline HRESULT MSVISIO::IVSelection::Flip ( enum VisFlipDirection FlipDirection, enum VisFlipTypes FlipType, VARIANT_BOOL BlastGuards, double PinX, double PinY, const _variant_t & PinUnitsNameOrCode ) {
    HRESULT _hr = raw_Flip(FlipDirection, FlipType, BlastGuards, PinX, PinY, PinUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1910)
inline long MSVISIO::IVSelection::GetContainingPageID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingPageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1911)
inline long MSVISIO::IVSelection::GetContainingMasterID ( ) {
    long _result = 0;
    HRESULT _hr = get_ContainingMasterID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1912)
inline HRESULT MSVISIO::IVSelection::LinkToData ( long DataRecordsetID, long DataRowID, VARIANT_BOOL ApplyDataGraphicAfterLink ) {
    HRESULT _hr = raw_LinkToData(DataRecordsetID, DataRowID, ApplyDataGraphicAfterLink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1913)
inline HRESULT MSVISIO::IVSelection::BreakLinkToData ( long DataRecordsetID ) {
    HRESULT _hr = raw_BreakLinkToData(DataRecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1914)
inline HRESULT MSVISIO::IVSelection::GetIDs ( SAFEARRAY * * ShapeIDs ) {
    HRESULT _hr = raw_GetIDs(ShapeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1915)
inline long MSVISIO::IVSelection::AutomaticLink ( long DataRecordsetID, SAFEARRAY * * ColumnNames, SAFEARRAY * * AutoLinkFieldTypes, SAFEARRAY * * FieldNames, long AutoLinkBehavior, SAFEARRAY * * ShapeIDs ) {
    long _result = 0;
    HRESULT _hr = raw_AutomaticLink(DataRecordsetID, ColumnNames, AutoLinkFieldTypes, FieldNames, AutoLinkBehavior, ShapeIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1916)
inline MSVISIO::IVMasterPtr MSVISIO::IVSelection::GetDataGraphic ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_DataGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(1917)
inline void MSVISIO::IVSelection::PutDataGraphic ( struct IVMaster * DataGraphic ) {
    HRESULT _hr = put_DataGraphic(DataGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVPages wrapper method implementations
//

#pragma implementation_key(1918)
inline MSVISIO::IVApplicationPtr MSVISIO::IVPages::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1919)
inline short MSVISIO::IVPages::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1920)
inline MSVISIO::IVPagePtr MSVISIO::IVPages::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1921)
inline short MSVISIO::IVPages::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1922)
inline MSVISIO::IVPagePtr MSVISIO::IVPages::Add ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1923)
inline MSVISIO::IVDocumentPtr MSVISIO::IVPages::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1924)
inline short MSVISIO::IVPages::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1925)
inline MSVISIO::IVEventListPtr MSVISIO::IVPages::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1926)
inline short MSVISIO::IVPages::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1927)
inline HRESULT MSVISIO::IVPages::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1928)
inline MSVISIO::IVPagePtr MSVISIO::IVPages::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1929)
inline HRESULT MSVISIO::IVPages::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1930)
inline IUnknownPtr MSVISIO::IVPages::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1931)
inline MSVISIO::IVPagePtr MSVISIO::IVPages::GetItemFromID ( long nID ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

//
// interface IVWindow wrapper method implementations
//

#pragma implementation_key(1932)
inline MSVISIO::IVApplicationPtr MSVISIO::IVWindow::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(1933)
inline short MSVISIO::IVWindow::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1934)
inline short MSVISIO::IVWindow::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline HRESULT MSVISIO::IVWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1936)
inline short MSVISIO::IVWindow::GetType ( ) {
    short _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1937)
inline MSVISIO::IVDocumentPtr MSVISIO::IVWindow::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(1938)
inline MSVISIO::IVPagePtr MSVISIO::IVWindow::GetPageAsObj ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_PageAsObj(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(1939)
inline void MSVISIO::IVWindow::PutPageFromName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_PageFromName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1940)
inline double MSVISIO::IVWindow::GetZoom ( ) {
    double _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1941)
inline void MSVISIO::IVWindow::PutZoom ( double lpr8Ret ) {
    HRESULT _hr = put_Zoom(lpr8Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1942)
inline HRESULT MSVISIO::IVWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1943)
inline HRESULT MSVISIO::IVWindow::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1944)
inline HRESULT MSVISIO::IVWindow::DeselectAll ( ) {
    HRESULT _hr = raw_DeselectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1945)
inline MSVISIO::IVSelectionPtr MSVISIO::IVWindow::GetSelection ( ) {
    struct IVSelection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVSelectionPtr(_result, false);
}

#pragma implementation_key(1946)
inline HRESULT MSVISIO::IVWindow::Select ( struct IVShape * SheetObject, short SelectAction ) {
    HRESULT _hr = raw_Select(SheetObject, SelectAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1947)
inline short MSVISIO::IVWindow::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1948)
inline HRESULT MSVISIO::IVWindow::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1949)
inline HRESULT MSVISIO::IVWindow::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1950)
inline HRESULT MSVISIO::IVWindow::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1951)
inline HRESULT MSVISIO::IVWindow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1952)
inline HRESULT MSVISIO::IVWindow::Duplicate ( ) {
    HRESULT _hr = raw_Duplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1953)
inline HRESULT MSVISIO::IVWindow::Group ( ) {
    HRESULT _hr = raw_Group();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1954)
inline HRESULT MSVISIO::IVWindow::Union ( ) {
    HRESULT _hr = raw_Union();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1955)
inline HRESULT MSVISIO::IVWindow::Combine ( ) {
    HRESULT _hr = raw_Combine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1956)
inline HRESULT MSVISIO::IVWindow::Fragment ( ) {
    HRESULT _hr = raw_Fragment();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1957)
inline HRESULT MSVISIO::IVWindow::AddToGroup ( ) {
    HRESULT _hr = raw_AddToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1958)
inline HRESULT MSVISIO::IVWindow::RemoveFromGroup ( ) {
    HRESULT _hr = raw_RemoveFromGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1959)
inline short MSVISIO::IVWindow::GetSubType ( ) {
    short _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1960)
inline HRESULT MSVISIO::IVWindow::Intersect ( ) {
    HRESULT _hr = raw_Intersect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1961)
inline HRESULT MSVISIO::IVWindow::Subtract ( ) {
    HRESULT _hr = raw_Subtract();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1962)
inline MSVISIO::IVEventListPtr MSVISIO::IVWindow::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(1963)
inline short MSVISIO::IVWindow::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline short MSVISIO::IVWindow::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1965)
inline long MSVISIO::IVWindow::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline HRESULT MSVISIO::IVWindow::Trim ( ) {
    HRESULT _hr = raw_Trim();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1967)
inline HRESULT MSVISIO::IVWindow::Join ( ) {
    HRESULT _hr = raw_Join();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1968)
inline short MSVISIO::IVWindow::GetShowRulers ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowRulers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline void MSVISIO::IVWindow::PutShowRulers ( short lpi2Ret ) {
    HRESULT _hr = put_ShowRulers(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1970)
inline short MSVISIO::IVWindow::GetShowGrid ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1971)
inline void MSVISIO::IVWindow::PutShowGrid ( short lpi2Ret ) {
    HRESULT _hr = put_ShowGrid(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1972)
inline short MSVISIO::IVWindow::GetShowGuides ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowGuides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1973)
inline void MSVISIO::IVWindow::PutShowGuides ( short lpi2Ret ) {
    HRESULT _hr = put_ShowGuides(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1974)
inline short MSVISIO::IVWindow::GetShowConnectPoints ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowConnectPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1975)
inline void MSVISIO::IVWindow::PutShowConnectPoints ( short lpi2Ret ) {
    HRESULT _hr = put_ShowConnectPoints(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1976)
inline short MSVISIO::IVWindow::GetShowPageBreaks ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1977)
inline void MSVISIO::IVWindow::PutShowPageBreaks ( short lpi2Ret ) {
    HRESULT _hr = put_ShowPageBreaks(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1978)
inline _variant_t MSVISIO::IVWindow::GetPage ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Page(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1979)
inline void MSVISIO::IVWindow::PutPage ( const _variant_t & lpobjRet ) {
    HRESULT _hr = put_Page(lpobjRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1980)
inline HRESULT MSVISIO::IVWindow::DockedStencils ( SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_DockedStencils(NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1981)
inline _variant_t MSVISIO::IVWindow::GetMaster ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1982)
inline short MSVISIO::IVWindow::GetShowScrollBars ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowScrollBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void MSVISIO::IVWindow::PutShowScrollBars ( short lpi2Ret ) {
    HRESULT _hr = put_ShowScrollBars(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline VARIANT_BOOL MSVISIO::IVWindow::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1985)
inline void MSVISIO::IVWindow::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline _bstr_t MSVISIO::IVWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1987)
inline void MSVISIO::IVWindow::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1988)
inline MSVISIO::IVWindowsPtr MSVISIO::IVWindow::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

#pragma implementation_key(1989)
inline HRESULT MSVISIO::IVWindow::Scroll ( long nxFlags, long nyFlags ) {
    HRESULT _hr = raw_Scroll(nxFlags, nyFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1990)
inline HRESULT MSVISIO::IVWindow::ScrollViewTo ( double x, double y ) {
    HRESULT _hr = raw_ScrollViewTo(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1991)
inline HRESULT MSVISIO::IVWindow::GetViewRect ( double * pdLeft, double * pdTop, double * pdWidth, double * pdHeight ) {
    HRESULT _hr = raw_GetViewRect(pdLeft, pdTop, pdWidth, pdHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1992)
inline HRESULT MSVISIO::IVWindow::SetViewRect ( double dLeft, double dTop, double dWidth, double dHeight ) {
    HRESULT _hr = raw_SetViewRect(dLeft, dTop, dWidth, dHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1993)
inline HRESULT MSVISIO::IVWindow::GetWindowRect ( long * pnLeft, long * pnTop, long * pnWidth, long * pnHeight ) {
    HRESULT _hr = raw_GetWindowRect(pnLeft, pnTop, pnWidth, pnHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1994)
inline HRESULT MSVISIO::IVWindow::SetWindowRect ( long nLeft, long nTop, long nWidth, long nHeight ) {
    HRESULT _hr = raw_SetWindowRect(nLeft, nTop, nWidth, nHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1995)
inline long MSVISIO::IVWindow::GetWindowState ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1996)
inline void MSVISIO::IVWindow::PutWindowState ( long pnState ) {
    HRESULT _hr = put_WindowState(pnState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1997)
inline long MSVISIO::IVWindow::GetViewFit ( ) {
    long _result = 0;
    HRESULT _hr = get_ViewFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1998)
inline void MSVISIO::IVWindow::PutViewFit ( long pnFit ) {
    HRESULT _hr = put_ViewFit(pnFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1999)
inline VARIANT_BOOL MSVISIO::IVWindow::GetIsEditingText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditingText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2000)
inline VARIANT_BOOL MSVISIO::IVWindow::GetIsEditingOLE ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditingOLE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2001)
inline MSVISIO::IVWindowsPtr MSVISIO::IVWindow::GetParent ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

#pragma implementation_key(2002)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVWindow::GetMasterShortcut ( ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_MasterShortcut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(2003)
inline long MSVISIO::IVWindow::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2004)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindow::GetParentWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ParentWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2005)
inline _bstr_t MSVISIO::IVWindow::GetMergeID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2006)
inline _bstr_t MSVISIO::IVWindow::GetMergeClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2007)
inline long MSVISIO::IVWindow::GetMergePosition ( ) {
    long _result = 0;
    HRESULT _hr = get_MergePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2008)
inline VARIANT_BOOL MSVISIO::IVWindow::GetAllowEditing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2009)
inline void MSVISIO::IVWindow::PutAllowEditing ( VARIANT_BOOL pbAllowEditing ) {
    HRESULT _hr = put_AllowEditing(pbAllowEditing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2010)
inline double MSVISIO::IVWindow::GetPageTabWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_PageTabWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2011)
inline void MSVISIO::IVWindow::PutPageTabWidth ( double pdWidth ) {
    HRESULT _hr = put_PageTabWidth(pdWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2012)
inline VARIANT_BOOL MSVISIO::IVWindow::GetShowPageTabs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPageTabs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2013)
inline void MSVISIO::IVWindow::PutShowPageTabs ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_ShowPageTabs(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2014)
inline void MSVISIO::IVWindow::PutMergeID ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeID(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2015)
inline void MSVISIO::IVWindow::PutMergeClass ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeClass(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2016)
inline void MSVISIO::IVWindow::PutMergePosition ( long pnRet ) {
    HRESULT _hr = put_MergePosition(pnRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2017)
inline VARIANT_BOOL MSVISIO::IVWindow::GetInPlace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InPlace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2018)
inline _bstr_t MSVISIO::IVWindow::GetMergeCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MergeCaption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2019)
inline void MSVISIO::IVWindow::PutMergeCaption ( _bstr_t pbstrRet ) {
    HRESULT _hr = put_MergeCaption(pbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline IPictureDisp * MSVISIO::IVWindow::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2021)
inline void MSVISIO::IVWindow::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline MSVISIO::IVShapePtr MSVISIO::IVWindow::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(2023)
inline MSVISIO::IVCellPtr MSVISIO::IVWindow::GetSelectedCell ( ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_SelectedCell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(2024)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindow::NewWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2025)
inline OLE_COLOR MSVISIO::IVWindow::GetBackgroundColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2026)
inline void MSVISIO::IVWindow::PutBackgroundColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackgroundColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2027)
inline OLE_COLOR MSVISIO::IVWindow::GetBackgroundColorGradient ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackgroundColorGradient(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2028)
inline void MSVISIO::IVWindow::PutBackgroundColorGradient ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackgroundColorGradient(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2029)
inline VARIANT_BOOL MSVISIO::IVWindow::GetShowPageOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPageOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2030)
inline void MSVISIO::IVWindow::PutShowPageOutline ( VARIANT_BOOL Show ) {
    HRESULT _hr = put_ShowPageOutline(Show);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2031)
inline VARIANT_BOOL MSVISIO::IVWindow::GetScrollLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ScrollLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2032)
inline void MSVISIO::IVWindow::PutScrollLock ( VARIANT_BOOL Lock ) {
    HRESULT _hr = put_ScrollLock(Lock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2033)
inline VARIANT_BOOL MSVISIO::IVWindow::GetZoomLock ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ZoomLock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2034)
inline void MSVISIO::IVWindow::PutZoomLock ( VARIANT_BOOL Lock ) {
    HRESULT _hr = put_ZoomLock(Lock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2035)
inline enum MSVISIO::VisZoomBehavior MSVISIO::IVWindow::GetZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_ZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2036)
inline void MSVISIO::IVWindow::PutZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_ZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2037)
inline SAFEARRAY * MSVISIO::IVWindow::GetSelectedMasters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_SelectedMasters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2038)
inline MSVISIO::IVCharactersPtr MSVISIO::IVWindow::GetSelectedText ( ) {
    struct IVCharacters * _result = 0;
    HRESULT _hr = get_SelectedText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCharactersPtr(_result, false);
}

#pragma implementation_key(2039)
inline void MSVISIO::IVWindow::PutSelectedText ( struct IVCharacters * ppObjReturn ) {
    HRESULT _hr = put_SelectedText(ppObjReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2040)
inline VARIANT_BOOL MSVISIO::IVWindow::GetReviewerMarkupVisible ( long ReviewerID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReviewerMarkupVisible(ReviewerID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2041)
inline void MSVISIO::IVWindow::PutReviewerMarkupVisible ( long ReviewerID, VARIANT_BOOL viewStatus ) {
    HRESULT _hr = put_ReviewerMarkupVisible(ReviewerID, viewStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2042)
inline void MSVISIO::IVWindow::PutSelection ( struct IVSelection * lpdispRet ) {
    HRESULT _hr = put_Selection(lpdispRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2043)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVWindow::GetSelectedDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_SelectedDataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2044)
inline void MSVISIO::IVWindow::PutSelectedDataRecordset ( struct IVDataRecordset * DataRecordset ) {
    HRESULT _hr = put_SelectedDataRecordset(DataRecordset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2045)
inline long MSVISIO::IVWindow::GetSelectedDataRowID ( ) {
    long _result = 0;
    HRESULT _hr = get_SelectedDataRowID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2046)
inline void MSVISIO::IVWindow::PutSelectedDataRowID ( long DataRowID ) {
    HRESULT _hr = put_SelectedDataRowID(DataRowID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVWindows wrapper method implementations
//

#pragma implementation_key(2047)
inline MSVISIO::IVApplicationPtr MSVISIO::IVWindows::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2048)
inline short MSVISIO::IVWindows::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2049)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindows::GetItem ( short Index ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2050)
inline short MSVISIO::IVWindows::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2051)
inline HRESULT MSVISIO::IVWindows::VoidArrange ( ) {
    HRESULT _hr = raw_VoidArrange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2052)
inline MSVISIO::IVEventListPtr MSVISIO::IVWindows::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(2053)
inline short MSVISIO::IVWindows::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2054)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindows::Add_WithoutMergeArgs ( const _variant_t & bstrCaption, const _variant_t & nFlags, const _variant_t & nType, const _variant_t & nLeft, const _variant_t & nTop, const _variant_t & nWidth, const _variant_t & nHeight ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_Add_WithoutMergeArgs(bstrCaption, nFlags, nType, nLeft, nTop, nWidth, nHeight, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2055)
inline HRESULT MSVISIO::IVWindows::Arrange ( const _variant_t & nArrangeFlags ) {
    HRESULT _hr = raw_Arrange(nArrangeFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2056)
inline IUnknownPtr MSVISIO::IVWindows::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2057)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindows::GetItemFromID ( long nID ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2058)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindows::Add ( const _variant_t & bstrCaption, const _variant_t & nFlags, const _variant_t & nType, const _variant_t & nLeft, const _variant_t & nTop, const _variant_t & nWidth, const _variant_t & nHeight, const _variant_t & bstrMergeID, const _variant_t & bstrMergeClass, const _variant_t & nMergePosition ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_Add(bstrCaption, nFlags, nType, nLeft, nTop, nWidth, nHeight, bstrMergeID, bstrMergeClass, nMergePosition, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2059)
inline MSVISIO::IVWindowPtr MSVISIO::IVWindows::GetItemEx ( const _variant_t & CaptionOrIndex ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ItemEx(CaptionOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

//
// interface IVMasterShortcut wrapper method implementations
//

#pragma implementation_key(2060)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMasterShortcut::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2061)
inline MSVISIO::IVDocumentPtr MSVISIO::IVMasterShortcut::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2062)
inline short MSVISIO::IVMasterShortcut::GetIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2063)
inline short MSVISIO::IVMasterShortcut::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2064)
inline short MSVISIO::IVMasterShortcut::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2065)
inline _bstr_t MSVISIO::IVMasterShortcut::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2066)
inline void MSVISIO::IVMasterShortcut::PutName ( _bstr_t lpLocaleSpecificName ) {
    HRESULT _hr = put_Name(lpLocaleSpecificName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2067)
inline _bstr_t MSVISIO::IVMasterShortcut::GetPrompt ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2068)
inline void MSVISIO::IVMasterShortcut::PutPrompt ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Prompt(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2069)
inline short MSVISIO::IVMasterShortcut::GetAlignName ( ) {
    short _result = 0;
    HRESULT _hr = get_AlignName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2070)
inline void MSVISIO::IVMasterShortcut::PutAlignName ( short lpi2Ret ) {
    HRESULT _hr = put_AlignName(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2071)
inline short MSVISIO::IVMasterShortcut::GetIconSize ( ) {
    short _result = 0;
    HRESULT _hr = get_IconSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2072)
inline void MSVISIO::IVMasterShortcut::PutIconSize ( short lpi2Ret ) {
    HRESULT _hr = put_IconSize(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2073)
inline HRESULT MSVISIO::IVMasterShortcut::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2074)
inline HRESULT MSVISIO::IVMasterShortcut::ImportIcon ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportIcon(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2075)
inline HRESULT MSVISIO::IVMasterShortcut::ExportIcon ( _bstr_t FileName, short Flags, const _variant_t & TransparentRGB ) {
    HRESULT _hr = raw_ExportIcon(FileName, Flags, TransparentRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2076)
inline long MSVISIO::IVMasterShortcut::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2077)
inline MSVISIO::IVWindowPtr MSVISIO::IVMasterShortcut::OpenIconWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenIconWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2078)
inline _bstr_t MSVISIO::IVMasterShortcut::GetTargetDocumentName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetDocumentName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2079)
inline void MSVISIO::IVMasterShortcut::PutTargetDocumentName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetDocumentName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2080)
inline _bstr_t MSVISIO::IVMasterShortcut::GetTargetMasterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetMasterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2081)
inline void MSVISIO::IVMasterShortcut::PutTargetMasterName ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_TargetMasterName(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline _bstr_t MSVISIO::IVMasterShortcut::GetTargetBaseID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetBaseID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2083)
inline void MSVISIO::IVMasterShortcut::PutTargetBaseID ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TargetBaseID(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2084)
inline _bstr_t MSVISIO::IVMasterShortcut::GetDropActions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DropActions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2085)
inline void MSVISIO::IVMasterShortcut::PutDropActions ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DropActions(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2086)
inline _bstr_t MSVISIO::IVMasterShortcut::GetShapeHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShapeHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2087)
inline void MSVISIO::IVMasterShortcut::PutShapeHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_ShapeHelp(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2088)
inline _bstr_t MSVISIO::IVMasterShortcut::GetNameU ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameU(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2089)
inline void MSVISIO::IVMasterShortcut::PutNameU ( _bstr_t lpLocaleIndependentName ) {
    HRESULT _hr = put_NameU(lpLocaleIndependentName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2090)
inline short MSVISIO::IVMasterShortcut::GetIndexInStencil ( ) {
    short _result = 0;
    HRESULT _hr = get_IndexInStencil(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2091)
inline IPictureDisp * MSVISIO::IVMasterShortcut::GetIcon ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2092)
inline void MSVISIO::IVMasterShortcut::PutRefIcon ( IPictureDisp * ppPictureDisp ) {
    HRESULT _hr = putref_Icon(ppPictureDisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2093)
inline void MSVISIO::IVMasterShortcut::PutIndexInStencil ( short lpi2Ret ) {
    HRESULT _hr = put_IndexInStencil(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVMasterShortcuts wrapper method implementations
//

#pragma implementation_key(2094)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMasterShortcuts::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2095)
inline MSVISIO::IVDocumentPtr MSVISIO::IVMasterShortcuts::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2096)
inline short MSVISIO::IVMasterShortcuts::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2097)
inline short MSVISIO::IVMasterShortcuts::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2098)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVMasterShortcuts::GetItem ( const _variant_t & NameOrIndex ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_Item(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(2099)
inline short MSVISIO::IVMasterShortcuts::GetCount ( ) {
    short _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2100)
inline HRESULT MSVISIO::IVMasterShortcuts::GetNames ( SAFEARRAY * * localeSpecificNameArray ) {
    HRESULT _hr = raw_GetNames(localeSpecificNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2101)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVMasterShortcuts::Drop ( IUnknown * ObjectToDrop, short xPos, short yPos ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = raw_Drop(ObjectToDrop, xPos, yPos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(2102)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVMasterShortcuts::GetItemU ( const _variant_t & NameOrIndex ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_ItemU(NameOrIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(2103)
inline HRESULT MSVISIO::IVMasterShortcuts::GetNamesU ( SAFEARRAY * * localeIndependentNameArray ) {
    HRESULT _hr = raw_GetNamesU(localeIndependentNameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2104)
inline IUnknownPtr MSVISIO::IVMasterShortcuts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2105)
inline MSVISIO::IVMasterShortcutPtr MSVISIO::IVMasterShortcuts::GetItemFromID ( long nID ) {
    struct IVMasterShortcut * _result = 0;
    HRESULT _hr = get_ItemFromID(nID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterShortcutPtr(_result, false);
}

#pragma implementation_key(2106)
inline HRESULT MSVISIO::IVMasterShortcuts::Paste ( const _variant_t & Flags ) {
    HRESULT _hr = raw_Paste(Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMouseEvent wrapper method implementations
//

#pragma implementation_key(2107)
inline _bstr_t MSVISIO::IVMouseEvent::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2108)
inline MSVISIO::IVApplicationPtr MSVISIO::IVMouseEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2109)
inline enum MSVISIO::VisObjectTypes MSVISIO::IVMouseEvent::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2110)
inline MSVISIO::IVWindowPtr MSVISIO::IVMouseEvent::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2111)
inline long MSVISIO::IVMouseEvent::GetButton ( ) {
    long _result = 0;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline long MSVISIO::IVMouseEvent::GetKeyButtonState ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2113)
inline double MSVISIO::IVMouseEvent::Getx ( ) {
    double _result = 0;
    HRESULT _hr = get_x(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2114)
inline double MSVISIO::IVMouseEvent::Gety ( ) {
    double _result = 0;
    HRESULT _hr = get_y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2115)
inline enum MSVISIO::VisMouseMoveDragStates MSVISIO::IVMouseEvent::GetDragState ( ) {
    enum VisMouseMoveDragStates _result;
    HRESULT _hr = get_DragState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2116)
inline short MSVISIO::IVMouseEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVKeyboardEvent wrapper method implementations
//

#pragma implementation_key(2117)
inline _bstr_t MSVISIO::IVKeyboardEvent::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2118)
inline MSVISIO::IVApplicationPtr MSVISIO::IVKeyboardEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2119)
inline enum MSVISIO::VisObjectTypes MSVISIO::IVKeyboardEvent::GetObjectType ( ) {
    enum VisObjectTypes _result;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2120)
inline MSVISIO::IVWindowPtr MSVISIO::IVKeyboardEvent::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2121)
inline long MSVISIO::IVKeyboardEvent::GetKeyCode ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2122)
inline long MSVISIO::IVKeyboardEvent::GetKeyButtonState ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2123)
inline long MSVISIO::IVKeyboardEvent::GetKeyAscii ( ) {
    long _result = 0;
    HRESULT _hr = get_KeyAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2124)
inline short MSVISIO::IVKeyboardEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVGlobal wrapper method implementations
//

#pragma implementation_key(2125)
inline MSVISIO::IVApplicationPtr MSVISIO::IVGlobal::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2126)
inline MSVISIO::IVDocumentPtr MSVISIO::IVGlobal::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2127)
inline MSVISIO::IVPagePtr MSVISIO::IVGlobal::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(2128)
inline MSVISIO::IVWindowPtr MSVISIO::IVGlobal::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2129)
inline MSVISIO::IVDocumentsPtr MSVISIO::IVGlobal::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

#pragma implementation_key(2130)
inline MSVISIO::IVWindowsPtr MSVISIO::IVGlobal::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

#pragma implementation_key(2131)
inline MSVISIO::IVAddonsPtr MSVISIO::IVGlobal::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

#pragma implementation_key(2132)
inline IDispatchPtr MSVISIO::IVGlobal::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVExtender wrapper method implementations
//

#pragma implementation_key(2133)
inline _bstr_t MSVISIO::IVExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2134)
inline void MSVISIO::IVExtender::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline IUnknownPtr MSVISIO::IVExtender::GetObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2136)
inline IUnknownPtr MSVISIO::IVExtender::GetParent ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2137)
inline HRESULT MSVISIO::IVExtender::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2138)
inline HRESULT MSVISIO::IVExtender::Index ( ) {
    HRESULT _hr = raw_Index();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2139)
inline MSVISIO::IVShapePtr MSVISIO::IVExtender::GetShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(2140)
inline HRESULT MSVISIO::IVExtender::VoidGroup ( ) {
    HRESULT _hr = raw_VoidGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2141)
inline HRESULT MSVISIO::IVExtender::BringForward ( ) {
    HRESULT _hr = raw_BringForward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2142)
inline HRESULT MSVISIO::IVExtender::BringToFront ( ) {
    HRESULT _hr = raw_BringToFront();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2143)
inline HRESULT MSVISIO::IVExtender::ConvertToGroup ( ) {
    HRESULT _hr = raw_ConvertToGroup();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2144)
inline HRESULT MSVISIO::IVExtender::SendBackward ( ) {
    HRESULT _hr = raw_SendBackward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2145)
inline HRESULT MSVISIO::IVExtender::SendToBack ( ) {
    HRESULT _hr = raw_SendToBack();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2146)
inline MSVISIO::IVDocumentPtr MSVISIO::IVExtender::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2147)
inline IDispatchPtr MSVISIO::IVExtender::GetShapeParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ShapeParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2148)
inline MSVISIO::IVApplicationPtr MSVISIO::IVExtender::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2149)
inline MSVISIO::IVMasterPtr MSVISIO::IVExtender::GetMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(2150)
inline MSVISIO::IVCellPtr MSVISIO::IVExtender::GetCells ( _bstr_t localeSpecificCellName ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_Cells(localeSpecificCellName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(2151)
inline MSVISIO::IVCellPtr MSVISIO::IVExtender::GetCellsSRC ( short Section, short Row, short Column ) {
    struct IVCell * _result = 0;
    HRESULT _hr = get_CellsSRC(Section, Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVCellPtr(_result, false);
}

#pragma implementation_key(2152)
inline _bstr_t MSVISIO::IVExtender::GetData1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2153)
inline void MSVISIO::IVExtender::PutData1 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data1(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2154)
inline _bstr_t MSVISIO::IVExtender::GetData2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2155)
inline void MSVISIO::IVExtender::PutData2 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data2(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2156)
inline _bstr_t MSVISIO::IVExtender::GetData3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2157)
inline void MSVISIO::IVExtender::PutData3 ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Data3(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2158)
inline _bstr_t MSVISIO::IVExtender::GetHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Help(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2159)
inline void MSVISIO::IVExtender::PutHelp ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Help(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2160)
inline _bstr_t MSVISIO::IVExtender::GetNameID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2161)
inline HRESULT MSVISIO::IVExtender::ShapeCopy ( ) {
    HRESULT _hr = raw_ShapeCopy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2162)
inline HRESULT MSVISIO::IVExtender::ShapeCut ( ) {
    HRESULT _hr = raw_ShapeCut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2163)
inline HRESULT MSVISIO::IVExtender::ShapeDelete ( ) {
    HRESULT _hr = raw_ShapeDelete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2164)
inline HRESULT MSVISIO::IVExtender::VoidShapeDuplicate ( ) {
    HRESULT _hr = raw_VoidShapeDuplicate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2165)
inline short MSVISIO::IVExtender::GetRowCount ( short Section ) {
    short _result = 0;
    HRESULT _hr = get_RowCount(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2166)
inline short MSVISIO::IVExtender::AddSection ( short Section ) {
    short _result = 0;
    HRESULT _hr = raw_AddSection(Section, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2167)
inline HRESULT MSVISIO::IVExtender::DeleteSection ( short Section ) {
    HRESULT _hr = raw_DeleteSection(Section);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2168)
inline short MSVISIO::IVExtender::AddRow ( short Section, short Row, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddRow(Section, Row, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2169)
inline HRESULT MSVISIO::IVExtender::DeleteRow ( short Section, short Row ) {
    HRESULT _hr = raw_DeleteRow(Section, Row);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2170)
inline short MSVISIO::IVExtender::GetRowsCellCount ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowsCellCount(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2171)
inline short MSVISIO::IVExtender::GetRowType ( short Section, short Row ) {
    short _result = 0;
    HRESULT _hr = get_RowType(Section, Row, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2172)
inline void MSVISIO::IVExtender::PutRowType ( short Section, short Row, short lpi2Ret ) {
    HRESULT _hr = put_RowType(Section, Row, lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2173)
inline HRESULT MSVISIO::IVExtender::SetCenter ( double xPos, double yPos ) {
    HRESULT _hr = raw_SetCenter(xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2174)
inline MSVISIO::IVConnectsPtr MSVISIO::IVExtender::GetConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_Connects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(2175)
inline short MSVISIO::IVExtender::GetShapeIndex16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ShapeIndex16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2176)
inline _bstr_t MSVISIO::IVExtender::GetStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2177)
inline void MSVISIO::IVExtender::PutStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_Style(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2178)
inline void MSVISIO::IVExtender::PutStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_StyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2179)
inline _bstr_t MSVISIO::IVExtender::GetLineStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2180)
inline void MSVISIO::IVExtender::PutLineStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_LineStyle(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2181)
inline void MSVISIO::IVExtender::PutLineStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_LineStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline _bstr_t MSVISIO::IVExtender::GetFillStyle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FillStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2183)
inline void MSVISIO::IVExtender::PutFillStyle ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FillStyle(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2184)
inline void MSVISIO::IVExtender::PutFillStyleKeepFmt ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FillStyleKeepFmt(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2185)
inline HRESULT MSVISIO::IVExtender::Export ( _bstr_t FileName ) {
    HRESULT _hr = raw_Export(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2186)
inline _bstr_t MSVISIO::IVExtender::GetUniqueID ( short fUniqueID ) {
    BSTR _result = 0;
    HRESULT _hr = get_UniqueID(fUniqueID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2187)
inline MSVISIO::IVPagePtr MSVISIO::IVExtender::GetContainingPage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ContainingPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(2188)
inline MSVISIO::IVMasterPtr MSVISIO::IVExtender::GetContainingMaster ( ) {
    struct IVMaster * _result = 0;
    HRESULT _hr = get_ContainingMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMasterPtr(_result, false);
}

#pragma implementation_key(2189)
inline MSVISIO::IVShapePtr MSVISIO::IVExtender::GetContainingShape ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = get_ContainingShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(2190)
inline short MSVISIO::IVExtender::GetSectionExists ( short Section, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_SectionExists(Section, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2191)
inline short MSVISIO::IVExtender::GetRowExists ( short Section, short Row, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_RowExists(Section, Row, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2192)
inline short MSVISIO::IVExtender::GetCellExists ( _bstr_t localeSpecificCellName, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellExists(localeSpecificCellName, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline short MSVISIO::IVExtender::GetCellsSRCExists ( short Section, short Row, short Column, short fExistsLocally ) {
    short _result = 0;
    HRESULT _hr = get_CellsSRCExists(Section, Row, Column, fExistsLocally, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2194)
inline short MSVISIO::IVExtender::GetLayerCount ( ) {
    short _result = 0;
    HRESULT _hr = get_LayerCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline MSVISIO::IVLayerPtr MSVISIO::IVExtender::GetLayer ( short Index ) {
    struct IVLayer * _result = 0;
    HRESULT _hr = get_Layer(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVLayerPtr(_result, false);
}

#pragma implementation_key(2196)
inline short MSVISIO::IVExtender::AddNamedRow ( short Section, _bstr_t RowName, short RowTag ) {
    short _result = 0;
    HRESULT _hr = raw_AddNamedRow(Section, RowName, RowTag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2197)
inline short MSVISIO::IVExtender::AddRows ( short Section, short Row, short RowTag, short RowCount ) {
    short _result = 0;
    HRESULT _hr = raw_AddRows(Section, Row, RowTag, RowCount, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2198)
inline MSVISIO::IVEventListPtr MSVISIO::IVExtender::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(2199)
inline short MSVISIO::IVExtender::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2200)
inline _bstr_t MSVISIO::IVExtender::GetClassID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClassID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2201)
inline IDispatchPtr MSVISIO::IVExtender::GetShapeObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ShapeObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2202)
inline MSVISIO::IVWindowPtr MSVISIO::IVExtender::OpenSheetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = raw_OpenSheetWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2203)
inline short MSVISIO::IVExtender::GetShapeID16 ( ) {
    short _result = 0;
    HRESULT _hr = get_ShapeID16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2204)
inline HRESULT MSVISIO::IVExtender::GetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray ) {
    HRESULT _hr = raw_GetFormulas(SRCStream, formulaArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2205)
inline HRESULT MSVISIO::IVExtender::GetResults ( SAFEARRAY * * SRCStream, short Flags, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray ) {
    HRESULT _hr = raw_GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2206)
inline short MSVISIO::IVExtender::SetFormulas ( SAFEARRAY * * SRCStream, SAFEARRAY * * formulaArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetFormulas(SRCStream, formulaArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2207)
inline short MSVISIO::IVExtender::SetResults ( SAFEARRAY * * SRCStream, SAFEARRAY * * UnitsNamesOrCodes, SAFEARRAY * * resultArray, short Flags ) {
    short _result = 0;
    HRESULT _hr = raw_SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline MSVISIO::IVConnectsPtr MSVISIO::IVExtender::GetFromConnects ( ) {
    struct IVConnects * _result = 0;
    HRESULT _hr = get_FromConnects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVConnectsPtr(_result, false);
}

#pragma implementation_key(2209)
inline HRESULT MSVISIO::IVExtender::BoundingBox ( short Flags, double * lpr8Left, double * lpr8Bottom, double * lpr8Right, double * lpr8Top ) {
    HRESULT _hr = raw_BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2210)
inline short MSVISIO::IVExtender::HitTest ( double xPos, double yPos, double Tolerance ) {
    short _result = 0;
    HRESULT _hr = raw_HitTest(xPos, yPos, Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2211)
inline MSVISIO::IVHyperlinkPtr MSVISIO::IVExtender::GetHyperlink ( ) {
    struct IVHyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVHyperlinkPtr(_result, false);
}

#pragma implementation_key(2212)
inline _bstr_t MSVISIO::IVExtender::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2213)
inline short MSVISIO::IVExtender::GetObjectIsInherited ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectIsInherited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2214)
inline long MSVISIO::IVExtender::GetShapeID ( ) {
    long _result = 0;
    HRESULT _hr = get_ShapeID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2215)
inline long MSVISIO::IVExtender::GetShapeIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_ShapeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2216)
inline MSVISIO::IVShapePtr MSVISIO::IVExtender::Group ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

#pragma implementation_key(2217)
inline MSVISIO::IVShapePtr MSVISIO::IVExtender::ShapeDuplicate ( ) {
    struct IVShape * _result = 0;
    HRESULT _hr = raw_ShapeDuplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVShapePtr(_result, false);
}

//
// interface IVisLibOcxSupport wrapper method implementations
//

#pragma implementation_key(2218)
inline _bstr_t MSVISIO::IVisLibOcxSupport::GetHostID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HostID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2219)
inline void MSVISIO::IVisLibOcxSupport::PutHostID ( _bstr_t pbstr ) {
    HRESULT _hr = put_HostID(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2220)
inline MSVISIO::IVWindowPtr MSVISIO::IVisLibOcxSupport::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2221)
inline MSVISIO::IVDocumentPtr MSVISIO::IVisLibOcxSupport::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2222)
inline _bstr_t MSVISIO::IVisLibOcxSupport::GetSrc ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Src(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2223)
inline void MSVISIO::IVisLibOcxSupport::PutSrc ( _bstr_t pbstr ) {
    HRESULT _hr = put_Src(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2224)
inline VARIANT_BOOL MSVISIO::IVisLibOcxSupport::GetNegotiateMenus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NegotiateMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2225)
inline void MSVISIO::IVisLibOcxSupport::PutNegotiateMenus ( VARIANT_BOOL pbVal ) {
    HRESULT _hr = put_NegotiateMenus(pbVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2226)
inline VARIANT_BOOL MSVISIO::IVisLibOcxSupport::GetNegotiateToolbars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NegotiateToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline void MSVISIO::IVisLibOcxSupport::PutNegotiateToolbars ( VARIANT_BOOL pbVal ) {
    HRESULT _hr = put_NegotiateToolbars(pbVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2228)
inline HRESULT MSVISIO::IVisLibOcxSupport::About ( ) {
    HRESULT _hr = raw_About();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2229)
inline enum MSVISIO::VisPageSizingBehaviors MSVISIO::IVisLibOcxSupport::GetPageSizingBehavior ( ) {
    enum VisPageSizingBehaviors _result;
    HRESULT _hr = get_PageSizingBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2230)
inline void MSVISIO::IVisLibOcxSupport::PutPageSizingBehavior ( enum VisPageSizingBehaviors peVal ) {
    HRESULT _hr = put_PageSizingBehavior(peVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDataRecordset wrapper method implementations
//

#pragma implementation_key(2231)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataRecordset::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2232)
inline short MSVISIO::IVDataRecordset::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2233)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDataRecordset::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2234)
inline short MSVISIO::IVDataRecordset::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2235)
inline long MSVISIO::IVDataRecordset::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2236)
inline _bstr_t MSVISIO::IVDataRecordset::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2237)
inline void MSVISIO::IVDataRecordset::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2238)
inline enum MSVISIO::VisLinkReplaceBehavior MSVISIO::IVDataRecordset::GetLinkReplaceBehavior ( ) {
    enum VisLinkReplaceBehavior _result;
    HRESULT _hr = get_LinkReplaceBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2239)
inline void MSVISIO::IVDataRecordset::PutLinkReplaceBehavior ( enum VisLinkReplaceBehavior Property ) {
    HRESULT _hr = put_LinkReplaceBehavior(Property);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2240)
inline MSVISIO::IVDataConnectionPtr MSVISIO::IVDataRecordset::GetDataConnection ( ) {
    struct IVDataConnection * _result = 0;
    HRESULT _hr = get_DataConnection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataConnectionPtr(_result, false);
}

#pragma implementation_key(2241)
inline MSVISIO::IVDataColumnsPtr MSVISIO::IVDataRecordset::GetDataColumns ( ) {
    struct IVDataColumns * _result = 0;
    HRESULT _hr = get_DataColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataColumnsPtr(_result, false);
}

#pragma implementation_key(2242)
inline HRESULT MSVISIO::IVDataRecordset::GetPrimaryKey ( enum VisPrimaryKeySettings * PrimaryKeySettings, SAFEARRAY * * PrimaryKey ) {
    HRESULT _hr = raw_GetPrimaryKey(PrimaryKeySettings, PrimaryKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2243)
inline HRESULT MSVISIO::IVDataRecordset::SetPrimaryKey ( enum VisPrimaryKeySettings PrimaryKeySettings, SAFEARRAY * * PrimaryKey ) {
    HRESULT _hr = raw_SetPrimaryKey(PrimaryKeySettings, PrimaryKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2244)
inline _bstr_t MSVISIO::IVDataRecordset::GetCommandString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2245)
inline void MSVISIO::IVDataRecordset::PutCommandString ( _bstr_t CommandString ) {
    HRESULT _hr = put_CommandString(CommandString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2246)
inline _bstr_t MSVISIO::IVDataRecordset::GetDataAsXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataAsXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2247)
inline SAFEARRAY * MSVISIO::IVDataRecordset::GetDataRowIDs ( _bstr_t CriteriaString ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetDataRowIDs(CriteriaString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2248)
inline SAFEARRAY * MSVISIO::IVDataRecordset::GetRowData ( long DataRowID ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetRowData(DataRowID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2249)
inline HRESULT MSVISIO::IVDataRecordset::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2250)
inline HRESULT MSVISIO::IVDataRecordset::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2251)
inline HRESULT MSVISIO::IVDataRecordset::RefreshUsingXML ( _bstr_t NewDataAsXML ) {
    HRESULT _hr = raw_RefreshUsingXML(NewDataAsXML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2252)
inline DATE MSVISIO::IVDataRecordset::GetTimeRefreshed ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TimeRefreshed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2253)
inline long MSVISIO::IVDataRecordset::GetRefreshInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2254)
inline void MSVISIO::IVDataRecordset::PutRefreshInterval ( long RefreshInterval ) {
    HRESULT _hr = put_RefreshInterval(RefreshInterval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2255)
inline long MSVISIO::IVDataRecordset::GetRefreshSettings ( ) {
    long _result = 0;
    HRESULT _hr = get_RefreshSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2256)
inline void MSVISIO::IVDataRecordset::PutRefreshSettings ( long Settings ) {
    HRESULT _hr = put_RefreshSettings(Settings);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2257)
inline MSVISIO::IVEventListPtr MSVISIO::IVDataRecordset::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(2258)
inline SAFEARRAY * MSVISIO::IVDataRecordset::GetAllRefreshConflicts ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetAllRefreshConflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2259)
inline HRESULT MSVISIO::IVDataRecordset::RemoveRefreshConflict ( struct IVShape * ShapeInConflict ) {
    HRESULT _hr = raw_RemoveRefreshConflict(ShapeInConflict);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2260)
inline SAFEARRAY * MSVISIO::IVDataRecordset::GetMatchingRowsForRefreshConflict ( struct IVShape * ShapeInConflict ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_GetMatchingRowsForRefreshConflict(ShapeInConflict, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVDataColumn wrapper method implementations
//

#pragma implementation_key(2261)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataColumn::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2262)
inline short MSVISIO::IVDataColumn::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2263)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDataColumn::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2264)
inline short MSVISIO::IVDataColumn::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2265)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataColumn::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2266)
inline _bstr_t MSVISIO::IVDataColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2267)
inline _bstr_t MSVISIO::IVDataColumn::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2268)
inline void MSVISIO::IVDataColumn::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline VARIANT_BOOL MSVISIO::IVDataColumn::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2270)
inline void MSVISIO::IVDataColumn::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2271)
inline _variant_t MSVISIO::IVDataColumn::GetProperty ( enum VisDataColumnProperties Property ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProperty(Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2272)
inline HRESULT MSVISIO::IVDataColumn::SetProperty ( enum VisDataColumnProperties Property, const _variant_t & Value ) {
    HRESULT _hr = raw_SetProperty(Property, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2273)
inline VARIANT_BOOL MSVISIO::IVDataColumn::GetHyperlink ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2274)
inline void MSVISIO::IVDataColumn::PutHyperlink ( VARIANT_BOOL Hyperlink ) {
    HRESULT _hr = put_Hyperlink(Hyperlink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IVDataColumns wrapper method implementations
//

#pragma implementation_key(2275)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataColumns::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2276)
inline short MSVISIO::IVDataColumns::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2277)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDataColumns::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2278)
inline short MSVISIO::IVDataColumns::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2279)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataColumns::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2280)
inline long MSVISIO::IVDataColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2281)
inline MSVISIO::IVDataColumnPtr MSVISIO::IVDataColumns::GetItem ( const _variant_t & IndexOrName ) {
    struct IVDataColumn * _result = 0;
    HRESULT _hr = get_Item(IndexOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataColumnPtr(_result, false);
}

#pragma implementation_key(2282)
inline IUnknownPtr MSVISIO::IVDataColumns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2283)
inline HRESULT MSVISIO::IVDataColumns::SetColumnProperties ( SAFEARRAY * * ColumnNames, SAFEARRAY * * Properties, SAFEARRAY * * Values ) {
    HRESULT _hr = raw_SetColumnProperties(ColumnNames, Properties, Values);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVDataRecordsets wrapper method implementations
//

#pragma implementation_key(2284)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataRecordsets::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2285)
inline short MSVISIO::IVDataRecordsets::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline MSVISIO::IVDocumentPtr MSVISIO::IVDataRecordsets::GetDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2287)
inline short MSVISIO::IVDataRecordsets::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline long MSVISIO::IVDataRecordsets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2289)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsets::GetItem ( long Index ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2290)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsets::GetItemFromID ( long ID ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_ItemFromID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2291)
inline IUnknownPtr MSVISIO::IVDataRecordsets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2292)
inline MSVISIO::IVEventListPtr MSVISIO::IVDataRecordsets::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(2293)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsets::Add ( const _variant_t & ConnectionIDOrString, _bstr_t CommandString, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_Add(ConnectionIDOrString, CommandString, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2294)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsets::AddFromXML ( _bstr_t XMLString, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_AddFromXML(XMLString, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2295)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsets::AddFromConnectionFile ( _bstr_t FileName, long AddOptions, _bstr_t Name ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = raw_AddFromConnectionFile(FileName, AddOptions, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2296)
inline HRESULT MSVISIO::IVDataRecordsets::GetLastDataError ( long * DataErrorCode, BSTR * DataErrorDescription, long * RecordsetID ) {
    HRESULT _hr = raw_GetLastDataError(DataErrorCode, DataErrorDescription, RecordsetID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVDataRecordsetChangedEvent wrapper method implementations
//

#pragma implementation_key(2297)
inline MSVISIO::IVApplicationPtr MSVISIO::IVDataRecordsetChangedEvent::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2298)
inline short MSVISIO::IVDataRecordsetChangedEvent::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2299)
inline short MSVISIO::IVDataRecordsetChangedEvent::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2300)
inline MSVISIO::IVDataRecordsetPtr MSVISIO::IVDataRecordsetChangedEvent::GetDataRecordset ( ) {
    struct IVDataRecordset * _result = 0;
    HRESULT _hr = get_DataRecordset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDataRecordsetPtr(_result, false);
}

#pragma implementation_key(2301)
inline SAFEARRAY * MSVISIO::IVDataRecordsetChangedEvent::GetDataRowsAdded ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataRowsAdded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2302)
inline SAFEARRAY * MSVISIO::IVDataRecordsetChangedEvent::GetDataRowsDeleted ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataRowsDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2303)
inline SAFEARRAY * MSVISIO::IVDataRecordsetChangedEvent::GetDataColumnsAdded ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsAdded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2304)
inline SAFEARRAY * MSVISIO::IVDataRecordsetChangedEvent::GetDataColumnsDeleted ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsDeleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2305)
inline SAFEARRAY * MSVISIO::IVDataRecordsetChangedEvent::GetDataColumnsChanged ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_DataColumnsChanged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IVUIObject wrapper method implementations
//

#pragma implementation_key(2306)
inline HRESULT MSVISIO::IVUIObject::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2307)
inline _bstr_t MSVISIO::IVUIObject::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2308)
inline void MSVISIO::IVUIObject::PutName ( _bstr_t pName ) {
    HRESULT _hr = put_Name(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2309)
inline _bstr_t MSVISIO::IVUIObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2310)
inline void MSVISIO::IVUIObject::PutFlavor ( short pFlavor ) {
    HRESULT _hr = put_Flavor(pFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2311)
inline short MSVISIO::IVUIObject::GetFlavor ( ) {
    short _result = 0;
    HRESULT _hr = get_Flavor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2312)
inline MSVISIO::IVMenuSetsPtr MSVISIO::IVUIObject::GetMenuSets ( ) {
    struct IVMenuSets * _result = 0;
    HRESULT _hr = get_MenuSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetsPtr(_result, false);
}

#pragma implementation_key(2313)
inline MSVISIO::IVToolbarSetsPtr MSVISIO::IVUIObject::GetToolbarSets ( ) {
    struct IVToolbarSets * _result = 0;
    HRESULT _hr = get_ToolbarSets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetsPtr(_result, false);
}

#pragma implementation_key(2314)
inline MSVISIO::IVStatusBarsPtr MSVISIO::IVUIObject::GetStatusBars ( ) {
    struct IVStatusBars * _result = 0;
    HRESULT _hr = get_StatusBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarsPtr(_result, false);
}

#pragma implementation_key(2315)
inline MSVISIO::IVAccelTablesPtr MSVISIO::IVUIObject::GetAccelTables ( ) {
    struct IVAccelTables * _result = 0;
    HRESULT _hr = get_AccelTables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablesPtr(_result, false);
}

#pragma implementation_key(2316)
inline HRESULT MSVISIO::IVUIObject::SaveToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2317)
inline HRESULT MSVISIO::IVUIObject::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2318)
inline HRESULT MSVISIO::IVUIObject::UpdateUI ( ) {
    HRESULT _hr = raw_UpdateUI();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2319)
inline VARIANT_BOOL MSVISIO::IVUIObject::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2320)
inline void MSVISIO::IVUIObject::PutDisplayKeysInTooltips ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2321)
inline VARIANT_BOOL MSVISIO::IVUIObject::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2322)
inline void MSVISIO::IVUIObject::PutDisplayTooltips ( VARIANT_BOOL pbShow ) {
    HRESULT _hr = put_DisplayTooltips(pbShow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2323)
inline VARIANT_BOOL MSVISIO::IVUIObject::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2324)
inline void MSVISIO::IVUIObject::PutLargeButtons ( VARIANT_BOOL pbLarge ) {
    HRESULT _hr = put_LargeButtons(pbLarge);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2325)
inline short MSVISIO::IVUIObject::GetMenuAnimationStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2326)
inline void MSVISIO::IVUIObject::PutMenuAnimationStyle ( short pAnim ) {
    HRESULT _hr = put_MenuAnimationStyle(pAnim);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2327)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVUIObject::GetClone ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Clone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVInvisibleApp wrapper method implementations
//

#pragma implementation_key(2328)
inline MSVISIO::IVDocumentPtr MSVISIO::IVInvisibleApp::GetActiveDocument ( ) {
    struct IVDocument * _result = 0;
    HRESULT _hr = get_ActiveDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentPtr(_result, false);
}

#pragma implementation_key(2329)
inline MSVISIO::IVPagePtr MSVISIO::IVInvisibleApp::GetActivePage ( ) {
    struct IVPage * _result = 0;
    HRESULT _hr = get_ActivePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVPagePtr(_result, false);
}

#pragma implementation_key(2330)
inline MSVISIO::IVWindowPtr MSVISIO::IVInvisibleApp::GetActiveWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2331)
inline MSVISIO::IVApplicationPtr MSVISIO::IVInvisibleApp::GetApplication ( ) {
    struct IVApplication * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationPtr(_result, false);
}

#pragma implementation_key(2332)
inline MSVISIO::IVDocumentsPtr MSVISIO::IVInvisibleApp::GetDocuments ( ) {
    struct IVDocuments * _result = 0;
    HRESULT _hr = get_Documents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVDocumentsPtr(_result, false);
}

#pragma implementation_key(2333)
inline short MSVISIO::IVInvisibleApp::GetObjectType ( ) {
    short _result = 0;
    HRESULT _hr = get_ObjectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2334)
inline long MSVISIO::IVInvisibleApp::GetOnDataChangeDelay ( ) {
    long _result = 0;
    HRESULT _hr = get_OnDataChangeDelay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2335)
inline void MSVISIO::IVInvisibleApp::PutOnDataChangeDelay ( long lpi4Ret ) {
    HRESULT _hr = put_OnDataChangeDelay(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2336)
inline long MSVISIO::IVInvisibleApp::GetProcessID ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2337)
inline HRESULT MSVISIO::IVInvisibleApp::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2338)
inline HRESULT MSVISIO::IVInvisibleApp::Redo ( ) {
    HRESULT _hr = raw_Redo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2339)
inline short MSVISIO::IVInvisibleApp::GetScreenUpdating ( ) {
    short _result = 0;
    HRESULT _hr = get_ScreenUpdating(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2340)
inline void MSVISIO::IVInvisibleApp::PutScreenUpdating ( short lpi2Ret ) {
    HRESULT _hr = put_ScreenUpdating(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2341)
inline short MSVISIO::IVInvisibleApp::GetStat ( ) {
    short _result = 0;
    HRESULT _hr = get_Stat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2342)
inline HRESULT MSVISIO::IVInvisibleApp::Undo ( ) {
    HRESULT _hr = raw_Undo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2343)
inline _bstr_t MSVISIO::IVInvisibleApp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2344)
inline short MSVISIO::IVInvisibleApp::GetWindowHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_WindowHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2345)
inline MSVISIO::IVWindowsPtr MSVISIO::IVInvisibleApp::GetWindows ( ) {
    struct IVWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowsPtr(_result, false);
}

#pragma implementation_key(2346)
inline long MSVISIO::IVInvisibleApp::GetLanguage ( ) {
    long _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2347)
inline short MSVISIO::IVInvisibleApp::GetIsVisio16 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio16(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2348)
inline short MSVISIO::IVInvisibleApp::GetIsVisio32 ( ) {
    short _result = 0;
    HRESULT _hr = get_IsVisio32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2349)
inline long MSVISIO::IVInvisibleApp::GetWindowHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_WindowHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2350)
inline short MSVISIO::IVInvisibleApp::GetInstanceHandle ( ) {
    short _result = 0;
    HRESULT _hr = get_InstanceHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2351)
inline long MSVISIO::IVInvisibleApp::GetInstanceHandle32 ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceHandle32(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2352)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVInvisibleApp::GetBuiltInMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(2353)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVInvisibleApp::GetBuiltInToolbars ( short fIgnored ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_BuiltInToolbars(fIgnored, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(2354)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVInvisibleApp::GetCustomMenus ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(2355)
inline HRESULT MSVISIO::IVInvisibleApp::SetCustomMenus ( struct IVUIObject * MenusObject ) {
    HRESULT _hr = raw_SetCustomMenus(MenusObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2356)
inline _bstr_t MSVISIO::IVInvisibleApp::GetCustomMenusFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomMenusFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2357)
inline void MSVISIO::IVInvisibleApp::PutCustomMenusFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomMenusFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2358)
inline HRESULT MSVISIO::IVInvisibleApp::ClearCustomMenus ( ) {
    HRESULT _hr = raw_ClearCustomMenus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2359)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVInvisibleApp::GetCustomToolbars ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_CustomToolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

#pragma implementation_key(2360)
inline HRESULT MSVISIO::IVInvisibleApp::SetCustomToolbars ( struct IVUIObject * ToolbarsObject ) {
    HRESULT _hr = raw_SetCustomToolbars(ToolbarsObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2361)
inline _bstr_t MSVISIO::IVInvisibleApp::GetCustomToolbarsFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomToolbarsFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2362)
inline void MSVISIO::IVInvisibleApp::PutCustomToolbarsFile ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_CustomToolbarsFile(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2363)
inline HRESULT MSVISIO::IVInvisibleApp::ClearCustomToolbars ( ) {
    HRESULT _hr = raw_ClearCustomToolbars();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2364)
inline _bstr_t MSVISIO::IVInvisibleApp::GetAddonPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddonPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2365)
inline void MSVISIO::IVInvisibleApp::PutAddonPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_AddonPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2366)
inline _bstr_t MSVISIO::IVInvisibleApp::GetDrawingPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DrawingPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2367)
inline void MSVISIO::IVInvisibleApp::PutDrawingPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_DrawingPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2368)
inline _bstr_t MSVISIO::IVInvisibleApp::GetFilterPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilterPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2369)
inline void MSVISIO::IVInvisibleApp::PutFilterPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_FilterPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2370)
inline _bstr_t MSVISIO::IVInvisibleApp::GetHelpPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2371)
inline void MSVISIO::IVInvisibleApp::PutHelpPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_HelpPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2372)
inline _bstr_t MSVISIO::IVInvisibleApp::GetStartupPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StartupPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2373)
inline void MSVISIO::IVInvisibleApp::PutStartupPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StartupPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2374)
inline _bstr_t MSVISIO::IVInvisibleApp::GetStencilPaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StencilPaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2375)
inline void MSVISIO::IVInvisibleApp::PutStencilPaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_StencilPaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2376)
inline _bstr_t MSVISIO::IVInvisibleApp::GetTemplatePaths ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplatePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2377)
inline void MSVISIO::IVInvisibleApp::PutTemplatePaths ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_TemplatePaths(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2378)
inline _bstr_t MSVISIO::IVInvisibleApp::GetUserName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2379)
inline void MSVISIO::IVInvisibleApp::PutUserName ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_UserName(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2380)
inline short MSVISIO::IVInvisibleApp::GetPromptForSummary ( ) {
    short _result = 0;
    HRESULT _hr = get_PromptForSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2381)
inline void MSVISIO::IVInvisibleApp::PutPromptForSummary ( short lpi2Ret ) {
    HRESULT _hr = put_PromptForSummary(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2382)
inline MSVISIO::IVAddonsPtr MSVISIO::IVInvisibleApp::GetAddons ( ) {
    struct IVAddons * _result = 0;
    HRESULT _hr = get_Addons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAddonsPtr(_result, false);
}

#pragma implementation_key(2383)
inline HRESULT MSVISIO::IVInvisibleApp::SaveWorkspaceAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveWorkspaceAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2384)
inline HRESULT MSVISIO::IVInvisibleApp::DoCmd ( short CommandID ) {
    HRESULT _hr = raw_DoCmd(CommandID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2385)
inline _bstr_t MSVISIO::IVInvisibleApp::GetProfileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProfileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2386)
inline _bstr_t MSVISIO::IVInvisibleApp::GetEventInfo ( long eventSeqNum ) {
    BSTR _result = 0;
    HRESULT _hr = get_EventInfo(eventSeqNum, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2387)
inline MSVISIO::IVEventListPtr MSVISIO::IVInvisibleApp::GetEventList ( ) {
    struct IVEventList * _result = 0;
    HRESULT _hr = get_EventList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVEventListPtr(_result, false);
}

#pragma implementation_key(2388)
inline short MSVISIO::IVInvisibleApp::GetPersistsEvents ( ) {
    short _result = 0;
    HRESULT _hr = get_PersistsEvents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2389)
inline short MSVISIO::IVInvisibleApp::GetActive ( ) {
    short _result = 0;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2390)
inline short MSVISIO::IVInvisibleApp::GetDeferRecalc ( ) {
    short _result = 0;
    HRESULT _hr = get_DeferRecalc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2391)
inline void MSVISIO::IVInvisibleApp::PutDeferRecalc ( short lpi2Ret ) {
    HRESULT _hr = put_DeferRecalc(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2392)
inline short MSVISIO::IVInvisibleApp::GetAlertResponse ( ) {
    short _result = 0;
    HRESULT _hr = get_AlertResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2393)
inline void MSVISIO::IVInvisibleApp::PutAlertResponse ( short lpi2Ret ) {
    HRESULT _hr = put_AlertResponse(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2394)
inline short MSVISIO::IVInvisibleApp::GetShowProgress ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowProgress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2395)
inline void MSVISIO::IVInvisibleApp::PutShowProgress ( short lpi2Ret ) {
    HRESULT _hr = put_ShowProgress(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2396)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetVbe ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vbe(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2397)
inline short MSVISIO::IVInvisibleApp::GetShowMenus ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2398)
inline void MSVISIO::IVInvisibleApp::PutShowMenus ( short lpi2Ret ) {
    HRESULT _hr = put_ShowMenus(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2399)
inline short MSVISIO::IVInvisibleApp::GetToolbarStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_ToolbarStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2400)
inline void MSVISIO::IVInvisibleApp::PutToolbarStyle ( short lpi2Ret ) {
    HRESULT _hr = put_ToolbarStyle(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2401)
inline short MSVISIO::IVInvisibleApp::GetShowStatusBar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowStatusBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2402)
inline void MSVISIO::IVInvisibleApp::PutShowStatusBar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowStatusBar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2403)
inline short MSVISIO::IVInvisibleApp::GetEventsEnabled ( ) {
    short _result = 0;
    HRESULT _hr = get_EventsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2404)
inline void MSVISIO::IVInvisibleApp::PutEventsEnabled ( short lpi2Ret ) {
    HRESULT _hr = put_EventsEnabled(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2405)
inline _bstr_t MSVISIO::IVInvisibleApp::FormatResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResult(StringOrNumber, UnitsIn, UnitsOut, Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2406)
inline double MSVISIO::IVInvisibleApp::ConvertResult ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut ) {
    double _result = 0;
    HRESULT _hr = raw_ConvertResult(StringOrNumber, UnitsIn, UnitsOut, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2407)
inline _bstr_t MSVISIO::IVInvisibleApp::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2408)
inline HRESULT MSVISIO::IVInvisibleApp::EnumDirectories ( _bstr_t PathsString, SAFEARRAY * * NameArray ) {
    HRESULT _hr = raw_EnumDirectories(PathsString, NameArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2409)
inline long MSVISIO::IVInvisibleApp::GetTraceFlags ( ) {
    long _result = 0;
    HRESULT _hr = get_TraceFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2410)
inline void MSVISIO::IVInvisibleApp::PutTraceFlags ( long lpi4Ret ) {
    HRESULT _hr = put_TraceFlags(lpi4Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2411)
inline HRESULT MSVISIO::IVInvisibleApp::PurgeUndo ( ) {
    HRESULT _hr = raw_PurgeUndo();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2412)
inline long MSVISIO::IVInvisibleApp::QueueMarkerEvent ( _bstr_t ContextString ) {
    long _result = 0;
    HRESULT _hr = raw_QueueMarkerEvent(ContextString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2413)
inline short MSVISIO::IVInvisibleApp::GetShowToolbar ( ) {
    short _result = 0;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2414)
inline void MSVISIO::IVInvisibleApp::PutShowToolbar ( short lpi2Ret ) {
    HRESULT _hr = put_ShowToolbar(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2415)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetLiveDynamics ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LiveDynamics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2416)
inline void MSVISIO::IVInvisibleApp::PutLiveDynamics ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_LiveDynamics(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2417)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetAutoLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2418)
inline void MSVISIO::IVInvisibleApp::PutAutoLayout ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_AutoLayout(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2419)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2420)
inline void MSVISIO::IVInvisibleApp::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2421)
inline long MSVISIO::IVInvisibleApp::BeginUndoScope ( _bstr_t bstrUndoScopeName ) {
    long _result = 0;
    HRESULT _hr = raw_BeginUndoScope(bstrUndoScopeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2422)
inline HRESULT MSVISIO::IVInvisibleApp::EndUndoScope ( long nScopeID, VARIANT_BOOL bCommit ) {
    HRESULT _hr = raw_EndUndoScope(nScopeID, bCommit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2423)
inline HRESULT MSVISIO::IVInvisibleApp::AddUndoUnit ( IUnknown * pUndoUnit ) {
    HRESULT _hr = raw_AddUndoUnit(pUndoUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2424)
inline _bstr_t MSVISIO::IVInvisibleApp::GetCommandLine ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CommandLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2425)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetIsUndoingOrRedoing ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUndoingOrRedoing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2426)
inline long MSVISIO::IVInvisibleApp::GetCurrentScope ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2427)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetIsInScope ( long nCmdID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsInScope(nCmdID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2428)
inline IDispatchPtr MSVISIO::IVInvisibleApp::Getold_Addins ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_old_Addins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2429)
inline _bstr_t MSVISIO::IVInvisibleApp::GetProductName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2430)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetUndoEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UndoEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2431)
inline void MSVISIO::IVInvisibleApp::PutUndoEnabled ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_UndoEnabled(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2432)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetShowChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2433)
inline void MSVISIO::IVInvisibleApp::PutShowChanges ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_ShowChanges(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2434)
inline short MSVISIO::IVInvisibleApp::GetTypelibMajorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2435)
inline short MSVISIO::IVInvisibleApp::GetTypelibMinorVersion ( ) {
    short _result = 0;
    HRESULT _hr = get_TypelibMinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2436)
inline short MSVISIO::IVInvisibleApp::GetAutoRecoverInterval ( ) {
    short _result = 0;
    HRESULT _hr = get_AutoRecoverInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2437)
inline void MSVISIO::IVInvisibleApp::PutAutoRecoverInterval ( short lpi2Ret ) {
    HRESULT _hr = put_AutoRecoverInterval(lpi2Ret);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2438)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetInhibitSelectChange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InhibitSelectChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2439)
inline void MSVISIO::IVInvisibleApp::PutInhibitSelectChange ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_InhibitSelectChange(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2440)
inline _bstr_t MSVISIO::IVInvisibleApp::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2441)
inline void MSVISIO::IVInvisibleApp::PutActivePrinter ( _bstr_t pbstrPrinterName ) {
    HRESULT _hr = put_ActivePrinter(pbstrPrinterName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2442)
inline SAFEARRAY * MSVISIO::IVInvisibleApp::GetAvailablePrinters ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_AvailablePrinters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2443)
inline HRESULT MSVISIO::IVInvisibleApp::RenameCurrentScope ( _bstr_t bstrScopeName ) {
    HRESULT _hr = raw_RenameCurrentScope(bstrScopeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2444)
inline HRESULT MSVISIO::IVInvisibleApp::InvokeHelp ( _bstr_t bstrHelpFileName, long Command, long Data ) {
    HRESULT _hr = raw_InvokeHelp(bstrHelpFileName, Command, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2445)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2446)
inline long MSVISIO::IVInvisibleApp::GetBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2447)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetCOMAddIns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2448)
inline _variant_t MSVISIO::IVInvisibleApp::GetDefaultPageUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultPageUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2449)
inline void MSVISIO::IVInvisibleApp::PutDefaultPageUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultPageUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2450)
inline _variant_t MSVISIO::IVInvisibleApp::GetDefaultTextUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultTextUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2451)
inline void MSVISIO::IVInvisibleApp::PutDefaultTextUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultTextUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2452)
inline _variant_t MSVISIO::IVInvisibleApp::GetDefaultAngleUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultAngleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2453)
inline void MSVISIO::IVInvisibleApp::PutDefaultAngleUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultAngleUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2454)
inline _variant_t MSVISIO::IVInvisibleApp::GetDefaultDurationUnits ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultDurationUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2455)
inline void MSVISIO::IVInvisibleApp::PutDefaultDurationUnits ( const _variant_t & pUnitsNameOrCode ) {
    HRESULT _hr = put_DefaultDurationUnits(pUnitsNameOrCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2456)
inline long MSVISIO::IVInvisibleApp::GetFullBuild ( ) {
    long _result = 0;
    HRESULT _hr = get_FullBuild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2457)
inline HRESULT MSVISIO::IVInvisibleApp::OnComponentEnterState ( enum VisOnComponentEnterCodes uStateID, VARIANT_BOOL bEnter ) {
    HRESULT _hr = raw_OnComponentEnterState(uStateID, bEnter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2458)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetVBAEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VBAEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2459)
inline enum MSVISIO::VisZoomBehavior MSVISIO::IVInvisibleApp::GetDefaultZoomBehavior ( ) {
    enum VisZoomBehavior _result;
    HRESULT _hr = get_DefaultZoomBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2460)
inline void MSVISIO::IVInvisibleApp::PutDefaultZoomBehavior ( enum VisZoomBehavior pnZoomBehavior ) {
    HRESULT _hr = put_DefaultZoomBehavior(pnZoomBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2461)
inline _variant_t MSVISIO::IVInvisibleApp::GetUsageStatistic ( long nWhichStatistic ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetUsageStatistic(nWhichStatistic, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(2462)
inline IFontDisp * MSVISIO::IVInvisibleApp::GetDialogFont ( ) {
    IFontDisp * _result = 0;
    HRESULT _hr = get_DialogFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2463)
inline long MSVISIO::IVInvisibleApp::GetLanguageHelp ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2464)
inline MSVISIO::IVWindowPtr MSVISIO::IVInvisibleApp::GetWindow ( ) {
    struct IVWindow * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVWindowPtr(_result, false);
}

#pragma implementation_key(2465)
inline _bstr_t MSVISIO::IVInvisibleApp::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2466)
inline IUnknownPtr MSVISIO::IVInvisibleApp::GetConnectorToolDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_ConnectorToolDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2467)
inline MSVISIO::IVApplicationSettingsPtr MSVISIO::IVInvisibleApp::GetSettings ( ) {
    struct IVApplicationSettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVApplicationSettingsPtr(_result, false);
}

#pragma implementation_key(2468)
inline _bstr_t MSVISIO::IVInvisibleApp::FormatResultEx ( const _variant_t & StringOrNumber, const _variant_t & UnitsIn, const _variant_t & UnitsOut, _bstr_t Format, long LangID, long CalendarID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatResultEx(StringOrNumber, UnitsIn, UnitsOut, Format, LangID, CalendarID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2469)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetSaveAsWebObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SaveAsWebObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2470)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetMsoDebugOptions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2471)
inline _bstr_t MSVISIO::IVInvisibleApp::GetMyShapesPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyShapesPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2472)
inline void MSVISIO::IVInvisibleApp::PutMyShapesPath ( _bstr_t lpbstrRet ) {
    HRESULT _hr = put_MyShapesPath(lpbstrRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2473)
inline IUnknownPtr MSVISIO::IVInvisibleApp::GetDefaultRectangleDataObject ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_DefaultRectangleDataObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2474)
inline VARIANT_BOOL MSVISIO::IVInvisibleApp::GetDataFeaturesEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DataFeaturesEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2475)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetLanguageSettings ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2476)
inline IDispatchPtr MSVISIO::IVInvisibleApp::GetAssistance ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Assistance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IVMenuSets wrapper method implementations
//

#pragma implementation_key(2477)
inline IUnknownPtr MSVISIO::IVMenuSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2478)
inline MSVISIO::IVMenuSetPtr MSVISIO::IVMenuSets::GetItem ( long lIndex ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

#pragma implementation_key(2479)
inline MSVISIO::IVMenuSetPtr MSVISIO::IVMenuSets::GetItemAtID ( long lID ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

#pragma implementation_key(2480)
inline MSVISIO::IVMenuSetPtr MSVISIO::IVMenuSets::Add ( ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

#pragma implementation_key(2481)
inline MSVISIO::IVMenuSetPtr MSVISIO::IVMenuSets::AddAtID ( long lID ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

#pragma implementation_key(2482)
inline long MSVISIO::IVMenuSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2483)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVMenuSets::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVMenuSet wrapper method implementations
//

#pragma implementation_key(2484)
inline HRESULT MSVISIO::IVMenuSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2485)
inline _bstr_t MSVISIO::IVMenuSet::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2486)
inline void MSVISIO::IVMenuSet::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2487)
inline _bstr_t MSVISIO::IVMenuSet::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2488)
inline long MSVISIO::IVMenuSet::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2489)
inline MSVISIO::IVMenusPtr MSVISIO::IVMenuSet::GetMenus ( ) {
    struct IVMenus * _result = 0;
    HRESULT _hr = get_Menus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenusPtr(_result, false);
}

#pragma implementation_key(2490)
inline MSVISIO::IVMenuSetsPtr MSVISIO::IVMenuSet::GetParent ( ) {
    struct IVMenuSets * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetsPtr(_result, false);
}

#pragma implementation_key(2491)
inline VARIANT_BOOL MSVISIO::IVMenuSet::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2492)
inline void MSVISIO::IVMenuSet::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2493)
inline VARIANT_BOOL MSVISIO::IVMenuSet::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2494)
inline void MSVISIO::IVMenuSet::PutHeight ( short pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2495)
inline short MSVISIO::IVMenuSet::GetHeight ( ) {
    short _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2496)
inline void MSVISIO::IVMenuSet::PutLeft ( short pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2497)
inline short MSVISIO::IVMenuSet::GetLeft ( ) {
    short _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2498)
inline void MSVISIO::IVMenuSet::PutPosition ( short pPos ) {
    HRESULT _hr = put_Position(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2499)
inline short MSVISIO::IVMenuSet::GetPosition ( ) {
    short _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2500)
inline void MSVISIO::IVMenuSet::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2501)
inline short MSVISIO::IVMenuSet::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2502)
inline void MSVISIO::IVMenuSet::PutRowIndex ( short pwRow ) {
    HRESULT _hr = put_RowIndex(pwRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2503)
inline short MSVISIO::IVMenuSet::GetRowIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2504)
inline void MSVISIO::IVMenuSet::PutTop ( short pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2505)
inline short MSVISIO::IVMenuSet::GetTop ( ) {
    short _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2506)
inline void MSVISIO::IVMenuSet::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2507)
inline VARIANT_BOOL MSVISIO::IVMenuSet::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2508)
inline void MSVISIO::IVMenuSet::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2509)
inline short MSVISIO::IVMenuSet::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenuSet wrapper method implementations
//

#pragma implementation_key(2510)
inline HRESULT MSVISIO::IEnumVMenuSet::Next ( long celt, struct IVMenuSet * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2511)
inline HRESULT MSVISIO::IEnumVMenuSet::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2512)
inline HRESULT MSVISIO::IEnumVMenuSet::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2513)
inline HRESULT MSVISIO::IEnumVMenuSet::Clone ( struct IEnumVMenuSet * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMenus wrapper method implementations
//

#pragma implementation_key(2514)
inline IUnknownPtr MSVISIO::IVMenus::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2515)
inline MSVISIO::IVMenuPtr MSVISIO::IVMenus::GetItem ( long lIndex ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

#pragma implementation_key(2516)
inline MSVISIO::IVMenuPtr MSVISIO::IVMenus::Add ( ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

#pragma implementation_key(2517)
inline MSVISIO::IVMenuPtr MSVISIO::IVMenus::AddAt ( long lIndex ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

#pragma implementation_key(2518)
inline long MSVISIO::IVMenus::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2519)
inline MSVISIO::IVMenuSetPtr MSVISIO::IVMenus::GetParent ( ) {
    struct IVMenuSet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuSetPtr(_result, false);
}

//
// interface IVMenu wrapper method implementations
//

#pragma implementation_key(2520)
inline HRESULT MSVISIO::IVMenu::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2521)
inline _bstr_t MSVISIO::IVMenu::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2522)
inline void MSVISIO::IVMenu::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2523)
inline _bstr_t MSVISIO::IVMenu::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2524)
inline long MSVISIO::IVMenu::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2525)
inline void MSVISIO::IVMenu::PutMDIWindowMenu ( short pMDIWindowMenu ) {
    HRESULT _hr = put_MDIWindowMenu(pMDIWindowMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2526)
inline short MSVISIO::IVMenu::GetMDIWindowMenu ( ) {
    short _result = 0;
    HRESULT _hr = get_MDIWindowMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2527)
inline MSVISIO::IVMenuItemsPtr MSVISIO::IVMenu::GetMenuItems ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

#pragma implementation_key(2528)
inline MSVISIO::IVMenusPtr MSVISIO::IVMenu::GetParent ( ) {
    struct IVMenus * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenusPtr(_result, false);
}

#pragma implementation_key(2529)
inline void MSVISIO::IVMenu::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2530)
inline short MSVISIO::IVMenu::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2531)
inline void MSVISIO::IVMenu::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2532)
inline short MSVISIO::IVMenu::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2533)
inline short MSVISIO::IVMenu::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2534)
inline short MSVISIO::IVMenu::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2535)
inline void MSVISIO::IVMenu::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2536)
inline short MSVISIO::IVMenu::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2537)
inline void MSVISIO::IVMenu::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2538)
inline short MSVISIO::IVMenu::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2539)
inline void MSVISIO::IVMenu::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2540)
inline short MSVISIO::IVMenu::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2541)
inline void MSVISIO::IVMenu::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2542)
inline short MSVISIO::IVMenu::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2543)
inline void MSVISIO::IVMenu::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2544)
inline short MSVISIO::IVMenu::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2545)
inline void MSVISIO::IVMenu::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2546)
inline short MSVISIO::IVMenu::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2547)
inline void MSVISIO::IVMenu::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2548)
inline _bstr_t MSVISIO::IVMenu::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2549)
inline void MSVISIO::IVMenu::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2550)
inline _bstr_t MSVISIO::IVMenu::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2551)
inline void MSVISIO::IVMenu::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2552)
inline _bstr_t MSVISIO::IVMenu::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2553)
inline void MSVISIO::IVMenu::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2554)
inline _bstr_t MSVISIO::IVMenu::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2555)
inline void MSVISIO::IVMenu::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2556)
inline _bstr_t MSVISIO::IVMenu::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2557)
inline HRESULT MSVISIO::IVMenu::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2558)
inline VARIANT_BOOL MSVISIO::IVMenu::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2559)
inline void MSVISIO::IVMenu::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2560)
inline VARIANT_BOOL MSVISIO::IVMenu::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2561)
inline void MSVISIO::IVMenu::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2562)
inline short MSVISIO::IVMenu::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2563)
inline void MSVISIO::IVMenu::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2564)
inline short MSVISIO::IVMenu::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2565)
inline void MSVISIO::IVMenu::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2566)
inline short MSVISIO::IVMenu::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2567)
inline void MSVISIO::IVMenu::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2568)
inline VARIANT_BOOL MSVISIO::IVMenu::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2569)
inline void MSVISIO::IVMenu::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2570)
inline short MSVISIO::IVMenu::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2571)
inline void MSVISIO::IVMenu::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2572)
inline short MSVISIO::IVMenu::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenu wrapper method implementations
//

#pragma implementation_key(2573)
inline HRESULT MSVISIO::IEnumVMenu::Next ( long celt, struct IVMenu * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2574)
inline HRESULT MSVISIO::IEnumVMenu::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2575)
inline HRESULT MSVISIO::IEnumVMenu::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2576)
inline HRESULT MSVISIO::IEnumVMenu::Clone ( struct IEnumVMenu * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVMenuItems wrapper method implementations
//

#pragma implementation_key(2577)
inline IUnknownPtr MSVISIO::IVMenuItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2578)
inline MSVISIO::IVMenuItemPtr MSVISIO::IVMenuItems::GetItem ( long lIndex ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

#pragma implementation_key(2579)
inline MSVISIO::IVMenuItemPtr MSVISIO::IVMenuItems::Add ( ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

#pragma implementation_key(2580)
inline MSVISIO::IVMenuItemPtr MSVISIO::IVMenuItems::AddAt ( long lIndex ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

#pragma implementation_key(2581)
inline long MSVISIO::IVMenuItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2582)
inline MSVISIO::IVMenuPtr MSVISIO::IVMenuItems::GetParent ( ) {
    struct IVMenu * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuPtr(_result, false);
}

#pragma implementation_key(2583)
inline MSVISIO::IVMenuItemPtr MSVISIO::IVMenuItems::GetParentItem ( ) {
    struct IVMenuItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemPtr(_result, false);
}

//
// interface IVMenuItem wrapper method implementations
//

#pragma implementation_key(2584)
inline HRESULT MSVISIO::IVMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2585)
inline _bstr_t MSVISIO::IVMenuItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2586)
inline long MSVISIO::IVMenuItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2587)
inline MSVISIO::IVMenuItemsPtr MSVISIO::IVMenuItem::GetMenuItems ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_MenuItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

#pragma implementation_key(2588)
inline MSVISIO::IVMenuItemsPtr MSVISIO::IVMenuItem::GetParent ( ) {
    struct IVMenuItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVMenuItemsPtr(_result, false);
}

#pragma implementation_key(2589)
inline void MSVISIO::IVMenuItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2590)
inline short MSVISIO::IVMenuItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2591)
inline void MSVISIO::IVMenuItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2592)
inline short MSVISIO::IVMenuItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2593)
inline short MSVISIO::IVMenuItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2594)
inline short MSVISIO::IVMenuItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2595)
inline void MSVISIO::IVMenuItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2596)
inline _bstr_t MSVISIO::IVMenuItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2597)
inline void MSVISIO::IVMenuItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2598)
inline _bstr_t MSVISIO::IVMenuItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2599)
inline void MSVISIO::IVMenuItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2600)
inline _bstr_t MSVISIO::IVMenuItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2601)
inline void MSVISIO::IVMenuItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2602)
inline _bstr_t MSVISIO::IVMenuItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2603)
inline void MSVISIO::IVMenuItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2604)
inline _bstr_t MSVISIO::IVMenuItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2605)
inline void MSVISIO::IVMenuItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2606)
inline _bstr_t MSVISIO::IVMenuItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2607)
inline void MSVISIO::IVMenuItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2608)
inline short MSVISIO::IVMenuItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2609)
inline void MSVISIO::IVMenuItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2610)
inline short MSVISIO::IVMenuItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2611)
inline void MSVISIO::IVMenuItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2612)
inline short MSVISIO::IVMenuItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2613)
inline void MSVISIO::IVMenuItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2614)
inline short MSVISIO::IVMenuItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2615)
inline void MSVISIO::IVMenuItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2616)
inline short MSVISIO::IVMenuItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2617)
inline void MSVISIO::IVMenuItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2618)
inline short MSVISIO::IVMenuItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2619)
inline HRESULT MSVISIO::IVMenuItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2620)
inline VARIANT_BOOL MSVISIO::IVMenuItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2621)
inline void MSVISIO::IVMenuItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2622)
inline VARIANT_BOOL MSVISIO::IVMenuItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2623)
inline void MSVISIO::IVMenuItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2624)
inline short MSVISIO::IVMenuItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2625)
inline void MSVISIO::IVMenuItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2626)
inline short MSVISIO::IVMenuItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2627)
inline void MSVISIO::IVMenuItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2628)
inline short MSVISIO::IVMenuItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2629)
inline void MSVISIO::IVMenuItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2630)
inline VARIANT_BOOL MSVISIO::IVMenuItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2631)
inline void MSVISIO::IVMenuItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2632)
inline short MSVISIO::IVMenuItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2633)
inline void MSVISIO::IVMenuItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2634)
inline short MSVISIO::IVMenuItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2635)
inline void MSVISIO::IVMenuItem::PutBeginGroup ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_BeginGroup(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2636)
inline VARIANT_BOOL MSVISIO::IVMenuItem::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVMenuItem wrapper method implementations
//

#pragma implementation_key(2637)
inline HRESULT MSVISIO::IEnumVMenuItem::Next ( long celt, struct IVMenuItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2638)
inline HRESULT MSVISIO::IEnumVMenuItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2639)
inline HRESULT MSVISIO::IEnumVMenuItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2640)
inline HRESULT MSVISIO::IEnumVMenuItem::Clone ( struct IEnumVMenuItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbarSets wrapper method implementations
//

#pragma implementation_key(2641)
inline IUnknownPtr MSVISIO::IVToolbarSets::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2642)
inline MSVISIO::IVToolbarSetPtr MSVISIO::IVToolbarSets::GetItem ( long lIndex ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

#pragma implementation_key(2643)
inline MSVISIO::IVToolbarSetPtr MSVISIO::IVToolbarSets::GetItemAtID ( long lID ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

#pragma implementation_key(2644)
inline MSVISIO::IVToolbarSetPtr MSVISIO::IVToolbarSets::Add ( ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

#pragma implementation_key(2645)
inline MSVISIO::IVToolbarSetPtr MSVISIO::IVToolbarSets::AddAtID ( long lID ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

#pragma implementation_key(2646)
inline long MSVISIO::IVToolbarSets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2647)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVToolbarSets::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVToolbarSet wrapper method implementations
//

#pragma implementation_key(2648)
inline HRESULT MSVISIO::IVToolbarSet::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2649)
inline _bstr_t MSVISIO::IVToolbarSet::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2650)
inline void MSVISIO::IVToolbarSet::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2651)
inline _bstr_t MSVISIO::IVToolbarSet::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2652)
inline long MSVISIO::IVToolbarSet::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2653)
inline MSVISIO::IVToolbarsPtr MSVISIO::IVToolbarSet::GetToolbars ( ) {
    struct IVToolbars * _result = 0;
    HRESULT _hr = get_Toolbars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarsPtr(_result, false);
}

#pragma implementation_key(2654)
inline MSVISIO::IVToolbarSetsPtr MSVISIO::IVToolbarSet::GetParent ( ) {
    struct IVToolbarSets * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetsPtr(_result, false);
}

//
// interface IEnumVToolbarSet wrapper method implementations
//

#pragma implementation_key(2655)
inline HRESULT MSVISIO::IEnumVToolbarSet::Next ( long celt, struct IVToolbarSet * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2656)
inline HRESULT MSVISIO::IEnumVToolbarSet::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2657)
inline HRESULT MSVISIO::IEnumVToolbarSet::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2658)
inline HRESULT MSVISIO::IEnumVToolbarSet::Clone ( struct IEnumVToolbarSet * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbars wrapper method implementations
//

#pragma implementation_key(2659)
inline IUnknownPtr MSVISIO::IVToolbars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2660)
inline MSVISIO::IVToolbarPtr MSVISIO::IVToolbars::GetItem ( long lIndex ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

#pragma implementation_key(2661)
inline MSVISIO::IVToolbarPtr MSVISIO::IVToolbars::Add ( ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

#pragma implementation_key(2662)
inline MSVISIO::IVToolbarPtr MSVISIO::IVToolbars::AddAt ( long lIndex ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

#pragma implementation_key(2663)
inline long MSVISIO::IVToolbars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2664)
inline MSVISIO::IVToolbarSetPtr MSVISIO::IVToolbars::GetParent ( ) {
    struct IVToolbarSet * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarSetPtr(_result, false);
}

//
// interface IVToolbar wrapper method implementations
//

#pragma implementation_key(2665)
inline HRESULT MSVISIO::IVToolbar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2666)
inline _bstr_t MSVISIO::IVToolbar::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2667)
inline void MSVISIO::IVToolbar::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2668)
inline _bstr_t MSVISIO::IVToolbar::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2669)
inline long MSVISIO::IVToolbar::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2670)
inline MSVISIO::IVToolbarItemsPtr MSVISIO::IVToolbar::GetToolbarItems ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_ToolbarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

#pragma implementation_key(2671)
inline MSVISIO::IVToolbarsPtr MSVISIO::IVToolbar::GetParent ( ) {
    struct IVToolbars * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarsPtr(_result, false);
}

#pragma implementation_key(2672)
inline VARIANT_BOOL MSVISIO::IVToolbar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2673)
inline void MSVISIO::IVToolbar::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2674)
inline VARIANT_BOOL MSVISIO::IVToolbar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2675)
inline void MSVISIO::IVToolbar::PutHeight ( short pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2676)
inline short MSVISIO::IVToolbar::GetHeight ( ) {
    short _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2677)
inline void MSVISIO::IVToolbar::PutLeft ( short pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2678)
inline short MSVISIO::IVToolbar::GetLeft ( ) {
    short _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2679)
inline void MSVISIO::IVToolbar::PutPosition ( short pPos ) {
    HRESULT _hr = put_Position(pPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2680)
inline short MSVISIO::IVToolbar::GetPosition ( ) {
    short _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2681)
inline void MSVISIO::IVToolbar::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2682)
inline short MSVISIO::IVToolbar::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2683)
inline void MSVISIO::IVToolbar::PutRowIndex ( short pwRow ) {
    HRESULT _hr = put_RowIndex(pwRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2684)
inline short MSVISIO::IVToolbar::GetRowIndex ( ) {
    short _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2685)
inline void MSVISIO::IVToolbar::PutTop ( short pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2686)
inline short MSVISIO::IVToolbar::GetTop ( ) {
    short _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2687)
inline void MSVISIO::IVToolbar::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2688)
inline VARIANT_BOOL MSVISIO::IVToolbar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2689)
inline void MSVISIO::IVToolbar::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2690)
inline short MSVISIO::IVToolbar::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVToolbar wrapper method implementations
//

#pragma implementation_key(2691)
inline HRESULT MSVISIO::IEnumVToolbar::Next ( long celt, struct IVToolbar * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2692)
inline HRESULT MSVISIO::IEnumVToolbar::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2693)
inline HRESULT MSVISIO::IEnumVToolbar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2694)
inline HRESULT MSVISIO::IEnumVToolbar::Clone ( struct IEnumVToolbar * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVToolbarItems wrapper method implementations
//

#pragma implementation_key(2695)
inline IUnknownPtr MSVISIO::IVToolbarItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2696)
inline MSVISIO::IVToolbarItemPtr MSVISIO::IVToolbarItems::GetItem ( long lIndex ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

#pragma implementation_key(2697)
inline MSVISIO::IVToolbarItemPtr MSVISIO::IVToolbarItems::Add ( ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

#pragma implementation_key(2698)
inline MSVISIO::IVToolbarItemPtr MSVISIO::IVToolbarItems::AddAt ( long lIndex ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

#pragma implementation_key(2699)
inline long MSVISIO::IVToolbarItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2700)
inline MSVISIO::IVToolbarPtr MSVISIO::IVToolbarItems::GetParent ( ) {
    struct IVToolbar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarPtr(_result, false);
}

#pragma implementation_key(2701)
inline MSVISIO::IVToolbarItemPtr MSVISIO::IVToolbarItems::GetParentItem ( ) {
    struct IVToolbarItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemPtr(_result, false);
}

//
// interface IVToolbarItem wrapper method implementations
//

#pragma implementation_key(2702)
inline HRESULT MSVISIO::IVToolbarItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2703)
inline HRESULT MSVISIO::IVToolbarItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2704)
inline _bstr_t MSVISIO::IVToolbarItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2705)
inline long MSVISIO::IVToolbarItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2706)
inline MSVISIO::IVToolbarItemsPtr MSVISIO::IVToolbarItem::GetParent ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

#pragma implementation_key(2707)
inline void MSVISIO::IVToolbarItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2708)
inline short MSVISIO::IVToolbarItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2709)
inline void MSVISIO::IVToolbarItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2710)
inline short MSVISIO::IVToolbarItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2711)
inline void MSVISIO::IVToolbarItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2712)
inline _bstr_t MSVISIO::IVToolbarItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2713)
inline void MSVISIO::IVToolbarItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2714)
inline _bstr_t MSVISIO::IVToolbarItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2715)
inline void MSVISIO::IVToolbarItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2716)
inline _bstr_t MSVISIO::IVToolbarItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2717)
inline void MSVISIO::IVToolbarItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2718)
inline _bstr_t MSVISIO::IVToolbarItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2719)
inline void MSVISIO::IVToolbarItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2720)
inline short MSVISIO::IVToolbarItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2721)
inline void MSVISIO::IVToolbarItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2722)
inline short MSVISIO::IVToolbarItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2723)
inline void MSVISIO::IVToolbarItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2724)
inline short MSVISIO::IVToolbarItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2725)
inline void MSVISIO::IVToolbarItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2726)
inline short MSVISIO::IVToolbarItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2727)
inline void MSVISIO::IVToolbarItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2728)
inline short MSVISIO::IVToolbarItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2729)
inline void MSVISIO::IVToolbarItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2730)
inline short MSVISIO::IVToolbarItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2731)
inline void MSVISIO::IVToolbarItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2732)
inline _bstr_t MSVISIO::IVToolbarItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2733)
inline void MSVISIO::IVToolbarItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2734)
inline _bstr_t MSVISIO::IVToolbarItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2735)
inline VARIANT_BOOL MSVISIO::IVToolbarItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2736)
inline void MSVISIO::IVToolbarItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2737)
inline VARIANT_BOOL MSVISIO::IVToolbarItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2738)
inline void MSVISIO::IVToolbarItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2739)
inline short MSVISIO::IVToolbarItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2740)
inline void MSVISIO::IVToolbarItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2741)
inline short MSVISIO::IVToolbarItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2742)
inline void MSVISIO::IVToolbarItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2743)
inline short MSVISIO::IVToolbarItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2744)
inline void MSVISIO::IVToolbarItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2745)
inline VARIANT_BOOL MSVISIO::IVToolbarItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2746)
inline void MSVISIO::IVToolbarItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2747)
inline short MSVISIO::IVToolbarItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2748)
inline void MSVISIO::IVToolbarItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2749)
inline short MSVISIO::IVToolbarItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2750)
inline MSVISIO::IVToolbarItemsPtr MSVISIO::IVToolbarItem::GetToolbarItems ( ) {
    struct IVToolbarItems * _result = 0;
    HRESULT _hr = get_ToolbarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVToolbarItemsPtr(_result, false);
}

#pragma implementation_key(2751)
inline short MSVISIO::IVToolbarItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2752)
inline short MSVISIO::IVToolbarItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2753)
inline void MSVISIO::IVToolbarItem::PutBeginGroup ( VARIANT_BOOL pbRet ) {
    HRESULT _hr = put_BeginGroup(pbRet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2754)
inline VARIANT_BOOL MSVISIO::IVToolbarItem::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVToolbarItem wrapper method implementations
//

#pragma implementation_key(2755)
inline HRESULT MSVISIO::IEnumVToolbarItem::Next ( long celt, struct IVToolbarItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2756)
inline HRESULT MSVISIO::IEnumVToolbarItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2757)
inline HRESULT MSVISIO::IEnumVToolbarItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2758)
inline HRESULT MSVISIO::IEnumVToolbarItem::Clone ( struct IEnumVToolbarItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVStatusBars wrapper method implementations
//

#pragma implementation_key(2759)
inline IUnknownPtr MSVISIO::IVStatusBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2760)
inline MSVISIO::IVStatusBarPtr MSVISIO::IVStatusBars::GetItem ( long lIndex ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

#pragma implementation_key(2761)
inline MSVISIO::IVStatusBarPtr MSVISIO::IVStatusBars::GetItemAtID ( long lID ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

#pragma implementation_key(2762)
inline MSVISIO::IVStatusBarPtr MSVISIO::IVStatusBars::Add ( ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

#pragma implementation_key(2763)
inline MSVISIO::IVStatusBarPtr MSVISIO::IVStatusBars::AddAtID ( long lID ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

#pragma implementation_key(2764)
inline long MSVISIO::IVStatusBars::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2765)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVStatusBars::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVStatusBar wrapper method implementations
//

#pragma implementation_key(2766)
inline HRESULT MSVISIO::IVStatusBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2767)
inline _bstr_t MSVISIO::IVStatusBar::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2768)
inline void MSVISIO::IVStatusBar::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2769)
inline _bstr_t MSVISIO::IVStatusBar::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2770)
inline long MSVISIO::IVStatusBar::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2771)
inline MSVISIO::IVStatusBarItemsPtr MSVISIO::IVStatusBar::GetStatusBarItems ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_StatusBarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

#pragma implementation_key(2772)
inline MSVISIO::IVStatusBarsPtr MSVISIO::IVStatusBar::GetParent ( ) {
    struct IVStatusBars * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarsPtr(_result, false);
}

#pragma implementation_key(2773)
inline VARIANT_BOOL MSVISIO::IVStatusBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2774)
inline void MSVISIO::IVStatusBar::PutProtection ( short pProt ) {
    HRESULT _hr = put_Protection(pProt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2775)
inline short MSVISIO::IVStatusBar::GetProtection ( ) {
    short _result = 0;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVStatusBar wrapper method implementations
//

#pragma implementation_key(2776)
inline HRESULT MSVISIO::IEnumVStatusBar::Next ( long celt, struct IVStatusBar * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2777)
inline HRESULT MSVISIO::IEnumVStatusBar::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2778)
inline HRESULT MSVISIO::IEnumVStatusBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2779)
inline HRESULT MSVISIO::IEnumVStatusBar::Clone ( struct IEnumVStatusBar * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVStatusBarItems wrapper method implementations
//

#pragma implementation_key(2780)
inline IUnknownPtr MSVISIO::IVStatusBarItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2781)
inline MSVISIO::IVStatusBarItemPtr MSVISIO::IVStatusBarItems::GetItem ( long lIndex ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

#pragma implementation_key(2782)
inline MSVISIO::IVStatusBarItemPtr MSVISIO::IVStatusBarItems::Add ( ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

#pragma implementation_key(2783)
inline MSVISIO::IVStatusBarItemPtr MSVISIO::IVStatusBarItems::AddAt ( long lIndex ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = raw_AddAt(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

#pragma implementation_key(2784)
inline long MSVISIO::IVStatusBarItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2785)
inline MSVISIO::IVStatusBarPtr MSVISIO::IVStatusBarItems::GetParent ( ) {
    struct IVStatusBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarPtr(_result, false);
}

#pragma implementation_key(2786)
inline MSVISIO::IVStatusBarItemPtr MSVISIO::IVStatusBarItems::GetParentItem ( ) {
    struct IVStatusBarItem * _result = 0;
    HRESULT _hr = get_ParentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemPtr(_result, false);
}

//
// interface IVStatusBarItem wrapper method implementations
//

#pragma implementation_key(2787)
inline HRESULT MSVISIO::IVStatusBarItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2788)
inline HRESULT MSVISIO::IVStatusBarItem::IconFileName ( _bstr_t IconFileName ) {
    HRESULT _hr = raw_IconFileName(IconFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2789)
inline _bstr_t MSVISIO::IVStatusBarItem::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2790)
inline long MSVISIO::IVStatusBarItem::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2791)
inline MSVISIO::IVStatusBarItemsPtr MSVISIO::IVStatusBarItem::GetParent ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

#pragma implementation_key(2792)
inline void MSVISIO::IVStatusBarItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2793)
inline short MSVISIO::IVStatusBarItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2794)
inline void MSVISIO::IVStatusBarItem::PutHelpContextID ( short pHelpContextID ) {
    HRESULT _hr = put_HelpContextID(pHelpContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2795)
inline short MSVISIO::IVStatusBarItem::GetHelpContextID ( ) {
    short _result = 0;
    HRESULT _hr = get_HelpContextID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2796)
inline void MSVISIO::IVStatusBarItem::PutActionText ( _bstr_t pActionText ) {
    HRESULT _hr = put_ActionText(pActionText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2797)
inline _bstr_t MSVISIO::IVStatusBarItem::GetActionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2798)
inline void MSVISIO::IVStatusBarItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2799)
inline _bstr_t MSVISIO::IVStatusBarItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2800)
inline void MSVISIO::IVStatusBarItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2801)
inline _bstr_t MSVISIO::IVStatusBarItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2802)
inline void MSVISIO::IVStatusBarItem::PutHelpFile ( _bstr_t pHelpFile ) {
    HRESULT _hr = put_HelpFile(pHelpFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2803)
inline _bstr_t MSVISIO::IVStatusBarItem::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2804)
inline void MSVISIO::IVStatusBarItem::PutCntrlType ( short pwCntrlType ) {
    HRESULT _hr = put_CntrlType(pwCntrlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2805)
inline short MSVISIO::IVStatusBarItem::GetCntrlType ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2806)
inline void MSVISIO::IVStatusBarItem::PutCntrlID ( short pwCntrlID ) {
    HRESULT _hr = put_CntrlID(pwCntrlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2807)
inline short MSVISIO::IVStatusBarItem::GetCntrlID ( ) {
    short _result = 0;
    HRESULT _hr = get_CntrlID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2808)
inline void MSVISIO::IVStatusBarItem::PutTypeSpecific1 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific1(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2809)
inline short MSVISIO::IVStatusBarItem::GetTypeSpecific1 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2810)
inline void MSVISIO::IVStatusBarItem::PutPriority ( short pwPriority ) {
    HRESULT _hr = put_Priority(pwPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2811)
inline short MSVISIO::IVStatusBarItem::GetPriority ( ) {
    short _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2812)
inline void MSVISIO::IVStatusBarItem::PutSpacing ( short pwSpacing ) {
    HRESULT _hr = put_Spacing(pwSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2813)
inline short MSVISIO::IVStatusBarItem::GetSpacing ( ) {
    short _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2814)
inline void MSVISIO::IVStatusBarItem::PutTypeSpecific2 ( short pwTypeSpecific ) {
    HRESULT _hr = put_TypeSpecific2(pwTypeSpecific);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2815)
inline short MSVISIO::IVStatusBarItem::GetTypeSpecific2 ( ) {
    short _result = 0;
    HRESULT _hr = get_TypeSpecific2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2816)
inline void MSVISIO::IVStatusBarItem::PutCaption ( _bstr_t pCaption ) {
    HRESULT _hr = put_Caption(pCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2817)
inline _bstr_t MSVISIO::IVStatusBarItem::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2818)
inline void MSVISIO::IVStatusBarItem::PutMiniHelp ( _bstr_t pMiniHelp ) {
    HRESULT _hr = put_MiniHelp(pMiniHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2819)
inline _bstr_t MSVISIO::IVStatusBarItem::GetMiniHelp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2820)
inline VARIANT_BOOL MSVISIO::IVStatusBarItem::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2821)
inline void MSVISIO::IVStatusBarItem::PutEnabled ( VARIANT_BOOL pbEnabled ) {
    HRESULT _hr = put_Enabled(pbEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2822)
inline VARIANT_BOOL MSVISIO::IVStatusBarItem::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2823)
inline void MSVISIO::IVStatusBarItem::PutFaceID ( short pwFaceID ) {
    HRESULT _hr = put_FaceID(pwFaceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2824)
inline short MSVISIO::IVStatusBarItem::GetFaceID ( ) {
    short _result = 0;
    HRESULT _hr = get_FaceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2825)
inline void MSVISIO::IVStatusBarItem::PutState ( short pwState ) {
    HRESULT _hr = put_State(pwState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2826)
inline short MSVISIO::IVStatusBarItem::GetState ( ) {
    short _result = 0;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2827)
inline void MSVISIO::IVStatusBarItem::PutStyle ( short pwStyle ) {
    HRESULT _hr = put_Style(pwStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2828)
inline short MSVISIO::IVStatusBarItem::GetStyle ( ) {
    short _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2829)
inline void MSVISIO::IVStatusBarItem::PutVisible ( VARIANT_BOOL pbVisible ) {
    HRESULT _hr = put_Visible(pbVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2830)
inline VARIANT_BOOL MSVISIO::IVStatusBarItem::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2831)
inline void MSVISIO::IVStatusBarItem::PutWidth ( short pwWidth ) {
    HRESULT _hr = put_Width(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2832)
inline short MSVISIO::IVStatusBarItem::GetWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2833)
inline void MSVISIO::IVStatusBarItem::PutPaletteWidth ( short pwWidth ) {
    HRESULT _hr = put_PaletteWidth(pwWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2834)
inline short MSVISIO::IVStatusBarItem::GetPaletteWidth ( ) {
    short _result = 0;
    HRESULT _hr = get_PaletteWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2835)
inline MSVISIO::IVStatusBarItemsPtr MSVISIO::IVStatusBarItem::GetStatusBarItems ( ) {
    struct IVStatusBarItems * _result = 0;
    HRESULT _hr = get_StatusBarItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVStatusBarItemsPtr(_result, false);
}

#pragma implementation_key(2836)
inline short MSVISIO::IVStatusBarItem::GetIsSeparator ( ) {
    short _result = 0;
    HRESULT _hr = get_IsSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2837)
inline short MSVISIO::IVStatusBarItem::GetIsHierarchical ( ) {
    short _result = 0;
    HRESULT _hr = get_IsHierarchical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IEnumVStatusBarItem wrapper method implementations
//

#pragma implementation_key(2838)
inline HRESULT MSVISIO::IEnumVStatusBarItem::Next ( long celt, struct IVStatusBarItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2839)
inline HRESULT MSVISIO::IEnumVStatusBarItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2840)
inline HRESULT MSVISIO::IEnumVStatusBarItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2841)
inline HRESULT MSVISIO::IEnumVStatusBarItem::Clone ( struct IEnumVStatusBarItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVAccelTables wrapper method implementations
//

#pragma implementation_key(2842)
inline IUnknownPtr MSVISIO::IVAccelTables::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2843)
inline MSVISIO::IVAccelTablePtr MSVISIO::IVAccelTables::GetItem ( long lIndex ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

#pragma implementation_key(2844)
inline MSVISIO::IVAccelTablePtr MSVISIO::IVAccelTables::GetItemAtID ( long lID ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_ItemAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

#pragma implementation_key(2845)
inline MSVISIO::IVAccelTablePtr MSVISIO::IVAccelTables::Add ( ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

#pragma implementation_key(2846)
inline MSVISIO::IVAccelTablePtr MSVISIO::IVAccelTables::AddAtID ( long lID ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = raw_AddAtID(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

#pragma implementation_key(2847)
inline long MSVISIO::IVAccelTables::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2848)
inline MSVISIO::IVUIObjectPtr MSVISIO::IVAccelTables::GetParent ( ) {
    struct IVUIObject * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVUIObjectPtr(_result, false);
}

//
// interface IVAccelTable wrapper method implementations
//

#pragma implementation_key(2849)
inline HRESULT MSVISIO::IVAccelTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2850)
inline _bstr_t MSVISIO::IVAccelTable::GetDefault ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2851)
inline void MSVISIO::IVAccelTable::PutTableName ( _bstr_t pTableName ) {
    HRESULT _hr = put_TableName(pTableName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2852)
inline _bstr_t MSVISIO::IVAccelTable::GetTableName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2853)
inline long MSVISIO::IVAccelTable::GetSetID ( ) {
    long _result = 0;
    HRESULT _hr = get_SetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2854)
inline MSVISIO::IVAccelItemsPtr MSVISIO::IVAccelTable::GetAccelItems ( ) {
    struct IVAccelItems * _result = 0;
    HRESULT _hr = get_AccelItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemsPtr(_result, false);
}

#pragma implementation_key(2855)
inline MSVISIO::IVAccelTablesPtr MSVISIO::IVAccelTable::GetParent ( ) {
    struct IVAccelTables * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablesPtr(_result, false);
}

//
// interface IEnumVAccelTable wrapper method implementations
//

#pragma implementation_key(2856)
inline HRESULT MSVISIO::IEnumVAccelTable::Next ( long celt, struct IVAccelTable * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2857)
inline HRESULT MSVISIO::IEnumVAccelTable::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2858)
inline HRESULT MSVISIO::IEnumVAccelTable::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2859)
inline HRESULT MSVISIO::IEnumVAccelTable::Clone ( struct IEnumVAccelTable * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVAccelItems wrapper method implementations
//

#pragma implementation_key(2860)
inline IUnknownPtr MSVISIO::IVAccelItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2861)
inline MSVISIO::IVAccelItemPtr MSVISIO::IVAccelItems::GetItem ( long lIndex ) {
    struct IVAccelItem * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemPtr(_result, false);
}

#pragma implementation_key(2862)
inline MSVISIO::IVAccelItemPtr MSVISIO::IVAccelItems::Add ( ) {
    struct IVAccelItem * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemPtr(_result, false);
}

#pragma implementation_key(2863)
inline long MSVISIO::IVAccelItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2864)
inline MSVISIO::IVAccelTablePtr MSVISIO::IVAccelItems::GetParent ( ) {
    struct IVAccelTable * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelTablePtr(_result, false);
}

//
// interface IVAccelItem wrapper method implementations
//

#pragma implementation_key(2865)
inline HRESULT MSVISIO::IVAccelItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2866)
inline short MSVISIO::IVAccelItem::GetDefault ( ) {
    short _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2867)
inline void MSVISIO::IVAccelItem::PutCmdNum ( short pwCmd ) {
    HRESULT _hr = put_CmdNum(pwCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2868)
inline short MSVISIO::IVAccelItem::GetCmdNum ( ) {
    short _result = 0;
    HRESULT _hr = get_CmdNum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2869)
inline void MSVISIO::IVAccelItem::PutKey ( short pKey ) {
    HRESULT _hr = put_Key(pKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2870)
inline short MSVISIO::IVAccelItem::GetKey ( ) {
    short _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2871)
inline void MSVISIO::IVAccelItem::PutAlt ( short pAlt ) {
    HRESULT _hr = put_Alt(pAlt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2872)
inline short MSVISIO::IVAccelItem::GetAlt ( ) {
    short _result = 0;
    HRESULT _hr = get_Alt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2873)
inline void MSVISIO::IVAccelItem::PutShift ( short pShift ) {
    HRESULT _hr = put_Shift(pShift);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2874)
inline short MSVISIO::IVAccelItem::GetShift ( ) {
    short _result = 0;
    HRESULT _hr = get_Shift(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2875)
inline void MSVISIO::IVAccelItem::PutControl ( short pControl ) {
    HRESULT _hr = put_Control(pControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2876)
inline short MSVISIO::IVAccelItem::GetControl ( ) {
    short _result = 0;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2877)
inline MSVISIO::IVAccelItemsPtr MSVISIO::IVAccelItem::GetParent ( ) {
    struct IVAccelItems * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVAccelItemsPtr(_result, false);
}

#pragma implementation_key(2878)
inline void MSVISIO::IVAccelItem::PutAddOnName ( _bstr_t pAddOnName ) {
    HRESULT _hr = put_AddOnName(pAddOnName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2879)
inline _bstr_t MSVISIO::IVAccelItem::GetAddOnName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2880)
inline void MSVISIO::IVAccelItem::PutAddOnArgs ( _bstr_t pAddOnArgs ) {
    HRESULT _hr = put_AddOnArgs(pAddOnArgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2881)
inline _bstr_t MSVISIO::IVAccelItem::GetAddOnArgs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddOnArgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IEnumVAccelItem wrapper method implementations
//

#pragma implementation_key(2882)
inline HRESULT MSVISIO::IEnumVAccelItem::Next ( long celt, struct IVAccelItem * * rgelt, long * pceltFetched ) {
    HRESULT _hr = raw_Next(celt, rgelt, pceltFetched);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2883)
inline HRESULT MSVISIO::IEnumVAccelItem::Skip ( long celt ) {
    HRESULT _hr = raw_Skip(celt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2884)
inline HRESULT MSVISIO::IEnumVAccelItem::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2885)
inline HRESULT MSVISIO::IEnumVAccelItem::Clone ( struct IEnumVAccelItem * * ppenm ) {
    HRESULT _hr = raw_Clone(ppenm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVBUndoManager wrapper method implementations
//

#pragma implementation_key(2886)
inline HRESULT MSVISIO::IVBUndoManager::Add ( struct IVBUndoUnit * pUnit ) {
    HRESULT _hr = raw_Add(pUnit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVBUndoUnit wrapper method implementations
//

#pragma implementation_key(2887)
inline HRESULT MSVISIO::IVBUndoUnit::Do ( struct IVBUndoManager * pMgr ) {
    HRESULT _hr = raw_Do(pMgr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2888)
inline _bstr_t MSVISIO::IVBUndoUnit::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2889)
inline _bstr_t MSVISIO::IVBUndoUnit::GetUnitTypeCLSID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnitTypeCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2890)
inline HRESULT MSVISIO::IVBUndoUnit::OnNextAdd ( ) {
    HRESULT _hr = raw_OnNextAdd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2891)
inline long MSVISIO::IVBUndoUnit::GetUnitTypeLong ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitTypeLong(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2892)
inline long MSVISIO::IVBUndoUnit::GetUnitSize ( ) {
    long _result = 0;
    HRESULT _hr = get_UnitSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
