// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (132193e8).
//
// f:\hitetouchpro_work\test_cross_1\utility\win32\debug\msppt9.tlh
//
// C++ source equivalent of Win32 type library ./ImportFile/MSPPT9.OLB
// compiler-generated file created 03/06/18 at 09:29:26 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSPPT {

//
// Forward references and typedefs
//

struct __declspec(uuid("91493440-5a91-11cf-8700-00aa0060263b"))
/* LIBID */ __PowerPoint;
enum PpWindowState;
enum PpArrangeStyle;
enum PpViewType;
enum PpColorSchemeIndex;
enum PpSlideSizeType;
enum PpSaveAsFileType;
enum PpTextStyleType;
enum PpSlideLayout;
enum PpEntryEffect;
enum PpTextLevelEffect;
enum PpTextUnitEffect;
enum PpChartUnitEffect;
enum PpAfterEffect;
enum PpAdvanceMode;
enum PpSoundEffectType;
enum PpFollowColors;
enum PpUpdateOption;
enum PpParagraphAlignment;
enum PpBaselineAlignment;
enum PpTabStopType;
enum PpIndentControl;
enum PpChangeCase;
enum PpDialogMode;
enum PpDialogStyle;
enum PpDialogPositioning;
enum PpDialogFontStyle;
enum PpScrollBarStyle;
enum PpListBoxSelectionStyle;
enum PpListBoxAbbreviationStyle;
enum PpAlertType;
enum PpAlertButton;
enum PpAlertIcon;
enum PpSlideShowPointerType;
enum PpSlideShowState;
enum PpSlideShowAdvanceMode;
enum PpFileDialogType;
enum PpFileDialogView;
enum PpPrintOutputType;
enum PpPrintHandoutOrder;
enum PpPrintColorType;
enum PpSelectionType;
enum PpDirection;
enum PpDateTimeFormat;
enum PpTransitionSpeed;
enum PpMouseActivation;
enum PpActionType;
enum PpPlaceholderType;
enum PpSlideShowType;
enum PpPrintRangeType;
enum PpAutoSize;
enum PpMediaType;
enum PpSoundFormatType;
enum PpFarEastLineBreakLevel;
enum PpSlideShowRangeType;
enum PpFrameColors;
struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Collection;
struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Application;
struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Global;
struct /* coclass */ Application;
struct /* coclass */ Global;
struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindow;
struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Selection;
struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindows;
struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowWindows;
struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DocumentWindow;
struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ View;
struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowView;
struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowSettings;
struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShows;
struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ NamedSlideShow;
struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintOptions;
struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRanges;
struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PrintRange;
struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIns;
struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AddIn;
struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Presentations;
struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
/* interface */ PresEvents;
struct /* coclass */ Presentation;
struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlinks;
struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Hyperlink;
struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PageSetup;
struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Fonts;
struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ExtraColors;
struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Slides;
struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Slide;
struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideRange;
struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Master;
struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
/* interface */ SldEvents;
struct /* coclass */ Slide;
struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorSchemes;
struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ColorScheme;
struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RGBColor;
struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SlideShowTransition;
struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundEffect;
struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ SoundFormat;
struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeadersFooters;
struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shapes;
struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Placeholders;
struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaceholderFormat;
struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FreeformBuilder;
struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Shape;
struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeRange;
struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ GroupShapes;
struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Adjustments;
struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FillFormat;
struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LineFormat;
struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ConnectorFormat;
struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextFrame;
struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OLEFormat;
struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ LinkFormat;
struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ObjectVerbs;
struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ AnimationSettings;
struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSettings;
struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ActionSetting;
struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PlaySettings;
struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextRange;
struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Ruler;
struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevels;
struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ RulerLevel;
struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStops;
struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TabStop;
struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Font;
struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ ParagraphFormat;
struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ BulletFormat;
struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyles;
struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyle;
struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevels;
struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ TextStyleLevel;
struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ HeaderFooter;
struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ _Presentation;
struct __declspec(uuid("9149349e-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPDialogs;
struct __declspec(uuid("9149349f-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPAlert;
struct __declspec(uuid("914934a0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPDialog;
struct __declspec(uuid("914934a1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPTabSheet;
struct __declspec(uuid("914934a2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPControls;
struct __declspec(uuid("914934a3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPTabSheets;
struct __declspec(uuid("914934a4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPControl;
struct __declspec(uuid("914934a5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPPushButton;
struct __declspec(uuid("914934a6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPToggleButton;
struct __declspec(uuid("914934a7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPBitmapButton;
struct __declspec(uuid("914934a8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPListBox;
struct __declspec(uuid("914934a9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPStrings;
struct __declspec(uuid("914934aa-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPCheckBox;
struct __declspec(uuid("914934ab-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPRadioCluster;
struct __declspec(uuid("914934ac-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPStaticText;
struct __declspec(uuid("914934ad-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPEditText;
struct __declspec(uuid("914934ae-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPIcon;
struct __declspec(uuid("914934af-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPBitmap;
struct __declspec(uuid("914934b0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPSpinner;
struct __declspec(uuid("914934b1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPScrollBar;
struct __declspec(uuid("914934b2-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPGroupBox;
struct __declspec(uuid("914934b3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPFrame;
struct __declspec(uuid("914934b4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPTabControl;
struct __declspec(uuid("914934b5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPDropDown;
struct __declspec(uuid("914934b6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPDropDownEdit;
struct __declspec(uuid("914934b7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPSlideMiniature;
struct __declspec(uuid("914934b8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PPRadioButton;
struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Tags;
struct __declspec(uuid("914934ba-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FileDialogFileList;
struct __declspec(uuid("914934bb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FileDialogExtension;
struct __declspec(uuid("914934bc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FileDialogExtensionList;
struct __declspec(uuid("914934bd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ FileDialog;
struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseTracker;
struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
/* interface */ MouseDownHandler;
struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ OCXExtender;
struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
/* interface */ OCXExtenderEvents;
struct /* coclass */ OLEControl;
enum PpBorderType;
enum PpHTMLVersion;
enum PpPublishSourceType;
enum PpBulletType;
enum PpNumberedBulletStyle;
enum PpMarkerType;
enum PpShapeFormat;
enum PpExportMode;
struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
/* interface */ EApplication;
struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Table;
struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Columns;
struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Column;
struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Rows;
struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Row;
struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ CellRange;
struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Cell;
struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Borders;
struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Panes;
struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Pane;
struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ WebOptions;
struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObjects;
struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ PublishObject;
struct __declspec(uuid("914934d1-5a91-11cf-8700-00aa0060263b"))
/* dual interface */ Marker;
struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
/* interface */ MasterEvents;
struct /* coclass */ Master;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Collection, __uuidof(Collection));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(View, __uuidof(View));
_COM_SMARTPTR_TYPEDEF(NamedSlideShow, __uuidof(NamedSlideShow));
_COM_SMARTPTR_TYPEDEF(NamedSlideShows, __uuidof(NamedSlideShows));
_COM_SMARTPTR_TYPEDEF(PrintRange, __uuidof(PrintRange));
_COM_SMARTPTR_TYPEDEF(PrintRanges, __uuidof(PrintRanges));
_COM_SMARTPTR_TYPEDEF(PrintOptions, __uuidof(PrintOptions));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(PresEvents, __uuidof(PresEvents));
_COM_SMARTPTR_TYPEDEF(Presentations, __uuidof(Presentations));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(ExtraColors, __uuidof(ExtraColors));
_COM_SMARTPTR_TYPEDEF(SldEvents, __uuidof(SldEvents));
_COM_SMARTPTR_TYPEDEF(RGBColor, __uuidof(RGBColor));
_COM_SMARTPTR_TYPEDEF(ColorScheme, __uuidof(ColorScheme));
_COM_SMARTPTR_TYPEDEF(ColorSchemes, __uuidof(ColorSchemes));
_COM_SMARTPTR_TYPEDEF(SoundEffect, __uuidof(SoundEffect));
_COM_SMARTPTR_TYPEDEF(SlideShowTransition, __uuidof(SlideShowTransition));
_COM_SMARTPTR_TYPEDEF(SoundFormat, __uuidof(SoundFormat));
_COM_SMARTPTR_TYPEDEF(PlaceholderFormat, __uuidof(PlaceholderFormat));
_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(ObjectVerbs, __uuidof(ObjectVerbs));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(ActionSetting, __uuidof(ActionSetting));
_COM_SMARTPTR_TYPEDEF(ActionSettings, __uuidof(ActionSettings));
_COM_SMARTPTR_TYPEDEF(PlaySettings, __uuidof(PlaySettings));
_COM_SMARTPTR_TYPEDEF(AnimationSettings, __uuidof(AnimationSettings));
_COM_SMARTPTR_TYPEDEF(RulerLevel, __uuidof(RulerLevel));
_COM_SMARTPTR_TYPEDEF(RulerLevels, __uuidof(RulerLevels));
_COM_SMARTPTR_TYPEDEF(TabStop, __uuidof(TabStop));
_COM_SMARTPTR_TYPEDEF(TabStops, __uuidof(TabStops));
_COM_SMARTPTR_TYPEDEF(Ruler, __uuidof(Ruler));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Fonts, __uuidof(Fonts));
_COM_SMARTPTR_TYPEDEF(HeaderFooter, __uuidof(HeaderFooter));
_COM_SMARTPTR_TYPEDEF(HeadersFooters, __uuidof(HeadersFooters));
_COM_SMARTPTR_TYPEDEF(PPAlert, __uuidof(PPAlert));
_COM_SMARTPTR_TYPEDEF(PPStrings, __uuidof(PPStrings));
_COM_SMARTPTR_TYPEDEF(Tags, __uuidof(Tags));
_COM_SMARTPTR_TYPEDEF(PPControl, __uuidof(PPControl));
_COM_SMARTPTR_TYPEDEF(PPPushButton, __uuidof(PPPushButton));
_COM_SMARTPTR_TYPEDEF(PPToggleButton, __uuidof(PPToggleButton));
_COM_SMARTPTR_TYPEDEF(PPBitmapButton, __uuidof(PPBitmapButton));
_COM_SMARTPTR_TYPEDEF(PPListBox, __uuidof(PPListBox));
_COM_SMARTPTR_TYPEDEF(PPCheckBox, __uuidof(PPCheckBox));
_COM_SMARTPTR_TYPEDEF(PPStaticText, __uuidof(PPStaticText));
_COM_SMARTPTR_TYPEDEF(PPEditText, __uuidof(PPEditText));
_COM_SMARTPTR_TYPEDEF(PPIcon, __uuidof(PPIcon));
_COM_SMARTPTR_TYPEDEF(PPBitmap, __uuidof(PPBitmap));
_COM_SMARTPTR_TYPEDEF(PPSpinner, __uuidof(PPSpinner));
_COM_SMARTPTR_TYPEDEF(PPScrollBar, __uuidof(PPScrollBar));
_COM_SMARTPTR_TYPEDEF(PPGroupBox, __uuidof(PPGroupBox));
_COM_SMARTPTR_TYPEDEF(PPFrame, __uuidof(PPFrame));
_COM_SMARTPTR_TYPEDEF(PPTabControl, __uuidof(PPTabControl));
_COM_SMARTPTR_TYPEDEF(PPDropDown, __uuidof(PPDropDown));
_COM_SMARTPTR_TYPEDEF(PPDropDownEdit, __uuidof(PPDropDownEdit));
_COM_SMARTPTR_TYPEDEF(PPSlideMiniature, __uuidof(PPSlideMiniature));
_COM_SMARTPTR_TYPEDEF(PPRadioButton, __uuidof(PPRadioButton));
_COM_SMARTPTR_TYPEDEF(PPRadioCluster, __uuidof(PPRadioCluster));
_COM_SMARTPTR_TYPEDEF(PPControls, __uuidof(PPControls));
_COM_SMARTPTR_TYPEDEF(PPTabSheet, __uuidof(PPTabSheet));
_COM_SMARTPTR_TYPEDEF(PPTabSheets, __uuidof(PPTabSheets));
_COM_SMARTPTR_TYPEDEF(PPDialog, __uuidof(PPDialog));
_COM_SMARTPTR_TYPEDEF(PPDialogs, __uuidof(PPDialogs));
_COM_SMARTPTR_TYPEDEF(FileDialogFileList, __uuidof(FileDialogFileList));
_COM_SMARTPTR_TYPEDEF(FileDialogExtension, __uuidof(FileDialogExtension));
_COM_SMARTPTR_TYPEDEF(FileDialogExtensionList, __uuidof(FileDialogExtensionList));
_COM_SMARTPTR_TYPEDEF(FileDialog, __uuidof(FileDialog));
_COM_SMARTPTR_TYPEDEF(MouseTracker, __uuidof(MouseTracker));
_COM_SMARTPTR_TYPEDEF(SlideShowView, __uuidof(SlideShowView));
_COM_SMARTPTR_TYPEDEF(SlideShowWindow, __uuidof(SlideShowWindow));
_COM_SMARTPTR_TYPEDEF(SlideShowWindows, __uuidof(SlideShowWindows));
_COM_SMARTPTR_TYPEDEF(SlideShowSettings, __uuidof(SlideShowSettings));
_COM_SMARTPTR_TYPEDEF(MouseDownHandler, __uuidof(MouseDownHandler));
_COM_SMARTPTR_TYPEDEF(OCXExtender, __uuidof(OCXExtender));
_COM_SMARTPTR_TYPEDEF(OCXExtenderEvents, __uuidof(OCXExtenderEvents));
_COM_SMARTPTR_TYPEDEF(BulletFormat, __uuidof(BulletFormat));
_COM_SMARTPTR_TYPEDEF(ParagraphFormat, __uuidof(ParagraphFormat));
_COM_SMARTPTR_TYPEDEF(TextRange, __uuidof(TextRange));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(TextStyleLevel, __uuidof(TextStyleLevel));
_COM_SMARTPTR_TYPEDEF(TextStyleLevels, __uuidof(TextStyleLevels));
_COM_SMARTPTR_TYPEDEF(TextStyle, __uuidof(TextStyle));
_COM_SMARTPTR_TYPEDEF(TextStyles, __uuidof(TextStyles));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(Marker, __uuidof(Marker));
_COM_SMARTPTR_TYPEDEF(MasterEvents, __uuidof(MasterEvents));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(Selection, __uuidof(Selection));
_COM_SMARTPTR_TYPEDEF(DocumentWindow, __uuidof(DocumentWindow));
_COM_SMARTPTR_TYPEDEF(DocumentWindows, __uuidof(DocumentWindows));
_COM_SMARTPTR_TYPEDEF(EApplication, __uuidof(EApplication));
_COM_SMARTPTR_TYPEDEF(Slides, __uuidof(Slides));
_COM_SMARTPTR_TYPEDEF(_Slide, __uuidof(_Slide));
_COM_SMARTPTR_TYPEDEF(SlideRange, __uuidof(SlideRange));
_COM_SMARTPTR_TYPEDEF(_Master, __uuidof(_Master));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(Placeholders, __uuidof(Placeholders));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(_Presentation, __uuidof(_Presentation));
_COM_SMARTPTR_TYPEDEF(Cell, __uuidof(Cell));
_COM_SMARTPTR_TYPEDEF(CellRange, __uuidof(CellRange));
_COM_SMARTPTR_TYPEDEF(Column, __uuidof(Column));
_COM_SMARTPTR_TYPEDEF(Columns, __uuidof(Columns));
_COM_SMARTPTR_TYPEDEF(Row, __uuidof(Row));
_COM_SMARTPTR_TYPEDEF(Rows, __uuidof(Rows));
_COM_SMARTPTR_TYPEDEF(Table, __uuidof(Table));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));

//
// Type library items
//

enum PpWindowState
{
    ppWindowNormal = 1,
    ppWindowMinimized = 2,
    ppWindowMaximized = 3
};

enum PpArrangeStyle
{
    ppArrangeTiled = 1,
    ppArrangeCascade = 2
};

enum PpViewType
{
    ppViewSlide = 1,
    ppViewSlideMaster = 2,
    ppViewNotesPage = 3,
    ppViewHandoutMaster = 4,
    ppViewNotesMaster = 5,
    ppViewOutline = 6,
    ppViewSlideSorter = 7,
    ppViewTitleMaster = 8,
    ppViewNormal = 9
};

enum PpColorSchemeIndex
{
    ppSchemeColorMixed = -2,
    ppNotSchemeColor = 0,
    ppBackground = 1,
    ppForeground = 2,
    ppShadow = 3,
    ppTitle = 4,
    ppFill = 5,
    ppAccent1 = 6,
    ppAccent2 = 7,
    ppAccent3 = 8
};

enum PpSlideSizeType
{
    ppSlideSizeOnScreen = 1,
    ppSlideSizeLetterPaper = 2,
    ppSlideSizeA4Paper = 3,
    ppSlideSize35MM = 4,
    ppSlideSizeOverhead = 5,
    ppSlideSizeBanner = 6,
    ppSlideSizeCustom = 7
};

enum PpSaveAsFileType
{
    ppSaveAsPresentation = 1,
    ppSaveAsPowerPoint7 = 2,
    ppSaveAsPowerPoint4 = 3,
    ppSaveAsPowerPoint3 = 4,
    ppSaveAsTemplate = 5,
    ppSaveAsRTF = 6,
    ppSaveAsShow = 7,
    ppSaveAsAddIn = 8,
    ppSaveAsPowerPoint4FarEast = 10,
    ppSaveAsDefault = 11,
    ppSaveAsHTML = 12,
    ppSaveAsHTMLv3 = 13,
    ppSaveAsHTMLDual = 14,
    ppSaveAsMetaFile = 15,
    ppSaveAsGIF = 16,
    ppSaveAsJPG = 17,
    ppSaveAsPNG = 18,
    ppSaveAsBMP = 19
};

enum PpTextStyleType
{
    ppDefaultStyle = 1,
    ppTitleStyle = 2,
    ppBodyStyle = 3
};

enum PpSlideLayout
{
    ppLayoutMixed = -2,
    ppLayoutTitle = 1,
    ppLayoutText = 2,
    ppLayoutTwoColumnText = 3,
    ppLayoutTable = 4,
    ppLayoutTextAndChart = 5,
    ppLayoutChartAndText = 6,
    ppLayoutOrgchart = 7,
    ppLayoutChart = 8,
    ppLayoutTextAndClipart = 9,
    ppLayoutClipartAndText = 10,
    ppLayoutTitleOnly = 11,
    ppLayoutBlank = 12,
    ppLayoutTextAndObject = 13,
    ppLayoutObjectAndText = 14,
    ppLayoutLargeObject = 15,
    ppLayoutObject = 16,
    ppLayoutTextAndMediaClip = 17,
    ppLayoutMediaClipAndText = 18,
    ppLayoutObjectOverText = 19,
    ppLayoutTextOverObject = 20,
    ppLayoutTextAndTwoObjects = 21,
    ppLayoutTwoObjectsAndText = 22,
    ppLayoutTwoObjectsOverText = 23,
    ppLayoutFourObjects = 24,
    ppLayoutVerticalText = 25,
    ppLayoutClipArtAndVerticalText = 26,
    ppLayoutVerticalTitleAndText = 27,
    ppLayoutVerticalTitleAndTextOverChart = 28
};

enum PpEntryEffect
{
    ppEffectMixed = -2,
    ppEffectNone = 0,
    ppEffectCut = 257,
    ppEffectCutThroughBlack = 258,
    ppEffectRandom = 513,
    ppEffectBlindsHorizontal = 769,
    ppEffectBlindsVertical = 770,
    ppEffectCheckerboardAcross = 1025,
    ppEffectCheckerboardDown = 1026,
    ppEffectCoverLeft = 1281,
    ppEffectCoverUp = 1282,
    ppEffectCoverRight = 1283,
    ppEffectCoverDown = 1284,
    ppEffectCoverLeftUp = 1285,
    ppEffectCoverRightUp = 1286,
    ppEffectCoverLeftDown = 1287,
    ppEffectCoverRightDown = 1288,
    ppEffectDissolve = 1537,
    ppEffectFade = 1793,
    ppEffectUncoverLeft = 2049,
    ppEffectUncoverUp = 2050,
    ppEffectUncoverRight = 2051,
    ppEffectUncoverDown = 2052,
    ppEffectUncoverLeftUp = 2053,
    ppEffectUncoverRightUp = 2054,
    ppEffectUncoverLeftDown = 2055,
    ppEffectUncoverRightDown = 2056,
    ppEffectRandomBarsHorizontal = 2305,
    ppEffectRandomBarsVertical = 2306,
    ppEffectStripsUpLeft = 2561,
    ppEffectStripsUpRight = 2562,
    ppEffectStripsDownLeft = 2563,
    ppEffectStripsDownRight = 2564,
    ppEffectStripsLeftUp = 2565,
    ppEffectStripsRightUp = 2566,
    ppEffectStripsLeftDown = 2567,
    ppEffectStripsRightDown = 2568,
    ppEffectWipeLeft = 2817,
    ppEffectWipeUp = 2818,
    ppEffectWipeRight = 2819,
    ppEffectWipeDown = 2820,
    ppEffectBoxOut = 3073,
    ppEffectBoxIn = 3074,
    ppEffectFlyFromLeft = 3329,
    ppEffectFlyFromTop = 3330,
    ppEffectFlyFromRight = 3331,
    ppEffectFlyFromBottom = 3332,
    ppEffectFlyFromTopLeft = 3333,
    ppEffectFlyFromTopRight = 3334,
    ppEffectFlyFromBottomLeft = 3335,
    ppEffectFlyFromBottomRight = 3336,
    ppEffectPeekFromLeft = 3337,
    ppEffectPeekFromDown = 3338,
    ppEffectPeekFromRight = 3339,
    ppEffectPeekFromUp = 3340,
    ppEffectCrawlFromLeft = 3341,
    ppEffectCrawlFromUp = 3342,
    ppEffectCrawlFromRight = 3343,
    ppEffectCrawlFromDown = 3344,
    ppEffectZoomIn = 3345,
    ppEffectZoomInSlightly = 3346,
    ppEffectZoomOut = 3347,
    ppEffectZoomOutSlightly = 3348,
    ppEffectZoomCenter = 3349,
    ppEffectZoomBottom = 3350,
    ppEffectStretchAcross = 3351,
    ppEffectStretchLeft = 3352,
    ppEffectStretchUp = 3353,
    ppEffectStretchRight = 3354,
    ppEffectStretchDown = 3355,
    ppEffectSwivel = 3356,
    ppEffectSpiral = 3357,
    ppEffectSplitHorizontalOut = 3585,
    ppEffectSplitHorizontalIn = 3586,
    ppEffectSplitVerticalOut = 3587,
    ppEffectSplitVerticalIn = 3588,
    ppEffectFlashOnceFast = 3841,
    ppEffectFlashOnceMedium = 3842,
    ppEffectFlashOnceSlow = 3843,
    ppEffectAppear = 3844
};

enum PpTextLevelEffect
{
    ppAnimateLevelMixed = -2,
    ppAnimateLevelNone = 0,
    ppAnimateByFirstLevel = 1,
    ppAnimateBySecondLevel = 2,
    ppAnimateByThirdLevel = 3,
    ppAnimateByFourthLevel = 4,
    ppAnimateByFifthLevel = 5,
    ppAnimateByAllLevels = 16
};

enum PpTextUnitEffect
{
    ppAnimateUnitMixed = -2,
    ppAnimateByParagraph = 0,
    ppAnimateByWord = 1,
    ppAnimateByCharacter = 2
};

enum PpChartUnitEffect
{
    ppAnimateChartMixed = -2,
    ppAnimateBySeries = 1,
    ppAnimateByCategory = 2,
    ppAnimateBySeriesElements = 3,
    ppAnimateByCategoryElements = 4
};

enum PpAfterEffect
{
    ppAfterEffectMixed = -2,
    ppAfterEffectNothing = 0,
    ppAfterEffectHide = 1,
    ppAfterEffectDim = 2,
    ppAfterEffectHideOnClick = 3
};

enum PpAdvanceMode
{
    ppAdvanceModeMixed = -2,
    ppAdvanceOnClick = 1,
    ppAdvanceOnTime = 2
};

enum PpSoundEffectType
{
    ppSoundEffectsMixed = -2,
    ppSoundNone = 0,
    ppSoundStopPrevious = 1,
    ppSoundFile = 2
};

enum PpFollowColors
{
    ppFollowColorsMixed = -2,
    ppFollowColorsNone = 0,
    ppFollowColorsScheme = 1,
    ppFollowColorsTextAndBackground = 2
};

enum PpUpdateOption
{
    ppUpdateOptionMixed = -2,
    ppUpdateOptionManual = 1,
    ppUpdateOptionAutomatic = 2
};

enum PpParagraphAlignment
{
    ppAlignmentMixed = -2,
    ppAlignLeft = 1,
    ppAlignCenter = 2,
    ppAlignRight = 3,
    ppAlignJustify = 4,
    ppAlignDistribute = 5
};

enum PpBaselineAlignment
{
    ppBaselineAlignMixed = -2,
    ppBaselineAlignBaseline = 1,
    ppBaselineAlignTop = 2,
    ppBaselineAlignCenter = 3,
    ppBaselineAlignFarEast50 = 4
};

enum PpTabStopType
{
    ppTabStopMixed = -2,
    ppTabStopLeft = 1,
    ppTabStopCenter = 2,
    ppTabStopRight = 3,
    ppTabStopDecimal = 4
};

enum PpIndentControl
{
    ppIndentControlMixed = -2,
    ppIndentReplaceAttr = 1,
    ppIndentKeepAttr = 2
};

enum PpChangeCase
{
    ppCaseSentence = 1,
    ppCaseLower = 2,
    ppCaseUpper = 3,
    ppCaseTitle = 4,
    ppCaseToggle = 5
};

enum PpDialogMode
{
    ppDialogModeMixed = -2,
    ppDialogModeless = 0,
    ppDialogModal = 1
};

enum PpDialogStyle
{
    ppDialogStyleMixed = -2,
    ppDialogStandard = 1,
    ppDialogTabbed = 2
};

enum PpDialogPositioning
{
    ppDialogPositionNormal = 1,
    ppDialogPositionCenterParent = 2,
    ppDialogPositionCenterScreen = 3,
    ppDialogPositionRememberLast = 4
};

enum PpDialogFontStyle
{
    ppDialogFontStyleMixed = -2,
    ppDialogSmall = -1,
    ppDialogItalic = 0
};

enum PpScrollBarStyle
{
    ppScrollBarVertical = 0,
    ppScrollBarHorizontal = 1
};

enum PpListBoxSelectionStyle
{
    ppListBoxSingle = 0,
    ppListBoxMulti = 1
};

enum PpListBoxAbbreviationStyle
{
    ppListBoxAbbreviationNone = 0,
    ppListBoxAbbreviationTruncation = 1,
    ppListBoxAbbreviationTruncationWithEllipsis = 2,
    ppListBoxAbbreviationFileNames = 3
};

enum PpAlertType
{
    ppAlertTypeOK = 0,
    ppAlertTypeOKCANCEL = 1,
    ppAlertTypeYESNO = 2,
    ppAlertTypeYESNOCANCEL = 3,
    ppAlertTypeBACKNEXTCLOSE = 4,
    ppAlertTypeRETRYCANCEL = 5,
    ppAlertTypeABORTRETRYIGNORE = 6
};

enum PpAlertButton
{
    ppAlertButtonCLOSE = 0,
    ppAlertButtonSNOOZE = 1,
    ppAlertButtonSEARCH = 2,
    ppAlertButtonIGNORE = 3,
    ppAlertButtonABORT = 4,
    ppAlertButtonRETRY = 5,
    ppAlertButtonNEXT = 6,
    ppAlertButtonBACK = 7,
    ppAlertButtonNO = 8,
    ppAlertButtonYES = 9,
    ppAlertButtonCANCEL = 10,
    ppAlertButtonOK = 11,
    ppAlertButtonNULL = 12
};

enum PpAlertIcon
{
    ppAlertIconQuestionMark = 0,
    ppAlertIconNote = 1,
    ppAlertIconCaution = 2,
    ppAlertIconStop = 3
};

enum PpSlideShowPointerType
{
    ppSlideShowPointerNone = 0,
    ppSlideShowPointerArrow = 1,
    ppSlideShowPointerPen = 2,
    ppSlideShowPointerAlwaysHidden = 3,
    ppSlideShowPointerAutoArrow = 4
};

enum PpSlideShowState
{
    ppSlideShowRunning = 1,
    ppSlideShowPaused = 2,
    ppSlideShowBlackScreen = 3,
    ppSlideShowWhiteScreen = 4,
    ppSlideShowDone = 5
};

enum PpSlideShowAdvanceMode
{
    ppSlideShowManualAdvance = 1,
    ppSlideShowUseSlideTimings = 2,
    ppSlideShowRehearseNewTimings = 3
};

enum PpFileDialogType
{
    ppFileDialogOpen = 1,
    ppFileDialogSave = 2
};

enum PpFileDialogView
{
    ppFileDialogViewDetails = 1,
    ppFileDialogViewPreview = 2,
    ppFileDialogViewProperties = 3,
    ppFileDialogViewList = 4
};

enum PpPrintOutputType
{
    ppPrintOutputSlides = 1,
    ppPrintOutputTwoSlideHandouts = 2,
    ppPrintOutputThreeSlideHandouts = 3,
    ppPrintOutputSixSlideHandouts = 4,
    ppPrintOutputNotesPages = 5,
    ppPrintOutputOutline = 6,
    ppPrintOutputBuildSlides = 7,
    ppPrintOutputFourSlideHandouts = 8,
    ppPrintOutputNineSlideHandouts = 9
};

enum PpPrintHandoutOrder
{
    ppPrintHandoutVerticalFirst = 1,
    ppPrintHandoutHorizontalFirst = 2
};

enum PpPrintColorType
{
    ppPrintColor = 1,
    ppPrintBlackAndWhite = 2,
    ppPrintPureBlackAndWhite = 3
};

enum PpSelectionType
{
    ppSelectionNone = 0,
    ppSelectionSlides = 1,
    ppSelectionShapes = 2,
    ppSelectionText = 3
};

enum PpDirection
{
    ppDirectionMixed = -2,
    ppDirectionLeftToRight = 1,
    ppDirectionRightToLeft = 2
};

enum PpDateTimeFormat
{
    ppDateTimeFormatMixed = -2,
    ppDateTimeMdyy = 1,
    ppDateTimeddddMMMMddyyyy = 2,
    ppDateTimedMMMMyyyy = 3,
    ppDateTimeMMMMdyyyy = 4,
    ppDateTimedMMMyy = 5,
    ppDateTimeMMMMyy = 6,
    ppDateTimeMMyy = 7,
    ppDateTimeMMddyyHmm = 8,
    ppDateTimeMMddyyhmmAMPM = 9,
    ppDateTimeHmm = 10,
    ppDateTimeHmmss = 11,
    ppDateTimehmmAMPM = 12,
    ppDateTimehmmssAMPM = 13
};

enum PpTransitionSpeed
{
    ppTransitionSpeedMixed = -2,
    ppTransitionSpeedSlow = 1,
    ppTransitionSpeedMedium = 2,
    ppTransitionSpeedFast = 3
};

enum PpMouseActivation
{
    ppMouseClick = 1,
    ppMouseOver = 2
};

enum PpActionType
{
    ppActionMixed = -2,
    ppActionNone = 0,
    ppActionNextSlide = 1,
    ppActionPreviousSlide = 2,
    ppActionFirstSlide = 3,
    ppActionLastSlide = 4,
    ppActionLastSlideViewed = 5,
    ppActionEndShow = 6,
    ppActionHyperlink = 7,
    ppActionRunMacro = 8,
    ppActionRunProgram = 9,
    ppActionNamedSlideShow = 10,
    ppActionOLEVerb = 11,
    ppActionPlay = 12
};

enum PpPlaceholderType
{
    ppPlaceholderMixed = -2,
    ppPlaceholderTitle = 1,
    ppPlaceholderBody = 2,
    ppPlaceholderCenterTitle = 3,
    ppPlaceholderSubtitle = 4,
    ppPlaceholderVerticalTitle = 5,
    ppPlaceholderVerticalBody = 6,
    ppPlaceholderObject = 7,
    ppPlaceholderChart = 8,
    ppPlaceholderBitmap = 9,
    ppPlaceholderMediaClip = 10,
    ppPlaceholderOrgChart = 11,
    ppPlaceholderTable = 12,
    ppPlaceholderSlideNumber = 13,
    ppPlaceholderHeader = 14,
    ppPlaceholderFooter = 15,
    ppPlaceholderDate = 16
};

enum PpSlideShowType
{
    ppShowTypeSpeaker = 1,
    ppShowTypeWindow = 2,
    ppShowTypeKiosk = 3
};

enum PpPrintRangeType
{
    ppPrintAll = 1,
    ppPrintSelection = 2,
    ppPrintCurrent = 3,
    ppPrintSlideRange = 4,
    ppPrintNamedSlideShow = 5
};

enum PpAutoSize
{
    ppAutoSizeMixed = -2,
    ppAutoSizeNone = 0,
    ppAutoSizeShapeToFitText = 1
};

enum PpMediaType
{
    ppMediaTypeMixed = -2,
    ppMediaTypeOther = 1,
    ppMediaTypeSound = 2,
    ppMediaTypeMovie = 3
};

enum PpSoundFormatType
{
    ppSoundFormatMixed = -2,
    ppSoundFormatNone = 0,
    ppSoundFormatWAV = 1,
    ppSoundFormatMIDI = 2,
    ppSoundFormatCDAudio = 3
};

enum PpFarEastLineBreakLevel
{
    ppFarEastLineBreakLevelNormal = 1,
    ppFarEastLineBreakLevelStrict = 2,
    ppFarEastLineBreakLevelCustom = 3
};

enum PpSlideShowRangeType
{
    ppShowAll = 1,
    ppShowSlideRange = 2,
    ppShowNamedSlideShow = 3
};

enum PpFrameColors
{
    ppFrameColorsBrowserColors = 1,
    ppFrameColorsPresentationSchemeTextColor = 2,
    ppFrameColorsPresentationSchemeAccentColor = 3,
    ppFrameColorsWhiteTextOnBlack = 4,
    ppFrameColorsBlackTextOnWhite = 5
};

struct __declspec(uuid("91493450-5a91-11cf-8700-00aa0060263b"))
Collection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("91493441-5a91-11cf-8700-00aa0060263b"))
Application;
    // [ default ] interface _Application
    // [ default, source ] interface EApplication

struct __declspec(uuid("91493443-5a91-11cf-8700-00aa0060263b"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("91493452-5a91-11cf-8700-00aa0060263b"))
ColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPPTRGB,put=PutPPTRGB))
    Office::MsoRGBType PPTRGB;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    enum PpColorSchemeIndex SchemeColor;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType GetPPTRGB ( );
    void PutPPTRGB (
        Office::MsoRGBType PPTRGB );
    enum Office::MsoColorType GetType ( );
    enum PpColorSchemeIndex GetSchemeColor ( );
    void PutSchemeColor (
        enum PpColorSchemeIndex SchemeColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PPTRGB (
        /*[out,retval]*/ Office::MsoRGBType * PPTRGB ) = 0;
      virtual HRESULT __stdcall put_PPTRGB (
        /*[in]*/ Office::MsoRGBType PPTRGB ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoColorType * Type ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ enum PpColorSchemeIndex * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor ) = 0;
};

struct __declspec(uuid("91493458-5a91-11cf-8700-00aa0060263b"))
View : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpViewType Type;
    __declspec(property(get=GetZoom,put=PutZoom))
    int Zoom;
    __declspec(property(get=GetSlide,put=PutSlide))
    IDispatchPtr Slide;
    __declspec(property(get=GetDisplaySlideMiniature,put=PutDisplaySlideMiniature))
    enum Office::MsoTriState DisplaySlideMiniature;
    __declspec(property(get=GetZoomToFit,put=PutZoomToFit))
    enum Office::MsoTriState ZoomToFit;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpViewType GetType ( );
    int GetZoom ( );
    void PutZoom (
        int Zoom );
    HRESULT Paste ( );
    IDispatchPtr GetSlide ( );
    void PutSlide (
        IDispatch * Slide );
    HRESULT GotoSlide (
        int index );
    enum Office::MsoTriState GetDisplaySlideMiniature ( );
    void PutDisplaySlideMiniature (
        enum Office::MsoTriState DisplaySlideMiniature );
    enum Office::MsoTriState GetZoomToFit ( );
    void PutZoomToFit (
        enum Office::MsoTriState ZoomToFit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpViewType * Type ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ int Zoom ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ IDispatch * * Slide ) = 0;
      virtual HRESULT __stdcall put_Slide (
        /*[in]*/ IDispatch * Slide ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int index ) = 0;
      virtual HRESULT __stdcall get_DisplaySlideMiniature (
        /*[out,retval]*/ enum Office::MsoTriState * DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall put_DisplaySlideMiniature (
        /*[in]*/ enum Office::MsoTriState DisplaySlideMiniature ) = 0;
      virtual HRESULT __stdcall get_ZoomToFit (
        /*[out,retval]*/ enum Office::MsoTriState * ZoomToFit ) = 0;
      virtual HRESULT __stdcall put_ZoomToFit (
        /*[in]*/ enum Office::MsoTriState ZoomToFit ) = 0;
};

struct __declspec(uuid("9149345c-5a91-11cf-8700-00aa0060263b"))
NamedSlideShow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSlideIDs))
    _variant_t SlideIDs;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Delete ( );
    _variant_t GetSlideIDs ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_SlideIDs (
        /*[out,retval]*/ VARIANT * SlideIDs ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
};

struct __declspec(uuid("9149345b-5a91-11cf-8700-00aa0060263b"))
NamedSlideShows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    NamedSlideShowPtr Item (
        const _variant_t & index );
    NamedSlideShowPtr Add (
        _bstr_t Name,
        const _variant_t & safeArrayOfSlideIDs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct NamedSlideShow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT safeArrayOfSlideIDs,
        /*[out,retval]*/ struct NamedSlideShow * * Add ) = 0;
};

struct __declspec(uuid("9149345f-5a91-11cf-8700-00aa0060263b"))
PrintRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStart))
    int Start;
    __declspec(property(get=GetEnd))
    int End;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetStart ( );
    int GetEnd ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ int * Start ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ int * End ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149345e-5a91-11cf-8700-00aa0060263b"))
PrintRanges : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    PrintRangePtr Add (
        int Start,
        int End );
    _ApplicationPtr GetApplication ( );
    HRESULT ClearAll ( );
    PrintRangePtr Item (
        int index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int Start,
        /*[in]*/ int End,
        /*[out,retval]*/ struct PrintRange * * Add ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_ClearAll ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct PrintRange * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("9149345d-5a91-11cf-8700-00aa0060263b"))
PrintOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandoutOrder,put=PutHandoutOrder))
    enum PpPrintHandoutOrder HandoutOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetPrintColorType,put=PutPrintColorType))
    enum PpPrintColorType PrintColorType;
    __declspec(property(get=GetCollate,put=PutCollate))
    enum Office::MsoTriState Collate;
    __declspec(property(get=GetFitToPage,put=PutFitToPage))
    enum Office::MsoTriState FitToPage;
    __declspec(property(get=GetFrameSlides,put=PutFrameSlides))
    enum Office::MsoTriState FrameSlides;
    __declspec(property(get=GetNumberOfCopies,put=PutNumberOfCopies))
    int NumberOfCopies;
    __declspec(property(get=GetOutputType,put=PutOutputType))
    enum PpPrintOutputType OutputType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPrintHiddenSlides,put=PutPrintHiddenSlides))
    enum Office::MsoTriState PrintHiddenSlides;
    __declspec(property(get=GetPrintInBackground,put=PutPrintInBackground))
    enum Office::MsoTriState PrintInBackground;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpPrintRangeType RangeType;
    __declspec(property(get=GetRanges))
    PrintRangesPtr Ranges;
    __declspec(property(get=GetPrintFontsAsGraphics,put=PutPrintFontsAsGraphics))
    enum Office::MsoTriState PrintFontsAsGraphics;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum PpPrintColorType GetPrintColorType ( );
    void PutPrintColorType (
        enum PpPrintColorType PrintColorType );
    enum Office::MsoTriState GetCollate ( );
    void PutCollate (
        enum Office::MsoTriState Collate );
    enum Office::MsoTriState GetFitToPage ( );
    void PutFitToPage (
        enum Office::MsoTriState FitToPage );
    enum Office::MsoTriState GetFrameSlides ( );
    void PutFrameSlides (
        enum Office::MsoTriState FrameSlides );
    int GetNumberOfCopies ( );
    void PutNumberOfCopies (
        int NumberOfCopies );
    enum PpPrintOutputType GetOutputType ( );
    void PutOutputType (
        enum PpPrintOutputType OutputType );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetPrintHiddenSlides ( );
    void PutPrintHiddenSlides (
        enum Office::MsoTriState PrintHiddenSlides );
    enum Office::MsoTriState GetPrintInBackground ( );
    void PutPrintInBackground (
        enum Office::MsoTriState PrintInBackground );
    enum PpPrintRangeType GetRangeType ( );
    void PutRangeType (
        enum PpPrintRangeType RangeType );
    PrintRangesPtr GetRanges ( );
    enum Office::MsoTriState GetPrintFontsAsGraphics ( );
    void PutPrintFontsAsGraphics (
        enum Office::MsoTriState PrintFontsAsGraphics );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    _bstr_t GetActivePrinter ( );
    void PutActivePrinter (
        _bstr_t ActivePrinter );
    enum PpPrintHandoutOrder GetHandoutOrder ( );
    void PutHandoutOrder (
        enum PpPrintHandoutOrder HandoutOrder );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_PrintColorType (
        /*[out,retval]*/ enum PpPrintColorType * PrintColorType ) = 0;
      virtual HRESULT __stdcall put_PrintColorType (
        /*[in]*/ enum PpPrintColorType PrintColorType ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ enum Office::MsoTriState * Collate ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ enum Office::MsoTriState Collate ) = 0;
      virtual HRESULT __stdcall get_FitToPage (
        /*[out,retval]*/ enum Office::MsoTriState * FitToPage ) = 0;
      virtual HRESULT __stdcall put_FitToPage (
        /*[in]*/ enum Office::MsoTriState FitToPage ) = 0;
      virtual HRESULT __stdcall get_FrameSlides (
        /*[out,retval]*/ enum Office::MsoTriState * FrameSlides ) = 0;
      virtual HRESULT __stdcall put_FrameSlides (
        /*[in]*/ enum Office::MsoTriState FrameSlides ) = 0;
      virtual HRESULT __stdcall get_NumberOfCopies (
        /*[out,retval]*/ int * NumberOfCopies ) = 0;
      virtual HRESULT __stdcall put_NumberOfCopies (
        /*[in]*/ int NumberOfCopies ) = 0;
      virtual HRESULT __stdcall get_OutputType (
        /*[out,retval]*/ enum PpPrintOutputType * OutputType ) = 0;
      virtual HRESULT __stdcall put_OutputType (
        /*[in]*/ enum PpPrintOutputType OutputType ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PrintHiddenSlides (
        /*[out,retval]*/ enum Office::MsoTriState * PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall put_PrintHiddenSlides (
        /*[in]*/ enum Office::MsoTriState PrintHiddenSlides ) = 0;
      virtual HRESULT __stdcall get_PrintInBackground (
        /*[out,retval]*/ enum Office::MsoTriState * PrintInBackground ) = 0;
      virtual HRESULT __stdcall put_PrintInBackground (
        /*[in]*/ enum Office::MsoTriState PrintInBackground ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpPrintRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpPrintRangeType RangeType ) = 0;
      virtual HRESULT __stdcall get_Ranges (
        /*[out,retval]*/ struct PrintRanges * * Ranges ) = 0;
      virtual HRESULT __stdcall get_PrintFontsAsGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall put_PrintFontsAsGraphics (
        /*[in]*/ enum Office::MsoTriState PrintFontsAsGraphics ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in]*/ BSTR ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_HandoutOrder (
        /*[out,retval]*/ enum PpPrintHandoutOrder * HandoutOrder ) = 0;
      virtual HRESULT __stdcall put_HandoutOrder (
        /*[in]*/ enum PpPrintHandoutOrder HandoutOrder ) = 0;
};

struct __declspec(uuid("91493461-5a91-11cf-8700-00aa0060263b"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetRegistered,put=PutRegistered))
    enum Office::MsoTriState Registered;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    enum Office::MsoTriState AutoLoad;
    __declspec(property(get=GetLoaded,put=PutLoaded))
    enum Office::MsoTriState Loaded;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    enum Office::MsoTriState DisplayAlerts;
    __declspec(property(get=GetRegisteredInHKLM))
    enum Office::MsoTriState RegisteredInHKLM;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum Office::MsoTriState GetRegistered ( );
    void PutRegistered (
        enum Office::MsoTriState Registered );
    enum Office::MsoTriState GetAutoLoad ( );
    void PutAutoLoad (
        enum Office::MsoTriState AutoLoad );
    enum Office::MsoTriState GetLoaded ( );
    void PutLoaded (
        enum Office::MsoTriState Loaded );
    enum Office::MsoTriState GetDisplayAlerts ( );
    void PutDisplayAlerts (
        enum Office::MsoTriState DisplayAlerts );
    enum Office::MsoTriState GetRegisteredInHKLM ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Registered (
        /*[out,retval]*/ enum Office::MsoTriState * Registered ) = 0;
      virtual HRESULT __stdcall put_Registered (
        /*[in]*/ enum Office::MsoTriState Registered ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLoad ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ enum Office::MsoTriState AutoLoad ) = 0;
      virtual HRESULT __stdcall get_Loaded (
        /*[out,retval]*/ enum Office::MsoTriState * Loaded ) = 0;
      virtual HRESULT __stdcall put_Loaded (
        /*[in]*/ enum Office::MsoTriState Loaded ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ enum Office::MsoTriState DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_RegisteredInHKLM (
        /*[out,retval]*/ enum Office::MsoTriState * RegisteredInHKLM ) = 0;
};

struct __declspec(uuid("91493460-5a91-11cf-8700-00aa0060263b"))
AddIns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    AddInPtr Item (
        VARIANT * index );
    AddInPtr Add (
        _bstr_t FileName );
    HRESULT Remove (
        VARIANT * index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT * index,
        /*[out,retval]*/ struct AddIn * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct AddIn * * Add ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT * index ) = 0;
};

struct __declspec(uuid("91493463-5a91-11cf-8700-00aa0060263b"))
PresEvents : IUnknown
{};

struct __declspec(uuid("91493444-5a91-11cf-8700-00aa0060263b"))
Presentation;
    // [ default ] interface _Presentation
    // [ default, source ] interface PresEvents

struct __declspec(uuid("91493462-5a91-11cf-8700-00aa0060263b"))
Presentations : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _PresentationPtr Item (
        const _variant_t & index );
    _PresentationPtr Add (
        enum Office::MsoTriState WithWindow );
    _PresentationPtr Open (
        _bstr_t FileName,
        enum Office::MsoTriState ReadOnly,
        enum Office::MsoTriState Untitled,
        enum Office::MsoTriState WithWindow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct _Presentation * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[out,retval]*/ struct _Presentation * * Add ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState ReadOnly,
        /*[in]*/ enum Office::MsoTriState Untitled,
        /*[in]*/ enum Office::MsoTriState WithWindow,
        /*[out,retval]*/ struct _Presentation * * Open ) = 0;
};

struct __declspec(uuid("91493465-5a91-11cf-8700-00aa0060263b"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum Office::MsoHyperlinkType Type;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetShowandReturn,put=PutShowandReturn))
    enum Office::MsoTriState ShowandReturn;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoHyperlinkType GetType ( );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t Address );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t SubAddress );
    HRESULT AddToFavorites ( );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t EmailSubject );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t ScreenTip );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t TextToDisplay );
    enum Office::MsoTriState GetShowandReturn ( );
    void PutShowandReturn (
        enum Office::MsoTriState ShowandReturn );
    HRESULT Follow ( );
    HRESULT CreateNewDocument (
        _bstr_t FileName,
        enum Office::MsoTriState EditNow,
        enum Office::MsoTriState Overwrite );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoHyperlinkType * Type ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * SubAddress ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR SubAddress ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * EmailSubject ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR EmailSubject ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * ScreenTip ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR ScreenTip ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * TextToDisplay ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR TextToDisplay ) = 0;
      virtual HRESULT __stdcall get_ShowandReturn (
        /*[out,retval]*/ enum Office::MsoTriState * ShowandReturn ) = 0;
      virtual HRESULT __stdcall put_ShowandReturn (
        /*[in]*/ enum Office::MsoTriState ShowandReturn ) = 0;
      virtual HRESULT __stdcall raw_Follow ( ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState EditNow,
        /*[in]*/ enum Office::MsoTriState Overwrite ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("91493464-5a91-11cf-8700-00aa0060263b"))
Hyperlinks : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HyperlinkPtr Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Hyperlink * * Item ) = 0;
};

struct __declspec(uuid("91493466-5a91-11cf-8700-00aa0060263b"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstSlideNumber,put=PutFirstSlideNumber))
    int FirstSlideNumber;
    __declspec(property(get=GetSlideHeight,put=PutSlideHeight))
    float SlideHeight;
    __declspec(property(get=GetSlideWidth,put=PutSlideWidth))
    float SlideWidth;
    __declspec(property(get=GetSlideSize,put=PutSlideSize))
    enum PpSlideSizeType SlideSize;
    __declspec(property(get=GetNotesOrientation,put=PutNotesOrientation))
    enum Office::MsoOrientation NotesOrientation;
    __declspec(property(get=GetSlideOrientation,put=PutSlideOrientation))
    enum Office::MsoOrientation SlideOrientation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetFirstSlideNumber ( );
    void PutFirstSlideNumber (
        int FirstSlideNumber );
    float GetSlideHeight ( );
    void PutSlideHeight (
        float SlideHeight );
    float GetSlideWidth ( );
    void PutSlideWidth (
        float SlideWidth );
    enum PpSlideSizeType GetSlideSize ( );
    void PutSlideSize (
        enum PpSlideSizeType SlideSize );
    enum Office::MsoOrientation GetNotesOrientation ( );
    void PutNotesOrientation (
        enum Office::MsoOrientation NotesOrientation );
    enum Office::MsoOrientation GetSlideOrientation ( );
    void PutSlideOrientation (
        enum Office::MsoOrientation SlideOrientation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstSlideNumber (
        /*[out,retval]*/ int * FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall put_FirstSlideNumber (
        /*[in]*/ int FirstSlideNumber ) = 0;
      virtual HRESULT __stdcall get_SlideHeight (
        /*[out,retval]*/ float * SlideHeight ) = 0;
      virtual HRESULT __stdcall put_SlideHeight (
        /*[in]*/ float SlideHeight ) = 0;
      virtual HRESULT __stdcall get_SlideWidth (
        /*[out,retval]*/ float * SlideWidth ) = 0;
      virtual HRESULT __stdcall put_SlideWidth (
        /*[in]*/ float SlideWidth ) = 0;
      virtual HRESULT __stdcall get_SlideSize (
        /*[out,retval]*/ enum PpSlideSizeType * SlideSize ) = 0;
      virtual HRESULT __stdcall put_SlideSize (
        /*[in]*/ enum PpSlideSizeType SlideSize ) = 0;
      virtual HRESULT __stdcall get_NotesOrientation (
        /*[out,retval]*/ enum Office::MsoOrientation * NotesOrientation ) = 0;
      virtual HRESULT __stdcall put_NotesOrientation (
        /*[in]*/ enum Office::MsoOrientation NotesOrientation ) = 0;
      virtual HRESULT __stdcall get_SlideOrientation (
        /*[out,retval]*/ enum Office::MsoOrientation * SlideOrientation ) = 0;
      virtual HRESULT __stdcall put_SlideOrientation (
        /*[in]*/ enum Office::MsoOrientation SlideOrientation ) = 0;
};

struct __declspec(uuid("91493468-5a91-11cf-8700-00aa0060263b"))
ExtraColors : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType Item (
        int index );
    HRESULT Add (
        Office::MsoRGBType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ Office::MsoRGBType * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ Office::MsoRGBType Type ) = 0;
};

struct __declspec(uuid("9149346d-5a91-11cf-8700-00aa0060263b"))
SldEvents : IUnknown
{};

struct __declspec(uuid("91493445-5a91-11cf-8700-00aa0060263b"))
Slide;
    // [ default ] interface _Slide
    // [ default, source ] interface SldEvents

struct __declspec(uuid("91493470-5a91-11cf-8700-00aa0060263b"))
RGBColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPPTRGB,put=PutPPTRGB))
    Office::MsoRGBType PPTRGB;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    Office::MsoRGBType GetPPTRGB ( );
    void PutPPTRGB (
        Office::MsoRGBType PPTRGB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PPTRGB (
        /*[out,retval]*/ Office::MsoRGBType * PPTRGB ) = 0;
      virtual HRESULT __stdcall put_PPTRGB (
        /*[in]*/ Office::MsoRGBType PPTRGB ) = 0;
};

struct __declspec(uuid("9149346f-5a91-11cf-8700-00aa0060263b"))
ColorScheme : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RGBColorPtr Colors (
        enum PpColorSchemeIndex SchemeColor );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Colors (
        /*[in]*/ enum PpColorSchemeIndex SchemeColor,
        /*[out,retval]*/ struct RGBColor * * Colors ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("9149346e-5a91-11cf-8700-00aa0060263b"))
ColorSchemes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorSchemePtr Item (
        int index );
    ColorSchemePtr Add (
        struct ColorScheme * Scheme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct ColorScheme * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ColorScheme * Scheme,
        /*[out,retval]*/ struct ColorScheme * * Add ) = 0;
};

struct __declspec(uuid("91493472-5a91-11cf-8700-00aa0060263b"))
SoundEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType,put=PutType))
    enum PpSoundEffectType Type;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PpSoundEffectType GetType ( );
    void PutType (
        enum PpSoundEffectType Type );
    HRESULT ImportFromFile (
        _bstr_t FileName );
    HRESULT Play ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundEffectType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpSoundEffectType Type ) = 0;
      virtual HRESULT __stdcall raw_ImportFromFile (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Play ( ) = 0;
};

struct __declspec(uuid("91493471-5a91-11cf-8700-00aa0060263b"))
SlideShowTransition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdvanceOnClick,put=PutAdvanceOnClick))
    enum Office::MsoTriState AdvanceOnClick;
    __declspec(property(get=GetAdvanceOnTime,put=PutAdvanceOnTime))
    enum Office::MsoTriState AdvanceOnTime;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetHidden,put=PutHidden))
    enum Office::MsoTriState Hidden;
    __declspec(property(get=GetLoopSoundUntilNext,put=PutLoopSoundUntilNext))
    enum Office::MsoTriState LoopSoundUntilNext;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetSpeed,put=PutSpeed))
    enum PpTransitionSpeed Speed;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetAdvanceOnClick ( );
    void PutAdvanceOnClick (
        enum Office::MsoTriState AdvanceOnClick );
    enum Office::MsoTriState GetAdvanceOnTime ( );
    void PutAdvanceOnTime (
        enum Office::MsoTriState AdvanceOnTime );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    enum Office::MsoTriState GetHidden ( );
    void PutHidden (
        enum Office::MsoTriState Hidden );
    enum Office::MsoTriState GetLoopSoundUntilNext ( );
    void PutLoopSoundUntilNext (
        enum Office::MsoTriState LoopSoundUntilNext );
    SoundEffectPtr GetSoundEffect ( );
    enum PpTransitionSpeed GetSpeed ( );
    void PutSpeed (
        enum PpTransitionSpeed Speed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnClick (
        /*[out,retval]*/ enum Office::MsoTriState * AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnClick (
        /*[in]*/ enum Office::MsoTriState AdvanceOnClick ) = 0;
      virtual HRESULT __stdcall get_AdvanceOnTime (
        /*[out,retval]*/ enum Office::MsoTriState * AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceOnTime (
        /*[in]*/ enum Office::MsoTriState AdvanceOnTime ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ enum Office::MsoTriState * Hidden ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ enum Office::MsoTriState Hidden ) = 0;
      virtual HRESULT __stdcall get_LoopSoundUntilNext (
        /*[out,retval]*/ enum Office::MsoTriState * LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall put_LoopSoundUntilNext (
        /*[in]*/ enum Office::MsoTriState LoopSoundUntilNext ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_Speed (
        /*[out,retval]*/ enum PpTransitionSpeed * Speed ) = 0;
      virtual HRESULT __stdcall put_Speed (
        /*[in]*/ enum PpTransitionSpeed Speed ) = 0;
};

struct __declspec(uuid("91493473-5a91-11cf-8700-00aa0060263b"))
SoundFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum PpSoundFormatType Type;
    __declspec(property(get=GetSourceFullName))
    _bstr_t SourceFullName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Play ( );
    HRESULT Import (
        _bstr_t FileName );
    enum PpSoundFormatType Export (
        _bstr_t FileName );
    enum PpSoundFormatType GetType ( );
    _bstr_t GetSourceFullName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Play ( ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ enum PpSoundFormatType * Export ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSoundFormatType * Type ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
};

struct __declspec(uuid("91493477-5a91-11cf-8700-00aa0060263b"))
PlaceholderFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpPlaceholderType Type;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpPlaceholderType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpPlaceholderType * Type ) = 0;
};

struct __declspec(uuid("9149347c-5a91-11cf-8700-00aa0060263b"))
Adjustments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int index );
    void PutItem (
        int index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("9149347d-5a91-11cf-8700-00aa0060263b"))
PictureFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetColorType,put=PutColorType))
    enum Office::MsoPictureColorType ColorType;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetTransparencyColor,put=PutTransparencyColor))
    Office::MsoRGBType TransparencyColor;
    __declspec(property(get=GetTransparentBackground,put=PutTransparentBackground))
    enum Office::MsoTriState TransparentBackground;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ Office::MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ Office::MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum Office::MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("9149347e-5a91-11cf-8700-00aa0060263b"))
FillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("9149347f-5a91-11cf-8700-00aa0060263b"))
LineFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetBeginArrowheadLength,put=PutBeginArrowheadLength))
    enum Office::MsoArrowheadLength BeginArrowheadLength;
    __declspec(property(get=GetBeginArrowheadStyle,put=PutBeginArrowheadStyle))
    enum Office::MsoArrowheadStyle BeginArrowheadStyle;
    __declspec(property(get=GetBeginArrowheadWidth,put=PutBeginArrowheadWidth))
    enum Office::MsoArrowheadWidth BeginArrowheadWidth;
    __declspec(property(get=GetDashStyle,put=PutDashStyle))
    enum Office::MsoLineDashStyle DashStyle;
    __declspec(property(get=GetEndArrowheadLength,put=PutEndArrowheadLength))
    enum Office::MsoArrowheadLength EndArrowheadLength;
    __declspec(property(get=GetEndArrowheadStyle,put=PutEndArrowheadStyle))
    enum Office::MsoArrowheadStyle EndArrowheadStyle;
    __declspec(property(get=GetEndArrowheadWidth,put=PutEndArrowheadWidth))
    enum Office::MsoArrowheadWidth EndArrowheadWidth;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum Office::MsoLineStyle Style;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum Office::MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum Office::MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
};

struct __declspec(uuid("91493480-5a91-11cf-8700-00aa0060263b"))
ShadowFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetObscured,put=PutObscured))
    enum Office::MsoTriState Obscured;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoShadowType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum Office::MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum Office::MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("91493482-5a91-11cf-8700-00aa0060263b"))
TextEffectFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum Office::MsoTextEffectAlignment Alignment;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    enum Office::MsoTriState FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    enum Office::MsoTriState FontItalic;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetKernedPairs,put=PutKernedPairs))
    enum Office::MsoTriState KernedPairs;
    __declspec(property(get=GetNormalizedHeight,put=PutNormalizedHeight))
    enum Office::MsoTriState NormalizedHeight;
    __declspec(property(get=GetPresetShape,put=PutPresetShape))
    enum Office::MsoPresetTextEffectShape PresetShape;
    __declspec(property(get=GetPresetTextEffect,put=PutPresetTextEffect))
    enum Office::MsoPresetTextEffect PresetTextEffect;
    __declspec(property(get=GetRotatedChars,put=PutRotatedChars))
    enum Office::MsoTriState RotatedChars;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum Office::MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum Office::MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum Office::MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum Office::MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum Office::MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum Office::MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum Office::MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum Office::MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum Office::MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum Office::MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum Office::MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum Office::MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("91493483-5a91-11cf-8700-00aa0060263b"))
ThreeDFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetExtrusionColorType,put=PutExtrusionColorType))
    enum Office::MsoExtrusionColorType ExtrusionColorType;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    enum Office::MsoTriState Perspective;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetLightingDirection,put=PutPresetLightingDirection))
    enum Office::MsoPresetLightingDirection PresetLightingDirection;
    __declspec(property(get=GetPresetLightingSoftness,put=PutPresetLightingSoftness))
    enum Office::MsoPresetLightingSoftness PresetLightingSoftness;
    __declspec(property(get=GetPresetMaterial,put=PutPresetMaterial))
    enum Office::MsoPresetMaterial PresetMaterial;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum Office::MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum Office::MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum Office::MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("91493485-5a91-11cf-8700-00aa0060263b"))
CalloutFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAccent,put=PutAccent))
    enum Office::MsoTriState Accent;
    __declspec(property(get=GetAngle,put=PutAngle))
    enum Office::MsoCalloutAngleType Angle;
    __declspec(property(get=GetAutoAttach,put=PutAutoAttach))
    enum Office::MsoTriState AutoAttach;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetBorder,put=PutBorder))
    enum Office::MsoTriState Border;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoCalloutType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum Office::MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum Office::MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum Office::MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum Office::MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum Office::MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum Office::MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum Office::MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum Office::MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum Office::MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum Office::MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("91493487-5a91-11cf-8700-00aa0060263b"))
ShapeNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum Office::MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("91493486-5a91-11cf-8700-00aa0060263b"))
ShapeNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int index );
    HRESULT Insert (
        int index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int index,
        /*[in]*/ enum Office::MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("91493489-5a91-11cf-8700-00aa0060263b"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceFullName,put=PutSourceFullName))
    _bstr_t SourceFullName;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    enum PpUpdateOption AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSourceFullName ( );
    void PutSourceFullName (
        _bstr_t SourceFullName );
    enum PpUpdateOption GetAutoUpdate ( );
    void PutAutoUpdate (
        enum PpUpdateOption AutoUpdate );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SourceFullName (
        /*[out,retval]*/ BSTR * SourceFullName ) = 0;
      virtual HRESULT __stdcall put_SourceFullName (
        /*[in]*/ BSTR SourceFullName ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ enum PpUpdateOption * AutoUpdate ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ enum PpUpdateOption AutoUpdate ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("9149348a-5a91-11cf-8700-00aa0060263b"))
ObjectVerbs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * Item ) = 0;
};

struct __declspec(uuid("91493488-5a91-11cf-8700-00aa0060263b"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObjectVerbs))
    ObjectVerbsPtr ObjectVerbs;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetFollowColors,put=PutFollowColors))
    enum PpFollowColors FollowColors;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ObjectVerbsPtr GetObjectVerbs ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgID ( );
    enum PpFollowColors GetFollowColors ( );
    void PutFollowColors (
        enum PpFollowColors FollowColors );
    HRESULT DoVerb (
        int index );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ObjectVerbs (
        /*[out,retval]*/ struct ObjectVerbs * * ObjectVerbs ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * ProgID ) = 0;
      virtual HRESULT __stdcall get_FollowColors (
        /*[out,retval]*/ enum PpFollowColors * FollowColors ) = 0;
      virtual HRESULT __stdcall put_FollowColors (
        /*[in]*/ enum PpFollowColors FollowColors ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ int index ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("9149348d-5a91-11cf-8700-00aa0060263b"))
ActionSetting : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAction,put=PutAction))
    enum PpActionType Action;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetAnimateAction,put=PutAnimateAction))
    enum Office::MsoTriState AnimateAction;
    __declspec(property(get=GetRun,put=PutRun))
    _bstr_t Run;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetShowandReturn,put=PutShowandReturn))
    enum Office::MsoTriState ShowandReturn;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpActionType GetAction ( );
    void PutAction (
        enum PpActionType Action );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    enum Office::MsoTriState GetAnimateAction ( );
    void PutAnimateAction (
        enum Office::MsoTriState AnimateAction );
    _bstr_t GetRun ( );
    void PutRun (
        _bstr_t Run );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    HyperlinkPtr GetHyperlink ( );
    SoundEffectPtr GetSoundEffect ( );
    enum Office::MsoTriState GetShowandReturn ( );
    void PutShowandReturn (
        enum Office::MsoTriState ShowandReturn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Action (
        /*[out,retval]*/ enum PpActionType * Action ) = 0;
      virtual HRESULT __stdcall put_Action (
        /*[in]*/ enum PpActionType Action ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_AnimateAction (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateAction ) = 0;
      virtual HRESULT __stdcall put_AnimateAction (
        /*[in]*/ enum Office::MsoTriState AnimateAction ) = 0;
      virtual HRESULT __stdcall get_Run (
        /*[out,retval]*/ BSTR * Run ) = 0;
      virtual HRESULT __stdcall put_Run (
        /*[in]*/ BSTR Run ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * Hyperlink ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_ShowandReturn (
        /*[out,retval]*/ enum Office::MsoTriState * ShowandReturn ) = 0;
      virtual HRESULT __stdcall put_ShowandReturn (
        /*[in]*/ enum Office::MsoTriState ShowandReturn ) = 0;
};

struct __declspec(uuid("9149348c-5a91-11cf-8700-00aa0060263b"))
ActionSettings : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingPtr Item (
        enum PpMouseActivation index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpMouseActivation index,
        /*[out,retval]*/ struct ActionSetting * * Item ) = 0;
};

struct __declspec(uuid("9149348e-5a91-11cf-8700-00aa0060263b"))
PlaySettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionVerb,put=PutActionVerb))
    _bstr_t ActionVerb;
    __declspec(property(get=GetHideWhileNotPlaying,put=PutHideWhileNotPlaying))
    enum Office::MsoTriState HideWhileNotPlaying;
    __declspec(property(get=GetLoopUntilStopped,put=PutLoopUntilStopped))
    enum Office::MsoTriState LoopUntilStopped;
    __declspec(property(get=GetPlayOnEntry,put=PutPlayOnEntry))
    enum Office::MsoTriState PlayOnEntry;
    __declspec(property(get=GetRewindMovie,put=PutRewindMovie))
    enum Office::MsoTriState RewindMovie;
    __declspec(property(get=GetPauseAnimation,put=PutPauseAnimation))
    enum Office::MsoTriState PauseAnimation;
    __declspec(property(get=GetStopAfterSlides,put=PutStopAfterSlides))
    int StopAfterSlides;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetActionVerb ( );
    void PutActionVerb (
        _bstr_t ActionVerb );
    enum Office::MsoTriState GetHideWhileNotPlaying ( );
    void PutHideWhileNotPlaying (
        enum Office::MsoTriState HideWhileNotPlaying );
    enum Office::MsoTriState GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        enum Office::MsoTriState LoopUntilStopped );
    enum Office::MsoTriState GetPlayOnEntry ( );
    void PutPlayOnEntry (
        enum Office::MsoTriState PlayOnEntry );
    enum Office::MsoTriState GetRewindMovie ( );
    void PutRewindMovie (
        enum Office::MsoTriState RewindMovie );
    enum Office::MsoTriState GetPauseAnimation ( );
    void PutPauseAnimation (
        enum Office::MsoTriState PauseAnimation );
    int GetStopAfterSlides ( );
    void PutStopAfterSlides (
        int StopAfterSlides );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionVerb (
        /*[out,retval]*/ BSTR * ActionVerb ) = 0;
      virtual HRESULT __stdcall put_ActionVerb (
        /*[in]*/ BSTR ActionVerb ) = 0;
      virtual HRESULT __stdcall get_HideWhileNotPlaying (
        /*[out,retval]*/ enum Office::MsoTriState * HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall put_HideWhileNotPlaying (
        /*[in]*/ enum Office::MsoTriState HideWhileNotPlaying ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ enum Office::MsoTriState * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ enum Office::MsoTriState LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_PlayOnEntry (
        /*[out,retval]*/ enum Office::MsoTriState * PlayOnEntry ) = 0;
      virtual HRESULT __stdcall put_PlayOnEntry (
        /*[in]*/ enum Office::MsoTriState PlayOnEntry ) = 0;
      virtual HRESULT __stdcall get_RewindMovie (
        /*[out,retval]*/ enum Office::MsoTriState * RewindMovie ) = 0;
      virtual HRESULT __stdcall put_RewindMovie (
        /*[in]*/ enum Office::MsoTriState RewindMovie ) = 0;
      virtual HRESULT __stdcall get_PauseAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * PauseAnimation ) = 0;
      virtual HRESULT __stdcall put_PauseAnimation (
        /*[in]*/ enum Office::MsoTriState PauseAnimation ) = 0;
      virtual HRESULT __stdcall get_StopAfterSlides (
        /*[out,retval]*/ int * StopAfterSlides ) = 0;
      virtual HRESULT __stdcall put_StopAfterSlides (
        /*[in]*/ int StopAfterSlides ) = 0;
};

struct __declspec(uuid("9149348b-5a91-11cf-8700-00aa0060263b"))
AnimationSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChartUnitEffect,put=PutChartUnitEffect))
    enum PpChartUnitEffect ChartUnitEffect;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDimColor))
    ColorFormatPtr DimColor;
    __declspec(property(get=GetSoundEffect))
    SoundEffectPtr SoundEffect;
    __declspec(property(get=GetEntryEffect,put=PutEntryEffect))
    enum PpEntryEffect EntryEffect;
    __declspec(property(get=GetAfterEffect,put=PutAfterEffect))
    enum PpAfterEffect AfterEffect;
    __declspec(property(get=GetAnimationOrder,put=PutAnimationOrder))
    int AnimationOrder;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpAdvanceMode AdvanceMode;
    __declspec(property(get=GetAdvanceTime,put=PutAdvanceTime))
    float AdvanceTime;
    __declspec(property(get=GetPlaySettings))
    PlaySettingsPtr PlaySettings;
    __declspec(property(get=GetTextLevelEffect,put=PutTextLevelEffect))
    enum PpTextLevelEffect TextLevelEffect;
    __declspec(property(get=GetTextUnitEffect,put=PutTextUnitEffect))
    enum PpTextUnitEffect TextUnitEffect;
    __declspec(property(get=GetAnimate,put=PutAnimate))
    enum Office::MsoTriState Animate;
    __declspec(property(get=GetAnimateBackground,put=PutAnimateBackground))
    enum Office::MsoTriState AnimateBackground;
    __declspec(property(get=GetAnimateTextInReverse,put=PutAnimateTextInReverse))
    enum Office::MsoTriState AnimateTextInReverse;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetDimColor ( );
    SoundEffectPtr GetSoundEffect ( );
    enum PpEntryEffect GetEntryEffect ( );
    void PutEntryEffect (
        enum PpEntryEffect EntryEffect );
    enum PpAfterEffect GetAfterEffect ( );
    void PutAfterEffect (
        enum PpAfterEffect AfterEffect );
    int GetAnimationOrder ( );
    void PutAnimationOrder (
        int AnimationOrder );
    enum PpAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpAdvanceMode AdvanceMode );
    float GetAdvanceTime ( );
    void PutAdvanceTime (
        float AdvanceTime );
    PlaySettingsPtr GetPlaySettings ( );
    enum PpTextLevelEffect GetTextLevelEffect ( );
    void PutTextLevelEffect (
        enum PpTextLevelEffect TextLevelEffect );
    enum PpTextUnitEffect GetTextUnitEffect ( );
    void PutTextUnitEffect (
        enum PpTextUnitEffect TextUnitEffect );
    enum Office::MsoTriState GetAnimate ( );
    void PutAnimate (
        enum Office::MsoTriState Animate );
    enum Office::MsoTriState GetAnimateBackground ( );
    void PutAnimateBackground (
        enum Office::MsoTriState AnimateBackground );
    enum Office::MsoTriState GetAnimateTextInReverse ( );
    void PutAnimateTextInReverse (
        enum Office::MsoTriState AnimateTextInReverse );
    enum PpChartUnitEffect GetChartUnitEffect ( );
    void PutChartUnitEffect (
        enum PpChartUnitEffect ChartUnitEffect );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DimColor (
        /*[out,retval]*/ struct ColorFormat * * DimColor ) = 0;
      virtual HRESULT __stdcall get_SoundEffect (
        /*[out,retval]*/ struct SoundEffect * * SoundEffect ) = 0;
      virtual HRESULT __stdcall get_EntryEffect (
        /*[out,retval]*/ enum PpEntryEffect * EntryEffect ) = 0;
      virtual HRESULT __stdcall put_EntryEffect (
        /*[in]*/ enum PpEntryEffect EntryEffect ) = 0;
      virtual HRESULT __stdcall get_AfterEffect (
        /*[out,retval]*/ enum PpAfterEffect * AfterEffect ) = 0;
      virtual HRESULT __stdcall put_AfterEffect (
        /*[in]*/ enum PpAfterEffect AfterEffect ) = 0;
      virtual HRESULT __stdcall get_AnimationOrder (
        /*[out,retval]*/ int * AnimationOrder ) = 0;
      virtual HRESULT __stdcall put_AnimationOrder (
        /*[in]*/ int AnimationOrder ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_AdvanceTime (
        /*[out,retval]*/ float * AdvanceTime ) = 0;
      virtual HRESULT __stdcall put_AdvanceTime (
        /*[in]*/ float AdvanceTime ) = 0;
      virtual HRESULT __stdcall get_PlaySettings (
        /*[out,retval]*/ struct PlaySettings * * PlaySettings ) = 0;
      virtual HRESULT __stdcall get_TextLevelEffect (
        /*[out,retval]*/ enum PpTextLevelEffect * TextLevelEffect ) = 0;
      virtual HRESULT __stdcall put_TextLevelEffect (
        /*[in]*/ enum PpTextLevelEffect TextLevelEffect ) = 0;
      virtual HRESULT __stdcall get_TextUnitEffect (
        /*[out,retval]*/ enum PpTextUnitEffect * TextUnitEffect ) = 0;
      virtual HRESULT __stdcall put_TextUnitEffect (
        /*[in]*/ enum PpTextUnitEffect TextUnitEffect ) = 0;
      virtual HRESULT __stdcall get_Animate (
        /*[out,retval]*/ enum Office::MsoTriState * Animate ) = 0;
      virtual HRESULT __stdcall put_Animate (
        /*[in]*/ enum Office::MsoTriState Animate ) = 0;
      virtual HRESULT __stdcall get_AnimateBackground (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateBackground ) = 0;
      virtual HRESULT __stdcall put_AnimateBackground (
        /*[in]*/ enum Office::MsoTriState AnimateBackground ) = 0;
      virtual HRESULT __stdcall get_AnimateTextInReverse (
        /*[out,retval]*/ enum Office::MsoTriState * AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall put_AnimateTextInReverse (
        /*[in]*/ enum Office::MsoTriState AnimateTextInReverse ) = 0;
      virtual HRESULT __stdcall get_ChartUnitEffect (
        /*[out,retval]*/ enum PpChartUnitEffect * ChartUnitEffect ) = 0;
      virtual HRESULT __stdcall put_ChartUnitEffect (
        /*[in]*/ enum PpChartUnitEffect ChartUnitEffect ) = 0;
};

struct __declspec(uuid("91493492-5a91-11cf-8700-00aa0060263b"))
RulerLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFirstMargin,put=PutFirstMargin))
    float FirstMargin;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    float LeftMargin;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    float GetFirstMargin ( );
    void PutFirstMargin (
        float FirstMargin );
    float GetLeftMargin ( );
    void PutLeftMargin (
        float LeftMargin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_FirstMargin (
        /*[out,retval]*/ float * FirstMargin ) = 0;
      virtual HRESULT __stdcall put_FirstMargin (
        /*[in]*/ float FirstMargin ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ float * LeftMargin ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ float LeftMargin ) = 0;
};

struct __declspec(uuid("91493491-5a91-11cf-8700-00aa0060263b"))
RulerLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerLevelPtr Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct RulerLevel * * Item ) = 0;
};

struct __declspec(uuid("91493494-5a91-11cf-8700-00aa0060263b"))
TabStop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum PpTabStopType Type;
    __declspec(property(get=GetPosition,put=PutPosition))
    float Position;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpTabStopType GetType ( );
    void PutType (
        enum PpTabStopType Type );
    float GetPosition ( );
    void PutPosition (
        float Position );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpTabStopType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpTabStopType Type ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ float * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ float Position ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("91493493-5a91-11cf-8700-00aa0060263b"))
TabStops : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDefaultSpacing,put=PutDefaultSpacing))
    float DefaultSpacing;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopPtr Item (
        int index );
    float GetDefaultSpacing ( );
    void PutDefaultSpacing (
        float DefaultSpacing );
    TabStopPtr Add (
        enum PpTabStopType Type,
        float Position );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct TabStop * * Item ) = 0;
      virtual HRESULT __stdcall get_DefaultSpacing (
        /*[out,retval]*/ float * DefaultSpacing ) = 0;
      virtual HRESULT __stdcall put_DefaultSpacing (
        /*[in]*/ float DefaultSpacing ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum PpTabStopType Type,
        /*[in]*/ float Position,
        /*[out,retval]*/ struct TabStop * * Add ) = 0;
};

struct __declspec(uuid("91493490-5a91-11cf-8700-00aa0060263b"))
Ruler : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetTabStops))
    TabStopsPtr TabStops;
    __declspec(property(get=GetLevels))
    RulerLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TabStopsPtr GetTabStops ( );
    RulerLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_TabStops (
        /*[out,retval]*/ struct TabStops * * TabStops ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct RulerLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493495-5a91-11cf-8700-00aa0060263b"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNameFarEast,put=PutNameFarEast))
    _bstr_t NameFarEast;
    __declspec(property(get=GetNameAscii,put=PutNameAscii))
    _bstr_t NameAscii;
    __declspec(property(get=GetAutoRotateNumbers,put=PutAutoRotateNumbers))
    enum Office::MsoTriState AutoRotateNumbers;
    __declspec(property(get=GetNameOther,put=PutNameOther))
    _bstr_t NameOther;
    __declspec(property(get=GetNameComplexScript,put=PutNameComplexScript))
    _bstr_t NameComplexScript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColor))
    ColorFormatPtr Color;
    __declspec(property(get=GetBold,put=PutBold))
    enum Office::MsoTriState Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    enum Office::MsoTriState Italic;
    __declspec(property(get=GetShadow,put=PutShadow))
    enum Office::MsoTriState Shadow;
    __declspec(property(get=GetEmboss,put=PutEmboss))
    enum Office::MsoTriState Emboss;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum Office::MsoTriState Underline;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    enum Office::MsoTriState Subscript;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    enum Office::MsoTriState Superscript;
    __declspec(property(get=GetBaselineOffset,put=PutBaselineOffset))
    float BaselineOffset;
    __declspec(property(get=GetEmbedded))
    enum Office::MsoTriState Embedded;
    __declspec(property(get=GetEmbeddable))
    enum Office::MsoTriState Embeddable;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetColor ( );
    enum Office::MsoTriState GetBold ( );
    void PutBold (
        enum Office::MsoTriState Bold );
    enum Office::MsoTriState GetItalic ( );
    void PutItalic (
        enum Office::MsoTriState Italic );
    enum Office::MsoTriState GetShadow ( );
    void PutShadow (
        enum Office::MsoTriState Shadow );
    enum Office::MsoTriState GetEmboss ( );
    void PutEmboss (
        enum Office::MsoTriState Emboss );
    enum Office::MsoTriState GetUnderline ( );
    void PutUnderline (
        enum Office::MsoTriState Underline );
    enum Office::MsoTriState GetSubscript ( );
    void PutSubscript (
        enum Office::MsoTriState Subscript );
    enum Office::MsoTriState GetSuperscript ( );
    void PutSuperscript (
        enum Office::MsoTriState Superscript );
    float GetBaselineOffset ( );
    void PutBaselineOffset (
        float BaselineOffset );
    enum Office::MsoTriState GetEmbedded ( );
    enum Office::MsoTriState GetEmbeddable ( );
    float GetSize ( );
    void PutSize (
        float Size );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetNameFarEast ( );
    void PutNameFarEast (
        _bstr_t NameFarEast );
    _bstr_t GetNameAscii ( );
    void PutNameAscii (
        _bstr_t NameAscii );
    enum Office::MsoTriState GetAutoRotateNumbers ( );
    void PutAutoRotateNumbers (
        enum Office::MsoTriState AutoRotateNumbers );
    _bstr_t GetNameOther ( );
    void PutNameOther (
        _bstr_t NameOther );
    _bstr_t GetNameComplexScript ( );
    void PutNameComplexScript (
        _bstr_t NameComplexScript );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct ColorFormat * * Color ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ enum Office::MsoTriState * Bold ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ enum Office::MsoTriState Bold ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ enum Office::MsoTriState * Italic ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ enum Office::MsoTriState Italic ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ enum Office::MsoTriState * Shadow ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ enum Office::MsoTriState Shadow ) = 0;
      virtual HRESULT __stdcall get_Emboss (
        /*[out,retval]*/ enum Office::MsoTriState * Emboss ) = 0;
      virtual HRESULT __stdcall put_Emboss (
        /*[in]*/ enum Office::MsoTriState Emboss ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ enum Office::MsoTriState * Underline ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ enum Office::MsoTriState Underline ) = 0;
      virtual HRESULT __stdcall get_Subscript (
        /*[out,retval]*/ enum Office::MsoTriState * Subscript ) = 0;
      virtual HRESULT __stdcall put_Subscript (
        /*[in]*/ enum Office::MsoTriState Subscript ) = 0;
      virtual HRESULT __stdcall get_Superscript (
        /*[out,retval]*/ enum Office::MsoTriState * Superscript ) = 0;
      virtual HRESULT __stdcall put_Superscript (
        /*[in]*/ enum Office::MsoTriState Superscript ) = 0;
      virtual HRESULT __stdcall get_BaselineOffset (
        /*[out,retval]*/ float * BaselineOffset ) = 0;
      virtual HRESULT __stdcall put_BaselineOffset (
        /*[in]*/ float BaselineOffset ) = 0;
      virtual HRESULT __stdcall get_Embedded (
        /*[out,retval]*/ enum Office::MsoTriState * Embedded ) = 0;
      virtual HRESULT __stdcall get_Embeddable (
        /*[out,retval]*/ enum Office::MsoTriState * Embeddable ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * Size ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float Size ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_NameFarEast (
        /*[out,retval]*/ BSTR * NameFarEast ) = 0;
      virtual HRESULT __stdcall put_NameFarEast (
        /*[in]*/ BSTR NameFarEast ) = 0;
      virtual HRESULT __stdcall get_NameAscii (
        /*[out,retval]*/ BSTR * NameAscii ) = 0;
      virtual HRESULT __stdcall put_NameAscii (
        /*[in]*/ BSTR NameAscii ) = 0;
      virtual HRESULT __stdcall get_AutoRotateNumbers (
        /*[out,retval]*/ enum Office::MsoTriState * AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall put_AutoRotateNumbers (
        /*[in]*/ enum Office::MsoTriState AutoRotateNumbers ) = 0;
      virtual HRESULT __stdcall get_NameOther (
        /*[out,retval]*/ BSTR * NameOther ) = 0;
      virtual HRESULT __stdcall put_NameOther (
        /*[in]*/ BSTR NameOther ) = 0;
      virtual HRESULT __stdcall get_NameComplexScript (
        /*[out,retval]*/ BSTR * NameComplexScript ) = 0;
      virtual HRESULT __stdcall put_NameComplexScript (
        /*[in]*/ BSTR NameComplexScript ) = 0;
};

struct __declspec(uuid("91493467-5a91-11cf-8700-00aa0060263b"))
Fonts : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    FontPtr Item (
        const _variant_t & index );
    HRESULT Replace (
        _bstr_t Original,
        _bstr_t Replacement );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct Font * * Item ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Original,
        /*[in]*/ BSTR Replacement ) = 0;
};

struct __declspec(uuid("9149349c-5a91-11cf-8700-00aa0060263b"))
HeaderFooter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetUseFormat,put=PutUseFormat))
    enum Office::MsoTriState UseFormat;
    __declspec(property(get=GetFormat,put=PutFormat))
    enum PpDateTimeFormat Format;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    enum Office::MsoTriState GetUseFormat ( );
    void PutUseFormat (
        enum Office::MsoTriState UseFormat );
    enum PpDateTimeFormat GetFormat ( );
    void PutFormat (
        enum PpDateTimeFormat Format );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_UseFormat (
        /*[out,retval]*/ enum Office::MsoTriState * UseFormat ) = 0;
      virtual HRESULT __stdcall put_UseFormat (
        /*[in]*/ enum Office::MsoTriState UseFormat ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ enum PpDateTimeFormat * Format ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ enum PpDateTimeFormat Format ) = 0;
};

struct __declspec(uuid("91493474-5a91-11cf-8700-00aa0060263b"))
HeadersFooters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDateAndTime))
    HeaderFooterPtr DateAndTime;
    __declspec(property(get=GetSlideNumber))
    HeaderFooterPtr SlideNumber;
    __declspec(property(get=GetHeader))
    HeaderFooterPtr Header;
    __declspec(property(get=GetFooter))
    HeaderFooterPtr Footer;
    __declspec(property(get=GetDisplayOnTitleSlide,put=PutDisplayOnTitleSlide))
    enum Office::MsoTriState DisplayOnTitleSlide;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HeaderFooterPtr GetDateAndTime ( );
    HeaderFooterPtr GetSlideNumber ( );
    HeaderFooterPtr GetHeader ( );
    HeaderFooterPtr GetFooter ( );
    enum Office::MsoTriState GetDisplayOnTitleSlide ( );
    void PutDisplayOnTitleSlide (
        enum Office::MsoTriState DisplayOnTitleSlide );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_DateAndTime (
        /*[out,retval]*/ struct HeaderFooter * * DateAndTime ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ struct HeaderFooter * * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct HeaderFooter * * Header ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ struct HeaderFooter * * Footer ) = 0;
      virtual HRESULT __stdcall get_DisplayOnTitleSlide (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall put_DisplayOnTitleSlide (
        /*[in]*/ enum Office::MsoTriState DisplayOnTitleSlide ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("9149349f-5a91-11cf-8700-00aa0060263b"))
PPAlert : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPressedButton))
    int PressedButton;
    __declspec(property(get=GetOnButton,put=PutOnButton))
    _bstr_t OnButton;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Run (
        _bstr_t Title,
        int Type,
        _bstr_t Text,
        _bstr_t leftBtn,
        _bstr_t middleBtn,
        _bstr_t rightBtn );
    int GetPressedButton ( );
    _bstr_t GetOnButton ( );
    void PutOnButton (
        _bstr_t OnButton );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ BSTR Title,
        /*[in]*/ int Type,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR leftBtn,
        /*[in]*/ BSTR middleBtn,
        /*[in]*/ BSTR rightBtn ) = 0;
      virtual HRESULT __stdcall get_PressedButton (
        /*[out,retval]*/ int * PressedButton ) = 0;
      virtual HRESULT __stdcall get_OnButton (
        /*[out,retval]*/ BSTR * OnButton ) = 0;
      virtual HRESULT __stdcall put_OnButton (
        /*[in]*/ BSTR OnButton ) = 0;
};

struct __declspec(uuid("914934a9-5a91-11cf-8700-00aa0060263b"))
PPStrings : Collection
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t Item (
        int index );
    _bstr_t Add (
        _bstr_t String );
    HRESULT Insert (
        _bstr_t String,
        int Position );
    HRESULT Delete (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ BSTR * Add ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR String,
        /*[in]*/ int Position ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int index ) = 0;
};

struct __declspec(uuid("914934b9-5a91-11cf-8700-00aa0060263b"))
Tags : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        _bstr_t Name );
    HRESULT Add (
        _bstr_t Name,
        _bstr_t Value );
    HRESULT Delete (
        _bstr_t Name );
    HRESULT AddBinary (
        _bstr_t Name,
        _bstr_t FilePath );
    long BinaryValue (
        _bstr_t Name );
    _bstr_t Name (
        int index );
    _bstr_t Value (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AddBinary (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_BinaryValue (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * BinaryValue ) = 0;
      virtual HRESULT __stdcall raw_Name (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Value (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * Value ) = 0;
};

struct __declspec(uuid("914934a4-5a91-11cf-8700-00aa0060263b"))
PPControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnable,put=PutEnable))
    enum Office::MsoTriState Enable;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetFocus,put=PutFocus))
    enum Office::MsoTriState Focus;
    __declspec(property(get=GetLabel,put=PutLabel))
    _bstr_t Label;
    __declspec(property(get=GetHelpId,put=PutHelpId))
    int HelpId;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetOnSetFocus,put=PutOnSetFocus))
    _bstr_t OnSetFocus;
    __declspec(property(get=GetOnKillFocus,put=PutOnKillFocus))
    _bstr_t OnKillFocus;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetEnable ( );
    void PutEnable (
        enum Office::MsoTriState Enable );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    enum Office::MsoTriState GetFocus ( );
    void PutFocus (
        enum Office::MsoTriState Focus );
    _bstr_t GetLabel ( );
    void PutLabel (
        _bstr_t Label );
    int GetHelpId ( );
    void PutHelpId (
        int HelpId );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    long GetHWND ( );
    _bstr_t GetOnSetFocus ( );
    void PutOnSetFocus (
        _bstr_t OnSetFocus );
    _bstr_t GetOnKillFocus ( );
    void PutOnKillFocus (
        _bstr_t OnKillFocus );
    TagsPtr GetTags ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Enable (
        /*[out,retval]*/ enum Office::MsoTriState * Enable ) = 0;
      virtual HRESULT __stdcall put_Enable (
        /*[in]*/ enum Office::MsoTriState Enable ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ enum Office::MsoTriState * Focus ) = 0;
      virtual HRESULT __stdcall put_Focus (
        /*[in]*/ enum Office::MsoTriState Focus ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[out,retval]*/ BSTR * Label ) = 0;
      virtual HRESULT __stdcall put_Label (
        /*[in]*/ BSTR Label ) = 0;
      virtual HRESULT __stdcall get_HelpId (
        /*[out,retval]*/ int * HelpId ) = 0;
      virtual HRESULT __stdcall put_HelpId (
        /*[in]*/ int HelpId ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_OnSetFocus (
        /*[out,retval]*/ BSTR * OnSetFocus ) = 0;
      virtual HRESULT __stdcall put_OnSetFocus (
        /*[in]*/ BSTR OnSetFocus ) = 0;
      virtual HRESULT __stdcall get_OnKillFocus (
        /*[out,retval]*/ BSTR * OnKillFocus ) = 0;
      virtual HRESULT __stdcall put_OnKillFocus (
        /*[in]*/ BSTR OnKillFocus ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("914934a5-5a91-11cf-8700-00aa0060263b"))
PPPushButton : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetIsDefault,put=PutIsDefault))
    enum Office::MsoTriState IsDefault;
    __declspec(property(get=GetIsEscape,put=PutIsEscape))
    enum Office::MsoTriState IsEscape;
    __declspec(property(get=GetOnPressed,put=PutOnPressed))
    _bstr_t OnPressed;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Click ( );
    enum Office::MsoTriState GetIsDefault ( );
    void PutIsDefault (
        enum Office::MsoTriState IsDefault );
    enum Office::MsoTriState GetIsEscape ( );
    void PutIsEscape (
        enum Office::MsoTriState IsEscape );
    _bstr_t GetOnPressed ( );
    void PutOnPressed (
        _bstr_t OnPressed );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall get_IsDefault (
        /*[out,retval]*/ enum Office::MsoTriState * IsDefault ) = 0;
      virtual HRESULT __stdcall put_IsDefault (
        /*[in]*/ enum Office::MsoTriState IsDefault ) = 0;
      virtual HRESULT __stdcall get_IsEscape (
        /*[out,retval]*/ enum Office::MsoTriState * IsEscape ) = 0;
      virtual HRESULT __stdcall put_IsEscape (
        /*[in]*/ enum Office::MsoTriState IsEscape ) = 0;
      virtual HRESULT __stdcall get_OnPressed (
        /*[out,retval]*/ BSTR * OnPressed ) = 0;
      virtual HRESULT __stdcall put_OnPressed (
        /*[in]*/ BSTR OnPressed ) = 0;
};

struct __declspec(uuid("914934a6-5a91-11cf-8700-00aa0060263b"))
PPToggleButton : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetState,put=PutState))
    enum Office::MsoTriState State;
    __declspec(property(get=GetResourceID,put=PutResourceID))
    int ResourceID;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetState ( );
    void PutState (
        enum Office::MsoTriState State );
    int GetResourceID ( );
    void PutResourceID (
        int ResourceID );
    HRESULT Click ( );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum Office::MsoTriState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum Office::MsoTriState State ) = 0;
      virtual HRESULT __stdcall get_ResourceID (
        /*[out,retval]*/ int * ResourceID ) = 0;
      virtual HRESULT __stdcall put_ResourceID (
        /*[in]*/ int ResourceID ) = 0;
      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
};

struct __declspec(uuid("914934a7-5a91-11cf-8700-00aa0060263b"))
PPBitmapButton : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetResourceID,put=PutResourceID))
    int ResourceID;
    __declspec(property(get=GetOnPressed,put=PutOnPressed))
    _bstr_t OnPressed;
    __declspec(property(get=GetIsDefault,put=PutIsDefault))
    enum Office::MsoTriState IsDefault;
    __declspec(property(get=GetIsEscape,put=PutIsEscape))
    enum Office::MsoTriState IsEscape;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Click ( );
    int GetResourceID ( );
    void PutResourceID (
        int ResourceID );
    _bstr_t GetOnPressed ( );
    void PutOnPressed (
        _bstr_t OnPressed );
    enum Office::MsoTriState GetIsDefault ( );
    void PutIsDefault (
        enum Office::MsoTriState IsDefault );
    enum Office::MsoTriState GetIsEscape ( );
    void PutIsEscape (
        enum Office::MsoTriState IsEscape );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall get_ResourceID (
        /*[out,retval]*/ int * ResourceID ) = 0;
      virtual HRESULT __stdcall put_ResourceID (
        /*[in]*/ int ResourceID ) = 0;
      virtual HRESULT __stdcall get_OnPressed (
        /*[out,retval]*/ BSTR * OnPressed ) = 0;
      virtual HRESULT __stdcall put_OnPressed (
        /*[in]*/ BSTR OnPressed ) = 0;
      virtual HRESULT __stdcall get_IsDefault (
        /*[out,retval]*/ enum Office::MsoTriState * IsDefault ) = 0;
      virtual HRESULT __stdcall put_IsDefault (
        /*[in]*/ enum Office::MsoTriState IsDefault ) = 0;
      virtual HRESULT __stdcall get_IsEscape (
        /*[out,retval]*/ enum Office::MsoTriState * IsEscape ) = 0;
      virtual HRESULT __stdcall put_IsEscape (
        /*[in]*/ enum Office::MsoTriState IsEscape ) = 0;
};

struct __declspec(uuid("914934a8-5a91-11cf-8700-00aa0060263b"))
PPListBox : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetIsSelected,put=PutIsSelected))
    enum Office::MsoTriState IsSelected[];
    __declspec(property(get=GetStrings))
    PPStringsPtr Strings;
    __declspec(property(get=GetSelectionStyle,put=PutSelectionStyle))
    enum PpListBoxSelectionStyle SelectionStyle;
    __declspec(property(get=GetFocusItem,put=PutFocusItem))
    int FocusItem;
    __declspec(property(get=GetTopItem))
    int TopItem;
    __declspec(property(get=GetOnSelectionChange,put=PutOnSelectionChange))
    _bstr_t OnSelectionChange;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetIsAbbreviated))
    enum PpListBoxAbbreviationStyle IsAbbreviated;

    //
    // Wrapper methods for error-handling
    //

    PPStringsPtr GetStrings ( );
    enum PpListBoxSelectionStyle GetSelectionStyle ( );
    void PutSelectionStyle (
        enum PpListBoxSelectionStyle SelectionStyle );
    HRESULT SetTabStops (
        const _variant_t & safeArrayTabStops );
    int GetFocusItem ( );
    void PutFocusItem (
        int FocusItem );
    int GetTopItem ( );
    _bstr_t GetOnSelectionChange ( );
    void PutOnSelectionChange (
        _bstr_t OnSelectionChange );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t OnDoubleClick );
    enum Office::MsoTriState GetIsSelected (
        int index );
    void PutIsSelected (
        int index,
        enum Office::MsoTriState IsSelected );
    HRESULT Abbreviate (
        enum PpListBoxAbbreviationStyle Style );
    enum PpListBoxAbbreviationStyle GetIsAbbreviated ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Strings (
        /*[out,retval]*/ struct PPStrings * * Strings ) = 0;
      virtual HRESULT __stdcall get_SelectionStyle (
        /*[out,retval]*/ enum PpListBoxSelectionStyle * SelectionStyle ) = 0;
      virtual HRESULT __stdcall put_SelectionStyle (
        /*[in]*/ enum PpListBoxSelectionStyle SelectionStyle ) = 0;
      virtual HRESULT __stdcall raw_SetTabStops (
        /*[in]*/ VARIANT safeArrayTabStops ) = 0;
      virtual HRESULT __stdcall get_FocusItem (
        /*[out,retval]*/ int * FocusItem ) = 0;
      virtual HRESULT __stdcall put_FocusItem (
        /*[in]*/ int FocusItem ) = 0;
      virtual HRESULT __stdcall get_TopItem (
        /*[out,retval]*/ int * TopItem ) = 0;
      virtual HRESULT __stdcall get_OnSelectionChange (
        /*[out,retval]*/ BSTR * OnSelectionChange ) = 0;
      virtual HRESULT __stdcall put_OnSelectionChange (
        /*[in]*/ BSTR OnSelectionChange ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[out,retval]*/ BSTR * OnDoubleClick ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in]*/ BSTR OnDoubleClick ) = 0;
      virtual HRESULT __stdcall get_IsSelected (
        /*[in]*/ int index,
        /*[out,retval]*/ enum Office::MsoTriState * IsSelected ) = 0;
      virtual HRESULT __stdcall put_IsSelected (
        /*[in]*/ int index,
        /*[in]*/ enum Office::MsoTriState IsSelected ) = 0;
      virtual HRESULT __stdcall raw_Abbreviate (
        /*[in]*/ enum PpListBoxAbbreviationStyle Style ) = 0;
      virtual HRESULT __stdcall get_IsAbbreviated (
        /*[out,retval]*/ enum PpListBoxAbbreviationStyle * IsAbbreviated ) = 0;
};

struct __declspec(uuid("914934aa-5a91-11cf-8700-00aa0060263b"))
PPCheckBox : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetState,put=PutState))
    enum Office::MsoTriState State;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetState ( );
    void PutState (
        enum Office::MsoTriState State );
    HRESULT Click ( );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum Office::MsoTriState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum Office::MsoTriState State ) = 0;
      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
};

struct __declspec(uuid("914934ac-5a91-11cf-8700-00aa0060263b"))
PPStaticText : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetUseForegroundColor,put=PutUseForegroundColor))
    enum Office::MsoTriState UseForegroundColor;
    __declspec(property(get=GetUseBackgroundColor,put=PutUseBackgroundColor))
    enum Office::MsoTriState UseBackgroundColor;
    __declspec(property(get=GetForegroundColor,put=PutForegroundColor))
    Office::MsoRGBType ForegroundColor;
    __declspec(property(get=GetBackgroundColor,put=PutBackgroundColor))
    Office::MsoRGBType BackgroundColor;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetUseForegroundColor ( );
    void PutUseForegroundColor (
        enum Office::MsoTriState UseForegroundColor );
    enum Office::MsoTriState GetUseBackgroundColor ( );
    void PutUseBackgroundColor (
        enum Office::MsoTriState UseBackgroundColor );
    Office::MsoRGBType GetForegroundColor ( );
    void PutForegroundColor (
        Office::MsoRGBType ForegroundColor );
    Office::MsoRGBType GetBackgroundColor ( );
    void PutBackgroundColor (
        Office::MsoRGBType BackgroundColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseForegroundColor (
        /*[out,retval]*/ enum Office::MsoTriState * UseForegroundColor ) = 0;
      virtual HRESULT __stdcall put_UseForegroundColor (
        /*[in]*/ enum Office::MsoTriState UseForegroundColor ) = 0;
      virtual HRESULT __stdcall get_UseBackgroundColor (
        /*[out,retval]*/ enum Office::MsoTriState * UseBackgroundColor ) = 0;
      virtual HRESULT __stdcall put_UseBackgroundColor (
        /*[in]*/ enum Office::MsoTriState UseBackgroundColor ) = 0;
      virtual HRESULT __stdcall get_ForegroundColor (
        /*[out,retval]*/ Office::MsoRGBType * ForegroundColor ) = 0;
      virtual HRESULT __stdcall put_ForegroundColor (
        /*[in]*/ Office::MsoRGBType ForegroundColor ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ Office::MsoRGBType * BackgroundColor ) = 0;
      virtual HRESULT __stdcall put_BackgroundColor (
        /*[in]*/ Office::MsoRGBType BackgroundColor ) = 0;
};

struct __declspec(uuid("914934ad-5a91-11cf-8700-00aa0060263b"))
PPEditText : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    enum Office::MsoTriState MultiLine;
    __declspec(property(get=GetVerticalScrollBar,put=PutVerticalScrollBar))
    enum Office::MsoTriState VerticalScrollBar;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    enum Office::MsoTriState WordWrap;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    enum Office::MsoTriState ReadOnly;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    int MaxLength;
    __declspec(property(get=GetOnAChange,put=PutOnAChange))
    _bstr_t OnAChange;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetMultiLine ( );
    void PutMultiLine (
        enum Office::MsoTriState MultiLine );
    enum Office::MsoTriState GetVerticalScrollBar ( );
    void PutVerticalScrollBar (
        enum Office::MsoTriState VerticalScrollBar );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    enum Office::MsoTriState GetReadOnly ( );
    void PutReadOnly (
        enum Office::MsoTriState ReadOnly );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    int GetMaxLength ( );
    void PutMaxLength (
        int MaxLength );
    _bstr_t GetOnAChange ( );
    void PutOnAChange (
        _bstr_t OnAChange );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ enum Office::MsoTriState * MultiLine ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ enum Office::MsoTriState MultiLine ) = 0;
      virtual HRESULT __stdcall get_VerticalScrollBar (
        /*[out,retval]*/ enum Office::MsoTriState * VerticalScrollBar ) = 0;
      virtual HRESULT __stdcall put_VerticalScrollBar (
        /*[in]*/ enum Office::MsoTriState VerticalScrollBar ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ enum Office::MsoTriState * ReadOnly ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ enum Office::MsoTriState ReadOnly ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ int * MaxLength ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ int MaxLength ) = 0;
      virtual HRESULT __stdcall get_OnAChange (
        /*[out,retval]*/ BSTR * OnAChange ) = 0;
      virtual HRESULT __stdcall put_OnAChange (
        /*[in]*/ BSTR OnAChange ) = 0;
};

struct __declspec(uuid("914934ae-5a91-11cf-8700-00aa0060263b"))
PPIcon : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetResourceID,put=PutResourceID))
    int ResourceID;

    //
    // Wrapper methods for error-handling
    //

    int GetResourceID ( );
    void PutResourceID (
        int ResourceID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ResourceID (
        /*[out,retval]*/ int * ResourceID ) = 0;
      virtual HRESULT __stdcall put_ResourceID (
        /*[in]*/ int ResourceID ) = 0;
};

struct __declspec(uuid("914934af-5a91-11cf-8700-00aa0060263b"))
PPBitmap : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetResourceID,put=PutResourceID))
    int ResourceID;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;

    //
    // Wrapper methods for error-handling
    //

    int GetResourceID ( );
    void PutResourceID (
        int ResourceID );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ResourceID (
        /*[out,retval]*/ int * ResourceID ) = 0;
      virtual HRESULT __stdcall put_ResourceID (
        /*[in]*/ int ResourceID ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
};

struct __declspec(uuid("914934b0-5a91-11cf-8700-00aa0060263b"))
PPSpinner : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimum,put=PutMinimum))
    int Minimum;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    int Maximum;
    __declspec(property(get=GetIncrement,put=PutIncrement))
    int Increment;
    __declspec(property(get=GetPageChange,put=PutPageChange))
    int PageChange;
    __declspec(property(get=GetCurrentValue,put=PutCurrentValue))
    int CurrentValue;
    __declspec(property(get=GetOnAChange,put=PutOnAChange))
    _bstr_t OnAChange;

    //
    // Wrapper methods for error-handling
    //

    int GetMinimum ( );
    void PutMinimum (
        int Minimum );
    int GetMaximum ( );
    void PutMaximum (
        int Maximum );
    int GetIncrement ( );
    void PutIncrement (
        int Increment );
    int GetPageChange ( );
    void PutPageChange (
        int PageChange );
    int GetCurrentValue ( );
    void PutCurrentValue (
        int CurrentValue );
    _bstr_t GetOnAChange ( );
    void PutOnAChange (
        _bstr_t OnAChange );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ int * Minimum ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ int Minimum ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ int * Maximum ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ int Maximum ) = 0;
      virtual HRESULT __stdcall get_Increment (
        /*[out,retval]*/ int * Increment ) = 0;
      virtual HRESULT __stdcall put_Increment (
        /*[in]*/ int Increment ) = 0;
      virtual HRESULT __stdcall get_PageChange (
        /*[out,retval]*/ int * PageChange ) = 0;
      virtual HRESULT __stdcall put_PageChange (
        /*[in]*/ int PageChange ) = 0;
      virtual HRESULT __stdcall get_CurrentValue (
        /*[out,retval]*/ int * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_CurrentValue (
        /*[in]*/ int CurrentValue ) = 0;
      virtual HRESULT __stdcall get_OnAChange (
        /*[out,retval]*/ BSTR * OnAChange ) = 0;
      virtual HRESULT __stdcall put_OnAChange (
        /*[in]*/ BSTR OnAChange ) = 0;
};

struct __declspec(uuid("914934b1-5a91-11cf-8700-00aa0060263b"))
PPScrollBar : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetMinimum,put=PutMinimum))
    int Minimum;
    __declspec(property(get=GetMaximum,put=PutMaximum))
    int Maximum;
    __declspec(property(get=GetIncrement,put=PutIncrement))
    int Increment;
    __declspec(property(get=GetPageChange,put=PutPageChange))
    int PageChange;
    __declspec(property(get=GetCurrentValue,put=PutCurrentValue))
    int CurrentValue;
    __declspec(property(get=GetOnScroll,put=PutOnScroll))
    _bstr_t OnScroll;

    //
    // Wrapper methods for error-handling
    //

    int GetMinimum ( );
    void PutMinimum (
        int Minimum );
    int GetMaximum ( );
    void PutMaximum (
        int Maximum );
    int GetIncrement ( );
    void PutIncrement (
        int Increment );
    int GetPageChange ( );
    void PutPageChange (
        int PageChange );
    int GetCurrentValue ( );
    void PutCurrentValue (
        int CurrentValue );
    _bstr_t GetOnScroll ( );
    void PutOnScroll (
        _bstr_t OnScroll );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ int * Minimum ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ int Minimum ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ int * Maximum ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ int Maximum ) = 0;
      virtual HRESULT __stdcall get_Increment (
        /*[out,retval]*/ int * Increment ) = 0;
      virtual HRESULT __stdcall put_Increment (
        /*[in]*/ int Increment ) = 0;
      virtual HRESULT __stdcall get_PageChange (
        /*[out,retval]*/ int * PageChange ) = 0;
      virtual HRESULT __stdcall put_PageChange (
        /*[in]*/ int PageChange ) = 0;
      virtual HRESULT __stdcall get_CurrentValue (
        /*[out,retval]*/ int * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_CurrentValue (
        /*[in]*/ int CurrentValue ) = 0;
      virtual HRESULT __stdcall get_OnScroll (
        /*[out,retval]*/ BSTR * OnScroll ) = 0;
      virtual HRESULT __stdcall put_OnScroll (
        /*[in]*/ BSTR OnScroll ) = 0;
};

struct __declspec(uuid("914934b2-5a91-11cf-8700-00aa0060263b"))
PPGroupBox : PPControl
{};

struct __declspec(uuid("914934b3-5a91-11cf-8700-00aa0060263b"))
PPFrame : PPControl
{};

struct __declspec(uuid("914934b4-5a91-11cf-8700-00aa0060263b"))
PPTabControl : PPControl
{};

struct __declspec(uuid("914934b5-5a91-11cf-8700-00aa0060263b"))
PPDropDown : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetStrings))
    PPStringsPtr Strings;
    __declspec(property(get=GetFocusItem,put=PutFocusItem))
    int FocusItem;
    __declspec(property(get=GetOnSelectionChange,put=PutOnSelectionChange))
    _bstr_t OnSelectionChange;

    //
    // Wrapper methods for error-handling
    //

    PPStringsPtr GetStrings ( );
    int GetFocusItem ( );
    void PutFocusItem (
        int FocusItem );
    _bstr_t GetOnSelectionChange ( );
    void PutOnSelectionChange (
        _bstr_t OnSelectionChange );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Strings (
        /*[out,retval]*/ struct PPStrings * * Strings ) = 0;
      virtual HRESULT __stdcall get_FocusItem (
        /*[out,retval]*/ int * FocusItem ) = 0;
      virtual HRESULT __stdcall put_FocusItem (
        /*[in]*/ int FocusItem ) = 0;
      virtual HRESULT __stdcall get_OnSelectionChange (
        /*[out,retval]*/ BSTR * OnSelectionChange ) = 0;
      virtual HRESULT __stdcall put_OnSelectionChange (
        /*[in]*/ BSTR OnSelectionChange ) = 0;
};

struct __declspec(uuid("914934b6-5a91-11cf-8700-00aa0060263b"))
PPDropDownEdit : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetStrings))
    PPStringsPtr Strings;
    __declspec(property(get=GetFocusItem,put=PutFocusItem))
    int FocusItem;
    __declspec(property(get=GetOnSelectionChange,put=PutOnSelectionChange))
    _bstr_t OnSelectionChange;
    __declspec(property(get=GetOnEdit,put=PutOnEdit))
    _bstr_t OnEdit;

    //
    // Wrapper methods for error-handling
    //

    PPStringsPtr GetStrings ( );
    int GetFocusItem ( );
    void PutFocusItem (
        int FocusItem );
    _bstr_t GetOnSelectionChange ( );
    void PutOnSelectionChange (
        _bstr_t OnSelectionChange );
    _bstr_t GetOnEdit ( );
    void PutOnEdit (
        _bstr_t OnEdit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Strings (
        /*[out,retval]*/ struct PPStrings * * Strings ) = 0;
      virtual HRESULT __stdcall get_FocusItem (
        /*[out,retval]*/ int * FocusItem ) = 0;
      virtual HRESULT __stdcall put_FocusItem (
        /*[in]*/ int FocusItem ) = 0;
      virtual HRESULT __stdcall get_OnSelectionChange (
        /*[out,retval]*/ BSTR * OnSelectionChange ) = 0;
      virtual HRESULT __stdcall put_OnSelectionChange (
        /*[in]*/ BSTR OnSelectionChange ) = 0;
      virtual HRESULT __stdcall get_OnEdit (
        /*[out,retval]*/ BSTR * OnEdit ) = 0;
      virtual HRESULT __stdcall put_OnEdit (
        /*[in]*/ BSTR OnEdit ) = 0;
};

struct __declspec(uuid("914934b7-5a91-11cf-8700-00aa0060263b"))
PPSlideMiniature : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetSelected,put=PutSelected))
    int Selected;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetImage (
        struct _Slide * Slide );
    int GetSelected ( );
    void PutSelected (
        int Selected );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t OnDoubleClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetImage (
        /*[in]*/ struct _Slide * Slide ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ int * Selected ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ int Selected ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[out,retval]*/ BSTR * OnDoubleClick ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in]*/ BSTR OnDoubleClick ) = 0;
};

struct __declspec(uuid("914934b8-5a91-11cf-8700-00aa0060263b"))
PPRadioButton : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetState,put=PutState))
    enum Office::MsoTriState State;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetState ( );
    void PutState (
        enum Office::MsoTriState State );
    HRESULT Click ( );
    HRESULT DoubleClick ( );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t OnDoubleClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum Office::MsoTriState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum Office::MsoTriState State ) = 0;
      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall raw_DoubleClick ( ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[out,retval]*/ BSTR * OnDoubleClick ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in]*/ BSTR OnDoubleClick ) = 0;
};

struct __declspec(uuid("914934ab-5a91-11cf-8700-00aa0060263b"))
PPRadioCluster : PPControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetSelected))
    PPRadioButtonPtr Selected;
    __declspec(property(get=GetOnClick,put=PutOnClick))
    _bstr_t OnClick;

    //
    // Wrapper methods for error-handling
    //

    PPRadioButtonPtr Item (
        const _variant_t & index );
    PPRadioButtonPtr Add (
        float Left,
        float Top,
        float Width,
        float Height );
    int GetCount ( );
    PPRadioButtonPtr GetSelected ( );
    _bstr_t GetOnClick ( );
    void PutOnClick (
        _bstr_t OnClick );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct PPRadioButton * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPRadioButton * * Add ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ struct PPRadioButton * * Selected ) = 0;
      virtual HRESULT __stdcall get_OnClick (
        /*[out,retval]*/ BSTR * OnClick ) = 0;
      virtual HRESULT __stdcall put_OnClick (
        /*[in]*/ BSTR OnClick ) = 0;
};

struct __declspec(uuid("914934a2-5a91-11cf-8700-00aa0060263b"))
PPControls : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    PPControlPtr Item (
        const _variant_t & index );
    PPPushButtonPtr AddPushButton (
        float Left,
        float Top,
        float Width,
        float Height );
    PPToggleButtonPtr AddToggleButton (
        float Left,
        float Top,
        float Width,
        float Height );
    PPBitmapButtonPtr AddBitmapButton (
        float Left,
        float Top,
        float Width,
        float Height );
    PPListBoxPtr AddListBox (
        float Left,
        float Top,
        float Width,
        float Height );
    PPCheckBoxPtr AddCheckBox (
        float Left,
        float Top,
        float Width,
        float Height );
    PPRadioClusterPtr AddRadioCluster (
        float Left,
        float Top,
        float Width,
        float Height );
    PPStaticTextPtr AddStaticText (
        float Left,
        float Top,
        float Width,
        float Height );
    PPEditTextPtr AddEditText (
        float Left,
        float Top,
        float Width,
        float Height,
        const _variant_t & VerticalScrollBar = vtMissing );
    PPIconPtr AddIcon (
        float Left,
        float Top,
        float Width,
        float Height );
    PPBitmapPtr AddBitmap (
        float Left,
        float Top,
        float Width,
        float Height );
    PPSpinnerPtr AddSpinner (
        float Left,
        float Top,
        float Width,
        float Height );
    PPScrollBarPtr AddScrollBar (
        enum PpScrollBarStyle Style,
        float Left,
        float Top,
        float Width,
        float Height );
    PPGroupBoxPtr AddGroupBox (
        float Left,
        float Top,
        float Width,
        float Height );
    PPDropDownPtr AddDropDown (
        float Left,
        float Top,
        float Width,
        float Height );
    PPDropDownEditPtr AddDropDownEdit (
        float Left,
        float Top,
        float Width,
        float Height );
    PPSlideMiniaturePtr AddMiniature (
        float Left,
        float Top,
        float Width,
        float Height );
    PPFramePtr AddFrame (
        float Left,
        float Top,
        float Width,
        float Height );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct PPControl * * Item ) = 0;
      virtual HRESULT __stdcall raw_AddPushButton (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPPushButton * * PushButton ) = 0;
      virtual HRESULT __stdcall raw_AddToggleButton (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPToggleButton * * ToggleButton ) = 0;
      virtual HRESULT __stdcall raw_AddBitmapButton (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPBitmapButton * * BitmapButton ) = 0;
      virtual HRESULT __stdcall raw_AddListBox (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPListBox * * ListBox ) = 0;
      virtual HRESULT __stdcall raw_AddCheckBox (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPCheckBox * * CheckBox ) = 0;
      virtual HRESULT __stdcall raw_AddRadioCluster (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPRadioCluster * * RadioCluster ) = 0;
      virtual HRESULT __stdcall raw_AddStaticText (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPStaticText * * StaticText ) = 0;
      virtual HRESULT __stdcall raw_AddEditText (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ VARIANT VerticalScrollBar,
        /*[out,retval]*/ struct PPEditText * * EditText ) = 0;
      virtual HRESULT __stdcall raw_AddIcon (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPIcon * * icon ) = 0;
      virtual HRESULT __stdcall raw_AddBitmap (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPBitmap * * Bitmap ) = 0;
      virtual HRESULT __stdcall raw_AddSpinner (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPSpinner * * Spinner ) = 0;
      virtual HRESULT __stdcall raw_AddScrollBar (
        /*[in]*/ enum PpScrollBarStyle Style,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPScrollBar * * ScrollBar ) = 0;
      virtual HRESULT __stdcall raw_AddGroupBox (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPGroupBox * * GroupBox ) = 0;
      virtual HRESULT __stdcall raw_AddDropDown (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPDropDown * * DropDown ) = 0;
      virtual HRESULT __stdcall raw_AddDropDownEdit (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPDropDownEdit * * DropDownEdit ) = 0;
      virtual HRESULT __stdcall raw_AddMiniature (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPSlideMiniature * * Miniature ) = 0;
      virtual HRESULT __stdcall raw_AddFrame (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct PPFrame * * Frame ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("914934a1-5a91-11cf-8700-00aa0060263b"))
PPTabSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetClientLeft))
    float ClientLeft;
    __declspec(property(get=GetClientTop))
    float ClientTop;
    __declspec(property(get=GetClientWidth))
    float ClientWidth;
    __declspec(property(get=GetClientHeight))
    float ClientHeight;
    __declspec(property(get=GetControls))
    PPControlsPtr Controls;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetOnActivate,put=PutOnActivate))
    _bstr_t OnActivate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Select ( );
    float GetClientLeft ( );
    float GetClientTop ( );
    float GetClientWidth ( );
    float GetClientHeight ( );
    PPControlsPtr GetControls ( );
    TagsPtr GetTags ( );
    _bstr_t GetOnActivate ( );
    void PutOnActivate (
        _bstr_t OnActivate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_ClientLeft (
        /*[out,retval]*/ float * ClientLeft ) = 0;
      virtual HRESULT __stdcall get_ClientTop (
        /*[out,retval]*/ float * ClientTop ) = 0;
      virtual HRESULT __stdcall get_ClientWidth (
        /*[out,retval]*/ float * ClientWidth ) = 0;
      virtual HRESULT __stdcall get_ClientHeight (
        /*[out,retval]*/ float * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct PPControls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_OnActivate (
        /*[out,retval]*/ BSTR * OnActivate ) = 0;
      virtual HRESULT __stdcall put_OnActivate (
        /*[in]*/ BSTR OnActivate ) = 0;
};

struct __declspec(uuid("914934a3-5a91-11cf-8700-00aa0060263b"))
PPTabSheets : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveSheet))
    PPTabSheetPtr ActiveSheet;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    PPTabSheetPtr Item (
        const _variant_t & index );
    PPTabSheetPtr Add (
        _bstr_t Name );
    PPTabSheetPtr GetActiveSheet ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct PPTabSheet * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct PPTabSheet * * Add ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ struct PPTabSheet * * ActiveSheet ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("914934a0-5a91-11cf-8700-00aa0060263b"))
PPDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    enum PpDialogStyle Style;
    __declspec(property(get=GetMode,put=PutMode))
    enum PpDialogMode Mode;
    __declspec(property(get=GetHelpId,put=PutHelpId))
    int HelpId;
    __declspec(property(get=GetHideOnIdle,put=PutHideOnIdle))
    enum Office::MsoTriState HideOnIdle;
    __declspec(property(get=GetresourceDLL,put=PutresourceDLL))
    _bstr_t resourceDLL;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetClientLeft))
    float ClientLeft;
    __declspec(property(get=GetClientTop))
    float ClientTop;
    __declspec(property(get=GetClientWidth))
    float ClientWidth;
    __declspec(property(get=GetClientHeight))
    float ClientHeight;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetControls))
    PPControlsPtr Controls;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSheets))
    PPTabSheetsPtr Sheets;
    __declspec(property(get=GetTabControl))
    PPTabControlPtr TabControl;
    __declspec(property(get=GetDelayTime,put=PutDelayTime))
    int DelayTime;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetOnTerminate,put=PutOnTerminate))
    _bstr_t OnTerminate;
    __declspec(property(get=GetOnIdle,put=PutOnIdle))
    _bstr_t OnIdle;
    __declspec(property(get=GetOnMouseDown,put=PutOnMouseDown))
    _bstr_t OnMouseDown;
    __declspec(property(get=GetOnMouseUp,put=PutOnMouseUp))
    _bstr_t OnMouseUp;
    __declspec(property(get=GetOnKeyPressed,put=PutOnKeyPressed))
    _bstr_t OnKeyPressed;
    __declspec(property(get=GetOnTimer,put=PutOnTimer))
    _bstr_t OnTimer;
    __declspec(property(get=GetOnActivate,put=PutOnActivate))
    _bstr_t OnActivate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpDialogStyle GetStyle ( );
    enum PpDialogMode GetMode ( );
    void PutMode (
        enum PpDialogMode Mode );
    int GetHelpId ( );
    void PutHelpId (
        int HelpId );
    enum Office::MsoTriState GetHideOnIdle ( );
    void PutHideOnIdle (
        enum Office::MsoTriState HideOnIdle );
    _bstr_t GetresourceDLL ( );
    void PutresourceDLL (
        _bstr_t resourceDLL );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    float GetClientLeft ( );
    float GetClientTop ( );
    float GetClientWidth ( );
    float GetClientHeight ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    PPControlsPtr GetControls ( );
    TagsPtr GetTags ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    PPTabSheetsPtr GetSheets ( );
    PPTabControlPtr GetTabControl ( );
    int GetDelayTime ( );
    void PutDelayTime (
        int DelayTime );
    int SaveDialog (
        _bstr_t FileName );
    HRESULT Terminate ( );
    long GetHWND ( );
    _bstr_t GetOnTerminate ( );
    void PutOnTerminate (
        _bstr_t OnTerminate );
    _bstr_t GetOnIdle ( );
    void PutOnIdle (
        _bstr_t OnIdle );
    _bstr_t GetOnMouseDown ( );
    void PutOnMouseDown (
        _bstr_t OnMouseDown );
    _bstr_t GetOnMouseUp ( );
    void PutOnMouseUp (
        _bstr_t OnMouseUp );
    _bstr_t GetOnKeyPressed ( );
    void PutOnKeyPressed (
        _bstr_t OnKeyPressed );
    _bstr_t GetOnTimer ( );
    void PutOnTimer (
        _bstr_t OnTimer );
    _bstr_t GetOnActivate ( );
    void PutOnActivate (
        _bstr_t OnActivate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum PpDialogStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum PpDialogMode * Mode ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum PpDialogMode Mode ) = 0;
      virtual HRESULT __stdcall get_HelpId (
        /*[out,retval]*/ int * HelpId ) = 0;
      virtual HRESULT __stdcall put_HelpId (
        /*[in]*/ int HelpId ) = 0;
      virtual HRESULT __stdcall get_HideOnIdle (
        /*[out,retval]*/ enum Office::MsoTriState * HideOnIdle ) = 0;
      virtual HRESULT __stdcall put_HideOnIdle (
        /*[in]*/ enum Office::MsoTriState HideOnIdle ) = 0;
      virtual HRESULT __stdcall get_resourceDLL (
        /*[out,retval]*/ BSTR * resourceDLL ) = 0;
      virtual HRESULT __stdcall put_resourceDLL (
        /*[in]*/ BSTR resourceDLL ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_ClientLeft (
        /*[out,retval]*/ float * ClientLeft ) = 0;
      virtual HRESULT __stdcall get_ClientTop (
        /*[out,retval]*/ float * ClientTop ) = 0;
      virtual HRESULT __stdcall get_ClientWidth (
        /*[out,retval]*/ float * ClientWidth ) = 0;
      virtual HRESULT __stdcall get_ClientHeight (
        /*[out,retval]*/ float * ClientHeight ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct PPControls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct PPTabSheets * * Sheets ) = 0;
      virtual HRESULT __stdcall get_TabControl (
        /*[out,retval]*/ struct PPTabControl * * TabControl ) = 0;
      virtual HRESULT __stdcall get_DelayTime (
        /*[out,retval]*/ int * DelayTime ) = 0;
      virtual HRESULT __stdcall put_DelayTime (
        /*[in]*/ int DelayTime ) = 0;
      virtual HRESULT __stdcall raw_SaveDialog (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ int * SaveDialog ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_OnTerminate (
        /*[out,retval]*/ BSTR * OnTerminate ) = 0;
      virtual HRESULT __stdcall put_OnTerminate (
        /*[in]*/ BSTR OnTerminate ) = 0;
      virtual HRESULT __stdcall get_OnIdle (
        /*[out,retval]*/ BSTR * OnIdle ) = 0;
      virtual HRESULT __stdcall put_OnIdle (
        /*[in]*/ BSTR OnIdle ) = 0;
      virtual HRESULT __stdcall get_OnMouseDown (
        /*[out,retval]*/ BSTR * OnMouseDown ) = 0;
      virtual HRESULT __stdcall put_OnMouseDown (
        /*[in]*/ BSTR OnMouseDown ) = 0;
      virtual HRESULT __stdcall get_OnMouseUp (
        /*[out,retval]*/ BSTR * OnMouseUp ) = 0;
      virtual HRESULT __stdcall put_OnMouseUp (
        /*[in]*/ BSTR OnMouseUp ) = 0;
      virtual HRESULT __stdcall get_OnKeyPressed (
        /*[out,retval]*/ BSTR * OnKeyPressed ) = 0;
      virtual HRESULT __stdcall put_OnKeyPressed (
        /*[in]*/ BSTR OnKeyPressed ) = 0;
      virtual HRESULT __stdcall get_OnTimer (
        /*[out,retval]*/ BSTR * OnTimer ) = 0;
      virtual HRESULT __stdcall put_OnTimer (
        /*[in]*/ BSTR OnTimer ) = 0;
      virtual HRESULT __stdcall get_OnActivate (
        /*[out,retval]*/ BSTR * OnActivate ) = 0;
      virtual HRESULT __stdcall put_OnActivate (
        /*[in]*/ BSTR OnActivate ) = 0;
};

struct __declspec(uuid("9149349e-5a91-11cf-8700-00aa0060263b"))
PPDialogs : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    PPDialogPtr Item (
        const _variant_t & index );
    PPDialogPtr AddDialog (
        float Left,
        float Top,
        float Width,
        float Height,
        enum Office::MsoTriState Modal,
        IUnknown * ParentWindow,
        enum PpDialogPositioning Position,
        enum Office::MsoTriState DisplayHelp );
    PPDialogPtr AddTabDialog (
        float Left,
        float Top,
        float Width,
        float Height,
        enum Office::MsoTriState Modal,
        IUnknown * ParentWindow,
        enum PpDialogPositioning Position,
        enum Office::MsoTriState DisplayHelp );
    PPDialogPtr LoadDialog (
        _bstr_t resourceDLL,
        int nResID,
        enum Office::MsoTriState bModal,
        IUnknown * ParentWindow,
        enum PpDialogPositioning Position );
    PPAlertPtr AddAlert ( );
    TagsPtr GetTags ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PpAlertButton RunCharacterAlert (
        _bstr_t Text,
        enum PpAlertType Type,
        enum PpAlertIcon icon,
        IUnknown * ParentWindow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct PPDialog * * Item ) = 0;
      virtual HRESULT __stdcall raw_AddDialog (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ enum Office::MsoTriState Modal,
        /*[in]*/ IUnknown * ParentWindow,
        /*[in]*/ enum PpDialogPositioning Position,
        /*[in]*/ enum Office::MsoTriState DisplayHelp,
        /*[out,retval]*/ struct PPDialog * * Dialog ) = 0;
      virtual HRESULT __stdcall raw_AddTabDialog (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ enum Office::MsoTriState Modal,
        /*[in]*/ IUnknown * ParentWindow,
        /*[in]*/ enum PpDialogPositioning Position,
        /*[in]*/ enum Office::MsoTriState DisplayHelp,
        /*[out,retval]*/ struct PPDialog * * TabDialog ) = 0;
      virtual HRESULT __stdcall raw_LoadDialog (
        /*[in]*/ BSTR resourceDLL,
        /*[in]*/ int nResID,
        /*[in]*/ enum Office::MsoTriState bModal,
        /*[in]*/ IUnknown * ParentWindow,
        /*[in]*/ enum PpDialogPositioning Position,
        /*[out,retval]*/ struct PPDialog * * LoadDialog ) = 0;
      virtual HRESULT __stdcall raw_AddAlert (
        /*[out,retval]*/ struct PPAlert * * Alert ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_RunCharacterAlert (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum PpAlertType Type,
        /*[in]*/ enum PpAlertIcon icon,
        /*[in]*/ IUnknown * ParentWindow,
        /*[out,retval]*/ enum PpAlertButton * RunCharacterAlert ) = 0;
};

struct __declspec(uuid("914934ba-5a91-11cf-8700-00aa0060263b"))
FileDialogFileList : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t Item (
        int index );
    _bstr_t DisplayName (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * Item ) = 0;
      virtual HRESULT __stdcall raw_DisplayName (
        /*[in]*/ int index,
        /*[out,retval]*/ BSTR * DisplayName ) = 0;
};

struct __declspec(uuid("914934bb-5a91-11cf-8700-00aa0060263b"))
FileDialogExtension : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtensions,put=PutExtensions))
    _bstr_t Extensions;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetExtensions ( );
    void PutExtensions (
        _bstr_t Extensions );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Extensions (
        /*[out,retval]*/ BSTR * Extensions ) = 0;
      virtual HRESULT __stdcall put_Extensions (
        /*[in]*/ BSTR Extensions ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
};

struct __declspec(uuid("914934bc-5a91-11cf-8700-00aa0060263b"))
FileDialogExtensionList : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    FileDialogExtensionPtr Item (
        int index );
    FileDialogExtensionPtr Add (
        _bstr_t Extension,
        _bstr_t Description );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct FileDialogExtension * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Extension,
        /*[in]*/ BSTR Description,
        /*[out,retval]*/ struct FileDialogExtension * * Add ) = 0;
};

struct __declspec(uuid("914934bd-5a91-11cf-8700-00aa0060263b"))
FileDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExtensions))
    FileDialogExtensionListPtr Extensions;
    __declspec(property(get=GetDefaultDirectoryRegKey,put=PutDefaultDirectoryRegKey))
    _bstr_t DefaultDirectoryRegKey;
    __declspec(property(get=GetDialogTitle,put=PutDialogTitle))
    _bstr_t DialogTitle;
    __declspec(property(get=GetActionButtonName,put=PutActionButtonName))
    _bstr_t ActionButtonName;
    __declspec(property(get=GetIsMultiSelect,put=PutIsMultiSelect))
    enum Office::MsoTriState IsMultiSelect;
    __declspec(property(get=GetIsPrintEnabled,put=PutIsPrintEnabled))
    enum Office::MsoTriState IsPrintEnabled;
    __declspec(property(get=GetIsReadOnlyEnabled,put=PutIsReadOnlyEnabled))
    enum Office::MsoTriState IsReadOnlyEnabled;
    __declspec(property(get=GetDirectoriesOnly,put=PutDirectoriesOnly))
    enum Office::MsoTriState DirectoriesOnly;
    __declspec(property(get=GetInitialView,put=PutInitialView))
    enum PpFileDialogView InitialView;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetFiles))
    FileDialogFileListPtr Files;
    __declspec(property(get=GetUseODMADlgs,put=PutUseODMADlgs))
    enum Office::MsoTriState UseODMADlgs;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    FileDialogExtensionListPtr GetExtensions ( );
    _bstr_t GetDefaultDirectoryRegKey ( );
    void PutDefaultDirectoryRegKey (
        _bstr_t DefaultDirectoryRegKey );
    _bstr_t GetDialogTitle ( );
    void PutDialogTitle (
        _bstr_t DialogTitle );
    _bstr_t GetActionButtonName ( );
    void PutActionButtonName (
        _bstr_t ActionButtonName );
    enum Office::MsoTriState GetIsMultiSelect ( );
    void PutIsMultiSelect (
        enum Office::MsoTriState IsMultiSelect );
    enum Office::MsoTriState GetIsPrintEnabled ( );
    void PutIsPrintEnabled (
        enum Office::MsoTriState IsPrintEnabled );
    enum Office::MsoTriState GetIsReadOnlyEnabled ( );
    void PutIsReadOnlyEnabled (
        enum Office::MsoTriState IsReadOnlyEnabled );
    enum Office::MsoTriState GetDirectoriesOnly ( );
    void PutDirectoriesOnly (
        enum Office::MsoTriState DirectoriesOnly );
    enum PpFileDialogView GetInitialView ( );
    void PutInitialView (
        enum PpFileDialogView InitialView );
    HRESULT Launch (
        IUnknown * pUnk );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t OnAction );
    FileDialogFileListPtr GetFiles ( );
    enum Office::MsoTriState GetUseODMADlgs ( );
    void PutUseODMADlgs (
        enum Office::MsoTriState UseODMADlgs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Extensions (
        /*[out,retval]*/ struct FileDialogExtensionList * * Extensions ) = 0;
      virtual HRESULT __stdcall get_DefaultDirectoryRegKey (
        /*[out,retval]*/ BSTR * DefaultDirectoryRegKey ) = 0;
      virtual HRESULT __stdcall put_DefaultDirectoryRegKey (
        /*[in]*/ BSTR DefaultDirectoryRegKey ) = 0;
      virtual HRESULT __stdcall get_DialogTitle (
        /*[out,retval]*/ BSTR * DialogTitle ) = 0;
      virtual HRESULT __stdcall put_DialogTitle (
        /*[in]*/ BSTR DialogTitle ) = 0;
      virtual HRESULT __stdcall get_ActionButtonName (
        /*[out,retval]*/ BSTR * ActionButtonName ) = 0;
      virtual HRESULT __stdcall put_ActionButtonName (
        /*[in]*/ BSTR ActionButtonName ) = 0;
      virtual HRESULT __stdcall get_IsMultiSelect (
        /*[out,retval]*/ enum Office::MsoTriState * IsMultiSelect ) = 0;
      virtual HRESULT __stdcall put_IsMultiSelect (
        /*[in]*/ enum Office::MsoTriState IsMultiSelect ) = 0;
      virtual HRESULT __stdcall get_IsPrintEnabled (
        /*[out,retval]*/ enum Office::MsoTriState * IsPrintEnabled ) = 0;
      virtual HRESULT __stdcall put_IsPrintEnabled (
        /*[in]*/ enum Office::MsoTriState IsPrintEnabled ) = 0;
      virtual HRESULT __stdcall get_IsReadOnlyEnabled (
        /*[out,retval]*/ enum Office::MsoTriState * IsReadOnlyEnabled ) = 0;
      virtual HRESULT __stdcall put_IsReadOnlyEnabled (
        /*[in]*/ enum Office::MsoTriState IsReadOnlyEnabled ) = 0;
      virtual HRESULT __stdcall get_DirectoriesOnly (
        /*[out,retval]*/ enum Office::MsoTriState * DirectoriesOnly ) = 0;
      virtual HRESULT __stdcall put_DirectoriesOnly (
        /*[in]*/ enum Office::MsoTriState DirectoriesOnly ) = 0;
      virtual HRESULT __stdcall get_InitialView (
        /*[out,retval]*/ enum PpFileDialogView * InitialView ) = 0;
      virtual HRESULT __stdcall put_InitialView (
        /*[in]*/ enum PpFileDialogView InitialView ) = 0;
      virtual HRESULT __stdcall raw_Launch (
        /*[in]*/ IUnknown * pUnk ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * OnAction ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR OnAction ) = 0;
      virtual HRESULT __stdcall get_Files (
        /*[out,retval]*/ struct FileDialogFileList * * Files ) = 0;
      virtual HRESULT __stdcall get_UseODMADlgs (
        /*[out,retval]*/ enum Office::MsoTriState * UseODMADlgs ) = 0;
      virtual HRESULT __stdcall put_UseODMADlgs (
        /*[in]*/ enum Office::MsoTriState UseODMADlgs ) = 0;
};

struct __declspec(uuid("914934be-5a91-11cf-8700-00aa0060263b"))
MouseTracker : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnTrack (
        float X,
        float Y );
    HRESULT EndTrack (
        float X,
        float Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
      virtual HRESULT __stdcall raw_EndTrack (
        /*[in]*/ float X,
        /*[in]*/ float Y ) = 0;
};

struct __declspec(uuid("91493459-5a91-11cf-8700-00aa0060263b"))
SlideShowView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentShowPosition))
    int CurrentShowPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetZoom))
    int Zoom;
    __declspec(property(get=GetSlide))
    _SlidePtr Slide;
    __declspec(property(get=GetPointerType,put=PutPointerType))
    enum PpSlideShowPointerType PointerType;
    __declspec(property(get=GetState,put=PutState))
    enum PpSlideShowState State;
    __declspec(property(get=GetAcceleratorsEnabled,put=PutAcceleratorsEnabled))
    enum Office::MsoTriState AcceleratorsEnabled;
    __declspec(property(get=GetPresentationElapsedTime))
    float PresentationElapsedTime;
    __declspec(property(get=GetSlideElapsedTime,put=PutSlideElapsedTime))
    float SlideElapsedTime;
    __declspec(property(get=GetLastSlideViewed))
    _SlidePtr LastSlideViewed;
    __declspec(property(get=GetAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetIsNamedShow))
    enum Office::MsoTriState IsNamedShow;
    __declspec(property(get=GetSlideShowName))
    _bstr_t SlideShowName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    int GetZoom ( );
    _SlidePtr GetSlide ( );
    enum PpSlideShowPointerType GetPointerType ( );
    void PutPointerType (
        enum PpSlideShowPointerType PointerType );
    enum PpSlideShowState GetState ( );
    void PutState (
        enum PpSlideShowState State );
    enum Office::MsoTriState GetAcceleratorsEnabled ( );
    void PutAcceleratorsEnabled (
        enum Office::MsoTriState AcceleratorsEnabled );
    float GetPresentationElapsedTime ( );
    float GetSlideElapsedTime ( );
    void PutSlideElapsedTime (
        float SlideElapsedTime );
    _SlidePtr GetLastSlideViewed ( );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    ColorFormatPtr GetPointerColor ( );
    enum Office::MsoTriState GetIsNamedShow ( );
    _bstr_t GetSlideShowName ( );
    HRESULT DrawLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    HRESULT EraseDrawing ( );
    HRESULT First ( );
    HRESULT Last ( );
    HRESULT Next ( );
    HRESULT Previous ( );
    HRESULT GotoSlide (
        int index,
        enum Office::MsoTriState ResetSlide );
    HRESULT GotoNamedShow (
        _bstr_t SlideShowName );
    HRESULT EndNamedShow ( );
    HRESULT ResetSlideTime ( );
    HRESULT Exit ( );
    HRESULT InstallTracker (
        struct MouseTracker * pTracker,
        enum Office::MsoTriState Presenter );
    int GetCurrentShowPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ int * Zoom ) = 0;
      virtual HRESULT __stdcall get_Slide (
        /*[out,retval]*/ struct _Slide * * Slide ) = 0;
      virtual HRESULT __stdcall get_PointerType (
        /*[out,retval]*/ enum PpSlideShowPointerType * PointerType ) = 0;
      virtual HRESULT __stdcall put_PointerType (
        /*[in]*/ enum PpSlideShowPointerType PointerType ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum PpSlideShowState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum PpSlideShowState State ) = 0;
      virtual HRESULT __stdcall get_AcceleratorsEnabled (
        /*[out,retval]*/ enum Office::MsoTriState * AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall put_AcceleratorsEnabled (
        /*[in]*/ enum Office::MsoTriState AcceleratorsEnabled ) = 0;
      virtual HRESULT __stdcall get_PresentationElapsedTime (
        /*[out,retval]*/ float * PresentationElapsedTime ) = 0;
      virtual HRESULT __stdcall get_SlideElapsedTime (
        /*[out,retval]*/ float * SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall put_SlideElapsedTime (
        /*[in]*/ float SlideElapsedTime ) = 0;
      virtual HRESULT __stdcall get_LastSlideViewed (
        /*[out,retval]*/ struct _Slide * * LastSlideViewed ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_IsNamedShow (
        /*[out,retval]*/ enum Office::MsoTriState * IsNamedShow ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_DrawLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY ) = 0;
      virtual HRESULT __stdcall raw_EraseDrawing ( ) = 0;
      virtual HRESULT __stdcall raw_First ( ) = 0;
      virtual HRESULT __stdcall raw_Last ( ) = 0;
      virtual HRESULT __stdcall raw_Next ( ) = 0;
      virtual HRESULT __stdcall raw_Previous ( ) = 0;
      virtual HRESULT __stdcall raw_GotoSlide (
        /*[in]*/ int index,
        /*[in]*/ enum Office::MsoTriState ResetSlide ) = 0;
      virtual HRESULT __stdcall raw_GotoNamedShow (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall raw_EndNamedShow ( ) = 0;
      virtual HRESULT __stdcall raw_ResetSlideTime ( ) = 0;
      virtual HRESULT __stdcall raw_Exit ( ) = 0;
      virtual HRESULT __stdcall raw_InstallTracker (
        /*[in]*/ struct MouseTracker * pTracker,
        /*[in]*/ enum Office::MsoTriState Presenter ) = 0;
      virtual HRESULT __stdcall get_CurrentShowPosition (
        /*[out,retval]*/ int * CurrentShowPosition ) = 0;
};

struct __declspec(uuid("91493453-5a91-11cf-8700-00aa0060263b"))
SlideShowWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetView))
    SlideShowViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetIsFullScreen))
    enum Office::MsoTriState IsFullScreen;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    enum Office::MsoTriState GetIsFullScreen ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    long GetHWND ( );
    enum Office::MsoTriState GetActive ( );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct SlideShowView * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_IsFullScreen (
        /*[out,retval]*/ enum Office::MsoTriState * IsFullScreen ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("91493456-5a91-11cf-8700-00aa0060263b"))
SlideShowWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SlideShowWindowPtr Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct SlideShowWindow * * Item ) = 0;
};

struct __declspec(uuid("9149345a-5a91-11cf-8700-00aa0060263b"))
SlideShowSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPointerColor))
    ColorFormatPtr PointerColor;
    __declspec(property(get=GetNamedSlideShows))
    NamedSlideShowsPtr NamedSlideShows;
    __declspec(property(get=GetStartingSlide,put=PutStartingSlide))
    int StartingSlide;
    __declspec(property(get=GetEndingSlide,put=PutEndingSlide))
    int EndingSlide;
    __declspec(property(get=GetAdvanceMode,put=PutAdvanceMode))
    enum PpSlideShowAdvanceMode AdvanceMode;
    __declspec(property(get=GetLoopUntilStopped,put=PutLoopUntilStopped))
    enum Office::MsoTriState LoopUntilStopped;
    __declspec(property(get=GetShowType,put=PutShowType))
    enum PpSlideShowType ShowType;
    __declspec(property(get=GetShowWithNarration,put=PutShowWithNarration))
    enum Office::MsoTriState ShowWithNarration;
    __declspec(property(get=GetShowWithAnimation,put=PutShowWithAnimation))
    enum Office::MsoTriState ShowWithAnimation;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetRangeType,put=PutRangeType))
    enum PpSlideShowRangeType RangeType;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColorFormatPtr GetPointerColor ( );
    NamedSlideShowsPtr GetNamedSlideShows ( );
    int GetStartingSlide ( );
    void PutStartingSlide (
        int StartingSlide );
    int GetEndingSlide ( );
    void PutEndingSlide (
        int EndingSlide );
    enum PpSlideShowAdvanceMode GetAdvanceMode ( );
    void PutAdvanceMode (
        enum PpSlideShowAdvanceMode AdvanceMode );
    SlideShowWindowPtr Run ( );
    enum Office::MsoTriState GetLoopUntilStopped ( );
    void PutLoopUntilStopped (
        enum Office::MsoTriState LoopUntilStopped );
    enum PpSlideShowType GetShowType ( );
    void PutShowType (
        enum PpSlideShowType ShowType );
    enum Office::MsoTriState GetShowWithNarration ( );
    void PutShowWithNarration (
        enum Office::MsoTriState ShowWithNarration );
    enum Office::MsoTriState GetShowWithAnimation ( );
    void PutShowWithAnimation (
        enum Office::MsoTriState ShowWithAnimation );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    enum PpSlideShowRangeType GetRangeType ( );
    void PutRangeType (
        enum PpSlideShowRangeType RangeType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_PointerColor (
        /*[out,retval]*/ struct ColorFormat * * PointerColor ) = 0;
      virtual HRESULT __stdcall get_NamedSlideShows (
        /*[out,retval]*/ struct NamedSlideShows * * NamedSlideShows ) = 0;
      virtual HRESULT __stdcall get_StartingSlide (
        /*[out,retval]*/ int * StartingSlide ) = 0;
      virtual HRESULT __stdcall put_StartingSlide (
        /*[in]*/ int StartingSlide ) = 0;
      virtual HRESULT __stdcall get_EndingSlide (
        /*[out,retval]*/ int * EndingSlide ) = 0;
      virtual HRESULT __stdcall put_EndingSlide (
        /*[in]*/ int EndingSlide ) = 0;
      virtual HRESULT __stdcall get_AdvanceMode (
        /*[out,retval]*/ enum PpSlideShowAdvanceMode * AdvanceMode ) = 0;
      virtual HRESULT __stdcall put_AdvanceMode (
        /*[in]*/ enum PpSlideShowAdvanceMode AdvanceMode ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[out,retval]*/ struct SlideShowWindow * * Run ) = 0;
      virtual HRESULT __stdcall get_LoopUntilStopped (
        /*[out,retval]*/ enum Office::MsoTriState * LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall put_LoopUntilStopped (
        /*[in]*/ enum Office::MsoTriState LoopUntilStopped ) = 0;
      virtual HRESULT __stdcall get_ShowType (
        /*[out,retval]*/ enum PpSlideShowType * ShowType ) = 0;
      virtual HRESULT __stdcall put_ShowType (
        /*[in]*/ enum PpSlideShowType ShowType ) = 0;
      virtual HRESULT __stdcall get_ShowWithNarration (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWithNarration ) = 0;
      virtual HRESULT __stdcall put_ShowWithNarration (
        /*[in]*/ enum Office::MsoTriState ShowWithNarration ) = 0;
      virtual HRESULT __stdcall get_ShowWithAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowWithAnimation (
        /*[in]*/ enum Office::MsoTriState ShowWithAnimation ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_RangeType (
        /*[out,retval]*/ enum PpSlideShowRangeType * RangeType ) = 0;
      virtual HRESULT __stdcall put_RangeType (
        /*[in]*/ enum PpSlideShowRangeType RangeType ) = 0;
};

struct __declspec(uuid("914934bf-5a91-11cf-8700-00aa0060263b"))
MouseDownHandler : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnMouseDown (
        IUnknown * activeWin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnMouseDown (
        /*[in]*/ IUnknown * activeWin ) = 0;
};

struct __declspec(uuid("914934c0-5a91-11cf-8700-00aa0060263b"))
OCXExtender : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetHeight ( );
    void PutHeight (
        float Height );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t AltHTML );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * AltHTML ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR AltHTML ) = 0;
};

struct __declspec(uuid("914934c1-5a91-11cf-8700-00aa0060263b"))
OCXExtenderEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("91493446-5a91-11cf-8700-00aa0060263b"))
OLEControl;
    // [ default ] interface OCXExtender
    // [ default, source ] interface OCXExtenderEvents

enum PpBorderType
{
    ppBorderTop = 1,
    ppBorderLeft = 2,
    ppBorderBottom = 3,
    ppBorderRight = 4,
    ppBorderDiagonalDown = 5,
    ppBorderDiagonalUp = 6
};

enum PpHTMLVersion
{
    ppHTMLv3 = 1,
    ppHTMLv4 = 2,
    ppHTMLDual = 3
};

enum PpPublishSourceType
{
    ppPublishAll = 1,
    ppPublishSlideRange = 2,
    ppPublishNamedSlideShow = 3
};

enum PpBulletType
{
    ppBulletMixed = -2,
    ppBulletNone = 0,
    ppBulletUnnumbered = 1,
    ppBulletNumbered = 2,
    ppBulletPicture = 3
};

enum PpNumberedBulletStyle
{
    ppBulletStyleMixed = -2,
    ppBulletAlphaLCPeriod = 0,
    ppBulletAlphaUCPeriod = 1,
    ppBulletArabicParenRight = 2,
    ppBulletArabicPeriod = 3,
    ppBulletRomanLCParenBoth = 4,
    ppBulletRomanLCParenRight = 5,
    ppBulletRomanLCPeriod = 6,
    ppBulletRomanUCPeriod = 7,
    ppBulletAlphaLCParenBoth = 8,
    ppBulletAlphaLCParenRight = 9,
    ppBulletAlphaUCParenBoth = 10,
    ppBulletAlphaUCParenRight = 11,
    ppBulletArabicParenBoth = 12,
    ppBulletArabicPlain = 13,
    ppBulletRomanUCParenBoth = 14,
    ppBulletRomanUCParenRight = 15,
    ppBulletSimpChinPlain = 16,
    ppBulletSimpChinPeriod = 17,
    ppBulletCircleNumDBPlain = 18,
    ppBulletCircleNumWDWhitePlain = 19,
    ppBulletCircleNumWDBlackPlain = 20,
    ppBulletTradChinPlain = 21,
    ppBulletTradChinPeriod = 22,
    ppBulletArabicAlphaDash = 23,
    ppBulletArabicAbjadDash = 24,
    ppBulletHebrewAlphaDash = 25,
    ppBulletKanjiKoreanPlain = 26,
    ppBulletKanjiKoreanPeriod = 27,
    ppBulletArabicDBPlain = 28,
    ppBulletArabicDBPeriod = 29
};

struct __declspec(uuid("91493497-5a91-11cf-8700-00aa0060263b"))
BulletFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCharacter,put=PutCharacter))
    int Character;
    __declspec(property(get=GetRelativeSize,put=PutRelativeSize))
    float RelativeSize;
    __declspec(property(get=GetUseTextColor,put=PutUseTextColor))
    enum Office::MsoTriState UseTextColor;
    __declspec(property(get=GetUseTextFont,put=PutUseTextFont))
    enum Office::MsoTriState UseTextFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetType,put=PutType))
    enum PpBulletType Type;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum PpNumberedBulletStyle Style;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    int StartValue;
    __declspec(property(get=GetNumber))
    int Number;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    int GetCharacter ( );
    void PutCharacter (
        int Character );
    float GetRelativeSize ( );
    void PutRelativeSize (
        float RelativeSize );
    enum Office::MsoTriState GetUseTextColor ( );
    void PutUseTextColor (
        enum Office::MsoTriState UseTextColor );
    enum Office::MsoTriState GetUseTextFont ( );
    void PutUseTextFont (
        enum Office::MsoTriState UseTextFont );
    FontPtr GetFont ( );
    enum PpBulletType GetType ( );
    void PutType (
        enum PpBulletType Type );
    enum PpNumberedBulletStyle GetStyle ( );
    void PutStyle (
        enum PpNumberedBulletStyle Style );
    int GetStartValue ( );
    void PutStartValue (
        int StartValue );
    HRESULT Picture (
        _bstr_t Picture );
    int GetNumber ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Character (
        /*[out,retval]*/ int * Character ) = 0;
      virtual HRESULT __stdcall put_Character (
        /*[in]*/ int Character ) = 0;
      virtual HRESULT __stdcall get_RelativeSize (
        /*[out,retval]*/ float * RelativeSize ) = 0;
      virtual HRESULT __stdcall put_RelativeSize (
        /*[in]*/ float RelativeSize ) = 0;
      virtual HRESULT __stdcall get_UseTextColor (
        /*[out,retval]*/ enum Office::MsoTriState * UseTextColor ) = 0;
      virtual HRESULT __stdcall put_UseTextColor (
        /*[in]*/ enum Office::MsoTriState UseTextColor ) = 0;
      virtual HRESULT __stdcall get_UseTextFont (
        /*[out,retval]*/ enum Office::MsoTriState * UseTextFont ) = 0;
      virtual HRESULT __stdcall put_UseTextFont (
        /*[in]*/ enum Office::MsoTriState UseTextFont ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpBulletType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum PpBulletType Type ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum PpNumberedBulletStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum PpNumberedBulletStyle Style ) = 0;
      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ int * StartValue ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ int StartValue ) = 0;
      virtual HRESULT __stdcall raw_Picture (
        /*[in]*/ BSTR Picture ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ int * Number ) = 0;
};

struct __declspec(uuid("91493496-5a91-11cf-8700-00aa0060263b"))
ParagraphFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum PpParagraphAlignment Alignment;
    __declspec(property(get=GetBullet))
    BulletFormatPtr Bullet;
    __declspec(property(get=GetLineRuleBefore,put=PutLineRuleBefore))
    enum Office::MsoTriState LineRuleBefore;
    __declspec(property(get=GetLineRuleAfter,put=PutLineRuleAfter))
    enum Office::MsoTriState LineRuleAfter;
    __declspec(property(get=GetLineRuleWithin,put=PutLineRuleWithin))
    enum Office::MsoTriState LineRuleWithin;
    __declspec(property(get=GetSpaceBefore,put=PutSpaceBefore))
    float SpaceBefore;
    __declspec(property(get=GetSpaceAfter,put=PutSpaceAfter))
    float SpaceAfter;
    __declspec(property(get=GetSpaceWithin,put=PutSpaceWithin))
    float SpaceWithin;
    __declspec(property(get=GetBaseLineAlignment,put=PutBaseLineAlignment))
    enum PpBaselineAlignment BaseLineAlignment;
    __declspec(property(get=GetFarEastLineBreakControl,put=PutFarEastLineBreakControl))
    enum Office::MsoTriState FarEastLineBreakControl;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    enum Office::MsoTriState WordWrap;
    __declspec(property(get=GetHangingPunctuation,put=PutHangingPunctuation))
    enum Office::MsoTriState HangingPunctuation;
    __declspec(property(get=GetTextDirection,put=PutTextDirection))
    enum PpDirection TextDirection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpParagraphAlignment GetAlignment ( );
    void PutAlignment (
        enum PpParagraphAlignment Alignment );
    BulletFormatPtr GetBullet ( );
    enum Office::MsoTriState GetLineRuleBefore ( );
    void PutLineRuleBefore (
        enum Office::MsoTriState LineRuleBefore );
    enum Office::MsoTriState GetLineRuleAfter ( );
    void PutLineRuleAfter (
        enum Office::MsoTriState LineRuleAfter );
    enum Office::MsoTriState GetLineRuleWithin ( );
    void PutLineRuleWithin (
        enum Office::MsoTriState LineRuleWithin );
    float GetSpaceBefore ( );
    void PutSpaceBefore (
        float SpaceBefore );
    float GetSpaceAfter ( );
    void PutSpaceAfter (
        float SpaceAfter );
    float GetSpaceWithin ( );
    void PutSpaceWithin (
        float SpaceWithin );
    enum PpBaselineAlignment GetBaseLineAlignment ( );
    void PutBaseLineAlignment (
        enum PpBaselineAlignment BaseLineAlignment );
    enum Office::MsoTriState GetFarEastLineBreakControl ( );
    void PutFarEastLineBreakControl (
        enum Office::MsoTriState FarEastLineBreakControl );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    enum Office::MsoTriState GetHangingPunctuation ( );
    void PutHangingPunctuation (
        enum Office::MsoTriState HangingPunctuation );
    enum PpDirection GetTextDirection ( );
    void PutTextDirection (
        enum PpDirection TextDirection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum PpParagraphAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum PpParagraphAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_Bullet (
        /*[out,retval]*/ struct BulletFormat * * Bullet ) = 0;
      virtual HRESULT __stdcall get_LineRuleBefore (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleBefore ) = 0;
      virtual HRESULT __stdcall put_LineRuleBefore (
        /*[in]*/ enum Office::MsoTriState LineRuleBefore ) = 0;
      virtual HRESULT __stdcall get_LineRuleAfter (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleAfter ) = 0;
      virtual HRESULT __stdcall put_LineRuleAfter (
        /*[in]*/ enum Office::MsoTriState LineRuleAfter ) = 0;
      virtual HRESULT __stdcall get_LineRuleWithin (
        /*[out,retval]*/ enum Office::MsoTriState * LineRuleWithin ) = 0;
      virtual HRESULT __stdcall put_LineRuleWithin (
        /*[in]*/ enum Office::MsoTriState LineRuleWithin ) = 0;
      virtual HRESULT __stdcall get_SpaceBefore (
        /*[out,retval]*/ float * SpaceBefore ) = 0;
      virtual HRESULT __stdcall put_SpaceBefore (
        /*[in]*/ float SpaceBefore ) = 0;
      virtual HRESULT __stdcall get_SpaceAfter (
        /*[out,retval]*/ float * SpaceAfter ) = 0;
      virtual HRESULT __stdcall put_SpaceAfter (
        /*[in]*/ float SpaceAfter ) = 0;
      virtual HRESULT __stdcall get_SpaceWithin (
        /*[out,retval]*/ float * SpaceWithin ) = 0;
      virtual HRESULT __stdcall put_SpaceWithin (
        /*[in]*/ float SpaceWithin ) = 0;
      virtual HRESULT __stdcall get_BaseLineAlignment (
        /*[out,retval]*/ enum PpBaselineAlignment * BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall put_BaseLineAlignment (
        /*[in]*/ enum PpBaselineAlignment BaseLineAlignment ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakControl (
        /*[out,retval]*/ enum Office::MsoTriState * FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakControl (
        /*[in]*/ enum Office::MsoTriState FarEastLineBreakControl ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall get_HangingPunctuation (
        /*[out,retval]*/ enum Office::MsoTriState * HangingPunctuation ) = 0;
      virtual HRESULT __stdcall put_HangingPunctuation (
        /*[in]*/ enum Office::MsoTriState HangingPunctuation ) = 0;
      virtual HRESULT __stdcall get_TextDirection (
        /*[out,retval]*/ enum PpDirection * TextDirection ) = 0;
      virtual HRESULT __stdcall put_TextDirection (
        /*[in]*/ enum PpDirection TextDirection ) = 0;
};

struct __declspec(uuid("9149348f-5a91-11cf-8700-00aa0060263b"))
TextRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    int IndentLevel;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetBoundLeft))
    float BoundLeft;
    __declspec(property(get=GetBoundTop))
    float BoundTop;
    __declspec(property(get=GetBoundWidth))
    float BoundWidth;
    __declspec(property(get=GetBoundHeight))
    float BoundHeight;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum Office::MsoLanguageID LanguageID;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ActionSettingsPtr GetActionSettings ( );
    long GetStart ( );
    long GetLength ( );
    float GetBoundLeft ( );
    float GetBoundTop ( );
    float GetBoundWidth ( );
    float GetBoundHeight ( );
    TextRangePtr Paragraphs (
        int Start,
        int Length );
    TextRangePtr Sentences (
        int Start,
        int Length );
    TextRangePtr Words (
        int Start,
        int Length );
    TextRangePtr Characters (
        int Start,
        int Length );
    TextRangePtr Lines (
        int Start,
        int Length );
    TextRangePtr Runs (
        int Start,
        int Length );
    TextRangePtr TrimText ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    TextRangePtr InsertAfter (
        _bstr_t NewText );
    TextRangePtr InsertBefore (
        _bstr_t NewText );
    TextRangePtr InsertDateTime (
        enum PpDateTimeFormat DateTimeFormat,
        enum Office::MsoTriState InsertAsField );
    TextRangePtr InsertSlideNumber ( );
    TextRangePtr InsertSymbol (
        _bstr_t FontName,
        int CharNumber,
        enum Office::MsoTriState Unicode );
    FontPtr GetFont ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    int GetIndentLevel ( );
    void PutIndentLevel (
        int IndentLevel );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    TextRangePtr Paste ( );
    HRESULT ChangeCase (
        enum PpChangeCase Type );
    HRESULT AddPeriods ( );
    HRESULT RemovePeriods ( );
    TextRangePtr Find (
        _bstr_t FindWhat,
        int After,
        enum Office::MsoTriState MatchCase,
        enum Office::MsoTriState WholeWords );
    TextRangePtr Replace (
        _bstr_t FindWhat,
        _bstr_t ReplaceWhat,
        int After,
        enum Office::MsoTriState MatchCase,
        enum Office::MsoTriState WholeWords );
    HRESULT RotatedBounds (
        float * X1,
        float * Y1,
        float * X2,
        float * Y2,
        float * X3,
        float * Y3,
        float * x4,
        float * y4 );
    enum Office::MsoLanguageID GetLanguageID ( );
    void PutLanguageID (
        enum Office::MsoLanguageID LanguageID );
    HRESULT RtlRun ( );
    HRESULT LtrRun ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * Start ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * Length ) = 0;
      virtual HRESULT __stdcall get_BoundLeft (
        /*[out,retval]*/ float * BoundLeft ) = 0;
      virtual HRESULT __stdcall get_BoundTop (
        /*[out,retval]*/ float * BoundTop ) = 0;
      virtual HRESULT __stdcall get_BoundWidth (
        /*[out,retval]*/ float * BoundWidth ) = 0;
      virtual HRESULT __stdcall get_BoundHeight (
        /*[out,retval]*/ float * BoundHeight ) = 0;
      virtual HRESULT __stdcall raw_Paragraphs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Paragraphs ) = 0;
      virtual HRESULT __stdcall raw_Sentences (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Sentences ) = 0;
      virtual HRESULT __stdcall raw_Words (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Words ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Characters ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Lines ) = 0;
      virtual HRESULT __stdcall raw_Runs (
        /*[in]*/ int Start,
        /*[in]*/ int Length,
        /*[out,retval]*/ struct TextRange * * Runs ) = 0;
      virtual HRESULT __stdcall raw_TrimText (
        /*[out,retval]*/ struct TextRange * * TrimText ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_InsertAfter (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * After ) = 0;
      virtual HRESULT __stdcall raw_InsertBefore (
        /*[in]*/ BSTR NewText,
        /*[out,retval]*/ struct TextRange * * Before ) = 0;
      virtual HRESULT __stdcall raw_InsertDateTime (
        /*[in]*/ enum PpDateTimeFormat DateTimeFormat,
        /*[in]*/ enum Office::MsoTriState InsertAsField,
        /*[out,retval]*/ struct TextRange * * DateTime ) = 0;
      virtual HRESULT __stdcall raw_InsertSlideNumber (
        /*[out,retval]*/ struct TextRange * * SlideNumber ) = 0;
      virtual HRESULT __stdcall raw_InsertSymbol (
        /*[in]*/ BSTR FontName,
        /*[in]*/ int CharNumber,
        /*[in]*/ enum Office::MsoTriState Unicode,
        /*[out,retval]*/ struct TextRange * * Symbol ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ int * IndentLevel ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ int IndentLevel ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct TextRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_ChangeCase (
        /*[in]*/ enum PpChangeCase Type ) = 0;
      virtual HRESULT __stdcall raw_AddPeriods ( ) = 0;
      virtual HRESULT __stdcall raw_RemovePeriods ( ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ int After,
        /*[in]*/ enum Office::MsoTriState MatchCase,
        /*[in]*/ enum Office::MsoTriState WholeWords,
        /*[out,retval]*/ struct TextRange * * Find ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR FindWhat,
        /*[in]*/ BSTR ReplaceWhat,
        /*[in]*/ int After,
        /*[in]*/ enum Office::MsoTriState MatchCase,
        /*[in]*/ enum Office::MsoTriState WholeWords,
        /*[out,retval]*/ struct TextRange * * Replace ) = 0;
      virtual HRESULT __stdcall raw_RotatedBounds (
        /*[out]*/ float * X1,
        /*[out]*/ float * Y1,
        /*[out]*/ float * X2,
        /*[out]*/ float * Y2,
        /*[out]*/ float * X3,
        /*[out]*/ float * Y3,
        /*[out]*/ float * x4,
        /*[out]*/ float * y4 ) = 0;
      virtual HRESULT __stdcall get_LanguageID (
        /*[out,retval]*/ enum Office::MsoLanguageID * LanguageID ) = 0;
      virtual HRESULT __stdcall put_LanguageID (
        /*[in]*/ enum Office::MsoLanguageID LanguageID ) = 0;
      virtual HRESULT __stdcall raw_RtlRun ( ) = 0;
      virtual HRESULT __stdcall raw_LtrRun ( ) = 0;
};

struct __declspec(uuid("91493484-5a91-11cf-8700-00aa0060263b"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Office::MsoTextOrientation Orientation;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasText))
    enum Office::MsoTriState HasText;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetHorizontalAnchor,put=PutHorizontalAnchor))
    enum Office::MsoHorizontalAnchor HorizontalAnchor;
    __declspec(property(get=GetVerticalAnchor,put=PutVerticalAnchor))
    enum Office::MsoVerticalAnchor VerticalAnchor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    enum PpAutoSize AutoSize;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    enum Office::MsoTriState WordWrap;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float MarginBottom );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float MarginLeft );
    float GetMarginRight ( );
    void PutMarginRight (
        float MarginRight );
    float GetMarginTop ( );
    void PutMarginTop (
        float MarginTop );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation Orientation );
    enum Office::MsoTriState GetHasText ( );
    TextRangePtr GetTextRange ( );
    RulerPtr GetRuler ( );
    enum Office::MsoHorizontalAnchor GetHorizontalAnchor ( );
    void PutHorizontalAnchor (
        enum Office::MsoHorizontalAnchor HorizontalAnchor );
    enum Office::MsoVerticalAnchor GetVerticalAnchor ( );
    void PutVerticalAnchor (
        enum Office::MsoVerticalAnchor VerticalAnchor );
    enum PpAutoSize GetAutoSize ( );
    void PutAutoSize (
        enum PpAutoSize AutoSize );
    enum Office::MsoTriState GetWordWrap ( );
    void PutWordWrap (
        enum Office::MsoTriState WordWrap );
    HRESULT DeleteText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * MarginBottom ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float MarginBottom ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * MarginLeft ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float MarginLeft ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * MarginRight ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float MarginRight ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * MarginTop ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float MarginTop ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_HasText (
        /*[out,retval]*/ enum Office::MsoTriState * HasText ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_HorizontalAnchor (
        /*[out,retval]*/ enum Office::MsoHorizontalAnchor * HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall put_HorizontalAnchor (
        /*[in]*/ enum Office::MsoHorizontalAnchor HorizontalAnchor ) = 0;
      virtual HRESULT __stdcall get_VerticalAnchor (
        /*[out,retval]*/ enum Office::MsoVerticalAnchor * VerticalAnchor ) = 0;
      virtual HRESULT __stdcall put_VerticalAnchor (
        /*[in]*/ enum Office::MsoVerticalAnchor VerticalAnchor ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ enum PpAutoSize * AutoSize ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ enum PpAutoSize AutoSize ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum Office::MsoTriState * WordWrap ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum Office::MsoTriState WordWrap ) = 0;
      virtual HRESULT __stdcall raw_DeleteText ( ) = 0;
};

struct __declspec(uuid("9149349b-5a91-11cf-8700-00aa0060263b"))
TextStyleLevel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetParagraphFormat))
    ParagraphFormatPtr ParagraphFormat;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ParagraphFormatPtr GetParagraphFormat ( );
    FontPtr GetFont ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ParagraphFormat (
        /*[out,retval]*/ struct ParagraphFormat * * ParagraphFormat ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * Font ) = 0;
};

struct __declspec(uuid("9149349a-5a91-11cf-8700-00aa0060263b"))
TextStyleLevels : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStyleLevelPtr Item (
        int Level );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int Level,
        /*[out,retval]*/ struct TextStyleLevel * * Item ) = 0;
};

struct __declspec(uuid("91493499-5a91-11cf-8700-00aa0060263b"))
TextStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRuler))
    RulerPtr Ruler;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetLevels))
    TextStyleLevelsPtr Levels;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RulerPtr GetRuler ( );
    TextFramePtr GetTextFrame ( );
    TextStyleLevelsPtr GetLevels ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Ruler (
        /*[out,retval]*/ struct Ruler * * Ruler ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_Levels (
        /*[out,retval]*/ struct TextStyleLevels * * Levels ) = 0;
};

struct __declspec(uuid("91493498-5a91-11cf-8700-00aa0060263b"))
TextStyles : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    TextStylePtr Item (
        enum PpTextStyleType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpTextStyleType Type,
        /*[out,retval]*/ struct TextStyle * * Item ) = 0;
};

enum PpMarkerType
{
    ppBoot = 0,
    ppFileNew = 1,
    ppFileOpen = 2,
    ppFileSave = 3,
    ppPrintForeground = 4,
    ppPrintBackground = 5,
    ppOLEInsert = 6,
    ppSlideShowStart = 7,
    ppSlideShowDraw = 8,
    ppSlideViewScroll = 9,
    ppDialogStart = 10
};

enum PpShapeFormat
{
    ppShapeFormatGIF = 0,
    ppShapeFormatJPG = 1,
    ppShapeFormatPNG = 2,
    ppShapeFormatBMP = 3,
    ppShapeFormatWMF = 4
};

enum PpExportMode
{
    ppRelativeToSlide = 1,
    ppClipRelativeToSlide = 2,
    ppScaleToFit = 3,
    ppScaleXY = 4
};

struct __declspec(uuid("914934ca-5a91-11cf-8700-00aa0060263b"))
Borders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    LineFormatPtr Item (
        enum PpBorderType BorderType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum PpBorderType BorderType,
        /*[out,retval]*/ struct LineFormat * * Item ) = 0;
};

struct __declspec(uuid("914934cc-5a91-11cf-8700-00aa0060263b"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetViewType))
    enum PpViewType ViewType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    enum Office::MsoTriState GetActive ( );
    _ApplicationPtr GetApplication ( );
    enum PpViewType GetViewType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
};

struct __declspec(uuid("914934cb-5a91-11cf-8700-00aa0060263b"))
Panes : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    PanePtr Item (
        int index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Pane * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("914934cd-5a91-11cf-8700-00aa0060263b"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeNavigation,put=PutIncludeNavigation))
    enum Office::MsoTriState IncludeNavigation;
    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetResizeGraphics,put=PutResizeGraphics))
    enum Office::MsoTriState ResizeGraphics;
    __declspec(property(get=GetShowSlideAnimation,put=PutShowSlideAnimation))
    enum Office::MsoTriState ShowSlideAnimation;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    enum Office::MsoTriState OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    enum Office::MsoTriState UseLongFileNames;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    enum Office::MsoTriState RelyOnVML;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    enum Office::MsoTriState AllowPNG;
    __declspec(property(get=GetScreenSize,put=PutScreenSize))
    enum Office::MsoScreenSize ScreenSize;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum Office::MsoEncoding Encoding;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    enum Office::MsoTriState UpdateLinksOnSave;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    enum Office::MsoTriState CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    enum Office::MsoTriState AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetIncludeNavigation ( );
    void PutIncludeNavigation (
        enum Office::MsoTriState IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    enum Office::MsoTriState GetResizeGraphics ( );
    void PutResizeGraphics (
        enum Office::MsoTriState ResizeGraphics );
    enum Office::MsoTriState GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        enum Office::MsoTriState ShowSlideAnimation );
    enum Office::MsoTriState GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        enum Office::MsoTriState OrganizeInFolder );
    enum Office::MsoTriState GetUseLongFileNames ( );
    void PutUseLongFileNames (
        enum Office::MsoTriState UseLongFileNames );
    enum Office::MsoTriState GetRelyOnVML ( );
    void PutRelyOnVML (
        enum Office::MsoTriState RelyOnVML );
    enum Office::MsoTriState GetAllowPNG ( );
    void PutAllowPNG (
        enum Office::MsoTriState AllowPNG );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize ScreenSize );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding Encoding );
    enum Office::MsoTriState GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        enum Office::MsoTriState UpdateLinksOnSave );
    enum Office::MsoTriState GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        enum Office::MsoTriState CheckIfOfficeIsHTMLEditor );
    enum Office::MsoTriState GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        enum Office::MsoTriState AlwaysSaveInDefaultEncoding );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ enum Office::MsoTriState * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ enum Office::MsoTriState IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ enum Office::MsoTriState ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ enum Office::MsoTriState ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ enum Office::MsoTriState * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ enum Office::MsoTriState OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ enum Office::MsoTriState * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ enum Office::MsoTriState UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ enum Office::MsoTriState * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ enum Office::MsoTriState RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ enum Office::MsoTriState * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ enum Office::MsoTriState AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ enum Office::MsoTriState * UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ enum Office::MsoTriState UpdateLinksOnSave ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ enum Office::MsoTriState * CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ enum Office::MsoTriState CheckIfOfficeIsHTMLEditor ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ enum Office::MsoTriState * AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ enum Office::MsoTriState AlwaysSaveInDefaultEncoding ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Office::WebPageFonts * * Fonts ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
};

struct __declspec(uuid("914934ce-5a91-11cf-8700-00aa0060263b"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIncludeNavigation,put=PutIncludeNavigation))
    enum Office::MsoTriState IncludeNavigation;
    __declspec(property(get=GetFrameColors,put=PutFrameColors))
    enum PpFrameColors FrameColors;
    __declspec(property(get=GetResizeGraphics,put=PutResizeGraphics))
    enum Office::MsoTriState ResizeGraphics;
    __declspec(property(get=GetShowSlideAnimation,put=PutShowSlideAnimation))
    enum Office::MsoTriState ShowSlideAnimation;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    enum Office::MsoTriState OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    enum Office::MsoTriState UseLongFileNames;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    enum Office::MsoTriState RelyOnVML;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    enum Office::MsoTriState AllowPNG;
    __declspec(property(get=GetScreenSize,put=PutScreenSize))
    enum Office::MsoScreenSize ScreenSize;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum Office::MsoEncoding Encoding;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    enum Office::MsoTriState GetIncludeNavigation ( );
    void PutIncludeNavigation (
        enum Office::MsoTriState IncludeNavigation );
    enum PpFrameColors GetFrameColors ( );
    void PutFrameColors (
        enum PpFrameColors FrameColors );
    enum Office::MsoTriState GetResizeGraphics ( );
    void PutResizeGraphics (
        enum Office::MsoTriState ResizeGraphics );
    enum Office::MsoTriState GetShowSlideAnimation ( );
    void PutShowSlideAnimation (
        enum Office::MsoTriState ShowSlideAnimation );
    enum Office::MsoTriState GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        enum Office::MsoTriState OrganizeInFolder );
    enum Office::MsoTriState GetUseLongFileNames ( );
    void PutUseLongFileNames (
        enum Office::MsoTriState UseLongFileNames );
    enum Office::MsoTriState GetRelyOnVML ( );
    void PutRelyOnVML (
        enum Office::MsoTriState RelyOnVML );
    enum Office::MsoTriState GetAllowPNG ( );
    void PutAllowPNG (
        enum Office::MsoTriState AllowPNG );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize ScreenSize );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding Encoding );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IncludeNavigation (
        /*[out,retval]*/ enum Office::MsoTriState * IncludeNavigation ) = 0;
      virtual HRESULT __stdcall put_IncludeNavigation (
        /*[in]*/ enum Office::MsoTriState IncludeNavigation ) = 0;
      virtual HRESULT __stdcall get_FrameColors (
        /*[out,retval]*/ enum PpFrameColors * FrameColors ) = 0;
      virtual HRESULT __stdcall put_FrameColors (
        /*[in]*/ enum PpFrameColors FrameColors ) = 0;
      virtual HRESULT __stdcall get_ResizeGraphics (
        /*[out,retval]*/ enum Office::MsoTriState * ResizeGraphics ) = 0;
      virtual HRESULT __stdcall put_ResizeGraphics (
        /*[in]*/ enum Office::MsoTriState ResizeGraphics ) = 0;
      virtual HRESULT __stdcall get_ShowSlideAnimation (
        /*[out,retval]*/ enum Office::MsoTriState * ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall put_ShowSlideAnimation (
        /*[in]*/ enum Office::MsoTriState ShowSlideAnimation ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ enum Office::MsoTriState * OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ enum Office::MsoTriState OrganizeInFolder ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ enum Office::MsoTriState * UseLongFileNames ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ enum Office::MsoTriState UseLongFileNames ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ enum Office::MsoTriState * RelyOnVML ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ enum Office::MsoTriState RelyOnVML ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ enum Office::MsoTriState * AllowPNG ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ enum Office::MsoTriState AllowPNG ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * ScreenSize ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize ScreenSize ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * FolderSuffix ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
};

struct __declspec(uuid("914934d0-5a91-11cf-8700-00aa0060263b"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHTMLVersion,put=PutHTMLVersion))
    enum PpHTMLVersion HTMLVersion;
    __declspec(property(get=GetSourceType,put=PutSourceType))
    enum PpPublishSourceType SourceType;
    __declspec(property(get=GetRangeStart,put=PutRangeStart))
    int RangeStart;
    __declspec(property(get=GetRangeEnd,put=PutRangeEnd))
    int RangeEnd;
    __declspec(property(get=GetSlideShowName,put=PutSlideShowName))
    _bstr_t SlideShowName;
    __declspec(property(get=GetSpeakerNotes,put=PutSpeakerNotes))
    enum Office::MsoTriState SpeakerNotes;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum PpHTMLVersion GetHTMLVersion ( );
    void PutHTMLVersion (
        enum PpHTMLVersion HTMLVersion );
    enum PpPublishSourceType GetSourceType ( );
    void PutSourceType (
        enum PpPublishSourceType SourceType );
    int GetRangeStart ( );
    void PutRangeStart (
        int RangeStart );
    int GetRangeEnd ( );
    void PutRangeEnd (
        int RangeEnd );
    _bstr_t GetSlideShowName ( );
    void PutSlideShowName (
        _bstr_t SlideShowName );
    enum Office::MsoTriState GetSpeakerNotes ( );
    void PutSpeakerNotes (
        enum Office::MsoTriState SpeakerNotes );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t FileName );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_HTMLVersion (
        /*[out,retval]*/ enum PpHTMLVersion * HTMLVersion ) = 0;
      virtual HRESULT __stdcall put_HTMLVersion (
        /*[in]*/ enum PpHTMLVersion HTMLVersion ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum PpPublishSourceType * SourceType ) = 0;
      virtual HRESULT __stdcall put_SourceType (
        /*[in]*/ enum PpPublishSourceType SourceType ) = 0;
      virtual HRESULT __stdcall get_RangeStart (
        /*[out,retval]*/ int * RangeStart ) = 0;
      virtual HRESULT __stdcall put_RangeStart (
        /*[in]*/ int RangeStart ) = 0;
      virtual HRESULT __stdcall get_RangeEnd (
        /*[out,retval]*/ int * RangeEnd ) = 0;
      virtual HRESULT __stdcall put_RangeEnd (
        /*[in]*/ int RangeEnd ) = 0;
      virtual HRESULT __stdcall get_SlideShowName (
        /*[out,retval]*/ BSTR * SlideShowName ) = 0;
      virtual HRESULT __stdcall put_SlideShowName (
        /*[in]*/ BSTR SlideShowName ) = 0;
      virtual HRESULT __stdcall get_SpeakerNotes (
        /*[out,retval]*/ enum Office::MsoTriState * SpeakerNotes ) = 0;
      virtual HRESULT __stdcall put_SpeakerNotes (
        /*[in]*/ enum Office::MsoTriState SpeakerNotes ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * FileName ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("914934cf-5a91-11cf-8700-00aa0060263b"))
PublishObjects : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct PublishObject * * Item ) = 0;
};

struct __declspec(uuid("914934d1-5a91-11cf-8700-00aa0060263b"))
Marker : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMarkerType,put=PutMarkerType))
    enum PpMarkerType MarkerType;
    __declspec(property(get=GetTime))
    int Time;

    //
    // Wrapper methods for error-handling
    //

    enum PpMarkerType GetMarkerType ( );
    void PutMarkerType (
        enum PpMarkerType MarkerType );
    int GetTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MarkerType (
        /*[out,retval]*/ enum PpMarkerType * MarkerType ) = 0;
      virtual HRESULT __stdcall put_MarkerType (
        /*[in]*/ enum PpMarkerType MarkerType ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ int * Time ) = 0;
};

struct __declspec(uuid("914934d2-5a91-11cf-8700-00aa0060263b"))
MasterEvents : IUnknown
{};

struct __declspec(uuid("91493447-5a91-11cf-8700-00aa0060263b"))
Master;
    // [ default ] interface _Master
    // [ default, source ] interface MasterEvents

struct __declspec(uuid("91493442-5a91-11cf-8700-00aa0060263b"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowWindowsInTaskbar,put=PutShowWindowsInTaskbar))
    enum Office::MsoTriState ShowWindowsInTaskbar;
    __declspec(property(get=GetMarker))
    MarkerPtr Marker;
    __declspec(property(get=GetFeatureInstall,put=PutFeatureInstall))
    enum Office::MsoFeatureInstall FeatureInstall;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetDialogs))
    PPDialogsPtr Dialogs;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem;
    __declspec(property(get=GetActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetVBE))
    VBE6::VBEPtr VBE;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetMsoDebugOptions))
    Office::MsoDebugOptionsPtr MsoDebugOptions;

    //
    // Wrapper methods for error-handling
    //

    PresentationsPtr GetPresentations ( );
    DocumentWindowsPtr GetWindows ( );
    PPDialogsPtr GetDialogs ( );
    DocumentWindowPtr GetActiveWindow ( );
    _PresentationPtr GetActivePresentation ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetPath ( );
    _bstr_t GetName ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    Office::AssistantPtr GetAssistant ( );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    _bstr_t GetBuild ( );
    _bstr_t GetVersion ( );
    _bstr_t GetOperatingSystem ( );
    _bstr_t GetActivePrinter ( );
    long GetCreator ( );
    AddInsPtr GetAddIns ( );
    VBE6::VBEPtr GetVBE ( );
    HRESULT Help (
        _bstr_t HelpFile,
        int ContextID );
    HRESULT Quit ( );
    _variant_t Run (
        _bstr_t MacroName,
        SAFEARRAY * * safeArrayOfParams );
    FileDialogPtr FileDialog (
        enum PpFileDialogType Type );
    HRESULT LaunchSpelling (
        struct DocumentWindow * pWindow );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    long GetHWND ( );
    enum Office::MsoTriState GetActive ( );
    HRESULT Activate ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    Office::COMAddInsPtr GetCOMAddIns ( );
    _bstr_t GetProductCode ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    Office::MsoDebugOptionsPtr GetMsoDebugOptions ( );
    enum Office::MsoTriState GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        enum Office::MsoTriState ShowWindowsInTaskbar );
    MarkerPtr GetMarker ( );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall FeatureInstall );
    VARIANT_BOOL GetOptionFlag (
        long Option,
        VARIANT_BOOL Persist );
    HRESULT SetOptionFlag (
        long Option,
        VARIANT_BOOL State,
        VARIANT_BOOL Persist );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ struct PPDialogs * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * Assistant ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ struct Office::FileSearch * * FileSearch ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ struct Office::IFind * * FileFind ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[out,retval]*/ BSTR * OperatingSystem ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * Creator ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBE6::VBE * * VBE ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ BSTR HelpFile,
        /*[in]*/ int ContextID ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ BSTR MacroName,
        /*[in]*/ SAFEARRAY * * safeArrayOfParams,
        /*[out,retval]*/ VARIANT * Run ) = 0;
      virtual HRESULT __stdcall raw_FileDialog (
        /*[in]*/ enum PpFileDialogType Type,
        /*[out,retval]*/ struct FileDialog * * FileDialog ) = 0;
      virtual HRESULT __stdcall raw_LaunchSpelling (
        /*[in]*/ struct DocumentWindow * pWindow ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * AnswerWizard ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ struct Office::COMAddIns * * COMAddIns ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * ProductCode ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * DefaultWebOptions ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ struct Office::LanguageSettings * * LanguageSettings ) = 0;
      virtual HRESULT __stdcall get_MsoDebugOptions (
        /*[out,retval]*/ struct Office::MsoDebugOptions * * MsoDebugOptions ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ enum Office::MsoTriState * ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ enum Office::MsoTriState ShowWindowsInTaskbar ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ struct Marker * * Marker ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ enum Office::MsoFeatureInstall * FeatureInstall ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ enum Office::MsoFeatureInstall FeatureInstall ) = 0;
      virtual HRESULT __stdcall raw_GetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL Persist,
        /*[out,retval]*/ VARIANT_BOOL * GetOptionFlag ) = 0;
      virtual HRESULT __stdcall raw_SetOptionFlag (
        /*[in]*/ long Option,
        /*[in]*/ VARIANT_BOOL State,
        /*[in]*/ VARIANT_BOOL Persist ) = 0;
};

struct __declspec(uuid("91493451-5a91-11cf-8700-00aa0060263b"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActivePresentation))
    _PresentationPtr ActivePresentation;
    __declspec(property(get=GetActiveWindow))
    DocumentWindowPtr ActiveWindow;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetDialogs))
    PPDialogsPtr Dialogs;
    __declspec(property(get=GetPresentations))
    PresentationsPtr Presentations;
    __declspec(property(get=GetSlideShowWindows))
    SlideShowWindowsPtr SlideShowWindows;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;

    //
    // Wrapper methods for error-handling
    //

    _PresentationPtr GetActivePresentation ( );
    DocumentWindowPtr GetActiveWindow ( );
    AddInsPtr GetAddIns ( );
    _ApplicationPtr GetApplication ( );
    Office::AssistantPtr GetAssistant ( );
    PPDialogsPtr GetDialogs ( );
    PresentationsPtr GetPresentations ( );
    SlideShowWindowsPtr GetSlideShowWindows ( );
    DocumentWindowsPtr GetWindows ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActivePresentation (
        /*[out,retval]*/ struct _Presentation * * ActivePresentation ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct DocumentWindow * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * Assistant ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ struct PPDialogs * * Dialogs ) = 0;
      virtual HRESULT __stdcall get_Presentations (
        /*[out,retval]*/ struct Presentations * * Presentations ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindows (
        /*[out,retval]*/ struct SlideShowWindows * * SlideShowWindows ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * AnswerWizard ) = 0;
};

struct __declspec(uuid("91493454-5a91-11cf-8700-00aa0060263b"))
Selection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum PpSelectionType Type;
    __declspec(property(get=GetSlideRange))
    SlideRangePtr SlideRange;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetTextRange))
    TextRangePtr TextRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Delete ( );
    HRESULT Unselect ( );
    enum PpSelectionType GetType ( );
    SlideRangePtr GetSlideRange ( );
    ShapeRangePtr GetShapeRange ( );
    TextRangePtr GetTextRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Unselect ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PpSelectionType * Type ) = 0;
      virtual HRESULT __stdcall get_SlideRange (
        /*[out,retval]*/ struct SlideRange * * SlideRange ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * ShapeRange ) = 0;
      virtual HRESULT __stdcall get_TextRange (
        /*[out,retval]*/ struct TextRange * * TextRange ) = 0;
};

struct __declspec(uuid("91493457-5a91-11cf-8700-00aa0060263b"))
DocumentWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHWND))
    long HWND;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    long SplitVertical;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    long SplitHorizontal;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelection))
    SelectionPtr Selection;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetPresentation))
    _PresentationPtr Presentation;
    __declspec(property(get=GetViewType,put=PutViewType))
    enum PpViewType ViewType;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    enum Office::MsoTriState BlackAndWhite;
    __declspec(property(get=GetActive))
    enum Office::MsoTriState Active;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum PpWindowState WindowState;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    SelectionPtr GetSelection ( );
    ViewPtr GetView ( );
    _PresentationPtr GetPresentation ( );
    enum PpViewType GetViewType ( );
    void PutViewType (
        enum PpViewType ViewType );
    enum Office::MsoTriState GetBlackAndWhite ( );
    void PutBlackAndWhite (
        enum Office::MsoTriState BlackAndWhite );
    enum Office::MsoTriState GetActive ( );
    enum PpWindowState GetWindowState ( );
    void PutWindowState (
        enum PpWindowState WindowState );
    _bstr_t GetCaption ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    float GetTop ( );
    void PutTop (
        float Top );
    float GetWidth ( );
    void PutWidth (
        float Width );
    float GetHeight ( );
    void PutHeight (
        float Height );
    HRESULT FitToPage ( );
    HRESULT Activate ( );
    HRESULT LargeScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    HRESULT SmallScroll (
        int Down,
        int Up,
        int ToRight,
        int ToLeft );
    DocumentWindowPtr NewWindow ( );
    HRESULT Close ( );
    long GetHWND ( );
    PanePtr GetActivePane ( );
    PanesPtr GetPanes ( );
    long GetSplitVertical ( );
    void PutSplitVertical (
        long SplitVertical );
    long GetSplitHorizontal ( );
    void PutSplitHorizontal (
        long SplitHorizontal );
    IDispatchPtr RangeFromPoint (
        int X,
        int Y );
    int PointsToScreenPixelsX (
        float Points );
    int PointsToScreenPixelsY (
        float Points );
    HRESULT ScrollIntoView (
        float Left,
        float Top,
        float Width,
        float Height,
        enum Office::MsoTriState Start );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct Selection * * Selection ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct View * * View ) = 0;
      virtual HRESULT __stdcall get_Presentation (
        /*[out,retval]*/ struct _Presentation * * Presentation ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum PpViewType * ViewType ) = 0;
      virtual HRESULT __stdcall put_ViewType (
        /*[in]*/ enum PpViewType ViewType ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ enum Office::MsoTriState * BlackAndWhite ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ enum Office::MsoTriState BlackAndWhite ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ enum Office::MsoTriState * Active ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum PpWindowState * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum PpWindowState WindowState ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall raw_FitToPage ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ int Down,
        /*[in]*/ int Up,
        /*[in]*/ int ToRight,
        /*[in]*/ int ToLeft ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_HWND (
        /*[out,retval]*/ long * HWND ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * ActivePane ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * Panes ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ long * SplitVertical ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ long SplitVertical ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ long * SplitHorizontal ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ long SplitHorizontal ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ int X,
        /*[in]*/ int Y,
        /*[out,retval]*/ IDispatch * * RangeFromPoint ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsX ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ float Points,
        /*[out,retval]*/ int * PointsToScreenPixelsY ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ enum Office::MsoTriState Start ) = 0;
};

struct __declspec(uuid("91493455-5a91-11cf-8700-00aa0060263b"))
DocumentWindows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    DocumentWindowPtr Item (
        int index );
    HRESULT Arrange (
        enum PpArrangeStyle arrangeStyle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct DocumentWindow * * Item ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum PpArrangeStyle arrangeStyle ) = 0;
};

struct __declspec(uuid("914934c2-5a91-11cf-8700-00aa0060263b"))
EApplication : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WindowSelectionChange (
        struct Selection * Sel );
    HRESULT WindowBeforeRightClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT WindowBeforeDoubleClick (
        struct Selection * Sel,
        VARIANT_BOOL * Cancel );
    HRESULT PresentationClose (
        struct _Presentation * Pres );
    HRESULT PresentationSave (
        struct _Presentation * Pres );
    HRESULT PresentationOpen (
        struct _Presentation * Pres );
    HRESULT NewPresentation (
        struct _Presentation * Pres );
    HRESULT PresentationNewSlide (
        struct _Slide * Sld );
    HRESULT WindowActivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT WindowDeactivate (
        struct _Presentation * Pres,
        struct DocumentWindow * Wn );
    HRESULT SlideShowBegin (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextBuild (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowNextSlide (
        struct SlideShowWindow * Wn );
    HRESULT SlideShowEnd (
        struct _Presentation * Pres );
    HRESULT PresentationPrint (
        struct _Presentation * Pres );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WindowSelectionChange (
        /*[in]*/ struct Selection * Sel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeRightClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WindowBeforeDoubleClick (
        /*[in]*/ struct Selection * Sel,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_PresentationClose (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationSave (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationOpen (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_NewPresentation (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationNewSlide (
        /*[in]*/ struct _Slide * Sld ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Presentation * Pres,
        /*[in]*/ struct DocumentWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowBegin (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextBuild (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowNextSlide (
        /*[in]*/ struct SlideShowWindow * Wn ) = 0;
      virtual HRESULT __stdcall raw_SlideShowEnd (
        /*[in]*/ struct _Presentation * Pres ) = 0;
      virtual HRESULT __stdcall raw_PresentationPrint (
        /*[in]*/ struct _Presentation * Pres ) = 0;
};

struct __declspec(uuid("91493469-5a91-11cf-8700-00aa0060263b"))
Slides : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _SlidePtr Item (
        const _variant_t & index );
    _SlidePtr FindBySlideID (
        long SlideID );
    _SlidePtr Add (
        int index,
        enum PpSlideLayout Layout );
    int InsertFromFile (
        _bstr_t FileName,
        int index,
        int SlideStart,
        int SlideEnd );
    SlideRangePtr Range (
        const _variant_t & index = vtMissing );
    SlideRangePtr Paste (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall raw_FindBySlideID (
        /*[in]*/ long SlideID,
        /*[out,retval]*/ struct _Slide * * FindBySlideID ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int index,
        /*[in]*/ enum PpSlideLayout Layout,
        /*[out,retval]*/ struct _Slide * * Add ) = 0;
      virtual HRESULT __stdcall raw_InsertFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ int index,
        /*[in]*/ int SlideStart,
        /*[in]*/ int SlideEnd,
        /*[out,retval]*/ int * FromFile ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct SlideRange * * Range ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ int index,
        /*[out,retval]*/ struct SlideRange * * Paste ) = 0;
};

struct __declspec(uuid("9149346a-5a91-11cf-8700-00aa0060263b"))
_Slide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetDisplayMasterShapes,put=PutDisplayMasterShapes))
    enum Office::MsoTriState DisplayMasterShapes;
    __declspec(property(get=GetFollowMasterBackground,put=PutFollowMasterBackground))
    enum Office::MsoTriState FollowMasterBackground;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    enum Office::MsoTriState GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        enum Office::MsoTriState DisplayMasterShapes );
    enum Office::MsoTriState GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        enum Office::MsoTriState FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    Office::ScriptsPtr GetScripts ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ enum Office::MsoTriState DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ enum Office::MsoTriState * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ enum Office::MsoTriState FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
};

struct __declspec(uuid("9149346b-5a91-11cf-8700-00aa0060263b"))
SlideRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetSlideShowTransition))
    SlideShowTransitionPtr SlideShowTransition;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSlideID))
    long SlideID;
    __declspec(property(get=GetPrintSteps))
    int PrintSteps;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum PpSlideLayout Layout;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetSlideIndex))
    int SlideIndex;
    __declspec(property(get=GetSlideNumber))
    int SlideNumber;
    __declspec(property(get=GetDisplayMasterShapes,put=PutDisplayMasterShapes))
    enum Office::MsoTriState DisplayMasterShapes;
    __declspec(property(get=GetFollowMasterBackground,put=PutFollowMasterBackground))
    enum Office::MsoTriState FollowMasterBackground;
    __declspec(property(get=GetNotesPage))
    SlideRangePtr NotesPage;
    __declspec(property(get=GetMaster))
    _MasterPtr Master;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    SlideShowTransitionPtr GetSlideShowTransition ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetSlideID ( );
    int GetPrintSteps ( );
    HRESULT Select ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    enum PpSlideLayout GetLayout ( );
    void PutLayout (
        enum PpSlideLayout Layout );
    SlideRangePtr Duplicate ( );
    HRESULT Delete ( );
    TagsPtr GetTags ( );
    int GetSlideIndex ( );
    int GetSlideNumber ( );
    enum Office::MsoTriState GetDisplayMasterShapes ( );
    void PutDisplayMasterShapes (
        enum Office::MsoTriState DisplayMasterShapes );
    enum Office::MsoTriState GetFollowMasterBackground ( );
    void PutFollowMasterBackground (
        enum Office::MsoTriState FollowMasterBackground );
    SlideRangePtr GetNotesPage ( );
    _MasterPtr GetMaster ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT Export (
        _bstr_t FileName,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    _SlidePtr Item (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int index );
    long GetCount ( );
    Office::ScriptsPtr GetScripts ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_SlideShowTransition (
        /*[out,retval]*/ struct SlideShowTransition * * SlideShowTransition ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SlideID (
        /*[out,retval]*/ long * SlideID ) = 0;
      virtual HRESULT __stdcall get_PrintSteps (
        /*[out,retval]*/ int * PrintSteps ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum PpSlideLayout * Layout ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum PpSlideLayout Layout ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct SlideRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_SlideIndex (
        /*[out,retval]*/ int * SlideIndex ) = 0;
      virtual HRESULT __stdcall get_SlideNumber (
        /*[out,retval]*/ int * SlideNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayMasterShapes (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall put_DisplayMasterShapes (
        /*[in]*/ enum Office::MsoTriState DisplayMasterShapes ) = 0;
      virtual HRESULT __stdcall get_FollowMasterBackground (
        /*[out,retval]*/ enum Office::MsoTriState * FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall put_FollowMasterBackground (
        /*[in]*/ enum Office::MsoTriState FollowMasterBackground ) = 0;
      virtual HRESULT __stdcall get_NotesPage (
        /*[out,retval]*/ struct SlideRange * * NotesPage ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ struct _Master * * Master ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct _Slide * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
};

struct __declspec(uuid("9149346c-5a91-11cf-8700-00aa0060263b"))
_Master : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetHeadersFooters))
    HeadersFootersPtr HeadersFooters;
    __declspec(property(get=GetColorScheme,put=PutColorScheme))
    ColorSchemePtr ColorScheme;
    __declspec(property(get=GetBackground))
    ShapeRangePtr Background;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHeight))
    float Height;
    __declspec(property(get=GetWidth))
    float Width;
    __declspec(property(get=GetTextStyles))
    TextStylesPtr TextStyles;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapesPtr GetShapes ( );
    HeadersFootersPtr GetHeadersFooters ( );
    ColorSchemePtr GetColorScheme ( );
    void PutColorScheme (
        struct ColorScheme * ColorScheme );
    ShapeRangePtr GetBackground ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Delete ( );
    float GetHeight ( );
    float GetWidth ( );
    TextStylesPtr GetTextStyles ( );
    HyperlinksPtr GetHyperlinks ( );
    Office::ScriptsPtr GetScripts ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * Shapes ) = 0;
      virtual HRESULT __stdcall get_HeadersFooters (
        /*[out,retval]*/ struct HeadersFooters * * HeadersFooters ) = 0;
      virtual HRESULT __stdcall get_ColorScheme (
        /*[out,retval]*/ struct ColorScheme * * ColorScheme ) = 0;
      virtual HRESULT __stdcall put_ColorScheme (
        /*[in]*/ struct ColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ struct ShapeRange * * Background ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall get_TextStyles (
        /*[out,retval]*/ struct TextStyles * * TextStyles ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * Hyperlinks ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * Scripts ) = 0;
};

struct __declspec(uuid("91493475-5a91-11cf-8700-00aa0060263b"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetHasTitle))
    enum Office::MsoTriState HasTitle;
    __declspec(property(get=GetTitle))
    ShapePtr Title;
    __declspec(property(get=GetPlaceholders))
    PlaceholdersPtr Placeholders;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t FileName,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    HRESULT SelectAll ( );
    ShapeRangePtr Range (
        const _variant_t & index = vtMissing );
    enum Office::MsoTriState GetHasTitle ( );
    ShapePtr AddTitle ( );
    ShapePtr GetTitle ( );
    PlaceholdersPtr GetPlaceholders ( );
    ShapePtr AddOLEObject (
        float Left,
        float Top,
        float Width,
        float Height,
        _bstr_t ClassName,
        _bstr_t FileName,
        enum Office::MsoTriState DisplayAsIcon,
        _bstr_t IconFileName,
        int IconIndex,
        _bstr_t IconLabel,
        enum Office::MsoTriState Link );
    ShapePtr AddComment (
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPlaceholder (
        enum PpPlaceholderType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddMediaObject (
        _bstr_t FileName,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapeRangePtr Paste ( );
    ShapePtr AddTable (
        int NumRows,
        int NumColumns,
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Callout ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Connector ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Curve ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Label ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * Line ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Picture ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * Polyline ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * TextEffect ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Textbox ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * FreeformBuilder ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct ShapeRange * * Range ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ enum Office::MsoTriState * HasTitle ) = 0;
      virtual HRESULT __stdcall raw_AddTitle (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct Shape * * Title ) = 0;
      virtual HRESULT __stdcall get_Placeholders (
        /*[out,retval]*/ struct Placeholders * * Placeholders ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[in]*/ BSTR ClassName,
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum Office::MsoTriState DisplayAsIcon,
        /*[in]*/ BSTR IconFileName,
        /*[in]*/ int IconIndex,
        /*[in]*/ BSTR IconLabel,
        /*[in]*/ enum Office::MsoTriState Link,
        /*[out,retval]*/ struct Shape * * OLEObject ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Comment ) = 0;
      virtual HRESULT __stdcall raw_AddPlaceholder (
        /*[in]*/ enum PpPlaceholderType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Placeholder ) = 0;
      virtual HRESULT __stdcall raw_AddMediaObject (
        /*[in]*/ BSTR FileName,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * MediaObject ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct ShapeRange * * Paste ) = 0;
      virtual HRESULT __stdcall raw_AddTable (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * Table ) = 0;
};

struct __declspec(uuid("91493476-5a91-11cf-8700-00aa0060263b"))
Placeholders : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr Item (
        int index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
};

struct __declspec(uuid("91493478-5a91-11cf-8700-00aa0060263b"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * Freeform ) = 0;
};

struct __declspec(uuid("91493479-5a91-11cf-8700-00aa0060263b"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    enum Office::MsoTriState HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasTable))
    enum Office::MsoTriState HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType AutoShapeType );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        enum Office::MsoTriState Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    enum Office::MsoTriState GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    Office::ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum Office::MsoTriState GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ enum Office::MsoTriState Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ enum Office::MsoTriState * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ enum Office::MsoTriState * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
};

struct __declspec(uuid("9149347b-5a91-11cf-8700-00aa0060263b"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapePtr Item (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pnShapes ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppienum ) = 0;
};

struct __declspec(uuid("91493481-5a91-11cf-8700-00aa0060263b"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    int BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;
    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    int EndConnectionSite;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoConnectorType Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        int ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    int GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    int GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ int ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum Office::MsoTriState * BeginConnected ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * BeginConnectedShape ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ int * BeginConnectionSite ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum Office::MsoTriState * EndConnected ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * EndConnectedShape ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ int * EndConnectionSite ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoConnectorType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoConnectorType Type ) = 0;
};

struct __declspec(uuid("9149349d-5a91-11cf-8700-00aa0060263b"))
_Presentation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultLanguageID,put=PutDefaultLanguageID))
    enum Office::MsoLanguageID DefaultLanguageID;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    enum Office::MsoTriState EnvelopeVisible;
    __declspec(property(get=GetVBASigned))
    enum Office::MsoTriState VBASigned;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSlideMaster))
    _MasterPtr SlideMaster;
    __declspec(property(get=GetTitleMaster))
    _MasterPtr TitleMaster;
    __declspec(property(get=GetHasTitleMaster))
    enum Office::MsoTriState HasTitleMaster;
    __declspec(property(get=GetTemplateName))
    _bstr_t TemplateName;
    __declspec(property(get=GetNotesMaster))
    _MasterPtr NotesMaster;
    __declspec(property(get=GetHandoutMaster))
    _MasterPtr HandoutMaster;
    __declspec(property(get=GetSlides))
    SlidesPtr Slides;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetColorSchemes))
    ColorSchemesPtr ColorSchemes;
    __declspec(property(get=GetExtraColors))
    ExtraColorsPtr ExtraColors;
    __declspec(property(get=GetSlideShowSettings))
    SlideShowSettingsPtr SlideShowSettings;
    __declspec(property(get=GetFonts))
    FontsPtr Fonts;
    __declspec(property(get=GetWindows))
    DocumentWindowsPtr Windows;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetDefaultShape))
    ShapePtr DefaultShape;
    __declspec(property(get=GetBuiltInDocumentProperties))
    IDispatchPtr BuiltInDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetVBProject))
    VBE6::_VBProjectPtr VBProject;
    __declspec(property(get=GetReadOnly))
    enum Office::MsoTriState ReadOnly;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetSaved,put=PutSaved))
    enum Office::MsoTriState Saved;
    __declspec(property(get=GetLayoutDirection,put=PutLayoutDirection))
    enum PpDirection LayoutDirection;
    __declspec(property(get=GetPrintOptions))
    PrintOptionsPtr PrintOptions;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetDisplayComments,put=PutDisplayComments))
    enum Office::MsoTriState DisplayComments;
    __declspec(property(get=GetFarEastLineBreakLevel,put=PutFarEastLineBreakLevel))
    enum PpFarEastLineBreakLevel FarEastLineBreakLevel;
    __declspec(property(get=GetNoLineBreakBefore,put=PutNoLineBreakBefore))
    _bstr_t NoLineBreakBefore;
    __declspec(property(get=GetNoLineBreakAfter,put=PutNoLineBreakAfter))
    _bstr_t NoLineBreakAfter;
    __declspec(property(get=GetSlideShowWindow))
    SlideShowWindowPtr SlideShowWindow;
    __declspec(property(get=GetFarEastLineBreakLanguage,put=PutFarEastLineBreakLanguage))
    enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _MasterPtr GetSlideMaster ( );
    _MasterPtr GetTitleMaster ( );
    enum Office::MsoTriState GetHasTitleMaster ( );
    _MasterPtr AddTitleMaster ( );
    HRESULT ApplyTemplate (
        _bstr_t FileName );
    _bstr_t GetTemplateName ( );
    _MasterPtr GetNotesMaster ( );
    _MasterPtr GetHandoutMaster ( );
    SlidesPtr GetSlides ( );
    PageSetupPtr GetPageSetup ( );
    ColorSchemesPtr GetColorSchemes ( );
    ExtraColorsPtr GetExtraColors ( );
    SlideShowSettingsPtr GetSlideShowSettings ( );
    FontsPtr GetFonts ( );
    DocumentWindowsPtr GetWindows ( );
    TagsPtr GetTags ( );
    ShapePtr GetDefaultShape ( );
    IDispatchPtr GetBuiltInDocumentProperties ( );
    IDispatchPtr GetCustomDocumentProperties ( );
    VBE6::_VBProjectPtr GetVBProject ( );
    enum Office::MsoTriState GetReadOnly ( );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    enum Office::MsoTriState GetSaved ( );
    void PutSaved (
        enum Office::MsoTriState Saved );
    enum PpDirection GetLayoutDirection ( );
    void PutLayoutDirection (
        enum PpDirection LayoutDirection );
    DocumentWindowPtr NewWindow ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        _bstr_t SubAddress,
        VARIANT_BOOL NewWindow,
        VARIANT_BOOL AddHistory,
        _bstr_t ExtraInfo,
        enum Office::MsoExtraInfoMethod Method,
        _bstr_t HeaderInfo );
    HRESULT AddToFavorites ( );
    HRESULT Unused ( );
    PrintOptionsPtr GetPrintOptions ( );
    HRESULT PrintOut (
        int From,
        int To,
        _bstr_t PrintToFile,
        int Copies,
        enum Office::MsoTriState Collate );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        enum Office::MsoTriState EmbedTrueTypeFonts );
    HRESULT SaveCopyAs (
        _bstr_t FileName,
        enum PpSaveAsFileType FileFormat,
        enum Office::MsoTriState EmbedTrueTypeFonts );
    HRESULT Export (
        _bstr_t Path,
        _bstr_t FilterName,
        int ScaleWidth,
        int ScaleHeight );
    HRESULT Close ( );
    HRESULT SetUndoText (
        _bstr_t Text );
    IDispatchPtr GetContainer ( );
    enum Office::MsoTriState GetDisplayComments ( );
    void PutDisplayComments (
        enum Office::MsoTriState DisplayComments );
    enum PpFarEastLineBreakLevel GetFarEastLineBreakLevel ( );
    void PutFarEastLineBreakLevel (
        enum PpFarEastLineBreakLevel FarEastLineBreakLevel );
    _bstr_t GetNoLineBreakBefore ( );
    void PutNoLineBreakBefore (
        _bstr_t NoLineBreakBefore );
    _bstr_t GetNoLineBreakAfter ( );
    void PutNoLineBreakAfter (
        _bstr_t NoLineBreakAfter );
    HRESULT UpdateLinks ( );
    SlideShowWindowPtr GetSlideShowWindow ( );
    enum Office::MsoFarEastLineBreakLanguageID GetFarEastLineBreakLanguage ( );
    void PutFarEastLineBreakLanguage (
        enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage );
    HRESULT WebPagePreview ( );
    enum Office::MsoLanguageID GetDefaultLanguageID ( );
    void PutDefaultLanguageID (
        enum Office::MsoLanguageID DefaultLanguageID );
    Office::_CommandBarsPtr GetCommandBars ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    Office::HTMLProjectPtr GetHTMLProject ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding cp );
    HRESULT MakeIntoTemplate (
        enum Office::MsoTriState IsDesignTemplate );
    enum Office::MsoTriState GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        enum Office::MsoTriState EnvelopeVisible );
    HRESULT sblt (
        _bstr_t s );
    enum Office::MsoTriState GetVBASigned ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_SlideMaster (
        /*[out,retval]*/ struct _Master * * SlideMaster ) = 0;
      virtual HRESULT __stdcall get_TitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall get_HasTitleMaster (
        /*[out,retval]*/ enum Office::MsoTriState * HasTitleMaster ) = 0;
      virtual HRESULT __stdcall raw_AddTitleMaster (
        /*[out,retval]*/ struct _Master * * TitleMaster ) = 0;
      virtual HRESULT __stdcall raw_ApplyTemplate (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_TemplateName (
        /*[out,retval]*/ BSTR * TemplateName ) = 0;
      virtual HRESULT __stdcall get_NotesMaster (
        /*[out,retval]*/ struct _Master * * NotesMaster ) = 0;
      virtual HRESULT __stdcall get_HandoutMaster (
        /*[out,retval]*/ struct _Master * * HandoutMaster ) = 0;
      virtual HRESULT __stdcall get_Slides (
        /*[out,retval]*/ struct Slides * * Slides ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * PageSetup ) = 0;
      virtual HRESULT __stdcall get_ColorSchemes (
        /*[out,retval]*/ struct ColorSchemes * * ColorSchemes ) = 0;
      virtual HRESULT __stdcall get_ExtraColors (
        /*[out,retval]*/ struct ExtraColors * * ExtraColors ) = 0;
      virtual HRESULT __stdcall get_SlideShowSettings (
        /*[out,retval]*/ struct SlideShowSettings * * SlideShowSettings ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Fonts * * Fonts ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct DocumentWindows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall get_DefaultShape (
        /*[out,retval]*/ struct Shape * * DefaultShape ) = 0;
      virtual HRESULT __stdcall get_BuiltInDocumentProperties (
        /*[out,retval]*/ IDispatch * * BuiltInDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * CustomDocumentProperties ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct VBE6::_VBProject * * VBProject ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ enum Office::MsoTriState * ReadOnly ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[out,retval]*/ enum Office::MsoTriState * Saved ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in]*/ enum Office::MsoTriState Saved ) = 0;
      virtual HRESULT __stdcall get_LayoutDirection (
        /*[out,retval]*/ enum PpDirection * LayoutDirection ) = 0;
      virtual HRESULT __stdcall put_LayoutDirection (
        /*[in]*/ enum PpDirection LayoutDirection ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct DocumentWindow * * NewWindow ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ BSTR SubAddress,
        /*[in]*/ VARIANT_BOOL NewWindow,
        /*[in]*/ VARIANT_BOOL AddHistory,
        /*[in]*/ BSTR ExtraInfo,
        /*[in]*/ enum Office::MsoExtraInfoMethod Method,
        /*[in]*/ BSTR HeaderInfo ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Unused ( ) = 0;
      virtual HRESULT __stdcall get_PrintOptions (
        /*[out,retval]*/ struct PrintOptions * * PrintOptions ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ int From,
        /*[in]*/ int To,
        /*[in]*/ BSTR PrintToFile,
        /*[in]*/ int Copies,
        /*[in]*/ enum Office::MsoTriState Collate ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ enum Office::MsoTriState EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum PpSaveAsFileType FileFormat,
        /*[in]*/ enum Office::MsoTriState EmbedTrueTypeFonts ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR FilterName,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_SetUndoText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * Container ) = 0;
      virtual HRESULT __stdcall get_DisplayComments (
        /*[out,retval]*/ enum Office::MsoTriState * DisplayComments ) = 0;
      virtual HRESULT __stdcall put_DisplayComments (
        /*[in]*/ enum Office::MsoTriState DisplayComments ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLevel (
        /*[out,retval]*/ enum PpFarEastLineBreakLevel * FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLevel (
        /*[in]*/ enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakBefore (
        /*[out,retval]*/ BSTR * NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakBefore (
        /*[in]*/ BSTR NoLineBreakBefore ) = 0;
      virtual HRESULT __stdcall get_NoLineBreakAfter (
        /*[out,retval]*/ BSTR * NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall put_NoLineBreakAfter (
        /*[in]*/ BSTR NoLineBreakAfter ) = 0;
      virtual HRESULT __stdcall raw_UpdateLinks ( ) = 0;
      virtual HRESULT __stdcall get_SlideShowWindow (
        /*[out,retval]*/ struct SlideShowWindow * * SlideShowWindow ) = 0;
      virtual HRESULT __stdcall get_FarEastLineBreakLanguage (
        /*[out,retval]*/ enum Office::MsoFarEastLineBreakLanguageID * FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall put_FarEastLineBreakLanguage (
        /*[in]*/ enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_DefaultLanguageID (
        /*[out,retval]*/ enum Office::MsoLanguageID * DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall put_DefaultLanguageID (
        /*[in]*/ enum Office::MsoLanguageID DefaultLanguageID ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * PublishObjects ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * WebOptions ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ struct Office::HTMLProject * * HTMLProject ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ enum Office::MsoEncoding cp ) = 0;
      virtual HRESULT __stdcall raw_MakeIntoTemplate (
        /*[in]*/ enum Office::MsoTriState IsDesignTemplate ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ enum Office::MsoTriState * EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ enum Office::MsoTriState EnvelopeVisible ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ enum Office::MsoTriState * VBASigned ) = 0;
};

struct __declspec(uuid("914934c9-5a91-11cf-8700-00aa0060263b"))
Cell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ShapePtr GetShape ( );
    BordersPtr GetBorders ( );
    HRESULT Merge (
        struct Cell * MergeTo );
    HRESULT Split (
        int NumRows,
        int NumColumns );
    HRESULT Select ( );
    VARIANT_BOOL GetSelected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ struct Cell * MergeTo ) = 0;
      virtual HRESULT __stdcall raw_Split (
        /*[in]*/ int NumRows,
        /*[in]*/ int NumColumns ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * Selected ) = 0;
};

struct __declspec(uuid("914934c8-5a91-11cf-8700-00aa0060263b"))
CellRange : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellPtr Item (
        int index );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Cell * * Item ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * Borders ) = 0;
};

struct __declspec(uuid("914934c5-5a91-11cf-8700-00aa0060263b"))
Column : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetWidth ( );
    void PutWidth (
        float Width );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
};

struct __declspec(uuid("914934c4-5a91-11cf-8700-00aa0060263b"))
Columns : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnPtr Item (
        int index );
    ColumnPtr Add (
        int BeforeColumn );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Column * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeColumn,
        /*[out,retval]*/ struct Column * * Add ) = 0;
};

struct __declspec(uuid("914934c7-5a91-11cf-8700-00aa0060263b"))
Row : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCells))
    CellRangePtr Cells;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CellRangePtr GetCells ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    float GetHeight ( );
    void PutHeight (
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct CellRange * * Cells ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
};

struct __declspec(uuid("914934c6-5a91-11cf-8700-00aa0060263b"))
Rows : Collection
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    RowPtr Item (
        int index );
    RowPtr Add (
        int BeforeRow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ int index,
        /*[out,retval]*/ struct Row * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ int BeforeRow,
        /*[out,retval]*/ struct Row * * Add ) = 0;
};

struct __declspec(uuid("914934c3-5a91-11cf-8700-00aa0060263b"))
Table : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetColumns))
    ColumnsPtr Columns;
    __declspec(property(get=GetRows))
    RowsPtr Rows;
    __declspec(property(get=GetTableDirection,put=PutTableDirection))
    enum PpDirection TableDirection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    ColumnsPtr GetColumns ( );
    RowsPtr GetRows ( );
    CellPtr Cell (
        int Row,
        int Column );
    enum PpDirection GetTableDirection ( );
    void PutTableDirection (
        enum PpDirection TableDirection );
    HRESULT MergeBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Columns * * Columns ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Rows * * Rows ) = 0;
      virtual HRESULT __stdcall raw_Cell (
        /*[in]*/ int Row,
        /*[in]*/ int Column,
        /*[out,retval]*/ struct Cell * * Cell ) = 0;
      virtual HRESULT __stdcall get_TableDirection (
        /*[out,retval]*/ enum PpDirection * TableDirection ) = 0;
      virtual HRESULT __stdcall put_TableDirection (
        /*[in]*/ enum PpDirection TableDirection ) = 0;
      virtual HRESULT __stdcall raw_MergeBorders ( ) = 0;
};

struct __declspec(uuid("9149347a-5a91-11cf-8700-00aa0060263b"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    int ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCreator))
    long Creator;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetPlaceholderFormat))
    PlaceholderFormatPtr PlaceholderFormat;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetZOrderPosition))
    int ZOrderPosition;
    __declspec(property(get=GetAnimationSettings))
    AnimationSettingsPtr AnimationSettings;
    __declspec(property(get=GetActionSettings))
    ActionSettingsPtr ActionSettings;
    __declspec(property(get=GetTags))
    TagsPtr Tags;
    __declspec(property(get=GetMediaType))
    enum PpMediaType MediaType;
    __declspec(property(get=GetHasTextFrame))
    enum Office::MsoTriState HasTextFrame;
    __declspec(property(get=GetSoundFormat))
    SoundFormatPtr SoundFormat;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetHasTable))
    enum Office::MsoTriState HasTable;
    __declspec(property(get=GetTable))
    TablePtr Table;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        enum Office::MsoScaleFrom fScale );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType AutoShapeType );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode BlackWhiteMode );
    CalloutFormatPtr GetCallout ( );
    int GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float Height );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float Left );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState LockAspectRatio );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float Rotation );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    TextFramePtr GetTextFrame ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float Top );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWidth ( );
    void PutWidth (
        float Width );
    int GetZOrderPosition ( );
    OLEFormatPtr GetOLEFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    PlaceholderFormatPtr GetPlaceholderFormat ( );
    AnimationSettingsPtr GetAnimationSettings ( );
    ActionSettingsPtr GetActionSettings ( );
    TagsPtr GetTags ( );
    HRESULT Cut ( );
    HRESULT Copy ( );
    HRESULT Select (
        enum Office::MsoTriState Replace );
    ShapeRangePtr Duplicate ( );
    enum PpMediaType GetMediaType ( );
    enum Office::MsoTriState GetHasTextFrame ( );
    SoundFormatPtr GetSoundFormat ( );
    ShapePtr Item (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    _variant_t _Index (
        int index );
    long GetCount ( );
    ShapePtr Group ( );
    ShapePtr Regroup ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT GetPolygonalRepresentation (
        unsigned long maxPointsInBuffer,
        float * pPoints,
        unsigned long * numPointsInPolygon,
        enum Office::MsoTriState * IsOpen );
    Office::ScriptPtr GetScript ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t AlternativeText );
    enum Office::MsoTriState GetHasTable ( );
    TablePtr GetTable ( );
    HRESULT Export (
        _bstr_t PathName,
        enum PpShapeFormat Filter,
        int ScaleWidth,
        int ScaleHeight,
        enum PpExportMode ExportMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppidisp ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ long * plCreator ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ enum Office::MsoScaleFrom fScale ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * Ungroup ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * Adjustments ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * AutoShapeType ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType AutoShapeType ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode BlackWhiteMode ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * Callout ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ int * ConnectionSiteCount ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * Connector ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * ConnectorFormat ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * Fill ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * GroupItems ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float Height ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * HorizontalFlip ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float Left ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * Line ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * LockAspectRatio ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState LockAspectRatio ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * Nodes ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * Rotation ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float Rotation ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * Picture ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * Shadow ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * TextEffect ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * TextFrame ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * ThreeD ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * Type ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * VerticalFlip ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * Vertices ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float Width ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ int * ZOrderPosition ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * OLEFormat ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * LinkFormat ) = 0;
      virtual HRESULT __stdcall get_PlaceholderFormat (
        /*[out,retval]*/ struct PlaceholderFormat * * PlaceholderFormat ) = 0;
      virtual HRESULT __stdcall get_AnimationSettings (
        /*[out,retval]*/ struct AnimationSettings * * AnimationSettings ) = 0;
      virtual HRESULT __stdcall get_ActionSettings (
        /*[out,retval]*/ struct ActionSettings * * ActionSettings ) = 0;
      virtual HRESULT __stdcall get_Tags (
        /*[out,retval]*/ struct Tags * * Tags ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ enum Office::MsoTriState Replace ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * Duplicate ) = 0;
      virtual HRESULT __stdcall get_MediaType (
        /*[out,retval]*/ enum PpMediaType * MediaType ) = 0;
      virtual HRESULT __stdcall get_HasTextFrame (
        /*[out,retval]*/ enum Office::MsoTriState * HasTextFrame ) = 0;
      virtual HRESULT __stdcall get_SoundFormat (
        /*[out,retval]*/ struct SoundFormat * * SoundFormat ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct Shape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw__Index (
        /*[in]*/ int index,
        /*[out,retval]*/ VARIANT * _Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * Group ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * Regroup ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum Office::MsoAlignCmd AlignCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum Office::MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_GetPolygonalRepresentation (
        /*[in]*/ unsigned long maxPointsInBuffer,
        /*[in]*/ float * pPoints,
        /*[out]*/ unsigned long * numPointsInPolygon,
        /*[out]*/ enum Office::MsoTriState * IsOpen ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * Script ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * AlternativeText ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR AlternativeText ) = 0;
      virtual HRESULT __stdcall get_HasTable (
        /*[out,retval]*/ enum Office::MsoTriState * HasTable ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct Table * * Table ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR PathName,
        /*[in]*/ enum PpShapeFormat Filter,
        /*[in]*/ int ScaleWidth,
        /*[in]*/ int ScaleHeight,
        /*[in]*/ enum PpExportMode ExportMode ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("f:\hitetouchpro_work\test_cross_1\utility\win32\debug\msppt9.tli")
__declspec(implementation_key(1)) IUnknownPtr Collection::Get_NewEnum ( );
__declspec(implementation_key(2)) _variant_t Collection::_Index ( int index );
__declspec(implementation_key(3)) long Collection::GetCount ( );
__declspec(implementation_key(4)) IDispatchPtr ColorFormat::GetApplication ( );
__declspec(implementation_key(5)) long ColorFormat::GetCreator ( );
__declspec(implementation_key(6)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(7)) Office::MsoRGBType ColorFormat::GetPPTRGB ( );
__declspec(implementation_key(8)) void ColorFormat::PutPPTRGB ( Office::MsoRGBType PPTRGB );
__declspec(implementation_key(9)) enum Office::MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(10)) enum PpColorSchemeIndex ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(11)) void ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor );
__declspec(implementation_key(12)) _ApplicationPtr View::GetApplication ( );
__declspec(implementation_key(13)) IDispatchPtr View::GetParent ( );
__declspec(implementation_key(14)) enum PpViewType View::GetType ( );
__declspec(implementation_key(15)) int View::GetZoom ( );
__declspec(implementation_key(16)) void View::PutZoom ( int Zoom );
__declspec(implementation_key(17)) HRESULT View::Paste ( );
__declspec(implementation_key(18)) IDispatchPtr View::GetSlide ( );
__declspec(implementation_key(19)) void View::PutSlide ( IDispatch * Slide );
__declspec(implementation_key(20)) HRESULT View::GotoSlide ( int index );
__declspec(implementation_key(21)) enum Office::MsoTriState View::GetDisplaySlideMiniature ( );
__declspec(implementation_key(22)) void View::PutDisplaySlideMiniature ( enum Office::MsoTriState DisplaySlideMiniature );
__declspec(implementation_key(23)) enum Office::MsoTriState View::GetZoomToFit ( );
__declspec(implementation_key(24)) void View::PutZoomToFit ( enum Office::MsoTriState ZoomToFit );
__declspec(implementation_key(25)) _ApplicationPtr NamedSlideShow::GetApplication ( );
__declspec(implementation_key(26)) IDispatchPtr NamedSlideShow::GetParent ( );
__declspec(implementation_key(27)) _bstr_t NamedSlideShow::GetName ( );
__declspec(implementation_key(28)) HRESULT NamedSlideShow::Delete ( );
__declspec(implementation_key(29)) _variant_t NamedSlideShow::GetSlideIDs ( );
__declspec(implementation_key(30)) long NamedSlideShow::GetCount ( );
__declspec(implementation_key(31)) _ApplicationPtr NamedSlideShows::GetApplication ( );
__declspec(implementation_key(32)) IDispatchPtr NamedSlideShows::GetParent ( );
__declspec(implementation_key(33)) NamedSlideShowPtr NamedSlideShows::Item ( const _variant_t & index );
__declspec(implementation_key(34)) NamedSlideShowPtr NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs );
__declspec(implementation_key(35)) _ApplicationPtr PrintRange::GetApplication ( );
__declspec(implementation_key(36)) IDispatchPtr PrintRange::GetParent ( );
__declspec(implementation_key(37)) int PrintRange::GetStart ( );
__declspec(implementation_key(38)) int PrintRange::GetEnd ( );
__declspec(implementation_key(39)) HRESULT PrintRange::Delete ( );
__declspec(implementation_key(40)) PrintRangePtr PrintRanges::Add ( int Start, int End );
__declspec(implementation_key(41)) _ApplicationPtr PrintRanges::GetApplication ( );
__declspec(implementation_key(42)) HRESULT PrintRanges::ClearAll ( );
__declspec(implementation_key(43)) PrintRangePtr PrintRanges::Item ( int index );
__declspec(implementation_key(44)) IDispatchPtr PrintRanges::GetParent ( );
__declspec(implementation_key(45)) _ApplicationPtr PrintOptions::GetApplication ( );
__declspec(implementation_key(46)) enum PpPrintColorType PrintOptions::GetPrintColorType ( );
__declspec(implementation_key(47)) void PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType );
__declspec(implementation_key(48)) enum Office::MsoTriState PrintOptions::GetCollate ( );
__declspec(implementation_key(49)) void PrintOptions::PutCollate ( enum Office::MsoTriState Collate );
__declspec(implementation_key(50)) enum Office::MsoTriState PrintOptions::GetFitToPage ( );
__declspec(implementation_key(51)) void PrintOptions::PutFitToPage ( enum Office::MsoTriState FitToPage );
__declspec(implementation_key(52)) enum Office::MsoTriState PrintOptions::GetFrameSlides ( );
__declspec(implementation_key(53)) void PrintOptions::PutFrameSlides ( enum Office::MsoTriState FrameSlides );
__declspec(implementation_key(54)) int PrintOptions::GetNumberOfCopies ( );
__declspec(implementation_key(55)) void PrintOptions::PutNumberOfCopies ( int NumberOfCopies );
__declspec(implementation_key(56)) enum PpPrintOutputType PrintOptions::GetOutputType ( );
__declspec(implementation_key(57)) void PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType );
__declspec(implementation_key(58)) IDispatchPtr PrintOptions::GetParent ( );
__declspec(implementation_key(59)) enum Office::MsoTriState PrintOptions::GetPrintHiddenSlides ( );
__declspec(implementation_key(60)) void PrintOptions::PutPrintHiddenSlides ( enum Office::MsoTriState PrintHiddenSlides );
__declspec(implementation_key(61)) enum Office::MsoTriState PrintOptions::GetPrintInBackground ( );
__declspec(implementation_key(62)) void PrintOptions::PutPrintInBackground ( enum Office::MsoTriState PrintInBackground );
__declspec(implementation_key(63)) enum PpPrintRangeType PrintOptions::GetRangeType ( );
__declspec(implementation_key(64)) void PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType );
__declspec(implementation_key(65)) PrintRangesPtr PrintOptions::GetRanges ( );
__declspec(implementation_key(66)) enum Office::MsoTriState PrintOptions::GetPrintFontsAsGraphics ( );
__declspec(implementation_key(67)) void PrintOptions::PutPrintFontsAsGraphics ( enum Office::MsoTriState PrintFontsAsGraphics );
__declspec(implementation_key(68)) _bstr_t PrintOptions::GetSlideShowName ( );
__declspec(implementation_key(69)) void PrintOptions::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(70)) _bstr_t PrintOptions::GetActivePrinter ( );
__declspec(implementation_key(71)) void PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter );
__declspec(implementation_key(72)) enum PpPrintHandoutOrder PrintOptions::GetHandoutOrder ( );
__declspec(implementation_key(73)) void PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder );
__declspec(implementation_key(74)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(75)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(76)) _bstr_t AddIn::GetFullName ( );
__declspec(implementation_key(77)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(78)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(79)) enum Office::MsoTriState AddIn::GetRegistered ( );
__declspec(implementation_key(80)) void AddIn::PutRegistered ( enum Office::MsoTriState Registered );
__declspec(implementation_key(81)) enum Office::MsoTriState AddIn::GetAutoLoad ( );
__declspec(implementation_key(82)) void AddIn::PutAutoLoad ( enum Office::MsoTriState AutoLoad );
__declspec(implementation_key(83)) enum Office::MsoTriState AddIn::GetLoaded ( );
__declspec(implementation_key(84)) void AddIn::PutLoaded ( enum Office::MsoTriState Loaded );
__declspec(implementation_key(85)) enum Office::MsoTriState AddIn::GetDisplayAlerts ( );
__declspec(implementation_key(86)) void AddIn::PutDisplayAlerts ( enum Office::MsoTriState DisplayAlerts );
__declspec(implementation_key(87)) enum Office::MsoTriState AddIn::GetRegisteredInHKLM ( );
__declspec(implementation_key(88)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(89)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(90)) AddInPtr AddIns::Item ( VARIANT * index );
__declspec(implementation_key(91)) AddInPtr AddIns::Add ( _bstr_t FileName );
__declspec(implementation_key(92)) HRESULT AddIns::Remove ( VARIANT * index );
__declspec(implementation_key(93)) _ApplicationPtr Presentations::GetApplication ( );
__declspec(implementation_key(94)) IDispatchPtr Presentations::GetParent ( );
__declspec(implementation_key(95)) _PresentationPtr Presentations::Item ( const _variant_t & index );
__declspec(implementation_key(96)) _PresentationPtr Presentations::Add ( enum Office::MsoTriState WithWindow );
__declspec(implementation_key(97)) _PresentationPtr Presentations::Open ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow );
__declspec(implementation_key(98)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(99)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(100)) enum Office::MsoHyperlinkType Hyperlink::GetType ( );
__declspec(implementation_key(101)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(102)) void Hyperlink::PutAddress ( _bstr_t Address );
__declspec(implementation_key(103)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(104)) void Hyperlink::PutSubAddress ( _bstr_t SubAddress );
__declspec(implementation_key(105)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(106)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(107)) void Hyperlink::PutEmailSubject ( _bstr_t EmailSubject );
__declspec(implementation_key(108)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(109)) void Hyperlink::PutScreenTip ( _bstr_t ScreenTip );
__declspec(implementation_key(110)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(111)) void Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay );
__declspec(implementation_key(112)) enum Office::MsoTriState Hyperlink::GetShowandReturn ( );
__declspec(implementation_key(113)) void Hyperlink::PutShowandReturn ( enum Office::MsoTriState ShowandReturn );
__declspec(implementation_key(114)) HRESULT Hyperlink::Follow ( );
__declspec(implementation_key(115)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t FileName, enum Office::MsoTriState EditNow, enum Office::MsoTriState Overwrite );
__declspec(implementation_key(116)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(117)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(118)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(119)) HyperlinkPtr Hyperlinks::Item ( int index );
__declspec(implementation_key(120)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(121)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(122)) int PageSetup::GetFirstSlideNumber ( );
__declspec(implementation_key(123)) void PageSetup::PutFirstSlideNumber ( int FirstSlideNumber );
__declspec(implementation_key(124)) float PageSetup::GetSlideHeight ( );
__declspec(implementation_key(125)) void PageSetup::PutSlideHeight ( float SlideHeight );
__declspec(implementation_key(126)) float PageSetup::GetSlideWidth ( );
__declspec(implementation_key(127)) void PageSetup::PutSlideWidth ( float SlideWidth );
__declspec(implementation_key(128)) enum PpSlideSizeType PageSetup::GetSlideSize ( );
__declspec(implementation_key(129)) void PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize );
__declspec(implementation_key(130)) enum Office::MsoOrientation PageSetup::GetNotesOrientation ( );
__declspec(implementation_key(131)) void PageSetup::PutNotesOrientation ( enum Office::MsoOrientation NotesOrientation );
__declspec(implementation_key(132)) enum Office::MsoOrientation PageSetup::GetSlideOrientation ( );
__declspec(implementation_key(133)) void PageSetup::PutSlideOrientation ( enum Office::MsoOrientation SlideOrientation );
__declspec(implementation_key(134)) _ApplicationPtr ExtraColors::GetApplication ( );
__declspec(implementation_key(135)) IDispatchPtr ExtraColors::GetParent ( );
__declspec(implementation_key(136)) Office::MsoRGBType ExtraColors::Item ( int index );
__declspec(implementation_key(137)) HRESULT ExtraColors::Add ( Office::MsoRGBType Type );
__declspec(implementation_key(138)) _ApplicationPtr RGBColor::GetApplication ( );
__declspec(implementation_key(139)) IDispatchPtr RGBColor::GetParent ( );
__declspec(implementation_key(140)) Office::MsoRGBType RGBColor::GetPPTRGB ( );
__declspec(implementation_key(141)) void RGBColor::PutPPTRGB ( Office::MsoRGBType PPTRGB );
__declspec(implementation_key(142)) _ApplicationPtr ColorScheme::GetApplication ( );
__declspec(implementation_key(143)) IDispatchPtr ColorScheme::GetParent ( );
__declspec(implementation_key(144)) RGBColorPtr ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor );
__declspec(implementation_key(145)) HRESULT ColorScheme::Delete ( );
__declspec(implementation_key(146)) _ApplicationPtr ColorSchemes::GetApplication ( );
__declspec(implementation_key(147)) IDispatchPtr ColorSchemes::GetParent ( );
__declspec(implementation_key(148)) ColorSchemePtr ColorSchemes::Item ( int index );
__declspec(implementation_key(149)) ColorSchemePtr ColorSchemes::Add ( struct ColorScheme * Scheme );
__declspec(implementation_key(150)) _ApplicationPtr SoundEffect::GetApplication ( );
__declspec(implementation_key(151)) IDispatchPtr SoundEffect::GetParent ( );
__declspec(implementation_key(152)) _bstr_t SoundEffect::GetName ( );
__declspec(implementation_key(153)) void SoundEffect::PutName ( _bstr_t Name );
__declspec(implementation_key(154)) enum PpSoundEffectType SoundEffect::GetType ( );
__declspec(implementation_key(155)) void SoundEffect::PutType ( enum PpSoundEffectType Type );
__declspec(implementation_key(156)) HRESULT SoundEffect::ImportFromFile ( _bstr_t FileName );
__declspec(implementation_key(157)) HRESULT SoundEffect::Play ( );
__declspec(implementation_key(158)) _ApplicationPtr SlideShowTransition::GetApplication ( );
__declspec(implementation_key(159)) IDispatchPtr SlideShowTransition::GetParent ( );
__declspec(implementation_key(160)) enum Office::MsoTriState SlideShowTransition::GetAdvanceOnClick ( );
__declspec(implementation_key(161)) void SlideShowTransition::PutAdvanceOnClick ( enum Office::MsoTriState AdvanceOnClick );
__declspec(implementation_key(162)) enum Office::MsoTriState SlideShowTransition::GetAdvanceOnTime ( );
__declspec(implementation_key(163)) void SlideShowTransition::PutAdvanceOnTime ( enum Office::MsoTriState AdvanceOnTime );
__declspec(implementation_key(164)) float SlideShowTransition::GetAdvanceTime ( );
__declspec(implementation_key(165)) void SlideShowTransition::PutAdvanceTime ( float AdvanceTime );
__declspec(implementation_key(166)) enum PpEntryEffect SlideShowTransition::GetEntryEffect ( );
__declspec(implementation_key(167)) void SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect );
__declspec(implementation_key(168)) enum Office::MsoTriState SlideShowTransition::GetHidden ( );
__declspec(implementation_key(169)) void SlideShowTransition::PutHidden ( enum Office::MsoTriState Hidden );
__declspec(implementation_key(170)) enum Office::MsoTriState SlideShowTransition::GetLoopSoundUntilNext ( );
__declspec(implementation_key(171)) void SlideShowTransition::PutLoopSoundUntilNext ( enum Office::MsoTriState LoopSoundUntilNext );
__declspec(implementation_key(172)) SoundEffectPtr SlideShowTransition::GetSoundEffect ( );
__declspec(implementation_key(173)) enum PpTransitionSpeed SlideShowTransition::GetSpeed ( );
__declspec(implementation_key(174)) void SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed );
__declspec(implementation_key(175)) HRESULT SoundFormat::Play ( );
__declspec(implementation_key(176)) HRESULT SoundFormat::Import ( _bstr_t FileName );
__declspec(implementation_key(177)) enum PpSoundFormatType SoundFormat::Export ( _bstr_t FileName );
__declspec(implementation_key(178)) enum PpSoundFormatType SoundFormat::GetType ( );
__declspec(implementation_key(179)) _bstr_t SoundFormat::GetSourceFullName ( );
__declspec(implementation_key(180)) _ApplicationPtr PlaceholderFormat::GetApplication ( );
__declspec(implementation_key(181)) IDispatchPtr PlaceholderFormat::GetParent ( );
__declspec(implementation_key(182)) enum PpPlaceholderType PlaceholderFormat::GetType ( );
__declspec(implementation_key(183)) IDispatchPtr Adjustments::GetApplication ( );
__declspec(implementation_key(184)) long Adjustments::GetCreator ( );
__declspec(implementation_key(185)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(186)) int Adjustments::GetCount ( );
__declspec(implementation_key(187)) float Adjustments::GetItem ( int index );
__declspec(implementation_key(188)) void Adjustments::PutItem ( int index, float Val );
__declspec(implementation_key(189)) IDispatchPtr PictureFormat::GetApplication ( );
__declspec(implementation_key(190)) long PictureFormat::GetCreator ( );
__declspec(implementation_key(191)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(192)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(193)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(194)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(195)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(196)) enum Office::MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(197)) void PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType );
__declspec(implementation_key(198)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(199)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(200)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(201)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(202)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(203)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(204)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(205)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(206)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(207)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(208)) Office::MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(209)) void PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor );
__declspec(implementation_key(210)) enum Office::MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(211)) void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground );
__declspec(implementation_key(212)) IDispatchPtr FillFormat::GetApplication ( );
__declspec(implementation_key(213)) long FillFormat::GetCreator ( );
__declspec(implementation_key(214)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(215)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(216)) HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(217)) HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(218)) HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(219)) HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(220)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(221)) HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant );
__declspec(implementation_key(222)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(223)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(224)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(225)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(226)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(227)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(228)) enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(229)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(230)) enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(231)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(232)) enum Office::MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(233)) enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(234)) enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(235)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(236)) enum Office::MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(237)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(238)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(239)) enum Office::MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(240)) enum Office::MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(241)) void FillFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(242)) IDispatchPtr LineFormat::GetApplication ( );
__declspec(implementation_key(243)) long LineFormat::GetCreator ( );
__declspec(implementation_key(244)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(245)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(246)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(247)) enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(248)) void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(249)) enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(250)) void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(251)) enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(252)) void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(253)) enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(254)) void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle );
__declspec(implementation_key(255)) enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(256)) void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(257)) enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(258)) void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(259)) enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(260)) void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(261)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(262)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(263)) enum Office::MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(264)) void LineFormat::PutPattern ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(265)) enum Office::MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(266)) void LineFormat::PutStyle ( enum Office::MsoLineStyle Style );
__declspec(implementation_key(267)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(268)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(269)) enum Office::MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(270)) void LineFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(271)) float LineFormat::GetWeight ( );
__declspec(implementation_key(272)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(273)) IDispatchPtr ShadowFormat::GetApplication ( );
__declspec(implementation_key(274)) long ShadowFormat::GetCreator ( );
__declspec(implementation_key(275)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(276)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(277)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(278)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(279)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(280)) enum Office::MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(281)) void ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured );
__declspec(implementation_key(282)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(283)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(284)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(285)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(286)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(287)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(288)) enum Office::MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(289)) void ShadowFormat::PutType ( enum Office::MsoShadowType Type );
__declspec(implementation_key(290)) enum Office::MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(291)) void ShadowFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(292)) IDispatchPtr TextEffectFormat::GetApplication ( );
__declspec(implementation_key(293)) long TextEffectFormat::GetCreator ( );
__declspec(implementation_key(294)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(295)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(296)) enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(297)) void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment );
__declspec(implementation_key(298)) enum Office::MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(299)) void TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold );
__declspec(implementation_key(300)) enum Office::MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(301)) void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic );
__declspec(implementation_key(302)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(303)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(304)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(305)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(306)) enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(307)) void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs );
__declspec(implementation_key(308)) enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(309)) void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight );
__declspec(implementation_key(310)) enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(311)) void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(312)) enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(313)) void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset );
__declspec(implementation_key(314)) enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(315)) void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars );
__declspec(implementation_key(316)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(317)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(318)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(319)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(320)) IDispatchPtr ThreeDFormat::GetApplication ( );
__declspec(implementation_key(321)) long ThreeDFormat::GetCreator ( );
__declspec(implementation_key(322)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(323)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(324)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(325)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(326)) HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(327)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(328)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(329)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(330)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(331)) enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(332)) void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(333)) enum Office::MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(334)) void ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective );
__declspec(implementation_key(335)) enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(336)) enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(337)) void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(338)) enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(339)) void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(340)) enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(341)) void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(342)) enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(343)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(344)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(345)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(346)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(347)) enum Office::MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(348)) void ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(349)) IDispatchPtr CalloutFormat::GetApplication ( );
__declspec(implementation_key(350)) long CalloutFormat::GetCreator ( );
__declspec(implementation_key(351)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(352)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(353)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(354)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(355)) HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType );
__declspec(implementation_key(356)) enum Office::MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(357)) void CalloutFormat::PutAccent ( enum Office::MsoTriState Accent );
__declspec(implementation_key(358)) enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(359)) void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle );
__declspec(implementation_key(360)) enum Office::MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(361)) void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach );
__declspec(implementation_key(362)) enum Office::MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(363)) enum Office::MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(364)) void CalloutFormat::PutBorder ( enum Office::MsoTriState Border );
__declspec(implementation_key(365)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(366)) enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(367)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(368)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(369)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(370)) enum Office::MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(371)) void CalloutFormat::PutType ( enum Office::MsoCalloutType Type );
__declspec(implementation_key(372)) IDispatchPtr ShapeNode::GetApplication ( );
__declspec(implementation_key(373)) long ShapeNode::GetCreator ( );
__declspec(implementation_key(374)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(375)) enum Office::MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(376)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(377)) enum Office::MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(378)) IDispatchPtr ShapeNodes::GetApplication ( );
__declspec(implementation_key(379)) long ShapeNodes::GetCreator ( );
__declspec(implementation_key(380)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(381)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(382)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & index );
__declspec(implementation_key(383)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(384)) HRESULT ShapeNodes::Delete ( int index );
__declspec(implementation_key(385)) HRESULT ShapeNodes::Insert ( int index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(386)) HRESULT ShapeNodes::SetEditingType ( int index, enum Office::MsoEditingType EditingType );
__declspec(implementation_key(387)) HRESULT ShapeNodes::SetPosition ( int index, float X1, float Y1 );
__declspec(implementation_key(388)) HRESULT ShapeNodes::SetSegmentType ( int index, enum Office::MsoSegmentType SegmentType );
__declspec(implementation_key(389)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(390)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(391)) _bstr_t LinkFormat::GetSourceFullName ( );
__declspec(implementation_key(392)) void LinkFormat::PutSourceFullName ( _bstr_t SourceFullName );
__declspec(implementation_key(393)) enum PpUpdateOption LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(394)) void LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate );
__declspec(implementation_key(395)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(396)) _ApplicationPtr ObjectVerbs::GetApplication ( );
__declspec(implementation_key(397)) IDispatchPtr ObjectVerbs::GetParent ( );
__declspec(implementation_key(398)) _bstr_t ObjectVerbs::Item ( int index );
__declspec(implementation_key(399)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(400)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(401)) ObjectVerbsPtr OLEFormat::GetObjectVerbs ( );
__declspec(implementation_key(402)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(403)) _bstr_t OLEFormat::GetProgID ( );
__declspec(implementation_key(404)) enum PpFollowColors OLEFormat::GetFollowColors ( );
__declspec(implementation_key(405)) void OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors );
__declspec(implementation_key(406)) HRESULT OLEFormat::DoVerb ( int index );
__declspec(implementation_key(407)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(408)) _ApplicationPtr ActionSetting::GetApplication ( );
__declspec(implementation_key(409)) IDispatchPtr ActionSetting::GetParent ( );
__declspec(implementation_key(410)) enum PpActionType ActionSetting::GetAction ( );
__declspec(implementation_key(411)) void ActionSetting::PutAction ( enum PpActionType Action );
__declspec(implementation_key(412)) _bstr_t ActionSetting::GetActionVerb ( );
__declspec(implementation_key(413)) void ActionSetting::PutActionVerb ( _bstr_t ActionVerb );
__declspec(implementation_key(414)) enum Office::MsoTriState ActionSetting::GetAnimateAction ( );
__declspec(implementation_key(415)) void ActionSetting::PutAnimateAction ( enum Office::MsoTriState AnimateAction );
__declspec(implementation_key(416)) _bstr_t ActionSetting::GetRun ( );
__declspec(implementation_key(417)) void ActionSetting::PutRun ( _bstr_t Run );
__declspec(implementation_key(418)) _bstr_t ActionSetting::GetSlideShowName ( );
__declspec(implementation_key(419)) void ActionSetting::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(420)) HyperlinkPtr ActionSetting::GetHyperlink ( );
__declspec(implementation_key(421)) SoundEffectPtr ActionSetting::GetSoundEffect ( );
__declspec(implementation_key(422)) enum Office::MsoTriState ActionSetting::GetShowandReturn ( );
__declspec(implementation_key(423)) void ActionSetting::PutShowandReturn ( enum Office::MsoTriState ShowandReturn );
__declspec(implementation_key(424)) _ApplicationPtr ActionSettings::GetApplication ( );
__declspec(implementation_key(425)) IDispatchPtr ActionSettings::GetParent ( );
__declspec(implementation_key(426)) ActionSettingPtr ActionSettings::Item ( enum PpMouseActivation index );
__declspec(implementation_key(427)) _ApplicationPtr PlaySettings::GetApplication ( );
__declspec(implementation_key(428)) IDispatchPtr PlaySettings::GetParent ( );
__declspec(implementation_key(429)) _bstr_t PlaySettings::GetActionVerb ( );
__declspec(implementation_key(430)) void PlaySettings::PutActionVerb ( _bstr_t ActionVerb );
__declspec(implementation_key(431)) enum Office::MsoTriState PlaySettings::GetHideWhileNotPlaying ( );
__declspec(implementation_key(432)) void PlaySettings::PutHideWhileNotPlaying ( enum Office::MsoTriState HideWhileNotPlaying );
__declspec(implementation_key(433)) enum Office::MsoTriState PlaySettings::GetLoopUntilStopped ( );
__declspec(implementation_key(434)) void PlaySettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped );
__declspec(implementation_key(435)) enum Office::MsoTriState PlaySettings::GetPlayOnEntry ( );
__declspec(implementation_key(436)) void PlaySettings::PutPlayOnEntry ( enum Office::MsoTriState PlayOnEntry );
__declspec(implementation_key(437)) enum Office::MsoTriState PlaySettings::GetRewindMovie ( );
__declspec(implementation_key(438)) void PlaySettings::PutRewindMovie ( enum Office::MsoTriState RewindMovie );
__declspec(implementation_key(439)) enum Office::MsoTriState PlaySettings::GetPauseAnimation ( );
__declspec(implementation_key(440)) void PlaySettings::PutPauseAnimation ( enum Office::MsoTriState PauseAnimation );
__declspec(implementation_key(441)) int PlaySettings::GetStopAfterSlides ( );
__declspec(implementation_key(442)) void PlaySettings::PutStopAfterSlides ( int StopAfterSlides );
__declspec(implementation_key(443)) _ApplicationPtr AnimationSettings::GetApplication ( );
__declspec(implementation_key(444)) IDispatchPtr AnimationSettings::GetParent ( );
__declspec(implementation_key(445)) ColorFormatPtr AnimationSettings::GetDimColor ( );
__declspec(implementation_key(446)) SoundEffectPtr AnimationSettings::GetSoundEffect ( );
__declspec(implementation_key(447)) enum PpEntryEffect AnimationSettings::GetEntryEffect ( );
__declspec(implementation_key(448)) void AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect );
__declspec(implementation_key(449)) enum PpAfterEffect AnimationSettings::GetAfterEffect ( );
__declspec(implementation_key(450)) void AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect );
__declspec(implementation_key(451)) int AnimationSettings::GetAnimationOrder ( );
__declspec(implementation_key(452)) void AnimationSettings::PutAnimationOrder ( int AnimationOrder );
__declspec(implementation_key(453)) enum PpAdvanceMode AnimationSettings::GetAdvanceMode ( );
__declspec(implementation_key(454)) void AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode );
__declspec(implementation_key(455)) float AnimationSettings::GetAdvanceTime ( );
__declspec(implementation_key(456)) void AnimationSettings::PutAdvanceTime ( float AdvanceTime );
__declspec(implementation_key(457)) PlaySettingsPtr AnimationSettings::GetPlaySettings ( );
__declspec(implementation_key(458)) enum PpTextLevelEffect AnimationSettings::GetTextLevelEffect ( );
__declspec(implementation_key(459)) void AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect );
__declspec(implementation_key(460)) enum PpTextUnitEffect AnimationSettings::GetTextUnitEffect ( );
__declspec(implementation_key(461)) void AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect );
__declspec(implementation_key(462)) enum Office::MsoTriState AnimationSettings::GetAnimate ( );
__declspec(implementation_key(463)) void AnimationSettings::PutAnimate ( enum Office::MsoTriState Animate );
__declspec(implementation_key(464)) enum Office::MsoTriState AnimationSettings::GetAnimateBackground ( );
__declspec(implementation_key(465)) void AnimationSettings::PutAnimateBackground ( enum Office::MsoTriState AnimateBackground );
__declspec(implementation_key(466)) enum Office::MsoTriState AnimationSettings::GetAnimateTextInReverse ( );
__declspec(implementation_key(467)) void AnimationSettings::PutAnimateTextInReverse ( enum Office::MsoTriState AnimateTextInReverse );
__declspec(implementation_key(468)) enum PpChartUnitEffect AnimationSettings::GetChartUnitEffect ( );
__declspec(implementation_key(469)) void AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect );
__declspec(implementation_key(470)) _ApplicationPtr RulerLevel::GetApplication ( );
__declspec(implementation_key(471)) IDispatchPtr RulerLevel::GetParent ( );
__declspec(implementation_key(472)) float RulerLevel::GetFirstMargin ( );
__declspec(implementation_key(473)) void RulerLevel::PutFirstMargin ( float FirstMargin );
__declspec(implementation_key(474)) float RulerLevel::GetLeftMargin ( );
__declspec(implementation_key(475)) void RulerLevel::PutLeftMargin ( float LeftMargin );
__declspec(implementation_key(476)) _ApplicationPtr RulerLevels::GetApplication ( );
__declspec(implementation_key(477)) IDispatchPtr RulerLevels::GetParent ( );
__declspec(implementation_key(478)) RulerLevelPtr RulerLevels::Item ( int index );
__declspec(implementation_key(479)) _ApplicationPtr TabStop::GetApplication ( );
__declspec(implementation_key(480)) IDispatchPtr TabStop::GetParent ( );
__declspec(implementation_key(481)) enum PpTabStopType TabStop::GetType ( );
__declspec(implementation_key(482)) void TabStop::PutType ( enum PpTabStopType Type );
__declspec(implementation_key(483)) float TabStop::GetPosition ( );
__declspec(implementation_key(484)) void TabStop::PutPosition ( float Position );
__declspec(implementation_key(485)) HRESULT TabStop::Clear ( );
__declspec(implementation_key(486)) _ApplicationPtr TabStops::GetApplication ( );
__declspec(implementation_key(487)) IDispatchPtr TabStops::GetParent ( );
__declspec(implementation_key(488)) TabStopPtr TabStops::Item ( int index );
__declspec(implementation_key(489)) float TabStops::GetDefaultSpacing ( );
__declspec(implementation_key(490)) void TabStops::PutDefaultSpacing ( float DefaultSpacing );
__declspec(implementation_key(491)) TabStopPtr TabStops::Add ( enum PpTabStopType Type, float Position );
__declspec(implementation_key(492)) _ApplicationPtr Ruler::GetApplication ( );
__declspec(implementation_key(493)) IDispatchPtr Ruler::GetParent ( );
__declspec(implementation_key(494)) TabStopsPtr Ruler::GetTabStops ( );
__declspec(implementation_key(495)) RulerLevelsPtr Ruler::GetLevels ( );
__declspec(implementation_key(496)) _ApplicationPtr Font::GetApplication ( );
__declspec(implementation_key(497)) IDispatchPtr Font::GetParent ( );
__declspec(implementation_key(498)) ColorFormatPtr Font::GetColor ( );
__declspec(implementation_key(499)) enum Office::MsoTriState Font::GetBold ( );
__declspec(implementation_key(500)) void Font::PutBold ( enum Office::MsoTriState Bold );
__declspec(implementation_key(501)) enum Office::MsoTriState Font::GetItalic ( );
__declspec(implementation_key(502)) void Font::PutItalic ( enum Office::MsoTriState Italic );
__declspec(implementation_key(503)) enum Office::MsoTriState Font::GetShadow ( );
__declspec(implementation_key(504)) void Font::PutShadow ( enum Office::MsoTriState Shadow );
__declspec(implementation_key(505)) enum Office::MsoTriState Font::GetEmboss ( );
__declspec(implementation_key(506)) void Font::PutEmboss ( enum Office::MsoTriState Emboss );
__declspec(implementation_key(507)) enum Office::MsoTriState Font::GetUnderline ( );
__declspec(implementation_key(508)) void Font::PutUnderline ( enum Office::MsoTriState Underline );
__declspec(implementation_key(509)) enum Office::MsoTriState Font::GetSubscript ( );
__declspec(implementation_key(510)) void Font::PutSubscript ( enum Office::MsoTriState Subscript );
__declspec(implementation_key(511)) enum Office::MsoTriState Font::GetSuperscript ( );
__declspec(implementation_key(512)) void Font::PutSuperscript ( enum Office::MsoTriState Superscript );
__declspec(implementation_key(513)) float Font::GetBaselineOffset ( );
__declspec(implementation_key(514)) void Font::PutBaselineOffset ( float BaselineOffset );
__declspec(implementation_key(515)) enum Office::MsoTriState Font::GetEmbedded ( );
__declspec(implementation_key(516)) enum Office::MsoTriState Font::GetEmbeddable ( );
__declspec(implementation_key(517)) float Font::GetSize ( );
__declspec(implementation_key(518)) void Font::PutSize ( float Size );
__declspec(implementation_key(519)) _bstr_t Font::GetName ( );
__declspec(implementation_key(520)) void Font::PutName ( _bstr_t Name );
__declspec(implementation_key(521)) _bstr_t Font::GetNameFarEast ( );
__declspec(implementation_key(522)) void Font::PutNameFarEast ( _bstr_t NameFarEast );
__declspec(implementation_key(523)) _bstr_t Font::GetNameAscii ( );
__declspec(implementation_key(524)) void Font::PutNameAscii ( _bstr_t NameAscii );
__declspec(implementation_key(525)) enum Office::MsoTriState Font::GetAutoRotateNumbers ( );
__declspec(implementation_key(526)) void Font::PutAutoRotateNumbers ( enum Office::MsoTriState AutoRotateNumbers );
__declspec(implementation_key(527)) _bstr_t Font::GetNameOther ( );
__declspec(implementation_key(528)) void Font::PutNameOther ( _bstr_t NameOther );
__declspec(implementation_key(529)) _bstr_t Font::GetNameComplexScript ( );
__declspec(implementation_key(530)) void Font::PutNameComplexScript ( _bstr_t NameComplexScript );
__declspec(implementation_key(531)) _ApplicationPtr Fonts::GetApplication ( );
__declspec(implementation_key(532)) IDispatchPtr Fonts::GetParent ( );
__declspec(implementation_key(533)) FontPtr Fonts::Item ( const _variant_t & index );
__declspec(implementation_key(534)) HRESULT Fonts::Replace ( _bstr_t Original, _bstr_t Replacement );
__declspec(implementation_key(535)) _ApplicationPtr HeaderFooter::GetApplication ( );
__declspec(implementation_key(536)) IDispatchPtr HeaderFooter::GetParent ( );
__declspec(implementation_key(537)) enum Office::MsoTriState HeaderFooter::GetVisible ( );
__declspec(implementation_key(538)) void HeaderFooter::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(539)) _bstr_t HeaderFooter::GetText ( );
__declspec(implementation_key(540)) void HeaderFooter::PutText ( _bstr_t Text );
__declspec(implementation_key(541)) enum Office::MsoTriState HeaderFooter::GetUseFormat ( );
__declspec(implementation_key(542)) void HeaderFooter::PutUseFormat ( enum Office::MsoTriState UseFormat );
__declspec(implementation_key(543)) enum PpDateTimeFormat HeaderFooter::GetFormat ( );
__declspec(implementation_key(544)) void HeaderFooter::PutFormat ( enum PpDateTimeFormat Format );
__declspec(implementation_key(545)) _ApplicationPtr HeadersFooters::GetApplication ( );
__declspec(implementation_key(546)) IDispatchPtr HeadersFooters::GetParent ( );
__declspec(implementation_key(547)) HeaderFooterPtr HeadersFooters::GetDateAndTime ( );
__declspec(implementation_key(548)) HeaderFooterPtr HeadersFooters::GetSlideNumber ( );
__declspec(implementation_key(549)) HeaderFooterPtr HeadersFooters::GetHeader ( );
__declspec(implementation_key(550)) HeaderFooterPtr HeadersFooters::GetFooter ( );
__declspec(implementation_key(551)) enum Office::MsoTriState HeadersFooters::GetDisplayOnTitleSlide ( );
__declspec(implementation_key(552)) void HeadersFooters::PutDisplayOnTitleSlide ( enum Office::MsoTriState DisplayOnTitleSlide );
__declspec(implementation_key(553)) HRESULT HeadersFooters::Clear ( );
__declspec(implementation_key(554)) _ApplicationPtr PPAlert::GetApplication ( );
__declspec(implementation_key(555)) IDispatchPtr PPAlert::GetParent ( );
__declspec(implementation_key(556)) HRESULT PPAlert::Run ( _bstr_t Title, int Type, _bstr_t Text, _bstr_t leftBtn, _bstr_t middleBtn, _bstr_t rightBtn );
__declspec(implementation_key(557)) int PPAlert::GetPressedButton ( );
__declspec(implementation_key(558)) _bstr_t PPAlert::GetOnButton ( );
__declspec(implementation_key(559)) void PPAlert::PutOnButton ( _bstr_t OnButton );
__declspec(implementation_key(560)) _bstr_t PPStrings::Item ( int index );
__declspec(implementation_key(561)) _bstr_t PPStrings::Add ( _bstr_t String );
__declspec(implementation_key(562)) HRESULT PPStrings::Insert ( _bstr_t String, int Position );
__declspec(implementation_key(563)) HRESULT PPStrings::Delete ( int index );
__declspec(implementation_key(564)) _ApplicationPtr Tags::GetApplication ( );
__declspec(implementation_key(565)) IDispatchPtr Tags::GetParent ( );
__declspec(implementation_key(566)) _bstr_t Tags::Item ( _bstr_t Name );
__declspec(implementation_key(567)) HRESULT Tags::Add ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(568)) HRESULT Tags::Delete ( _bstr_t Name );
__declspec(implementation_key(569)) HRESULT Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath );
__declspec(implementation_key(570)) long Tags::BinaryValue ( _bstr_t Name );
__declspec(implementation_key(571)) _bstr_t Tags::Name ( int index );
__declspec(implementation_key(572)) _bstr_t Tags::Value ( int index );
__declspec(implementation_key(573)) _ApplicationPtr PPControl::GetApplication ( );
__declspec(implementation_key(574)) IDispatchPtr PPControl::GetParent ( );
__declspec(implementation_key(575)) enum Office::MsoTriState PPControl::GetEnable ( );
__declspec(implementation_key(576)) void PPControl::PutEnable ( enum Office::MsoTriState Enable );
__declspec(implementation_key(577)) enum Office::MsoTriState PPControl::GetVisible ( );
__declspec(implementation_key(578)) void PPControl::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(579)) enum Office::MsoTriState PPControl::GetFocus ( );
__declspec(implementation_key(580)) void PPControl::PutFocus ( enum Office::MsoTriState Focus );
__declspec(implementation_key(581)) _bstr_t PPControl::GetLabel ( );
__declspec(implementation_key(582)) void PPControl::PutLabel ( _bstr_t Label );
__declspec(implementation_key(583)) int PPControl::GetHelpId ( );
__declspec(implementation_key(584)) void PPControl::PutHelpId ( int HelpId );
__declspec(implementation_key(585)) float PPControl::GetLeft ( );
__declspec(implementation_key(586)) void PPControl::PutLeft ( float Left );
__declspec(implementation_key(587)) float PPControl::GetTop ( );
__declspec(implementation_key(588)) void PPControl::PutTop ( float Top );
__declspec(implementation_key(589)) float PPControl::GetWidth ( );
__declspec(implementation_key(590)) void PPControl::PutWidth ( float Width );
__declspec(implementation_key(591)) float PPControl::GetHeight ( );
__declspec(implementation_key(592)) void PPControl::PutHeight ( float Height );
__declspec(implementation_key(593)) long PPControl::GetHWND ( );
__declspec(implementation_key(594)) _bstr_t PPControl::GetOnSetFocus ( );
__declspec(implementation_key(595)) void PPControl::PutOnSetFocus ( _bstr_t OnSetFocus );
__declspec(implementation_key(596)) _bstr_t PPControl::GetOnKillFocus ( );
__declspec(implementation_key(597)) void PPControl::PutOnKillFocus ( _bstr_t OnKillFocus );
__declspec(implementation_key(598)) TagsPtr PPControl::GetTags ( );
__declspec(implementation_key(599)) _bstr_t PPControl::GetName ( );
__declspec(implementation_key(600)) void PPControl::PutName ( _bstr_t Name );
__declspec(implementation_key(601)) HRESULT PPPushButton::Click ( );
__declspec(implementation_key(602)) enum Office::MsoTriState PPPushButton::GetIsDefault ( );
__declspec(implementation_key(603)) void PPPushButton::PutIsDefault ( enum Office::MsoTriState IsDefault );
__declspec(implementation_key(604)) enum Office::MsoTriState PPPushButton::GetIsEscape ( );
__declspec(implementation_key(605)) void PPPushButton::PutIsEscape ( enum Office::MsoTriState IsEscape );
__declspec(implementation_key(606)) _bstr_t PPPushButton::GetOnPressed ( );
__declspec(implementation_key(607)) void PPPushButton::PutOnPressed ( _bstr_t OnPressed );
__declspec(implementation_key(608)) enum Office::MsoTriState PPToggleButton::GetState ( );
__declspec(implementation_key(609)) void PPToggleButton::PutState ( enum Office::MsoTriState State );
__declspec(implementation_key(610)) int PPToggleButton::GetResourceID ( );
__declspec(implementation_key(611)) void PPToggleButton::PutResourceID ( int ResourceID );
__declspec(implementation_key(612)) HRESULT PPToggleButton::Click ( );
__declspec(implementation_key(613)) _bstr_t PPToggleButton::GetOnClick ( );
__declspec(implementation_key(614)) void PPToggleButton::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(615)) HRESULT PPBitmapButton::Click ( );
__declspec(implementation_key(616)) int PPBitmapButton::GetResourceID ( );
__declspec(implementation_key(617)) void PPBitmapButton::PutResourceID ( int ResourceID );
__declspec(implementation_key(618)) _bstr_t PPBitmapButton::GetOnPressed ( );
__declspec(implementation_key(619)) void PPBitmapButton::PutOnPressed ( _bstr_t OnPressed );
__declspec(implementation_key(620)) enum Office::MsoTriState PPBitmapButton::GetIsDefault ( );
__declspec(implementation_key(621)) void PPBitmapButton::PutIsDefault ( enum Office::MsoTriState IsDefault );
__declspec(implementation_key(622)) enum Office::MsoTriState PPBitmapButton::GetIsEscape ( );
__declspec(implementation_key(623)) void PPBitmapButton::PutIsEscape ( enum Office::MsoTriState IsEscape );
__declspec(implementation_key(624)) PPStringsPtr PPListBox::GetStrings ( );
__declspec(implementation_key(625)) enum PpListBoxSelectionStyle PPListBox::GetSelectionStyle ( );
__declspec(implementation_key(626)) void PPListBox::PutSelectionStyle ( enum PpListBoxSelectionStyle SelectionStyle );
__declspec(implementation_key(627)) HRESULT PPListBox::SetTabStops ( const _variant_t & safeArrayTabStops );
__declspec(implementation_key(628)) int PPListBox::GetFocusItem ( );
__declspec(implementation_key(629)) void PPListBox::PutFocusItem ( int FocusItem );
__declspec(implementation_key(630)) int PPListBox::GetTopItem ( );
__declspec(implementation_key(631)) _bstr_t PPListBox::GetOnSelectionChange ( );
__declspec(implementation_key(632)) void PPListBox::PutOnSelectionChange ( _bstr_t OnSelectionChange );
__declspec(implementation_key(633)) _bstr_t PPListBox::GetOnDoubleClick ( );
__declspec(implementation_key(634)) void PPListBox::PutOnDoubleClick ( _bstr_t OnDoubleClick );
__declspec(implementation_key(635)) enum Office::MsoTriState PPListBox::GetIsSelected ( int index );
__declspec(implementation_key(636)) void PPListBox::PutIsSelected ( int index, enum Office::MsoTriState IsSelected );
__declspec(implementation_key(637)) HRESULT PPListBox::Abbreviate ( enum PpListBoxAbbreviationStyle Style );
__declspec(implementation_key(638)) enum PpListBoxAbbreviationStyle PPListBox::GetIsAbbreviated ( );
__declspec(implementation_key(639)) enum Office::MsoTriState PPCheckBox::GetState ( );
__declspec(implementation_key(640)) void PPCheckBox::PutState ( enum Office::MsoTriState State );
__declspec(implementation_key(641)) HRESULT PPCheckBox::Click ( );
__declspec(implementation_key(642)) _bstr_t PPCheckBox::GetOnClick ( );
__declspec(implementation_key(643)) void PPCheckBox::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(644)) enum Office::MsoTriState PPStaticText::GetUseForegroundColor ( );
__declspec(implementation_key(645)) void PPStaticText::PutUseForegroundColor ( enum Office::MsoTriState UseForegroundColor );
__declspec(implementation_key(646)) enum Office::MsoTriState PPStaticText::GetUseBackgroundColor ( );
__declspec(implementation_key(647)) void PPStaticText::PutUseBackgroundColor ( enum Office::MsoTriState UseBackgroundColor );
__declspec(implementation_key(648)) Office::MsoRGBType PPStaticText::GetForegroundColor ( );
__declspec(implementation_key(649)) void PPStaticText::PutForegroundColor ( Office::MsoRGBType ForegroundColor );
__declspec(implementation_key(650)) Office::MsoRGBType PPStaticText::GetBackgroundColor ( );
__declspec(implementation_key(651)) void PPStaticText::PutBackgroundColor ( Office::MsoRGBType BackgroundColor );
__declspec(implementation_key(652)) enum Office::MsoTriState PPEditText::GetMultiLine ( );
__declspec(implementation_key(653)) void PPEditText::PutMultiLine ( enum Office::MsoTriState MultiLine );
__declspec(implementation_key(654)) enum Office::MsoTriState PPEditText::GetVerticalScrollBar ( );
__declspec(implementation_key(655)) void PPEditText::PutVerticalScrollBar ( enum Office::MsoTriState VerticalScrollBar );
__declspec(implementation_key(656)) enum Office::MsoTriState PPEditText::GetWordWrap ( );
__declspec(implementation_key(657)) void PPEditText::PutWordWrap ( enum Office::MsoTriState WordWrap );
__declspec(implementation_key(658)) enum Office::MsoTriState PPEditText::GetReadOnly ( );
__declspec(implementation_key(659)) void PPEditText::PutReadOnly ( enum Office::MsoTriState ReadOnly );
__declspec(implementation_key(660)) _bstr_t PPEditText::GetText ( );
__declspec(implementation_key(661)) void PPEditText::PutText ( _bstr_t Text );
__declspec(implementation_key(662)) int PPEditText::GetMaxLength ( );
__declspec(implementation_key(663)) void PPEditText::PutMaxLength ( int MaxLength );
__declspec(implementation_key(664)) _bstr_t PPEditText::GetOnAChange ( );
__declspec(implementation_key(665)) void PPEditText::PutOnAChange ( _bstr_t OnAChange );
__declspec(implementation_key(666)) int PPIcon::GetResourceID ( );
__declspec(implementation_key(667)) void PPIcon::PutResourceID ( int ResourceID );
__declspec(implementation_key(668)) int PPBitmap::GetResourceID ( );
__declspec(implementation_key(669)) void PPBitmap::PutResourceID ( int ResourceID );
__declspec(implementation_key(670)) _bstr_t PPBitmap::GetOnClick ( );
__declspec(implementation_key(671)) void PPBitmap::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(672)) int PPSpinner::GetMinimum ( );
__declspec(implementation_key(673)) void PPSpinner::PutMinimum ( int Minimum );
__declspec(implementation_key(674)) int PPSpinner::GetMaximum ( );
__declspec(implementation_key(675)) void PPSpinner::PutMaximum ( int Maximum );
__declspec(implementation_key(676)) int PPSpinner::GetIncrement ( );
__declspec(implementation_key(677)) void PPSpinner::PutIncrement ( int Increment );
__declspec(implementation_key(678)) int PPSpinner::GetPageChange ( );
__declspec(implementation_key(679)) void PPSpinner::PutPageChange ( int PageChange );
__declspec(implementation_key(680)) int PPSpinner::GetCurrentValue ( );
__declspec(implementation_key(681)) void PPSpinner::PutCurrentValue ( int CurrentValue );
__declspec(implementation_key(682)) _bstr_t PPSpinner::GetOnAChange ( );
__declspec(implementation_key(683)) void PPSpinner::PutOnAChange ( _bstr_t OnAChange );
__declspec(implementation_key(684)) int PPScrollBar::GetMinimum ( );
__declspec(implementation_key(685)) void PPScrollBar::PutMinimum ( int Minimum );
__declspec(implementation_key(686)) int PPScrollBar::GetMaximum ( );
__declspec(implementation_key(687)) void PPScrollBar::PutMaximum ( int Maximum );
__declspec(implementation_key(688)) int PPScrollBar::GetIncrement ( );
__declspec(implementation_key(689)) void PPScrollBar::PutIncrement ( int Increment );
__declspec(implementation_key(690)) int PPScrollBar::GetPageChange ( );
__declspec(implementation_key(691)) void PPScrollBar::PutPageChange ( int PageChange );
__declspec(implementation_key(692)) int PPScrollBar::GetCurrentValue ( );
__declspec(implementation_key(693)) void PPScrollBar::PutCurrentValue ( int CurrentValue );
__declspec(implementation_key(694)) _bstr_t PPScrollBar::GetOnScroll ( );
__declspec(implementation_key(695)) void PPScrollBar::PutOnScroll ( _bstr_t OnScroll );
__declspec(implementation_key(696)) PPStringsPtr PPDropDown::GetStrings ( );
__declspec(implementation_key(697)) int PPDropDown::GetFocusItem ( );
__declspec(implementation_key(698)) void PPDropDown::PutFocusItem ( int FocusItem );
__declspec(implementation_key(699)) _bstr_t PPDropDown::GetOnSelectionChange ( );
__declspec(implementation_key(700)) void PPDropDown::PutOnSelectionChange ( _bstr_t OnSelectionChange );
__declspec(implementation_key(701)) PPStringsPtr PPDropDownEdit::GetStrings ( );
__declspec(implementation_key(702)) int PPDropDownEdit::GetFocusItem ( );
__declspec(implementation_key(703)) void PPDropDownEdit::PutFocusItem ( int FocusItem );
__declspec(implementation_key(704)) _bstr_t PPDropDownEdit::GetOnSelectionChange ( );
__declspec(implementation_key(705)) void PPDropDownEdit::PutOnSelectionChange ( _bstr_t OnSelectionChange );
__declspec(implementation_key(706)) _bstr_t PPDropDownEdit::GetOnEdit ( );
__declspec(implementation_key(707)) void PPDropDownEdit::PutOnEdit ( _bstr_t OnEdit );
__declspec(implementation_key(708)) HRESULT PPSlideMiniature::SetImage ( struct _Slide * Slide );
__declspec(implementation_key(709)) int PPSlideMiniature::GetSelected ( );
__declspec(implementation_key(710)) void PPSlideMiniature::PutSelected ( int Selected );
__declspec(implementation_key(711)) _bstr_t PPSlideMiniature::GetOnClick ( );
__declspec(implementation_key(712)) void PPSlideMiniature::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(713)) _bstr_t PPSlideMiniature::GetOnDoubleClick ( );
__declspec(implementation_key(714)) void PPSlideMiniature::PutOnDoubleClick ( _bstr_t OnDoubleClick );
__declspec(implementation_key(715)) enum Office::MsoTriState PPRadioButton::GetState ( );
__declspec(implementation_key(716)) void PPRadioButton::PutState ( enum Office::MsoTriState State );
__declspec(implementation_key(717)) HRESULT PPRadioButton::Click ( );
__declspec(implementation_key(718)) HRESULT PPRadioButton::DoubleClick ( );
__declspec(implementation_key(719)) _bstr_t PPRadioButton::GetOnClick ( );
__declspec(implementation_key(720)) void PPRadioButton::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(721)) _bstr_t PPRadioButton::GetOnDoubleClick ( );
__declspec(implementation_key(722)) void PPRadioButton::PutOnDoubleClick ( _bstr_t OnDoubleClick );
__declspec(implementation_key(723)) PPRadioButtonPtr PPRadioCluster::Item ( const _variant_t & index );
__declspec(implementation_key(724)) PPRadioButtonPtr PPRadioCluster::Add ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(725)) int PPRadioCluster::GetCount ( );
__declspec(implementation_key(726)) PPRadioButtonPtr PPRadioCluster::GetSelected ( );
__declspec(implementation_key(727)) _bstr_t PPRadioCluster::GetOnClick ( );
__declspec(implementation_key(728)) void PPRadioCluster::PutOnClick ( _bstr_t OnClick );
__declspec(implementation_key(729)) _ApplicationPtr PPControls::GetApplication ( );
__declspec(implementation_key(730)) PPControlPtr PPControls::Item ( const _variant_t & index );
__declspec(implementation_key(731)) PPPushButtonPtr PPControls::AddPushButton ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(732)) PPToggleButtonPtr PPControls::AddToggleButton ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(733)) PPBitmapButtonPtr PPControls::AddBitmapButton ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(734)) PPListBoxPtr PPControls::AddListBox ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(735)) PPCheckBoxPtr PPControls::AddCheckBox ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(736)) PPRadioClusterPtr PPControls::AddRadioCluster ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(737)) PPStaticTextPtr PPControls::AddStaticText ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(738)) PPEditTextPtr PPControls::AddEditText ( float Left, float Top, float Width, float Height, const _variant_t & VerticalScrollBar );
__declspec(implementation_key(739)) PPIconPtr PPControls::AddIcon ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(740)) PPBitmapPtr PPControls::AddBitmap ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(741)) PPSpinnerPtr PPControls::AddSpinner ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(742)) PPScrollBarPtr PPControls::AddScrollBar ( enum PpScrollBarStyle Style, float Left, float Top, float Width, float Height );
__declspec(implementation_key(743)) PPGroupBoxPtr PPControls::AddGroupBox ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(744)) PPDropDownPtr PPControls::AddDropDown ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(745)) PPDropDownEditPtr PPControls::AddDropDownEdit ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(746)) PPSlideMiniaturePtr PPControls::AddMiniature ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(747)) PPFramePtr PPControls::AddFrame ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(748)) enum Office::MsoTriState PPControls::GetVisible ( );
__declspec(implementation_key(749)) void PPControls::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(750)) _ApplicationPtr PPTabSheet::GetApplication ( );
__declspec(implementation_key(751)) IDispatchPtr PPTabSheet::GetParent ( );
__declspec(implementation_key(752)) _bstr_t PPTabSheet::GetName ( );
__declspec(implementation_key(753)) void PPTabSheet::PutName ( _bstr_t Name );
__declspec(implementation_key(754)) HRESULT PPTabSheet::Select ( );
__declspec(implementation_key(755)) float PPTabSheet::GetClientLeft ( );
__declspec(implementation_key(756)) float PPTabSheet::GetClientTop ( );
__declspec(implementation_key(757)) float PPTabSheet::GetClientWidth ( );
__declspec(implementation_key(758)) float PPTabSheet::GetClientHeight ( );
__declspec(implementation_key(759)) PPControlsPtr PPTabSheet::GetControls ( );
__declspec(implementation_key(760)) TagsPtr PPTabSheet::GetTags ( );
__declspec(implementation_key(761)) _bstr_t PPTabSheet::GetOnActivate ( );
__declspec(implementation_key(762)) void PPTabSheet::PutOnActivate ( _bstr_t OnActivate );
__declspec(implementation_key(763)) PPTabSheetPtr PPTabSheets::Item ( const _variant_t & index );
__declspec(implementation_key(764)) PPTabSheetPtr PPTabSheets::Add ( _bstr_t Name );
__declspec(implementation_key(765)) PPTabSheetPtr PPTabSheets::GetActiveSheet ( );
__declspec(implementation_key(766)) _bstr_t PPTabSheets::GetName ( );
__declspec(implementation_key(767)) void PPTabSheets::PutName ( _bstr_t Name );
__declspec(implementation_key(768)) _ApplicationPtr PPDialog::GetApplication ( );
__declspec(implementation_key(769)) IDispatchPtr PPDialog::GetParent ( );
__declspec(implementation_key(770)) enum PpDialogStyle PPDialog::GetStyle ( );
__declspec(implementation_key(771)) enum PpDialogMode PPDialog::GetMode ( );
__declspec(implementation_key(772)) void PPDialog::PutMode ( enum PpDialogMode Mode );
__declspec(implementation_key(773)) int PPDialog::GetHelpId ( );
__declspec(implementation_key(774)) void PPDialog::PutHelpId ( int HelpId );
__declspec(implementation_key(775)) enum Office::MsoTriState PPDialog::GetHideOnIdle ( );
__declspec(implementation_key(776)) void PPDialog::PutHideOnIdle ( enum Office::MsoTriState HideOnIdle );
__declspec(implementation_key(777)) _bstr_t PPDialog::GetresourceDLL ( );
__declspec(implementation_key(778)) void PPDialog::PutresourceDLL ( _bstr_t resourceDLL );
__declspec(implementation_key(779)) _bstr_t PPDialog::GetCaption ( );
__declspec(implementation_key(780)) void PPDialog::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(781)) float PPDialog::GetLeft ( );
__declspec(implementation_key(782)) void PPDialog::PutLeft ( float Left );
__declspec(implementation_key(783)) float PPDialog::GetTop ( );
__declspec(implementation_key(784)) void PPDialog::PutTop ( float Top );
__declspec(implementation_key(785)) float PPDialog::GetWidth ( );
__declspec(implementation_key(786)) void PPDialog::PutWidth ( float Width );
__declspec(implementation_key(787)) float PPDialog::GetHeight ( );
__declspec(implementation_key(788)) void PPDialog::PutHeight ( float Height );
__declspec(implementation_key(789)) float PPDialog::GetClientLeft ( );
__declspec(implementation_key(790)) float PPDialog::GetClientTop ( );
__declspec(implementation_key(791)) float PPDialog::GetClientWidth ( );
__declspec(implementation_key(792)) float PPDialog::GetClientHeight ( );
__declspec(implementation_key(793)) enum Office::MsoTriState PPDialog::GetVisible ( );
__declspec(implementation_key(794)) void PPDialog::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(795)) PPControlsPtr PPDialog::GetControls ( );
__declspec(implementation_key(796)) TagsPtr PPDialog::GetTags ( );
__declspec(implementation_key(797)) _bstr_t PPDialog::GetName ( );
__declspec(implementation_key(798)) void PPDialog::PutName ( _bstr_t Name );
__declspec(implementation_key(799)) PPTabSheetsPtr PPDialog::GetSheets ( );
__declspec(implementation_key(800)) PPTabControlPtr PPDialog::GetTabControl ( );
__declspec(implementation_key(801)) int PPDialog::GetDelayTime ( );
__declspec(implementation_key(802)) void PPDialog::PutDelayTime ( int DelayTime );
__declspec(implementation_key(803)) int PPDialog::SaveDialog ( _bstr_t FileName );
__declspec(implementation_key(804)) HRESULT PPDialog::Terminate ( );
__declspec(implementation_key(805)) long PPDialog::GetHWND ( );
__declspec(implementation_key(806)) _bstr_t PPDialog::GetOnTerminate ( );
__declspec(implementation_key(807)) void PPDialog::PutOnTerminate ( _bstr_t OnTerminate );
__declspec(implementation_key(808)) _bstr_t PPDialog::GetOnIdle ( );
__declspec(implementation_key(809)) void PPDialog::PutOnIdle ( _bstr_t OnIdle );
__declspec(implementation_key(810)) _bstr_t PPDialog::GetOnMouseDown ( );
__declspec(implementation_key(811)) void PPDialog::PutOnMouseDown ( _bstr_t OnMouseDown );
__declspec(implementation_key(812)) _bstr_t PPDialog::GetOnMouseUp ( );
__declspec(implementation_key(813)) void PPDialog::PutOnMouseUp ( _bstr_t OnMouseUp );
__declspec(implementation_key(814)) _bstr_t PPDialog::GetOnKeyPressed ( );
__declspec(implementation_key(815)) void PPDialog::PutOnKeyPressed ( _bstr_t OnKeyPressed );
__declspec(implementation_key(816)) _bstr_t PPDialog::GetOnTimer ( );
__declspec(implementation_key(817)) void PPDialog::PutOnTimer ( _bstr_t OnTimer );
__declspec(implementation_key(818)) _bstr_t PPDialog::GetOnActivate ( );
__declspec(implementation_key(819)) void PPDialog::PutOnActivate ( _bstr_t OnActivate );
__declspec(implementation_key(820)) _ApplicationPtr PPDialogs::GetApplication ( );
__declspec(implementation_key(821)) PPDialogPtr PPDialogs::Item ( const _variant_t & index );
__declspec(implementation_key(822)) PPDialogPtr PPDialogs::AddDialog ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Modal, IUnknown * ParentWindow, enum PpDialogPositioning Position, enum Office::MsoTriState DisplayHelp );
__declspec(implementation_key(823)) PPDialogPtr PPDialogs::AddTabDialog ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Modal, IUnknown * ParentWindow, enum PpDialogPositioning Position, enum Office::MsoTriState DisplayHelp );
__declspec(implementation_key(824)) PPDialogPtr PPDialogs::LoadDialog ( _bstr_t resourceDLL, int nResID, enum Office::MsoTriState bModal, IUnknown * ParentWindow, enum PpDialogPositioning Position );
__declspec(implementation_key(825)) PPAlertPtr PPDialogs::AddAlert ( );
__declspec(implementation_key(826)) TagsPtr PPDialogs::GetTags ( );
__declspec(implementation_key(827)) _bstr_t PPDialogs::GetName ( );
__declspec(implementation_key(828)) void PPDialogs::PutName ( _bstr_t Name );
__declspec(implementation_key(829)) enum PpAlertButton PPDialogs::RunCharacterAlert ( _bstr_t Text, enum PpAlertType Type, enum PpAlertIcon icon, IUnknown * ParentWindow );
__declspec(implementation_key(830)) _ApplicationPtr FileDialogFileList::GetApplication ( );
__declspec(implementation_key(831)) IDispatchPtr FileDialogFileList::GetParent ( );
__declspec(implementation_key(832)) _bstr_t FileDialogFileList::Item ( int index );
__declspec(implementation_key(833)) _bstr_t FileDialogFileList::DisplayName ( int index );
__declspec(implementation_key(834)) _ApplicationPtr FileDialogExtension::GetApplication ( );
__declspec(implementation_key(835)) IDispatchPtr FileDialogExtension::GetParent ( );
__declspec(implementation_key(836)) _bstr_t FileDialogExtension::GetExtensions ( );
__declspec(implementation_key(837)) void FileDialogExtension::PutExtensions ( _bstr_t Extensions );
__declspec(implementation_key(838)) _bstr_t FileDialogExtension::GetDescription ( );
__declspec(implementation_key(839)) void FileDialogExtension::PutDescription ( _bstr_t Description );
__declspec(implementation_key(840)) _ApplicationPtr FileDialogExtensionList::GetApplication ( );
__declspec(implementation_key(841)) IDispatchPtr FileDialogExtensionList::GetParent ( );
__declspec(implementation_key(842)) FileDialogExtensionPtr FileDialogExtensionList::Item ( int index );
__declspec(implementation_key(843)) FileDialogExtensionPtr FileDialogExtensionList::Add ( _bstr_t Extension, _bstr_t Description );
__declspec(implementation_key(844)) _ApplicationPtr FileDialog::GetApplication ( );
__declspec(implementation_key(845)) IDispatchPtr FileDialog::GetParent ( );
__declspec(implementation_key(846)) FileDialogExtensionListPtr FileDialog::GetExtensions ( );
__declspec(implementation_key(847)) _bstr_t FileDialog::GetDefaultDirectoryRegKey ( );
__declspec(implementation_key(848)) void FileDialog::PutDefaultDirectoryRegKey ( _bstr_t DefaultDirectoryRegKey );
__declspec(implementation_key(849)) _bstr_t FileDialog::GetDialogTitle ( );
__declspec(implementation_key(850)) void FileDialog::PutDialogTitle ( _bstr_t DialogTitle );
__declspec(implementation_key(851)) _bstr_t FileDialog::GetActionButtonName ( );
__declspec(implementation_key(852)) void FileDialog::PutActionButtonName ( _bstr_t ActionButtonName );
__declspec(implementation_key(853)) enum Office::MsoTriState FileDialog::GetIsMultiSelect ( );
__declspec(implementation_key(854)) void FileDialog::PutIsMultiSelect ( enum Office::MsoTriState IsMultiSelect );
__declspec(implementation_key(855)) enum Office::MsoTriState FileDialog::GetIsPrintEnabled ( );
__declspec(implementation_key(856)) void FileDialog::PutIsPrintEnabled ( enum Office::MsoTriState IsPrintEnabled );
__declspec(implementation_key(857)) enum Office::MsoTriState FileDialog::GetIsReadOnlyEnabled ( );
__declspec(implementation_key(858)) void FileDialog::PutIsReadOnlyEnabled ( enum Office::MsoTriState IsReadOnlyEnabled );
__declspec(implementation_key(859)) enum Office::MsoTriState FileDialog::GetDirectoriesOnly ( );
__declspec(implementation_key(860)) void FileDialog::PutDirectoriesOnly ( enum Office::MsoTriState DirectoriesOnly );
__declspec(implementation_key(861)) enum PpFileDialogView FileDialog::GetInitialView ( );
__declspec(implementation_key(862)) void FileDialog::PutInitialView ( enum PpFileDialogView InitialView );
__declspec(implementation_key(863)) HRESULT FileDialog::Launch ( IUnknown * pUnk );
__declspec(implementation_key(864)) _bstr_t FileDialog::GetOnAction ( );
__declspec(implementation_key(865)) void FileDialog::PutOnAction ( _bstr_t OnAction );
__declspec(implementation_key(866)) FileDialogFileListPtr FileDialog::GetFiles ( );
__declspec(implementation_key(867)) enum Office::MsoTriState FileDialog::GetUseODMADlgs ( );
__declspec(implementation_key(868)) void FileDialog::PutUseODMADlgs ( enum Office::MsoTriState UseODMADlgs );
__declspec(implementation_key(869)) HRESULT MouseTracker::OnTrack ( float X, float Y );
__declspec(implementation_key(870)) HRESULT MouseTracker::EndTrack ( float X, float Y );
__declspec(implementation_key(871)) _ApplicationPtr SlideShowView::GetApplication ( );
__declspec(implementation_key(872)) IDispatchPtr SlideShowView::GetParent ( );
__declspec(implementation_key(873)) int SlideShowView::GetZoom ( );
__declspec(implementation_key(874)) _SlidePtr SlideShowView::GetSlide ( );
__declspec(implementation_key(875)) enum PpSlideShowPointerType SlideShowView::GetPointerType ( );
__declspec(implementation_key(876)) void SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType );
__declspec(implementation_key(877)) enum PpSlideShowState SlideShowView::GetState ( );
__declspec(implementation_key(878)) void SlideShowView::PutState ( enum PpSlideShowState State );
__declspec(implementation_key(879)) enum Office::MsoTriState SlideShowView::GetAcceleratorsEnabled ( );
__declspec(implementation_key(880)) void SlideShowView::PutAcceleratorsEnabled ( enum Office::MsoTriState AcceleratorsEnabled );
__declspec(implementation_key(881)) float SlideShowView::GetPresentationElapsedTime ( );
__declspec(implementation_key(882)) float SlideShowView::GetSlideElapsedTime ( );
__declspec(implementation_key(883)) void SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime );
__declspec(implementation_key(884)) _SlidePtr SlideShowView::GetLastSlideViewed ( );
__declspec(implementation_key(885)) enum PpSlideShowAdvanceMode SlideShowView::GetAdvanceMode ( );
__declspec(implementation_key(886)) ColorFormatPtr SlideShowView::GetPointerColor ( );
__declspec(implementation_key(887)) enum Office::MsoTriState SlideShowView::GetIsNamedShow ( );
__declspec(implementation_key(888)) _bstr_t SlideShowView::GetSlideShowName ( );
__declspec(implementation_key(889)) HRESULT SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(890)) HRESULT SlideShowView::EraseDrawing ( );
__declspec(implementation_key(891)) HRESULT SlideShowView::First ( );
__declspec(implementation_key(892)) HRESULT SlideShowView::Last ( );
__declspec(implementation_key(893)) HRESULT SlideShowView::Next ( );
__declspec(implementation_key(894)) HRESULT SlideShowView::Previous ( );
__declspec(implementation_key(895)) HRESULT SlideShowView::GotoSlide ( int index, enum Office::MsoTriState ResetSlide );
__declspec(implementation_key(896)) HRESULT SlideShowView::GotoNamedShow ( _bstr_t SlideShowName );
__declspec(implementation_key(897)) HRESULT SlideShowView::EndNamedShow ( );
__declspec(implementation_key(898)) HRESULT SlideShowView::ResetSlideTime ( );
__declspec(implementation_key(899)) HRESULT SlideShowView::Exit ( );
__declspec(implementation_key(900)) HRESULT SlideShowView::InstallTracker ( struct MouseTracker * pTracker, enum Office::MsoTriState Presenter );
__declspec(implementation_key(901)) int SlideShowView::GetCurrentShowPosition ( );
__declspec(implementation_key(902)) _ApplicationPtr SlideShowWindow::GetApplication ( );
__declspec(implementation_key(903)) IDispatchPtr SlideShowWindow::GetParent ( );
__declspec(implementation_key(904)) SlideShowViewPtr SlideShowWindow::GetView ( );
__declspec(implementation_key(905)) _PresentationPtr SlideShowWindow::GetPresentation ( );
__declspec(implementation_key(906)) enum Office::MsoTriState SlideShowWindow::GetIsFullScreen ( );
__declspec(implementation_key(907)) float SlideShowWindow::GetLeft ( );
__declspec(implementation_key(908)) void SlideShowWindow::PutLeft ( float Left );
__declspec(implementation_key(909)) float SlideShowWindow::GetTop ( );
__declspec(implementation_key(910)) void SlideShowWindow::PutTop ( float Top );
__declspec(implementation_key(911)) float SlideShowWindow::GetWidth ( );
__declspec(implementation_key(912)) void SlideShowWindow::PutWidth ( float Width );
__declspec(implementation_key(913)) float SlideShowWindow::GetHeight ( );
__declspec(implementation_key(914)) void SlideShowWindow::PutHeight ( float Height );
__declspec(implementation_key(915)) long SlideShowWindow::GetHWND ( );
__declspec(implementation_key(916)) enum Office::MsoTriState SlideShowWindow::GetActive ( );
__declspec(implementation_key(917)) HRESULT SlideShowWindow::Activate ( );
__declspec(implementation_key(918)) _ApplicationPtr SlideShowWindows::GetApplication ( );
__declspec(implementation_key(919)) IDispatchPtr SlideShowWindows::GetParent ( );
__declspec(implementation_key(920)) SlideShowWindowPtr SlideShowWindows::Item ( int index );
__declspec(implementation_key(921)) _ApplicationPtr SlideShowSettings::GetApplication ( );
__declspec(implementation_key(922)) IDispatchPtr SlideShowSettings::GetParent ( );
__declspec(implementation_key(923)) ColorFormatPtr SlideShowSettings::GetPointerColor ( );
__declspec(implementation_key(924)) NamedSlideShowsPtr SlideShowSettings::GetNamedSlideShows ( );
__declspec(implementation_key(925)) int SlideShowSettings::GetStartingSlide ( );
__declspec(implementation_key(926)) void SlideShowSettings::PutStartingSlide ( int StartingSlide );
__declspec(implementation_key(927)) int SlideShowSettings::GetEndingSlide ( );
__declspec(implementation_key(928)) void SlideShowSettings::PutEndingSlide ( int EndingSlide );
__declspec(implementation_key(929)) enum PpSlideShowAdvanceMode SlideShowSettings::GetAdvanceMode ( );
__declspec(implementation_key(930)) void SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode );
__declspec(implementation_key(931)) SlideShowWindowPtr SlideShowSettings::Run ( );
__declspec(implementation_key(932)) enum Office::MsoTriState SlideShowSettings::GetLoopUntilStopped ( );
__declspec(implementation_key(933)) void SlideShowSettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped );
__declspec(implementation_key(934)) enum PpSlideShowType SlideShowSettings::GetShowType ( );
__declspec(implementation_key(935)) void SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType );
__declspec(implementation_key(936)) enum Office::MsoTriState SlideShowSettings::GetShowWithNarration ( );
__declspec(implementation_key(937)) void SlideShowSettings::PutShowWithNarration ( enum Office::MsoTriState ShowWithNarration );
__declspec(implementation_key(938)) enum Office::MsoTriState SlideShowSettings::GetShowWithAnimation ( );
__declspec(implementation_key(939)) void SlideShowSettings::PutShowWithAnimation ( enum Office::MsoTriState ShowWithAnimation );
__declspec(implementation_key(940)) _bstr_t SlideShowSettings::GetSlideShowName ( );
__declspec(implementation_key(941)) void SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(942)) enum PpSlideShowRangeType SlideShowSettings::GetRangeType ( );
__declspec(implementation_key(943)) void SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType );
__declspec(implementation_key(944)) HRESULT MouseDownHandler::OnMouseDown ( IUnknown * activeWin );
__declspec(implementation_key(945)) VARIANT_BOOL OCXExtender::GetVisible ( );
__declspec(implementation_key(946)) void OCXExtender::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(947)) float OCXExtender::GetLeft ( );
__declspec(implementation_key(948)) void OCXExtender::PutLeft ( float Left );
__declspec(implementation_key(949)) float OCXExtender::GetTop ( );
__declspec(implementation_key(950)) void OCXExtender::PutTop ( float Top );
__declspec(implementation_key(951)) float OCXExtender::GetHeight ( );
__declspec(implementation_key(952)) void OCXExtender::PutHeight ( float Height );
__declspec(implementation_key(953)) float OCXExtender::GetWidth ( );
__declspec(implementation_key(954)) void OCXExtender::PutWidth ( float Width );
__declspec(implementation_key(955)) int OCXExtender::GetZOrderPosition ( );
__declspec(implementation_key(956)) _bstr_t OCXExtender::GetName ( );
__declspec(implementation_key(957)) void OCXExtender::PutName ( _bstr_t Name );
__declspec(implementation_key(958)) _bstr_t OCXExtender::GetAltHTML ( );
__declspec(implementation_key(959)) void OCXExtender::PutAltHTML ( _bstr_t AltHTML );
__declspec(implementation_key(960)) HRESULT OCXExtenderEvents::GotFocus ( );
__declspec(implementation_key(961)) HRESULT OCXExtenderEvents::LostFocus ( );
__declspec(implementation_key(962)) _ApplicationPtr BulletFormat::GetApplication ( );
__declspec(implementation_key(963)) IDispatchPtr BulletFormat::GetParent ( );
__declspec(implementation_key(964)) enum Office::MsoTriState BulletFormat::GetVisible ( );
__declspec(implementation_key(965)) void BulletFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(966)) int BulletFormat::GetCharacter ( );
__declspec(implementation_key(967)) void BulletFormat::PutCharacter ( int Character );
__declspec(implementation_key(968)) float BulletFormat::GetRelativeSize ( );
__declspec(implementation_key(969)) void BulletFormat::PutRelativeSize ( float RelativeSize );
__declspec(implementation_key(970)) enum Office::MsoTriState BulletFormat::GetUseTextColor ( );
__declspec(implementation_key(971)) void BulletFormat::PutUseTextColor ( enum Office::MsoTriState UseTextColor );
__declspec(implementation_key(972)) enum Office::MsoTriState BulletFormat::GetUseTextFont ( );
__declspec(implementation_key(973)) void BulletFormat::PutUseTextFont ( enum Office::MsoTriState UseTextFont );
__declspec(implementation_key(974)) FontPtr BulletFormat::GetFont ( );
__declspec(implementation_key(975)) enum PpBulletType BulletFormat::GetType ( );
__declspec(implementation_key(976)) void BulletFormat::PutType ( enum PpBulletType Type );
__declspec(implementation_key(977)) enum PpNumberedBulletStyle BulletFormat::GetStyle ( );
__declspec(implementation_key(978)) void BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style );
__declspec(implementation_key(979)) int BulletFormat::GetStartValue ( );
__declspec(implementation_key(980)) void BulletFormat::PutStartValue ( int StartValue );
__declspec(implementation_key(981)) HRESULT BulletFormat::Picture ( _bstr_t Picture );
__declspec(implementation_key(982)) int BulletFormat::GetNumber ( );
__declspec(implementation_key(983)) _ApplicationPtr ParagraphFormat::GetApplication ( );
__declspec(implementation_key(984)) IDispatchPtr ParagraphFormat::GetParent ( );
__declspec(implementation_key(985)) enum PpParagraphAlignment ParagraphFormat::GetAlignment ( );
__declspec(implementation_key(986)) void ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment );
__declspec(implementation_key(987)) BulletFormatPtr ParagraphFormat::GetBullet ( );
__declspec(implementation_key(988)) enum Office::MsoTriState ParagraphFormat::GetLineRuleBefore ( );
__declspec(implementation_key(989)) void ParagraphFormat::PutLineRuleBefore ( enum Office::MsoTriState LineRuleBefore );
__declspec(implementation_key(990)) enum Office::MsoTriState ParagraphFormat::GetLineRuleAfter ( );
__declspec(implementation_key(991)) void ParagraphFormat::PutLineRuleAfter ( enum Office::MsoTriState LineRuleAfter );
__declspec(implementation_key(992)) enum Office::MsoTriState ParagraphFormat::GetLineRuleWithin ( );
__declspec(implementation_key(993)) void ParagraphFormat::PutLineRuleWithin ( enum Office::MsoTriState LineRuleWithin );
__declspec(implementation_key(994)) float ParagraphFormat::GetSpaceBefore ( );
__declspec(implementation_key(995)) void ParagraphFormat::PutSpaceBefore ( float SpaceBefore );
__declspec(implementation_key(996)) float ParagraphFormat::GetSpaceAfter ( );
__declspec(implementation_key(997)) void ParagraphFormat::PutSpaceAfter ( float SpaceAfter );
__declspec(implementation_key(998)) float ParagraphFormat::GetSpaceWithin ( );
__declspec(implementation_key(999)) void ParagraphFormat::PutSpaceWithin ( float SpaceWithin );
__declspec(implementation_key(1000)) enum PpBaselineAlignment ParagraphFormat::GetBaseLineAlignment ( );
__declspec(implementation_key(1001)) void ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment );
__declspec(implementation_key(1002)) enum Office::MsoTriState ParagraphFormat::GetFarEastLineBreakControl ( );
__declspec(implementation_key(1003)) void ParagraphFormat::PutFarEastLineBreakControl ( enum Office::MsoTriState FarEastLineBreakControl );
__declspec(implementation_key(1004)) enum Office::MsoTriState ParagraphFormat::GetWordWrap ( );
__declspec(implementation_key(1005)) void ParagraphFormat::PutWordWrap ( enum Office::MsoTriState WordWrap );
__declspec(implementation_key(1006)) enum Office::MsoTriState ParagraphFormat::GetHangingPunctuation ( );
__declspec(implementation_key(1007)) void ParagraphFormat::PutHangingPunctuation ( enum Office::MsoTriState HangingPunctuation );
__declspec(implementation_key(1008)) enum PpDirection ParagraphFormat::GetTextDirection ( );
__declspec(implementation_key(1009)) void ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection );
__declspec(implementation_key(1010)) _ApplicationPtr TextRange::GetApplication ( );
__declspec(implementation_key(1011)) IDispatchPtr TextRange::GetParent ( );
__declspec(implementation_key(1012)) ActionSettingsPtr TextRange::GetActionSettings ( );
__declspec(implementation_key(1013)) long TextRange::GetStart ( );
__declspec(implementation_key(1014)) long TextRange::GetLength ( );
__declspec(implementation_key(1015)) float TextRange::GetBoundLeft ( );
__declspec(implementation_key(1016)) float TextRange::GetBoundTop ( );
__declspec(implementation_key(1017)) float TextRange::GetBoundWidth ( );
__declspec(implementation_key(1018)) float TextRange::GetBoundHeight ( );
__declspec(implementation_key(1019)) TextRangePtr TextRange::Paragraphs ( int Start, int Length );
__declspec(implementation_key(1020)) TextRangePtr TextRange::Sentences ( int Start, int Length );
__declspec(implementation_key(1021)) TextRangePtr TextRange::Words ( int Start, int Length );
__declspec(implementation_key(1022)) TextRangePtr TextRange::Characters ( int Start, int Length );
__declspec(implementation_key(1023)) TextRangePtr TextRange::Lines ( int Start, int Length );
__declspec(implementation_key(1024)) TextRangePtr TextRange::Runs ( int Start, int Length );
__declspec(implementation_key(1025)) TextRangePtr TextRange::TrimText ( );
__declspec(implementation_key(1026)) _bstr_t TextRange::GetText ( );
__declspec(implementation_key(1027)) void TextRange::PutText ( _bstr_t Text );
__declspec(implementation_key(1028)) TextRangePtr TextRange::InsertAfter ( _bstr_t NewText );
__declspec(implementation_key(1029)) TextRangePtr TextRange::InsertBefore ( _bstr_t NewText );
__declspec(implementation_key(1030)) TextRangePtr TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, enum Office::MsoTriState InsertAsField );
__declspec(implementation_key(1031)) TextRangePtr TextRange::InsertSlideNumber ( );
__declspec(implementation_key(1032)) TextRangePtr TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, enum Office::MsoTriState Unicode );
__declspec(implementation_key(1033)) FontPtr TextRange::GetFont ( );
__declspec(implementation_key(1034)) ParagraphFormatPtr TextRange::GetParagraphFormat ( );
__declspec(implementation_key(1035)) int TextRange::GetIndentLevel ( );
__declspec(implementation_key(1036)) void TextRange::PutIndentLevel ( int IndentLevel );
__declspec(implementation_key(1037)) HRESULT TextRange::Select ( );
__declspec(implementation_key(1038)) HRESULT TextRange::Cut ( );
__declspec(implementation_key(1039)) HRESULT TextRange::Copy ( );
__declspec(implementation_key(1040)) HRESULT TextRange::Delete ( );
__declspec(implementation_key(1041)) TextRangePtr TextRange::Paste ( );
__declspec(implementation_key(1042)) HRESULT TextRange::ChangeCase ( enum PpChangeCase Type );
__declspec(implementation_key(1043)) HRESULT TextRange::AddPeriods ( );
__declspec(implementation_key(1044)) HRESULT TextRange::RemovePeriods ( );
__declspec(implementation_key(1045)) TextRangePtr TextRange::Find ( _bstr_t FindWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords );
__declspec(implementation_key(1046)) TextRangePtr TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords );
__declspec(implementation_key(1047)) HRESULT TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 );
__declspec(implementation_key(1048)) enum Office::MsoLanguageID TextRange::GetLanguageID ( );
__declspec(implementation_key(1049)) void TextRange::PutLanguageID ( enum Office::MsoLanguageID LanguageID );
__declspec(implementation_key(1050)) HRESULT TextRange::RtlRun ( );
__declspec(implementation_key(1051)) HRESULT TextRange::LtrRun ( );
__declspec(implementation_key(1052)) IDispatchPtr TextFrame::GetApplication ( );
__declspec(implementation_key(1053)) long TextFrame::GetCreator ( );
__declspec(implementation_key(1054)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(1055)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(1056)) void TextFrame::PutMarginBottom ( float MarginBottom );
__declspec(implementation_key(1057)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(1058)) void TextFrame::PutMarginLeft ( float MarginLeft );
__declspec(implementation_key(1059)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(1060)) void TextFrame::PutMarginRight ( float MarginRight );
__declspec(implementation_key(1061)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(1062)) void TextFrame::PutMarginTop ( float MarginTop );
__declspec(implementation_key(1063)) enum Office::MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(1064)) void TextFrame::PutOrientation ( enum Office::MsoTextOrientation Orientation );
__declspec(implementation_key(1065)) enum Office::MsoTriState TextFrame::GetHasText ( );
__declspec(implementation_key(1066)) TextRangePtr TextFrame::GetTextRange ( );
__declspec(implementation_key(1067)) RulerPtr TextFrame::GetRuler ( );
__declspec(implementation_key(1068)) enum Office::MsoHorizontalAnchor TextFrame::GetHorizontalAnchor ( );
__declspec(implementation_key(1069)) void TextFrame::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor );
__declspec(implementation_key(1070)) enum Office::MsoVerticalAnchor TextFrame::GetVerticalAnchor ( );
__declspec(implementation_key(1071)) void TextFrame::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor );
__declspec(implementation_key(1072)) enum PpAutoSize TextFrame::GetAutoSize ( );
__declspec(implementation_key(1073)) void TextFrame::PutAutoSize ( enum PpAutoSize AutoSize );
__declspec(implementation_key(1074)) enum Office::MsoTriState TextFrame::GetWordWrap ( );
__declspec(implementation_key(1075)) void TextFrame::PutWordWrap ( enum Office::MsoTriState WordWrap );
__declspec(implementation_key(1076)) HRESULT TextFrame::DeleteText ( );
__declspec(implementation_key(1077)) _ApplicationPtr TextStyleLevel::GetApplication ( );
__declspec(implementation_key(1078)) IDispatchPtr TextStyleLevel::GetParent ( );
__declspec(implementation_key(1079)) ParagraphFormatPtr TextStyleLevel::GetParagraphFormat ( );
__declspec(implementation_key(1080)) FontPtr TextStyleLevel::GetFont ( );
__declspec(implementation_key(1081)) _ApplicationPtr TextStyleLevels::GetApplication ( );
__declspec(implementation_key(1082)) IDispatchPtr TextStyleLevels::GetParent ( );
__declspec(implementation_key(1083)) TextStyleLevelPtr TextStyleLevels::Item ( int Level );
__declspec(implementation_key(1084)) _ApplicationPtr TextStyle::GetApplication ( );
__declspec(implementation_key(1085)) IDispatchPtr TextStyle::GetParent ( );
__declspec(implementation_key(1086)) RulerPtr TextStyle::GetRuler ( );
__declspec(implementation_key(1087)) TextFramePtr TextStyle::GetTextFrame ( );
__declspec(implementation_key(1088)) TextStyleLevelsPtr TextStyle::GetLevels ( );
__declspec(implementation_key(1089)) _ApplicationPtr TextStyles::GetApplication ( );
__declspec(implementation_key(1090)) IDispatchPtr TextStyles::GetParent ( );
__declspec(implementation_key(1091)) TextStylePtr TextStyles::Item ( enum PpTextStyleType Type );
__declspec(implementation_key(1092)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(1093)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(1094)) LineFormatPtr Borders::Item ( enum PpBorderType BorderType );
__declspec(implementation_key(1095)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(1096)) HRESULT Pane::Activate ( );
__declspec(implementation_key(1097)) enum Office::MsoTriState Pane::GetActive ( );
__declspec(implementation_key(1098)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(1099)) enum PpViewType Pane::GetViewType ( );
__declspec(implementation_key(1100)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(1101)) PanePtr Panes::Item ( int index );
__declspec(implementation_key(1102)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(1103)) enum Office::MsoTriState DefaultWebOptions::GetIncludeNavigation ( );
__declspec(implementation_key(1104)) void DefaultWebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation );
__declspec(implementation_key(1105)) enum PpFrameColors DefaultWebOptions::GetFrameColors ( );
__declspec(implementation_key(1106)) void DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors );
__declspec(implementation_key(1107)) enum Office::MsoTriState DefaultWebOptions::GetResizeGraphics ( );
__declspec(implementation_key(1108)) void DefaultWebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics );
__declspec(implementation_key(1109)) enum Office::MsoTriState DefaultWebOptions::GetShowSlideAnimation ( );
__declspec(implementation_key(1110)) void DefaultWebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation );
__declspec(implementation_key(1111)) enum Office::MsoTriState DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(1112)) void DefaultWebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder );
__declspec(implementation_key(1113)) enum Office::MsoTriState DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(1114)) void DefaultWebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames );
__declspec(implementation_key(1115)) enum Office::MsoTriState DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(1116)) void DefaultWebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML );
__declspec(implementation_key(1117)) enum Office::MsoTriState DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(1118)) void DefaultWebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG );
__declspec(implementation_key(1119)) enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(1120)) void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize );
__declspec(implementation_key(1121)) enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(1122)) void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(1123)) enum Office::MsoTriState DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(1124)) void DefaultWebOptions::PutUpdateLinksOnSave ( enum Office::MsoTriState UpdateLinksOnSave );
__declspec(implementation_key(1125)) enum Office::MsoTriState DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(1126)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( enum Office::MsoTriState CheckIfOfficeIsHTMLEditor );
__declspec(implementation_key(1127)) enum Office::MsoTriState DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(1128)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( enum Office::MsoTriState AlwaysSaveInDefaultEncoding );
__declspec(implementation_key(1129)) Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(1130)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(1131)) enum Office::MsoTriState WebOptions::GetIncludeNavigation ( );
__declspec(implementation_key(1132)) void WebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation );
__declspec(implementation_key(1133)) enum PpFrameColors WebOptions::GetFrameColors ( );
__declspec(implementation_key(1134)) void WebOptions::PutFrameColors ( enum PpFrameColors FrameColors );
__declspec(implementation_key(1135)) enum Office::MsoTriState WebOptions::GetResizeGraphics ( );
__declspec(implementation_key(1136)) void WebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics );
__declspec(implementation_key(1137)) enum Office::MsoTriState WebOptions::GetShowSlideAnimation ( );
__declspec(implementation_key(1138)) void WebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation );
__declspec(implementation_key(1139)) enum Office::MsoTriState WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(1140)) void WebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder );
__declspec(implementation_key(1141)) enum Office::MsoTriState WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(1142)) void WebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames );
__declspec(implementation_key(1143)) enum Office::MsoTriState WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(1144)) void WebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML );
__declspec(implementation_key(1145)) enum Office::MsoTriState WebOptions::GetAllowPNG ( );
__declspec(implementation_key(1146)) void WebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG );
__declspec(implementation_key(1147)) enum Office::MsoScreenSize WebOptions::GetScreenSize ( );
__declspec(implementation_key(1148)) void WebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize );
__declspec(implementation_key(1149)) enum Office::MsoEncoding WebOptions::GetEncoding ( );
__declspec(implementation_key(1150)) void WebOptions::PutEncoding ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(1151)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(1152)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(1153)) _ApplicationPtr PublishObject::GetApplication ( );
__declspec(implementation_key(1154)) IDispatchPtr PublishObject::GetParent ( );
__declspec(implementation_key(1155)) enum PpHTMLVersion PublishObject::GetHTMLVersion ( );
__declspec(implementation_key(1156)) void PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion );
__declspec(implementation_key(1157)) enum PpPublishSourceType PublishObject::GetSourceType ( );
__declspec(implementation_key(1158)) void PublishObject::PutSourceType ( enum PpPublishSourceType SourceType );
__declspec(implementation_key(1159)) int PublishObject::GetRangeStart ( );
__declspec(implementation_key(1160)) void PublishObject::PutRangeStart ( int RangeStart );
__declspec(implementation_key(1161)) int PublishObject::GetRangeEnd ( );
__declspec(implementation_key(1162)) void PublishObject::PutRangeEnd ( int RangeEnd );
__declspec(implementation_key(1163)) _bstr_t PublishObject::GetSlideShowName ( );
__declspec(implementation_key(1164)) void PublishObject::PutSlideShowName ( _bstr_t SlideShowName );
__declspec(implementation_key(1165)) enum Office::MsoTriState PublishObject::GetSpeakerNotes ( );
__declspec(implementation_key(1166)) void PublishObject::PutSpeakerNotes ( enum Office::MsoTriState SpeakerNotes );
__declspec(implementation_key(1167)) _bstr_t PublishObject::GetFileName ( );
__declspec(implementation_key(1168)) void PublishObject::PutFileName ( _bstr_t FileName );
__declspec(implementation_key(1169)) HRESULT PublishObject::Publish ( );
__declspec(implementation_key(1170)) _ApplicationPtr PublishObjects::GetApplication ( );
__declspec(implementation_key(1171)) IDispatchPtr PublishObjects::GetParent ( );
__declspec(implementation_key(1172)) PublishObjectPtr PublishObjects::Item ( int index );
__declspec(implementation_key(1173)) enum PpMarkerType Marker::GetMarkerType ( );
__declspec(implementation_key(1174)) void Marker::PutMarkerType ( enum PpMarkerType MarkerType );
__declspec(implementation_key(1175)) int Marker::GetTime ( );
__declspec(implementation_key(1176)) PresentationsPtr _Application::GetPresentations ( );
__declspec(implementation_key(1177)) DocumentWindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(1178)) PPDialogsPtr _Application::GetDialogs ( );
__declspec(implementation_key(1179)) DocumentWindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(1180)) _PresentationPtr _Application::GetActivePresentation ( );
__declspec(implementation_key(1181)) SlideShowWindowsPtr _Application::GetSlideShowWindows ( );
__declspec(implementation_key(1182)) Office::_CommandBarsPtr _Application::GetCommandBars ( );
__declspec(implementation_key(1183)) _bstr_t _Application::GetPath ( );
__declspec(implementation_key(1184)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(1185)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(1186)) void _Application::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(1187)) Office::AssistantPtr _Application::GetAssistant ( );
__declspec(implementation_key(1188)) Office::FileSearchPtr _Application::GetFileSearch ( );
__declspec(implementation_key(1189)) Office::IFindPtr _Application::GetFileFind ( );
__declspec(implementation_key(1190)) _bstr_t _Application::GetBuild ( );
__declspec(implementation_key(1191)) _bstr_t _Application::GetVersion ( );
__declspec(implementation_key(1192)) _bstr_t _Application::GetOperatingSystem ( );
__declspec(implementation_key(1193)) _bstr_t _Application::GetActivePrinter ( );
__declspec(implementation_key(1194)) long _Application::GetCreator ( );
__declspec(implementation_key(1195)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(1196)) VBE6::VBEPtr _Application::GetVBE ( );
__declspec(implementation_key(1197)) HRESULT _Application::Help ( _bstr_t HelpFile, int ContextID );
__declspec(implementation_key(1198)) HRESULT _Application::Quit ( );
__declspec(implementation_key(1199)) _variant_t _Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams );
__declspec(implementation_key(1200)) FileDialogPtr _Application::FileDialog ( enum PpFileDialogType Type );
__declspec(implementation_key(1201)) HRESULT _Application::LaunchSpelling ( struct DocumentWindow * pWindow );
__declspec(implementation_key(1202)) float _Application::GetLeft ( );
__declspec(implementation_key(1203)) void _Application::PutLeft ( float Left );
__declspec(implementation_key(1204)) float _Application::GetTop ( );
__declspec(implementation_key(1205)) void _Application::PutTop ( float Top );
__declspec(implementation_key(1206)) float _Application::GetWidth ( );
__declspec(implementation_key(1207)) void _Application::PutWidth ( float Width );
__declspec(implementation_key(1208)) float _Application::GetHeight ( );
__declspec(implementation_key(1209)) void _Application::PutHeight ( float Height );
__declspec(implementation_key(1210)) enum PpWindowState _Application::GetWindowState ( );
__declspec(implementation_key(1211)) void _Application::PutWindowState ( enum PpWindowState WindowState );
__declspec(implementation_key(1212)) enum Office::MsoTriState _Application::GetVisible ( );
__declspec(implementation_key(1213)) void _Application::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(1214)) long _Application::GetHWND ( );
__declspec(implementation_key(1215)) enum Office::MsoTriState _Application::GetActive ( );
__declspec(implementation_key(1216)) HRESULT _Application::Activate ( );
__declspec(implementation_key(1217)) Office::AnswerWizardPtr _Application::GetAnswerWizard ( );
__declspec(implementation_key(1218)) Office::COMAddInsPtr _Application::GetCOMAddIns ( );
__declspec(implementation_key(1219)) _bstr_t _Application::GetProductCode ( );
__declspec(implementation_key(1220)) DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( );
__declspec(implementation_key(1221)) Office::LanguageSettingsPtr _Application::GetLanguageSettings ( );
__declspec(implementation_key(1222)) Office::MsoDebugOptionsPtr _Application::GetMsoDebugOptions ( );
__declspec(implementation_key(1223)) enum Office::MsoTriState _Application::GetShowWindowsInTaskbar ( );
__declspec(implementation_key(1224)) void _Application::PutShowWindowsInTaskbar ( enum Office::MsoTriState ShowWindowsInTaskbar );
__declspec(implementation_key(1225)) MarkerPtr _Application::GetMarker ( );
__declspec(implementation_key(1226)) enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( );
__declspec(implementation_key(1227)) void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall FeatureInstall );
__declspec(implementation_key(1228)) VARIANT_BOOL _Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist );
__declspec(implementation_key(1229)) HRESULT _Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist );
__declspec(implementation_key(1230)) _PresentationPtr _Global::GetActivePresentation ( );
__declspec(implementation_key(1231)) DocumentWindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(1232)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(1233)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(1234)) Office::AssistantPtr _Global::GetAssistant ( );
__declspec(implementation_key(1235)) PPDialogsPtr _Global::GetDialogs ( );
__declspec(implementation_key(1236)) PresentationsPtr _Global::GetPresentations ( );
__declspec(implementation_key(1237)) SlideShowWindowsPtr _Global::GetSlideShowWindows ( );
__declspec(implementation_key(1238)) DocumentWindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(1239)) Office::_CommandBarsPtr _Global::GetCommandBars ( );
__declspec(implementation_key(1240)) Office::AnswerWizardPtr _Global::GetAnswerWizard ( );
__declspec(implementation_key(1241)) _ApplicationPtr Selection::GetApplication ( );
__declspec(implementation_key(1242)) IDispatchPtr Selection::GetParent ( );
__declspec(implementation_key(1243)) HRESULT Selection::Cut ( );
__declspec(implementation_key(1244)) HRESULT Selection::Copy ( );
__declspec(implementation_key(1245)) HRESULT Selection::Delete ( );
__declspec(implementation_key(1246)) HRESULT Selection::Unselect ( );
__declspec(implementation_key(1247)) enum PpSelectionType Selection::GetType ( );
__declspec(implementation_key(1248)) SlideRangePtr Selection::GetSlideRange ( );
__declspec(implementation_key(1249)) ShapeRangePtr Selection::GetShapeRange ( );
__declspec(implementation_key(1250)) TextRangePtr Selection::GetTextRange ( );
__declspec(implementation_key(1251)) _ApplicationPtr DocumentWindow::GetApplication ( );
__declspec(implementation_key(1252)) IDispatchPtr DocumentWindow::GetParent ( );
__declspec(implementation_key(1253)) SelectionPtr DocumentWindow::GetSelection ( );
__declspec(implementation_key(1254)) ViewPtr DocumentWindow::GetView ( );
__declspec(implementation_key(1255)) _PresentationPtr DocumentWindow::GetPresentation ( );
__declspec(implementation_key(1256)) enum PpViewType DocumentWindow::GetViewType ( );
__declspec(implementation_key(1257)) void DocumentWindow::PutViewType ( enum PpViewType ViewType );
__declspec(implementation_key(1258)) enum Office::MsoTriState DocumentWindow::GetBlackAndWhite ( );
__declspec(implementation_key(1259)) void DocumentWindow::PutBlackAndWhite ( enum Office::MsoTriState BlackAndWhite );
__declspec(implementation_key(1260)) enum Office::MsoTriState DocumentWindow::GetActive ( );
__declspec(implementation_key(1261)) enum PpWindowState DocumentWindow::GetWindowState ( );
__declspec(implementation_key(1262)) void DocumentWindow::PutWindowState ( enum PpWindowState WindowState );
__declspec(implementation_key(1263)) _bstr_t DocumentWindow::GetCaption ( );
__declspec(implementation_key(1264)) float DocumentWindow::GetLeft ( );
__declspec(implementation_key(1265)) void DocumentWindow::PutLeft ( float Left );
__declspec(implementation_key(1266)) float DocumentWindow::GetTop ( );
__declspec(implementation_key(1267)) void DocumentWindow::PutTop ( float Top );
__declspec(implementation_key(1268)) float DocumentWindow::GetWidth ( );
__declspec(implementation_key(1269)) void DocumentWindow::PutWidth ( float Width );
__declspec(implementation_key(1270)) float DocumentWindow::GetHeight ( );
__declspec(implementation_key(1271)) void DocumentWindow::PutHeight ( float Height );
__declspec(implementation_key(1272)) HRESULT DocumentWindow::FitToPage ( );
__declspec(implementation_key(1273)) HRESULT DocumentWindow::Activate ( );
__declspec(implementation_key(1274)) HRESULT DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft );
__declspec(implementation_key(1275)) HRESULT DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft );
__declspec(implementation_key(1276)) DocumentWindowPtr DocumentWindow::NewWindow ( );
__declspec(implementation_key(1277)) HRESULT DocumentWindow::Close ( );
__declspec(implementation_key(1278)) long DocumentWindow::GetHWND ( );
__declspec(implementation_key(1279)) PanePtr DocumentWindow::GetActivePane ( );
__declspec(implementation_key(1280)) PanesPtr DocumentWindow::GetPanes ( );
__declspec(implementation_key(1281)) long DocumentWindow::GetSplitVertical ( );
__declspec(implementation_key(1282)) void DocumentWindow::PutSplitVertical ( long SplitVertical );
__declspec(implementation_key(1283)) long DocumentWindow::GetSplitHorizontal ( );
__declspec(implementation_key(1284)) void DocumentWindow::PutSplitHorizontal ( long SplitHorizontal );
__declspec(implementation_key(1285)) IDispatchPtr DocumentWindow::RangeFromPoint ( int X, int Y );
__declspec(implementation_key(1286)) int DocumentWindow::PointsToScreenPixelsX ( float Points );
__declspec(implementation_key(1287)) int DocumentWindow::PointsToScreenPixelsY ( float Points );
__declspec(implementation_key(1288)) HRESULT DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Start );
__declspec(implementation_key(1289)) _ApplicationPtr DocumentWindows::GetApplication ( );
__declspec(implementation_key(1290)) IDispatchPtr DocumentWindows::GetParent ( );
__declspec(implementation_key(1291)) DocumentWindowPtr DocumentWindows::Item ( int index );
__declspec(implementation_key(1292)) HRESULT DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle );
__declspec(implementation_key(1293)) HRESULT EApplication::WindowSelectionChange ( struct Selection * Sel );
__declspec(implementation_key(1294)) HRESULT EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1295)) HRESULT EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1296)) HRESULT EApplication::PresentationClose ( struct _Presentation * Pres );
__declspec(implementation_key(1297)) HRESULT EApplication::PresentationSave ( struct _Presentation * Pres );
__declspec(implementation_key(1298)) HRESULT EApplication::PresentationOpen ( struct _Presentation * Pres );
__declspec(implementation_key(1299)) HRESULT EApplication::NewPresentation ( struct _Presentation * Pres );
__declspec(implementation_key(1300)) HRESULT EApplication::PresentationNewSlide ( struct _Slide * Sld );
__declspec(implementation_key(1301)) HRESULT EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn );
__declspec(implementation_key(1302)) HRESULT EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn );
__declspec(implementation_key(1303)) HRESULT EApplication::SlideShowBegin ( struct SlideShowWindow * Wn );
__declspec(implementation_key(1304)) HRESULT EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn );
__declspec(implementation_key(1305)) HRESULT EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn );
__declspec(implementation_key(1306)) HRESULT EApplication::SlideShowEnd ( struct _Presentation * Pres );
__declspec(implementation_key(1307)) HRESULT EApplication::PresentationPrint ( struct _Presentation * Pres );
__declspec(implementation_key(1308)) _ApplicationPtr Slides::GetApplication ( );
__declspec(implementation_key(1309)) IDispatchPtr Slides::GetParent ( );
__declspec(implementation_key(1310)) _SlidePtr Slides::Item ( const _variant_t & index );
__declspec(implementation_key(1311)) _SlidePtr Slides::FindBySlideID ( long SlideID );
__declspec(implementation_key(1312)) _SlidePtr Slides::Add ( int index, enum PpSlideLayout Layout );
__declspec(implementation_key(1313)) int Slides::InsertFromFile ( _bstr_t FileName, int index, int SlideStart, int SlideEnd );
__declspec(implementation_key(1314)) SlideRangePtr Slides::Range ( const _variant_t & index );
__declspec(implementation_key(1315)) SlideRangePtr Slides::Paste ( int index );
__declspec(implementation_key(1316)) _ApplicationPtr _Slide::GetApplication ( );
__declspec(implementation_key(1317)) IDispatchPtr _Slide::GetParent ( );
__declspec(implementation_key(1318)) ShapesPtr _Slide::GetShapes ( );
__declspec(implementation_key(1319)) HeadersFootersPtr _Slide::GetHeadersFooters ( );
__declspec(implementation_key(1320)) SlideShowTransitionPtr _Slide::GetSlideShowTransition ( );
__declspec(implementation_key(1321)) ColorSchemePtr _Slide::GetColorScheme ( );
__declspec(implementation_key(1322)) void _Slide::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(1323)) ShapeRangePtr _Slide::GetBackground ( );
__declspec(implementation_key(1324)) _bstr_t _Slide::GetName ( );
__declspec(implementation_key(1325)) void _Slide::PutName ( _bstr_t Name );
__declspec(implementation_key(1326)) long _Slide::GetSlideID ( );
__declspec(implementation_key(1327)) int _Slide::GetPrintSteps ( );
__declspec(implementation_key(1328)) HRESULT _Slide::Select ( );
__declspec(implementation_key(1329)) HRESULT _Slide::Cut ( );
__declspec(implementation_key(1330)) HRESULT _Slide::Copy ( );
__declspec(implementation_key(1331)) enum PpSlideLayout _Slide::GetLayout ( );
__declspec(implementation_key(1332)) void _Slide::PutLayout ( enum PpSlideLayout Layout );
__declspec(implementation_key(1333)) SlideRangePtr _Slide::Duplicate ( );
__declspec(implementation_key(1334)) HRESULT _Slide::Delete ( );
__declspec(implementation_key(1335)) TagsPtr _Slide::GetTags ( );
__declspec(implementation_key(1336)) int _Slide::GetSlideIndex ( );
__declspec(implementation_key(1337)) int _Slide::GetSlideNumber ( );
__declspec(implementation_key(1338)) enum Office::MsoTriState _Slide::GetDisplayMasterShapes ( );
__declspec(implementation_key(1339)) void _Slide::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes );
__declspec(implementation_key(1340)) enum Office::MsoTriState _Slide::GetFollowMasterBackground ( );
__declspec(implementation_key(1341)) void _Slide::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground );
__declspec(implementation_key(1342)) SlideRangePtr _Slide::GetNotesPage ( );
__declspec(implementation_key(1343)) _MasterPtr _Slide::GetMaster ( );
__declspec(implementation_key(1344)) HyperlinksPtr _Slide::GetHyperlinks ( );
__declspec(implementation_key(1345)) HRESULT _Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(1346)) Office::ScriptsPtr _Slide::GetScripts ( );
__declspec(implementation_key(1347)) _ApplicationPtr SlideRange::GetApplication ( );
__declspec(implementation_key(1348)) IDispatchPtr SlideRange::GetParent ( );
__declspec(implementation_key(1349)) ShapesPtr SlideRange::GetShapes ( );
__declspec(implementation_key(1350)) HeadersFootersPtr SlideRange::GetHeadersFooters ( );
__declspec(implementation_key(1351)) SlideShowTransitionPtr SlideRange::GetSlideShowTransition ( );
__declspec(implementation_key(1352)) ColorSchemePtr SlideRange::GetColorScheme ( );
__declspec(implementation_key(1353)) void SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(1354)) ShapeRangePtr SlideRange::GetBackground ( );
__declspec(implementation_key(1355)) _bstr_t SlideRange::GetName ( );
__declspec(implementation_key(1356)) void SlideRange::PutName ( _bstr_t Name );
__declspec(implementation_key(1357)) long SlideRange::GetSlideID ( );
__declspec(implementation_key(1358)) int SlideRange::GetPrintSteps ( );
__declspec(implementation_key(1359)) HRESULT SlideRange::Select ( );
__declspec(implementation_key(1360)) HRESULT SlideRange::Cut ( );
__declspec(implementation_key(1361)) HRESULT SlideRange::Copy ( );
__declspec(implementation_key(1362)) enum PpSlideLayout SlideRange::GetLayout ( );
__declspec(implementation_key(1363)) void SlideRange::PutLayout ( enum PpSlideLayout Layout );
__declspec(implementation_key(1364)) SlideRangePtr SlideRange::Duplicate ( );
__declspec(implementation_key(1365)) HRESULT SlideRange::Delete ( );
__declspec(implementation_key(1366)) TagsPtr SlideRange::GetTags ( );
__declspec(implementation_key(1367)) int SlideRange::GetSlideIndex ( );
__declspec(implementation_key(1368)) int SlideRange::GetSlideNumber ( );
__declspec(implementation_key(1369)) enum Office::MsoTriState SlideRange::GetDisplayMasterShapes ( );
__declspec(implementation_key(1370)) void SlideRange::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes );
__declspec(implementation_key(1371)) enum Office::MsoTriState SlideRange::GetFollowMasterBackground ( );
__declspec(implementation_key(1372)) void SlideRange::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground );
__declspec(implementation_key(1373)) SlideRangePtr SlideRange::GetNotesPage ( );
__declspec(implementation_key(1374)) _MasterPtr SlideRange::GetMaster ( );
__declspec(implementation_key(1375)) HyperlinksPtr SlideRange::GetHyperlinks ( );
__declspec(implementation_key(1376)) HRESULT SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(1377)) _SlidePtr SlideRange::Item ( const _variant_t & index );
__declspec(implementation_key(1378)) IUnknownPtr SlideRange::Get_NewEnum ( );
__declspec(implementation_key(1379)) _variant_t SlideRange::_Index ( int index );
__declspec(implementation_key(1380)) long SlideRange::GetCount ( );
__declspec(implementation_key(1381)) Office::ScriptsPtr SlideRange::GetScripts ( );
__declspec(implementation_key(1382)) _ApplicationPtr _Master::GetApplication ( );
__declspec(implementation_key(1383)) IDispatchPtr _Master::GetParent ( );
__declspec(implementation_key(1384)) ShapesPtr _Master::GetShapes ( );
__declspec(implementation_key(1385)) HeadersFootersPtr _Master::GetHeadersFooters ( );
__declspec(implementation_key(1386)) ColorSchemePtr _Master::GetColorScheme ( );
__declspec(implementation_key(1387)) void _Master::PutColorScheme ( struct ColorScheme * ColorScheme );
__declspec(implementation_key(1388)) ShapeRangePtr _Master::GetBackground ( );
__declspec(implementation_key(1389)) _bstr_t _Master::GetName ( );
__declspec(implementation_key(1390)) void _Master::PutName ( _bstr_t Name );
__declspec(implementation_key(1391)) HRESULT _Master::Delete ( );
__declspec(implementation_key(1392)) float _Master::GetHeight ( );
__declspec(implementation_key(1393)) float _Master::GetWidth ( );
__declspec(implementation_key(1394)) TextStylesPtr _Master::GetTextStyles ( );
__declspec(implementation_key(1395)) HyperlinksPtr _Master::GetHyperlinks ( );
__declspec(implementation_key(1396)) Office::ScriptsPtr _Master::GetScripts ( );
__declspec(implementation_key(1397)) IDispatchPtr Shapes::GetApplication ( );
__declspec(implementation_key(1398)) long Shapes::GetCreator ( );
__declspec(implementation_key(1399)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(1400)) int Shapes::GetCount ( );
__declspec(implementation_key(1401)) ShapePtr Shapes::Item ( const _variant_t & index );
__declspec(implementation_key(1402)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(1403)) ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1404)) ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1405)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1406)) ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1407)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(1408)) ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1409)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(1410)) ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1411)) ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(1412)) ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1413)) FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(1414)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(1415)) ShapeRangePtr Shapes::Range ( const _variant_t & index );
__declspec(implementation_key(1416)) enum Office::MsoTriState Shapes::GetHasTitle ( );
__declspec(implementation_key(1417)) ShapePtr Shapes::AddTitle ( );
__declspec(implementation_key(1418)) ShapePtr Shapes::GetTitle ( );
__declspec(implementation_key(1419)) PlaceholdersPtr Shapes::GetPlaceholders ( );
__declspec(implementation_key(1420)) ShapePtr Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link );
__declspec(implementation_key(1421)) ShapePtr Shapes::AddComment ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(1422)) ShapePtr Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1423)) ShapePtr Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1424)) ShapeRangePtr Shapes::Paste ( );
__declspec(implementation_key(1425)) ShapePtr Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height );
__declspec(implementation_key(1426)) _ApplicationPtr Placeholders::GetApplication ( );
__declspec(implementation_key(1427)) IDispatchPtr Placeholders::GetParent ( );
__declspec(implementation_key(1428)) ShapePtr Placeholders::Item ( int index );
__declspec(implementation_key(1429)) IDispatchPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(1430)) long FreeformBuilder::GetCreator ( );
__declspec(implementation_key(1431)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(1432)) HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(1433)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(1434)) IDispatchPtr Shape::GetApplication ( );
__declspec(implementation_key(1435)) long Shape::GetCreator ( );
__declspec(implementation_key(1436)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(1437)) HRESULT Shape::Apply ( );
__declspec(implementation_key(1438)) HRESULT Shape::Delete ( );
__declspec(implementation_key(1439)) HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(1440)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(1441)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(1442)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(1443)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(1444)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(1445)) HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale );
__declspec(implementation_key(1446)) HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale );
__declspec(implementation_key(1447)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(1448)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(1449)) HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(1450)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(1451)) enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(1452)) void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(1453)) enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(1454)) void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(1455)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(1456)) int Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(1457)) enum Office::MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(1458)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(1459)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(1460)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(1461)) float Shape::GetHeight ( );
__declspec(implementation_key(1462)) void Shape::PutHeight ( float Height );
__declspec(implementation_key(1463)) enum Office::MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(1464)) float Shape::GetLeft ( );
__declspec(implementation_key(1465)) void Shape::PutLeft ( float Left );
__declspec(implementation_key(1466)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(1467)) enum Office::MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(1468)) void Shape::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio );
__declspec(implementation_key(1469)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(1470)) void Shape::PutName ( _bstr_t Name );
__declspec(implementation_key(1471)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(1472)) float Shape::GetRotation ( );
__declspec(implementation_key(1473)) void Shape::PutRotation ( float Rotation );
__declspec(implementation_key(1474)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(1475)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(1476)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(1477)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(1478)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(1479)) float Shape::GetTop ( );
__declspec(implementation_key(1480)) void Shape::PutTop ( float Top );
__declspec(implementation_key(1481)) enum Office::MsoShapeType Shape::GetType ( );
__declspec(implementation_key(1482)) enum Office::MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(1483)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(1484)) enum Office::MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(1485)) void Shape::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(1486)) float Shape::GetWidth ( );
__declspec(implementation_key(1487)) void Shape::PutWidth ( float Width );
__declspec(implementation_key(1488)) int Shape::GetZOrderPosition ( );
__declspec(implementation_key(1489)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(1490)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(1491)) PlaceholderFormatPtr Shape::GetPlaceholderFormat ( );
__declspec(implementation_key(1492)) AnimationSettingsPtr Shape::GetAnimationSettings ( );
__declspec(implementation_key(1493)) ActionSettingsPtr Shape::GetActionSettings ( );
__declspec(implementation_key(1494)) TagsPtr Shape::GetTags ( );
__declspec(implementation_key(1495)) HRESULT Shape::Cut ( );
__declspec(implementation_key(1496)) HRESULT Shape::Copy ( );
__declspec(implementation_key(1497)) HRESULT Shape::Select ( enum Office::MsoTriState Replace );
__declspec(implementation_key(1498)) ShapeRangePtr Shape::Duplicate ( );
__declspec(implementation_key(1499)) enum PpMediaType Shape::GetMediaType ( );
__declspec(implementation_key(1500)) enum Office::MsoTriState Shape::GetHasTextFrame ( );
__declspec(implementation_key(1501)) SoundFormatPtr Shape::GetSoundFormat ( );
__declspec(implementation_key(1502)) Office::ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(1503)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(1504)) void Shape::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(1505)) enum Office::MsoTriState Shape::GetHasTable ( );
__declspec(implementation_key(1506)) TablePtr Shape::GetTable ( );
__declspec(implementation_key(1507)) HRESULT Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode );
__declspec(implementation_key(1508)) IDispatchPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(1509)) long GroupShapes::GetCreator ( );
__declspec(implementation_key(1510)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(1511)) int GroupShapes::GetCount ( );
__declspec(implementation_key(1512)) ShapePtr GroupShapes::Item ( const _variant_t & index );
__declspec(implementation_key(1513)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(1514)) IDispatchPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(1515)) long ConnectorFormat::GetCreator ( );
__declspec(implementation_key(1516)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(1517)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(1518)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(1519)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite );
__declspec(implementation_key(1520)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(1521)) enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(1522)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(1523)) int ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(1524)) enum Office::MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(1525)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(1526)) int ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(1527)) enum Office::MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(1528)) void ConnectorFormat::PutType ( enum Office::MsoConnectorType Type );
__declspec(implementation_key(1529)) _ApplicationPtr _Presentation::GetApplication ( );
__declspec(implementation_key(1530)) IDispatchPtr _Presentation::GetParent ( );
__declspec(implementation_key(1531)) _MasterPtr _Presentation::GetSlideMaster ( );
__declspec(implementation_key(1532)) _MasterPtr _Presentation::GetTitleMaster ( );
__declspec(implementation_key(1533)) enum Office::MsoTriState _Presentation::GetHasTitleMaster ( );
__declspec(implementation_key(1534)) _MasterPtr _Presentation::AddTitleMaster ( );
__declspec(implementation_key(1535)) HRESULT _Presentation::ApplyTemplate ( _bstr_t FileName );
__declspec(implementation_key(1536)) _bstr_t _Presentation::GetTemplateName ( );
__declspec(implementation_key(1537)) _MasterPtr _Presentation::GetNotesMaster ( );
__declspec(implementation_key(1538)) _MasterPtr _Presentation::GetHandoutMaster ( );
__declspec(implementation_key(1539)) SlidesPtr _Presentation::GetSlides ( );
__declspec(implementation_key(1540)) PageSetupPtr _Presentation::GetPageSetup ( );
__declspec(implementation_key(1541)) ColorSchemesPtr _Presentation::GetColorSchemes ( );
__declspec(implementation_key(1542)) ExtraColorsPtr _Presentation::GetExtraColors ( );
__declspec(implementation_key(1543)) SlideShowSettingsPtr _Presentation::GetSlideShowSettings ( );
__declspec(implementation_key(1544)) FontsPtr _Presentation::GetFonts ( );
__declspec(implementation_key(1545)) DocumentWindowsPtr _Presentation::GetWindows ( );
__declspec(implementation_key(1546)) TagsPtr _Presentation::GetTags ( );
__declspec(implementation_key(1547)) ShapePtr _Presentation::GetDefaultShape ( );
__declspec(implementation_key(1548)) IDispatchPtr _Presentation::GetBuiltInDocumentProperties ( );
__declspec(implementation_key(1549)) IDispatchPtr _Presentation::GetCustomDocumentProperties ( );
__declspec(implementation_key(1550)) VBE6::_VBProjectPtr _Presentation::GetVBProject ( );
__declspec(implementation_key(1551)) enum Office::MsoTriState _Presentation::GetReadOnly ( );
__declspec(implementation_key(1552)) _bstr_t _Presentation::GetFullName ( );
__declspec(implementation_key(1553)) _bstr_t _Presentation::GetName ( );
__declspec(implementation_key(1554)) _bstr_t _Presentation::GetPath ( );
__declspec(implementation_key(1555)) enum Office::MsoTriState _Presentation::GetSaved ( );
__declspec(implementation_key(1556)) void _Presentation::PutSaved ( enum Office::MsoTriState Saved );
__declspec(implementation_key(1557)) enum PpDirection _Presentation::GetLayoutDirection ( );
__declspec(implementation_key(1558)) void _Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection );
__declspec(implementation_key(1559)) DocumentWindowPtr _Presentation::NewWindow ( );
__declspec(implementation_key(1560)) HRESULT _Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, enum Office::MsoExtraInfoMethod Method, _bstr_t HeaderInfo );
__declspec(implementation_key(1561)) HRESULT _Presentation::AddToFavorites ( );
__declspec(implementation_key(1562)) HRESULT _Presentation::Unused ( );
__declspec(implementation_key(1563)) PrintOptionsPtr _Presentation::GetPrintOptions ( );
__declspec(implementation_key(1564)) HRESULT _Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate );
__declspec(implementation_key(1565)) HRESULT _Presentation::Save ( );
__declspec(implementation_key(1566)) HRESULT _Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts );
__declspec(implementation_key(1567)) HRESULT _Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts );
__declspec(implementation_key(1568)) HRESULT _Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight );
__declspec(implementation_key(1569)) HRESULT _Presentation::Close ( );
__declspec(implementation_key(1570)) HRESULT _Presentation::SetUndoText ( _bstr_t Text );
__declspec(implementation_key(1571)) IDispatchPtr _Presentation::GetContainer ( );
__declspec(implementation_key(1572)) enum Office::MsoTriState _Presentation::GetDisplayComments ( );
__declspec(implementation_key(1573)) void _Presentation::PutDisplayComments ( enum Office::MsoTriState DisplayComments );
__declspec(implementation_key(1574)) enum PpFarEastLineBreakLevel _Presentation::GetFarEastLineBreakLevel ( );
__declspec(implementation_key(1575)) void _Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel );
__declspec(implementation_key(1576)) _bstr_t _Presentation::GetNoLineBreakBefore ( );
__declspec(implementation_key(1577)) void _Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore );
__declspec(implementation_key(1578)) _bstr_t _Presentation::GetNoLineBreakAfter ( );
__declspec(implementation_key(1579)) void _Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter );
__declspec(implementation_key(1580)) HRESULT _Presentation::UpdateLinks ( );
__declspec(implementation_key(1581)) SlideShowWindowPtr _Presentation::GetSlideShowWindow ( );
__declspec(implementation_key(1582)) enum Office::MsoFarEastLineBreakLanguageID _Presentation::GetFarEastLineBreakLanguage ( );
__declspec(implementation_key(1583)) void _Presentation::PutFarEastLineBreakLanguage ( enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage );
__declspec(implementation_key(1584)) HRESULT _Presentation::WebPagePreview ( );
__declspec(implementation_key(1585)) enum Office::MsoLanguageID _Presentation::GetDefaultLanguageID ( );
__declspec(implementation_key(1586)) void _Presentation::PutDefaultLanguageID ( enum Office::MsoLanguageID DefaultLanguageID );
__declspec(implementation_key(1587)) Office::_CommandBarsPtr _Presentation::GetCommandBars ( );
__declspec(implementation_key(1588)) PublishObjectsPtr _Presentation::GetPublishObjects ( );
__declspec(implementation_key(1589)) WebOptionsPtr _Presentation::GetWebOptions ( );
__declspec(implementation_key(1590)) Office::HTMLProjectPtr _Presentation::GetHTMLProject ( );
__declspec(implementation_key(1591)) HRESULT _Presentation::ReloadAs ( enum Office::MsoEncoding cp );
__declspec(implementation_key(1592)) HRESULT _Presentation::MakeIntoTemplate ( enum Office::MsoTriState IsDesignTemplate );
__declspec(implementation_key(1593)) enum Office::MsoTriState _Presentation::GetEnvelopeVisible ( );
__declspec(implementation_key(1594)) void _Presentation::PutEnvelopeVisible ( enum Office::MsoTriState EnvelopeVisible );
__declspec(implementation_key(1595)) HRESULT _Presentation::sblt ( _bstr_t s );
__declspec(implementation_key(1596)) enum Office::MsoTriState _Presentation::GetVBASigned ( );
__declspec(implementation_key(1597)) _ApplicationPtr Cell::GetApplication ( );
__declspec(implementation_key(1598)) IDispatchPtr Cell::GetParent ( );
__declspec(implementation_key(1599)) ShapePtr Cell::GetShape ( );
__declspec(implementation_key(1600)) BordersPtr Cell::GetBorders ( );
__declspec(implementation_key(1601)) HRESULT Cell::Merge ( struct Cell * MergeTo );
__declspec(implementation_key(1602)) HRESULT Cell::Split ( int NumRows, int NumColumns );
__declspec(implementation_key(1603)) HRESULT Cell::Select ( );
__declspec(implementation_key(1604)) VARIANT_BOOL Cell::GetSelected ( );
__declspec(implementation_key(1605)) _ApplicationPtr CellRange::GetApplication ( );
__declspec(implementation_key(1606)) IDispatchPtr CellRange::GetParent ( );
__declspec(implementation_key(1607)) CellPtr CellRange::Item ( int index );
__declspec(implementation_key(1608)) BordersPtr CellRange::GetBorders ( );
__declspec(implementation_key(1609)) _ApplicationPtr Column::GetApplication ( );
__declspec(implementation_key(1610)) IDispatchPtr Column::GetParent ( );
__declspec(implementation_key(1611)) CellRangePtr Column::GetCells ( );
__declspec(implementation_key(1612)) HRESULT Column::Select ( );
__declspec(implementation_key(1613)) HRESULT Column::Delete ( );
__declspec(implementation_key(1614)) float Column::GetWidth ( );
__declspec(implementation_key(1615)) void Column::PutWidth ( float Width );
__declspec(implementation_key(1616)) _ApplicationPtr Columns::GetApplication ( );
__declspec(implementation_key(1617)) IDispatchPtr Columns::GetParent ( );
__declspec(implementation_key(1618)) ColumnPtr Columns::Item ( int index );
__declspec(implementation_key(1619)) ColumnPtr Columns::Add ( int BeforeColumn );
__declspec(implementation_key(1620)) _ApplicationPtr Row::GetApplication ( );
__declspec(implementation_key(1621)) IDispatchPtr Row::GetParent ( );
__declspec(implementation_key(1622)) CellRangePtr Row::GetCells ( );
__declspec(implementation_key(1623)) HRESULT Row::Select ( );
__declspec(implementation_key(1624)) HRESULT Row::Delete ( );
__declspec(implementation_key(1625)) float Row::GetHeight ( );
__declspec(implementation_key(1626)) void Row::PutHeight ( float Height );
__declspec(implementation_key(1627)) _ApplicationPtr Rows::GetApplication ( );
__declspec(implementation_key(1628)) IDispatchPtr Rows::GetParent ( );
__declspec(implementation_key(1629)) RowPtr Rows::Item ( int index );
__declspec(implementation_key(1630)) RowPtr Rows::Add ( int BeforeRow );
__declspec(implementation_key(1631)) _ApplicationPtr Table::GetApplication ( );
__declspec(implementation_key(1632)) IDispatchPtr Table::GetParent ( );
__declspec(implementation_key(1633)) ColumnsPtr Table::GetColumns ( );
__declspec(implementation_key(1634)) RowsPtr Table::GetRows ( );
__declspec(implementation_key(1635)) CellPtr Table::Cell ( int Row, int Column );
__declspec(implementation_key(1636)) enum PpDirection Table::GetTableDirection ( );
__declspec(implementation_key(1637)) void Table::PutTableDirection ( enum PpDirection TableDirection );
__declspec(implementation_key(1638)) HRESULT Table::MergeBorders ( );
__declspec(implementation_key(1639)) IDispatchPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(1640)) long ShapeRange::GetCreator ( );
__declspec(implementation_key(1641)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(1642)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(1643)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(1644)) HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(1645)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(1646)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(1647)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(1648)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(1649)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(1650)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale );
__declspec(implementation_key(1651)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale );
__declspec(implementation_key(1652)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(1653)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(1654)) HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(1655)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(1656)) enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(1657)) void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType );
__declspec(implementation_key(1658)) enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(1659)) void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode );
__declspec(implementation_key(1660)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(1661)) int ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(1662)) enum Office::MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(1663)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(1664)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(1665)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(1666)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(1667)) void ShapeRange::PutHeight ( float Height );
__declspec(implementation_key(1668)) enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(1669)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(1670)) void ShapeRange::PutLeft ( float Left );
__declspec(implementation_key(1671)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(1672)) enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(1673)) void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio );
__declspec(implementation_key(1674)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(1675)) void ShapeRange::PutName ( _bstr_t Name );
__declspec(implementation_key(1676)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(1677)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(1678)) void ShapeRange::PutRotation ( float Rotation );
__declspec(implementation_key(1679)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(1680)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(1681)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(1682)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(1683)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(1684)) float ShapeRange::GetTop ( );
__declspec(implementation_key(1685)) void ShapeRange::PutTop ( float Top );
__declspec(implementation_key(1686)) enum Office::MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(1687)) enum Office::MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(1688)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(1689)) enum Office::MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(1690)) void ShapeRange::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(1691)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(1692)) void ShapeRange::PutWidth ( float Width );
__declspec(implementation_key(1693)) int ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(1694)) OLEFormatPtr ShapeRange::GetOLEFormat ( );
__declspec(implementation_key(1695)) LinkFormatPtr ShapeRange::GetLinkFormat ( );
__declspec(implementation_key(1696)) PlaceholderFormatPtr ShapeRange::GetPlaceholderFormat ( );
__declspec(implementation_key(1697)) AnimationSettingsPtr ShapeRange::GetAnimationSettings ( );
__declspec(implementation_key(1698)) ActionSettingsPtr ShapeRange::GetActionSettings ( );
__declspec(implementation_key(1699)) TagsPtr ShapeRange::GetTags ( );
__declspec(implementation_key(1700)) HRESULT ShapeRange::Cut ( );
__declspec(implementation_key(1701)) HRESULT ShapeRange::Copy ( );
__declspec(implementation_key(1702)) HRESULT ShapeRange::Select ( enum Office::MsoTriState Replace );
__declspec(implementation_key(1703)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(1704)) enum PpMediaType ShapeRange::GetMediaType ( );
__declspec(implementation_key(1705)) enum Office::MsoTriState ShapeRange::GetHasTextFrame ( );
__declspec(implementation_key(1706)) SoundFormatPtr ShapeRange::GetSoundFormat ( );
__declspec(implementation_key(1707)) ShapePtr ShapeRange::Item ( const _variant_t & index );
__declspec(implementation_key(1708)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(1709)) _variant_t ShapeRange::_Index ( int index );
__declspec(implementation_key(1710)) long ShapeRange::GetCount ( );
__declspec(implementation_key(1711)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(1712)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(1713)) HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(1714)) HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(1715)) HRESULT ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, enum Office::MsoTriState * IsOpen );
__declspec(implementation_key(1716)) Office::ScriptPtr ShapeRange::GetScript ( );
__declspec(implementation_key(1717)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(1718)) void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText );
__declspec(implementation_key(1719)) enum Office::MsoTriState ShapeRange::GetHasTable ( );
__declspec(implementation_key(1720)) TablePtr ShapeRange::GetTable ( );
__declspec(implementation_key(1721)) HRESULT ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode );
#pragma stop_map_region

} // namespace MSPPT

#pragma pack(pop)
