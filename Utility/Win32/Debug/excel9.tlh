// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (5f7256d6).
//
// f:\hitetouchpro_work\test_cross_1\utility\win32\debug\excel9.tlh
//
// C++ source equivalent of Win32 type library ./ImportFile/EXCEL9.OLB
// compiler-generated file created 03/06/18 at 09:29:25 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSExcel {

//
// Forward references and typedefs
//

struct __declspec(uuid("00020813-0000-0000-c000-000000000046"))
/* LIBID */ __Excel;
struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
enum Constants;
enum XlCreator;
enum XlChartGallery;
enum XlColorIndex;
enum XlEndStyleCap;
enum XlRowCol;
enum XlScaleType;
enum XlDataSeriesType;
enum XlAxisCrosses;
enum XlAxisGroup;
enum XlBackground;
enum XlWindowState;
enum XlAxisType;
enum XlArrowHeadLength;
enum XlVAlign;
enum XlTickMark;
enum XlErrorBarDirection;
enum XlErrorBarInclude;
enum XlDisplayBlanksAs;
enum XlArrowHeadStyle;
enum XlArrowHeadWidth;
enum XlHAlign;
enum XlTickLabelPosition;
enum XlLegendPosition;
enum XlChartPictureType;
enum XlChartPicturePlacement;
enum XlOrientation;
enum XlTickLabelOrientation;
enum XlBorderWeight;
enum XlDataSeriesDate;
enum XlUnderlineStyle;
enum XlErrorBarType;
enum XlTrendlineType;
enum XlLineStyle;
enum XlDataLabelsType;
enum XlMarkerStyle;
enum XlPictureConvertorType;
enum XlPattern;
enum XlChartSplitType;
enum XlDisplayUnit;
enum XlDataLabelPosition;
enum XlTimeUnit;
enum XlCategoryType;
enum XlBarShape;
enum XlChartType;
enum XlChartItem;
enum XlSizeRepresents;
enum XlInsertShiftDirection;
enum XlDeleteShiftDirection;
enum XlDirection;
enum XlConsolidationFunction;
enum XlSheetType;
enum XlLocationInTable;
enum XlFindLookIn;
enum XlWindowType;
enum XlPivotFieldDataType;
enum XlCopyPictureFormat;
enum XlPivotTableSourceType;
enum XlReferenceStyle;
enum XlMSApplication;
enum XlMouseButton;
enum XlCutCopyMode;
enum XlFillWith;
enum XlFilterAction;
enum XlOrder;
enum XlLinkType;
enum XlApplyNamesOrder;
enum XlEnableCancelKey;
enum XlPageBreak;
enum XlOLEType;
enum XlPageOrientation;
enum XlLinkInfo;
enum XlCommandUnderlines;
enum XlOLEVerb;
enum XlCalculation;
enum XlFileAccess;
enum XlEditionType;
enum XlObjectSize;
enum XlLookAt;
enum XlMailSystem;
enum XlLinkInfoType;
enum XlCVError;
enum XlEditionFormat;
enum XlLink;
enum XlCellType;
enum XlArrangeStyle;
enum XlMousePointer;
enum XlEditionOptionsOption;
enum XlAutoFillType;
enum XlAutoFilterOperator;
enum XlClipboardFormat;
enum XlFileFormat;
enum XlApplicationInternational;
enum XlPageBreakExtent;
enum XlCellInsertionMode;
enum XlFormulaLabel;
enum XlHighlightChangesTime;
enum XlCommentDisplayMode;
enum XlFormatConditionType;
enum XlFormatConditionOperator;
enum XlEnableSelection;
enum XlDVType;
enum XlIMEMode;
enum XlDVAlertStyle;
enum XlChartLocation;
enum XlPaperSize;
enum XlPasteSpecialOperation;
enum XlPasteType;
enum XlPhoneticCharacterType;
enum XlPhoneticAlignment;
enum XlPictureAppearance;
enum XlPivotFieldOrientation;
enum XlPivotFieldCalculation;
enum XlPlacement;
enum XlPlatform;
enum XlPrintLocation;
enum XlPriority;
enum XlPTSelectionMode;
enum XlRangeAutoFormat;
enum XlReferenceType;
enum XlLayoutFormType;
enum XlRoutingSlipDelivery;
enum XlRoutingSlipStatus;
enum XlRunAutoMacro;
enum XlSaveAction;
enum XlSaveAsAccessMode;
enum XlSaveConflictResolution;
enum XlSearchDirection;
enum XlSearchOrder;
enum XlSheetVisibility;
enum XlSortMethod;
enum XlSortMethodOld;
enum XlSortOrder;
enum XlSortOrientation;
enum XlSortType;
enum XlSpecialCellsValue;
enum XlSubscribeToFormat;
enum XlSummaryRow;
enum XlSummaryColumn;
enum XlSummaryReportType;
enum XlTabPosition;
enum XlTextParsingType;
enum XlTextQualifier;
enum XlWBATemplate;
enum XlWindowView;
enum XlXLMMacroType;
enum XlYesNoGuess;
enum XlBordersIndex;
enum XlToolbarProtection;
enum XlBuiltInDialog;
enum XlParameterType;
enum XlParameterDataType;
enum XlFormControl;
enum XlSourceType;
enum XlHtmlType;
enum xlPivotFormatType;
enum XlCmdType;
enum xlColumnDataType;
enum xlQueryType;
enum xlWebSelectionType;
enum XlCubeFieldType;
enum xlWebFormatting;
enum xlDisplayDrawingObjects;
enum xLSubtototalLocationType;
struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
/* interface */ IWindow;
struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
/* interface */ IWindows;
struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
/* interface */ IAppEvents;
struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
/* dual interface */ _Application;
struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
/* interface */ IWorksheetFunction;
struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
/* interface */ IRange;
struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
/* interface */ IChartEvents;
struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
/* dual interface */ _Chart;
struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
/* dual interface */ Sheets;
struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
/* interface */ IVPageBreak;
struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
/* interface */ IHPageBreak;
struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
/* interface */ IHPageBreaks;
struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
/* interface */ IVPageBreaks;
struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
/* interface */ IRecentFile;
struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
/* interface */ IRecentFiles;
struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
/* interface */ IDocEvents;
struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
/* dual interface */ _Worksheet;
struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
/* interface */ IStyle;
struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
/* interface */ IStyles;
struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
/* interface */ IBorders;
struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
/* dual interface */ _Global;
struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
/* interface */ IAddIn;
struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
/* interface */ IAddIns;
struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
/* interface */ IToolbar;
struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
/* interface */ IToolbars;
struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
/* interface */ IToolbarButton;
struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
/* interface */ IToolbarButtons;
struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
/* interface */ IAreas;
struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
/* interface */ IWorkbookEvents;
struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
/* dual interface */ _Workbook;
struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
/* dual interface */ Workbooks;
struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
/* interface */ IMenuBars;
struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
/* interface */ IMenuBar;
struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
/* interface */ IMenus;
struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
/* interface */ IMenu;
struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
/* interface */ IMenuItems;
struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
/* interface */ IMenuItem;
struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
/* interface */ ICharts;
struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
/* interface */ IDrawingObjects;
struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
/* interface */ IPivotCache;
struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
/* interface */ IPivotCaches;
struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
/* interface */ IPivotFormula;
struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
/* interface */ IPivotFormulas;
struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
/* interface */ IPivotTable;
struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
/* interface */ IPivotTables;
struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
/* interface */ IPivotField;
struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
/* interface */ IPivotFields;
struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
/* interface */ ICalculatedFields;
struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
/* interface */ IPivotItem;
struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
/* interface */ IPivotItems;
struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
/* interface */ ICalculatedItems;
struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
/* interface */ ICharacters;
struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
/* interface */ IDialogs;
struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
/* interface */ IDialog;
struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
/* interface */ ISoundNote;
struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
/* interface */ IButton;
struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
/* interface */ IButtons;
struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
/* interface */ ICheckBox;
struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
/* interface */ ICheckBoxes;
struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
/* interface */ IOptionButton;
struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
/* interface */ IOptionButtons;
struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
/* interface */ IEditBox;
struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
/* interface */ IEditBoxes;
struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
/* interface */ IScrollBar;
struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
/* interface */ IScrollBars;
struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
/* interface */ IListBox;
struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
/* interface */ IListBoxes;
struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
/* interface */ IGroupBox;
struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
/* interface */ IGroupBoxes;
struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
/* interface */ IDropDown;
struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
/* interface */ IDropDowns;
struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
/* interface */ ISpinner;
struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
/* interface */ ISpinners;
struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
/* interface */ IDialogFrame;
struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
/* interface */ ILabel;
struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
/* interface */ ILabels;
struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
/* interface */ IPanes;
struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
/* interface */ IPane;
struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
/* interface */ IScenarios;
struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
/* interface */ IScenario;
struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
/* interface */ IGroupObject;
struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
/* interface */ IGroupObjects;
struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
/* interface */ ILine;
struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
/* interface */ ILines;
struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
/* interface */ IRectangle;
struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
/* interface */ IRectangles;
struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
/* interface */ IOval;
struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
/* interface */ IOvals;
struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
/* interface */ IArc;
struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
/* interface */ IArcs;
struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
/* interface */ IOLEObjectEvents;
struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
/* interface */ _IOLEObject;
struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
/* interface */ IOLEObjects;
struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
/* interface */ ITextBox;
struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
/* interface */ ITextBoxes;
struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
/* interface */ IPictures;
struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
/* interface */ IDrawing;
struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
/* interface */ IDrawings;
struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
/* interface */ IRoutingSlip;
struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
/* interface */ IOutline;
struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
/* interface */ IModule;
struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
/* interface */ IModules;
struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
/* interface */ IDialogSheet;
struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
/* interface */ IDialogSheets;
struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
/* interface */ IWorksheets;
struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
/* interface */ IPageSetup;
struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
/* interface */ INames;
struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
/* interface */ IName;
struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
/* interface */ IChartObject;
struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
/* interface */ IChartObjects;
struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
/* interface */ IMailer;
struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
/* interface */ ICustomViews;
struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
/* interface */ ICustomView;
struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
/* interface */ IFormatConditions;
struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
/* interface */ IFormatCondition;
struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
/* interface */ IComments;
struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
/* interface */ IComment;
struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
/* interface */ IRefreshEvents;
struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
/* interface */ _IQueryTable;
struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
/* interface */ IQueryTables;
struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
/* interface */ IParameter;
struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
/* interface */ IParameters;
struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
/* interface */ IODBCError;
struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
/* interface */ IODBCErrors;
struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
/* interface */ IValidation;
struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
/* interface */ IHyperlinks;
struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
/* interface */ IHyperlink;
struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
/* interface */ IAutoFilter;
struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
/* interface */ IFilters;
struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
/* interface */ IFilter;
struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
/* interface */ IAutoCorrect;
struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
/* interface */ IBorder;
struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
/* interface */ IInterior;
struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
/* interface */ IChartFillFormat;
struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
/* interface */ IChartColorFormat;
struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
/* interface */ IAxis;
struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
/* interface */ IChartTitle;
struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
/* interface */ IAxisTitle;
struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
/* interface */ IChartGroup;
struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
/* interface */ IChartGroups;
struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
/* interface */ IAxes;
struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
/* interface */ IPoints;
struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
/* interface */ IPoint;
struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
/* interface */ ISeries;
struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
/* interface */ ISeriesCollection;
struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
/* interface */ IDataLabel;
struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
/* interface */ IDataLabels;
struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
/* interface */ ILegendEntry;
struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
/* interface */ ILegendEntries;
struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
/* interface */ ILegendKey;
struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
/* interface */ ITrendlines;
struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
/* interface */ ITrendline;
struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
/* interface */ ICorners;
struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
/* interface */ ISeriesLines;
struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
/* interface */ IHiLoLines;
struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
/* interface */ IGridlines;
struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
/* interface */ IDropLines;
struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
/* interface */ ILeaderLines;
struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
/* interface */ IUpBars;
struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
/* interface */ IDownBars;
struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
/* interface */ IFloor;
struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
/* interface */ IWalls;
struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
/* interface */ ITickLabels;
struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
/* interface */ IPlotArea;
struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
/* interface */ IChartArea;
struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
/* interface */ ILegend;
struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
/* interface */ IErrorBars;
struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
/* interface */ IDataTable;
struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
/* interface */ IPhonetic;
struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
/* interface */ IShape;
struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
/* interface */ IShapes;
struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
/* interface */ IShapeRange;
struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
/* interface */ IGroupShapes;
struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
/* interface */ ITextFrame;
struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
/* interface */ IConnectorFormat;
struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
/* interface */ IFreeformBuilder;
struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
/* interface */ IControlFormat;
struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
/* interface */ IOLEFormat;
struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
/* interface */ ILinkFormat;
struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
/* interface */ IPublishObjects;
struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
/* dual interface */ PublishObject;
struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
/* interface */ IOLEDBError;
struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
/* interface */ IOLEDBErrors;
struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
/* interface */ IPhonetics;
struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
/* dual interface */ WebOptions;
struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
/* interface */ IPivotLayout;
struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
/* dual interface */ TreeviewControl;
struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
/* dual interface */ CubeField;
struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
/* dual interface */ CubeFields;
struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
/* interface */ IDisplayUnitLabel;
struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
/* dispinterface */ Font;
struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
/* dispinterface */ Window;
struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
/* dispinterface */ Windows;
struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
/* dispinterface */ AppEvents;
struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
/* dispinterface */ WorksheetFunction;
struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
/* dispinterface */ Range;
struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
/* dispinterface */ ChartEvents;
struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreak;
struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreak;
struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreaks;
struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreaks;
struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFile;
struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFiles;
struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
/* dispinterface */ DocEvents;
struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
/* dispinterface */ Style;
struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
/* dispinterface */ Styles;
struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
/* dispinterface */ Borders;
struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
/* dispinterface */ AddIn;
struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
/* dispinterface */ AddIns;
struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbar;
struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbars;
struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButton;
struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButtons;
struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
/* dispinterface */ Areas;
struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
/* dispinterface */ WorkbookEvents;
struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBars;
struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBar;
struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
/* dispinterface */ Menus;
struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
/* dispinterface */ Menu;
struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItems;
struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItem;
struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
/* dispinterface */ Charts;
struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
/* dispinterface */ DrawingObjects;
struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCache;
struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCaches;
struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormula;
struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormulas;
struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTable;
struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTables;
struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
/* dispinterface */ PivotField;
struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFields;
struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedFields;
struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItem;
struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItems;
struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedItems;
struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
/* dispinterface */ Characters;
struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
/* dispinterface */ Dialogs;
struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
/* dispinterface */ Dialog;
struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
/* dispinterface */ SoundNote;
struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
/* dispinterface */ Button;
struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
/* dispinterface */ Buttons;
struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBox;
struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBoxes;
struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButton;
struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButtons;
struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
/* dispinterface */ EditBox;
struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
/* dispinterface */ EditBoxes;
struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBar;
struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBars;
struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
/* dispinterface */ ListBox;
struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
/* dispinterface */ ListBoxes;
struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBox;
struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBoxes;
struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
/* dispinterface */ DropDown;
struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
/* dispinterface */ DropDowns;
struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
/* dispinterface */ Spinner;
struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
/* dispinterface */ Spinners;
struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
/* dispinterface */ DialogFrame;
struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
/* dispinterface */ Label;
struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
/* dispinterface */ Labels;
struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
/* dispinterface */ Panes;
struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
/* dispinterface */ Pane;
struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
/* dispinterface */ Scenarios;
struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
/* dispinterface */ Scenario;
struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObject;
struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObjects;
struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
/* dispinterface */ Line;
struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
/* dispinterface */ Lines;
struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangle;
struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangles;
struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
/* dispinterface */ Oval;
struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
/* dispinterface */ Ovals;
struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
/* dispinterface */ Arc;
struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
/* dispinterface */ Arcs;
struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjectEvents;
struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
/* dispinterface */ _OLEObject;
struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjects;
struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
/* dispinterface */ TextBox;
struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
/* dispinterface */ TextBoxes;
struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
/* dispinterface */ Picture;
struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
/* dispinterface */ Pictures;
struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
/* dispinterface */ Drawing;
struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
/* dispinterface */ Drawings;
struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
/* dispinterface */ RoutingSlip;
struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
/* dispinterface */ Outline;
struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
/* dispinterface */ Module;
struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
/* dispinterface */ Modules;
struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheet;
struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheets;
struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
/* dispinterface */ Worksheets;
struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
/* dispinterface */ PageSetup;
struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
/* dispinterface */ Names;
struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
/* dispinterface */ Name;
struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObject;
struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObjects;
struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
/* dispinterface */ Mailer;
struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
/* dispinterface */ CustomViews;
struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
/* dispinterface */ CustomView;
struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
/* dispinterface */ FormatConditions;
struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
/* dispinterface */ FormatCondition;
struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
/* dispinterface */ Comments;
struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
/* dispinterface */ Comment;
struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
/* dispinterface */ RefreshEvents;
struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
/* dispinterface */ _QueryTable;
struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
/* dispinterface */ QueryTables;
struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
/* dispinterface */ Parameter;
struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
/* dispinterface */ Parameters;
struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCError;
struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCErrors;
struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
/* dispinterface */ Validation;
struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlinks;
struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlink;
struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
/* dispinterface */ AutoFilter;
struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
/* dispinterface */ Filters;
struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
/* dispinterface */ Filter;
struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
/* dispinterface */ AutoCorrect;
struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
/* dispinterface */ Border;
struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
/* dispinterface */ Interior;
struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
/* dispinterface */ ChartFillFormat;
struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
/* dispinterface */ ChartColorFormat;
struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
/* dispinterface */ Axis;
struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
/* dispinterface */ ChartTitle;
struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
/* dispinterface */ AxisTitle;
struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroup;
struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroups;
struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
/* dispinterface */ Axes;
struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
/* dispinterface */ Points;
struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
/* dispinterface */ Point;
struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
/* dispinterface */ Series;
struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesCollection;
struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabel;
struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabels;
struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntry;
struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntries;
struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
/* dispinterface */ LegendKey;
struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
/* dispinterface */ Trendlines;
struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
/* dispinterface */ Trendline;
struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
/* dispinterface */ Corners;
struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesLines;
struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
/* dispinterface */ HiLoLines;
struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
/* dispinterface */ Gridlines;
struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
/* dispinterface */ DropLines;
struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
/* dispinterface */ LeaderLines;
struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
/* dispinterface */ UpBars;
struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
/* dispinterface */ DownBars;
struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
/* dispinterface */ Floor;
struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
/* dispinterface */ Walls;
struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
/* dispinterface */ TickLabels;
struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
/* dispinterface */ PlotArea;
struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
/* dispinterface */ ChartArea;
struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
/* dispinterface */ Legend;
struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorBars;
struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
/* dispinterface */ DataTable;
struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetic;
struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
/* dispinterface */ Shape;
struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
/* dispinterface */ Shapes;
struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
/* dispinterface */ ShapeRange;
struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
/* dispinterface */ GroupShapes;
struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
/* dispinterface */ TextFrame;
struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
/* dispinterface */ ConnectorFormat;
struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
/* dispinterface */ FreeformBuilder;
struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
/* dispinterface */ ControlFormat;
struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
/* dispinterface */ OLEFormat;
struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
/* dispinterface */ LinkFormat;
struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
/* dispinterface */ PublishObjects;
struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBError;
struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBErrors;
struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetics;
struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
/* dispinterface */ PivotLayout;
struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
/* dispinterface */ DisplayUnitLabel;
struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
/* interface */ IDummy;
struct /* coclass */ QueryTable;
struct /* coclass */ Application;
struct /* coclass */ Chart;
struct /* coclass */ Worksheet;
struct /* coclass */ Global;
struct /* coclass */ Workbook;
struct /* coclass */ OLEObject;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(IChartEvents, __uuidof(IChartEvents));
_COM_SMARTPTR_TYPEDEF(IOLEObjectEvents, __uuidof(IOLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(IRefreshEvents, __uuidof(IRefreshEvents));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(Window));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(Windows));
_COM_SMARTPTR_TYPEDEF(AppEvents, __uuidof(AppEvents));
_COM_SMARTPTR_TYPEDEF(WorksheetFunction, __uuidof(WorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Range, __uuidof(Range));
_COM_SMARTPTR_TYPEDEF(ChartEvents, __uuidof(ChartEvents));
_COM_SMARTPTR_TYPEDEF(VPageBreak, __uuidof(VPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreak, __uuidof(HPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreaks, __uuidof(HPageBreaks));
_COM_SMARTPTR_TYPEDEF(VPageBreaks, __uuidof(VPageBreaks));
_COM_SMARTPTR_TYPEDEF(RecentFile, __uuidof(RecentFile));
_COM_SMARTPTR_TYPEDEF(RecentFiles, __uuidof(RecentFiles));
_COM_SMARTPTR_TYPEDEF(DocEvents, __uuidof(DocEvents));
_COM_SMARTPTR_TYPEDEF(Style, __uuidof(Style));
_COM_SMARTPTR_TYPEDEF(Styles, __uuidof(Styles));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(Toolbar, __uuidof(Toolbar));
_COM_SMARTPTR_TYPEDEF(Toolbars, __uuidof(Toolbars));
_COM_SMARTPTR_TYPEDEF(ToolbarButton, __uuidof(ToolbarButton));
_COM_SMARTPTR_TYPEDEF(ToolbarButtons, __uuidof(ToolbarButtons));
_COM_SMARTPTR_TYPEDEF(Areas, __uuidof(Areas));
_COM_SMARTPTR_TYPEDEF(WorkbookEvents, __uuidof(WorkbookEvents));
_COM_SMARTPTR_TYPEDEF(MenuBars, __uuidof(MenuBars));
_COM_SMARTPTR_TYPEDEF(MenuBar, __uuidof(MenuBar));
_COM_SMARTPTR_TYPEDEF(Menus, __uuidof(Menus));
_COM_SMARTPTR_TYPEDEF(Menu, __uuidof(Menu));
_COM_SMARTPTR_TYPEDEF(MenuItems, __uuidof(MenuItems));
_COM_SMARTPTR_TYPEDEF(MenuItem, __uuidof(MenuItem));
_COM_SMARTPTR_TYPEDEF(Charts, __uuidof(Charts));
_COM_SMARTPTR_TYPEDEF(DrawingObjects, __uuidof(DrawingObjects));
_COM_SMARTPTR_TYPEDEF(PivotCache, __uuidof(PivotCache));
_COM_SMARTPTR_TYPEDEF(PivotCaches, __uuidof(PivotCaches));
_COM_SMARTPTR_TYPEDEF(PivotFormula, __uuidof(PivotFormula));
_COM_SMARTPTR_TYPEDEF(PivotFormulas, __uuidof(PivotFormulas));
_COM_SMARTPTR_TYPEDEF(PivotTable, __uuidof(PivotTable));
_COM_SMARTPTR_TYPEDEF(PivotTables, __uuidof(PivotTables));
_COM_SMARTPTR_TYPEDEF(PivotField, __uuidof(PivotField));
_COM_SMARTPTR_TYPEDEF(PivotFields, __uuidof(PivotFields));
_COM_SMARTPTR_TYPEDEF(CalculatedFields, __uuidof(CalculatedFields));
_COM_SMARTPTR_TYPEDEF(PivotItem, __uuidof(PivotItem));
_COM_SMARTPTR_TYPEDEF(PivotItems, __uuidof(PivotItems));
_COM_SMARTPTR_TYPEDEF(CalculatedItems, __uuidof(CalculatedItems));
_COM_SMARTPTR_TYPEDEF(Characters, __uuidof(Characters));
_COM_SMARTPTR_TYPEDEF(Dialogs, __uuidof(Dialogs));
_COM_SMARTPTR_TYPEDEF(Dialog, __uuidof(Dialog));
_COM_SMARTPTR_TYPEDEF(SoundNote, __uuidof(SoundNote));
_COM_SMARTPTR_TYPEDEF(Button, __uuidof(Button));
_COM_SMARTPTR_TYPEDEF(Buttons, __uuidof(Buttons));
_COM_SMARTPTR_TYPEDEF(CheckBox, __uuidof(CheckBox));
_COM_SMARTPTR_TYPEDEF(CheckBoxes, __uuidof(CheckBoxes));
_COM_SMARTPTR_TYPEDEF(OptionButton, __uuidof(OptionButton));
_COM_SMARTPTR_TYPEDEF(OptionButtons, __uuidof(OptionButtons));
_COM_SMARTPTR_TYPEDEF(EditBox, __uuidof(EditBox));
_COM_SMARTPTR_TYPEDEF(EditBoxes, __uuidof(EditBoxes));
_COM_SMARTPTR_TYPEDEF(ScrollBar, __uuidof(ScrollBar));
_COM_SMARTPTR_TYPEDEF(ScrollBars, __uuidof(ScrollBars));
_COM_SMARTPTR_TYPEDEF(ListBox, __uuidof(ListBox));
_COM_SMARTPTR_TYPEDEF(ListBoxes, __uuidof(ListBoxes));
_COM_SMARTPTR_TYPEDEF(GroupBox, __uuidof(GroupBox));
_COM_SMARTPTR_TYPEDEF(GroupBoxes, __uuidof(GroupBoxes));
_COM_SMARTPTR_TYPEDEF(DropDown, __uuidof(DropDown));
_COM_SMARTPTR_TYPEDEF(DropDowns, __uuidof(DropDowns));
_COM_SMARTPTR_TYPEDEF(Spinner, __uuidof(Spinner));
_COM_SMARTPTR_TYPEDEF(Spinners, __uuidof(Spinners));
_COM_SMARTPTR_TYPEDEF(DialogFrame, __uuidof(DialogFrame));
_COM_SMARTPTR_TYPEDEF(Label, __uuidof(Label));
_COM_SMARTPTR_TYPEDEF(Labels, __uuidof(Labels));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Scenarios, __uuidof(Scenarios));
_COM_SMARTPTR_TYPEDEF(Scenario, __uuidof(Scenario));
_COM_SMARTPTR_TYPEDEF(GroupObject, __uuidof(GroupObject));
_COM_SMARTPTR_TYPEDEF(GroupObjects, __uuidof(GroupObjects));
_COM_SMARTPTR_TYPEDEF(Line, __uuidof(Line));
_COM_SMARTPTR_TYPEDEF(Lines, __uuidof(Lines));
_COM_SMARTPTR_TYPEDEF(Rectangle, __uuidof(Rectangle));
_COM_SMARTPTR_TYPEDEF(Rectangles, __uuidof(Rectangles));
_COM_SMARTPTR_TYPEDEF(Oval, __uuidof(Oval));
_COM_SMARTPTR_TYPEDEF(Ovals, __uuidof(Ovals));
_COM_SMARTPTR_TYPEDEF(Arc, __uuidof(Arc));
_COM_SMARTPTR_TYPEDEF(Arcs, __uuidof(Arcs));
_COM_SMARTPTR_TYPEDEF(OLEObjectEvents, __uuidof(OLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(_OLEObject, __uuidof(_OLEObject));
_COM_SMARTPTR_TYPEDEF(OLEObjects, __uuidof(OLEObjects));
_COM_SMARTPTR_TYPEDEF(TextBox, __uuidof(TextBox));
_COM_SMARTPTR_TYPEDEF(TextBoxes, __uuidof(TextBoxes));
_COM_SMARTPTR_TYPEDEF(Picture, __uuidof(Picture));
_COM_SMARTPTR_TYPEDEF(Pictures, __uuidof(Pictures));
_COM_SMARTPTR_TYPEDEF(Drawing, __uuidof(Drawing));
_COM_SMARTPTR_TYPEDEF(Drawings, __uuidof(Drawings));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(RoutingSlip));
_COM_SMARTPTR_TYPEDEF(Outline, __uuidof(Outline));
_COM_SMARTPTR_TYPEDEF(Module, __uuidof(Module));
_COM_SMARTPTR_TYPEDEF(Modules, __uuidof(Modules));
_COM_SMARTPTR_TYPEDEF(DialogSheet, __uuidof(DialogSheet));
_COM_SMARTPTR_TYPEDEF(DialogSheets, __uuidof(DialogSheets));
_COM_SMARTPTR_TYPEDEF(Worksheets, __uuidof(Worksheets));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(Names, __uuidof(Names));
_COM_SMARTPTR_TYPEDEF(Name, __uuidof(Name));
_COM_SMARTPTR_TYPEDEF(ChartObject, __uuidof(ChartObject));
_COM_SMARTPTR_TYPEDEF(ChartObjects, __uuidof(ChartObjects));
_COM_SMARTPTR_TYPEDEF(Mailer, __uuidof(Mailer));
_COM_SMARTPTR_TYPEDEF(CustomViews, __uuidof(CustomViews));
_COM_SMARTPTR_TYPEDEF(CustomView, __uuidof(CustomView));
_COM_SMARTPTR_TYPEDEF(FormatConditions, __uuidof(FormatConditions));
_COM_SMARTPTR_TYPEDEF(FormatCondition, __uuidof(FormatCondition));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(RefreshEvents, __uuidof(RefreshEvents));
_COM_SMARTPTR_TYPEDEF(_QueryTable, __uuidof(_QueryTable));
_COM_SMARTPTR_TYPEDEF(QueryTables, __uuidof(QueryTables));
_COM_SMARTPTR_TYPEDEF(Parameter, __uuidof(Parameter));
_COM_SMARTPTR_TYPEDEF(Parameters, __uuidof(Parameters));
_COM_SMARTPTR_TYPEDEF(ODBCError, __uuidof(ODBCError));
_COM_SMARTPTR_TYPEDEF(ODBCErrors, __uuidof(ODBCErrors));
_COM_SMARTPTR_TYPEDEF(Validation, __uuidof(Validation));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(IDocEvents, __uuidof(IDocEvents));
_COM_SMARTPTR_TYPEDEF(IWorkbookEvents, __uuidof(IWorkbookEvents));
_COM_SMARTPTR_TYPEDEF(AutoFilter, __uuidof(AutoFilter));
_COM_SMARTPTR_TYPEDEF(Filters, __uuidof(Filters));
_COM_SMARTPTR_TYPEDEF(Filter, __uuidof(Filter));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(Border, __uuidof(Border));
_COM_SMARTPTR_TYPEDEF(Interior, __uuidof(Interior));
_COM_SMARTPTR_TYPEDEF(ChartFillFormat, __uuidof(ChartFillFormat));
_COM_SMARTPTR_TYPEDEF(ChartColorFormat, __uuidof(ChartColorFormat));
_COM_SMARTPTR_TYPEDEF(Axis, __uuidof(Axis));
_COM_SMARTPTR_TYPEDEF(ChartTitle, __uuidof(ChartTitle));
_COM_SMARTPTR_TYPEDEF(AxisTitle, __uuidof(AxisTitle));
_COM_SMARTPTR_TYPEDEF(ChartGroup, __uuidof(ChartGroup));
_COM_SMARTPTR_TYPEDEF(ChartGroups, __uuidof(ChartGroups));
_COM_SMARTPTR_TYPEDEF(Axes, __uuidof(Axes));
_COM_SMARTPTR_TYPEDEF(Points, __uuidof(Points));
_COM_SMARTPTR_TYPEDEF(Point, __uuidof(Point));
_COM_SMARTPTR_TYPEDEF(Series, __uuidof(Series));
_COM_SMARTPTR_TYPEDEF(SeriesCollection, __uuidof(SeriesCollection));
_COM_SMARTPTR_TYPEDEF(DataLabel, __uuidof(DataLabel));
_COM_SMARTPTR_TYPEDEF(DataLabels, __uuidof(DataLabels));
_COM_SMARTPTR_TYPEDEF(LegendEntry, __uuidof(LegendEntry));
_COM_SMARTPTR_TYPEDEF(LegendEntries, __uuidof(LegendEntries));
_COM_SMARTPTR_TYPEDEF(LegendKey, __uuidof(LegendKey));
_COM_SMARTPTR_TYPEDEF(Trendlines, __uuidof(Trendlines));
_COM_SMARTPTR_TYPEDEF(Trendline, __uuidof(Trendline));
_COM_SMARTPTR_TYPEDEF(Corners, __uuidof(Corners));
_COM_SMARTPTR_TYPEDEF(SeriesLines, __uuidof(SeriesLines));
_COM_SMARTPTR_TYPEDEF(HiLoLines, __uuidof(HiLoLines));
_COM_SMARTPTR_TYPEDEF(Gridlines, __uuidof(Gridlines));
_COM_SMARTPTR_TYPEDEF(DropLines, __uuidof(DropLines));
_COM_SMARTPTR_TYPEDEF(LeaderLines, __uuidof(LeaderLines));
_COM_SMARTPTR_TYPEDEF(UpBars, __uuidof(UpBars));
_COM_SMARTPTR_TYPEDEF(DownBars, __uuidof(DownBars));
_COM_SMARTPTR_TYPEDEF(Floor, __uuidof(Floor));
_COM_SMARTPTR_TYPEDEF(Walls, __uuidof(Walls));
_COM_SMARTPTR_TYPEDEF(TickLabels, __uuidof(TickLabels));
_COM_SMARTPTR_TYPEDEF(PlotArea, __uuidof(PlotArea));
_COM_SMARTPTR_TYPEDEF(ChartArea, __uuidof(ChartArea));
_COM_SMARTPTR_TYPEDEF(Legend, __uuidof(Legend));
_COM_SMARTPTR_TYPEDEF(ErrorBars, __uuidof(ErrorBars));
_COM_SMARTPTR_TYPEDEF(DataTable, __uuidof(DataTable));
_COM_SMARTPTR_TYPEDEF(Phonetic, __uuidof(Phonetic));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(ControlFormat, __uuidof(ControlFormat));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(OLEDBError, __uuidof(OLEDBError));
_COM_SMARTPTR_TYPEDEF(OLEDBErrors, __uuidof(OLEDBErrors));
_COM_SMARTPTR_TYPEDEF(Phonetics, __uuidof(Phonetics));
_COM_SMARTPTR_TYPEDEF(PivotLayout, __uuidof(PivotLayout));
_COM_SMARTPTR_TYPEDEF(DisplayUnitLabel, __uuidof(DisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(IDummy, __uuidof(IDummy));
_COM_SMARTPTR_TYPEDEF(IWindows, __uuidof(IWindows));
_COM_SMARTPTR_TYPEDEF(IWorksheetFunction, __uuidof(IWorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Sheets, __uuidof(Sheets));
_COM_SMARTPTR_TYPEDEF(IHPageBreaks, __uuidof(IHPageBreaks));
_COM_SMARTPTR_TYPEDEF(IVPageBreaks, __uuidof(IVPageBreaks));
_COM_SMARTPTR_TYPEDEF(IRecentFiles, __uuidof(IRecentFiles));
_COM_SMARTPTR_TYPEDEF(_Worksheet, __uuidof(_Worksheet));
_COM_SMARTPTR_TYPEDEF(IStyle, __uuidof(IStyle));
_COM_SMARTPTR_TYPEDEF(IStyles, __uuidof(IStyles));
_COM_SMARTPTR_TYPEDEF(IBorders, __uuidof(IBorders));
_COM_SMARTPTR_TYPEDEF(IAddIn, __uuidof(IAddIn));
_COM_SMARTPTR_TYPEDEF(IAddIns, __uuidof(IAddIns));
_COM_SMARTPTR_TYPEDEF(IToolbar, __uuidof(IToolbar));
_COM_SMARTPTR_TYPEDEF(IToolbars, __uuidof(IToolbars));
_COM_SMARTPTR_TYPEDEF(IToolbarButton, __uuidof(IToolbarButton));
_COM_SMARTPTR_TYPEDEF(IToolbarButtons, __uuidof(IToolbarButtons));
_COM_SMARTPTR_TYPEDEF(IAreas, __uuidof(IAreas));
_COM_SMARTPTR_TYPEDEF(IMenuBars, __uuidof(IMenuBars));
_COM_SMARTPTR_TYPEDEF(IMenuBar, __uuidof(IMenuBar));
_COM_SMARTPTR_TYPEDEF(IMenus, __uuidof(IMenus));
_COM_SMARTPTR_TYPEDEF(IMenu, __uuidof(IMenu));
_COM_SMARTPTR_TYPEDEF(IMenuItems, __uuidof(IMenuItems));
_COM_SMARTPTR_TYPEDEF(IMenuItem, __uuidof(IMenuItem));
_COM_SMARTPTR_TYPEDEF(IDrawingObjects, __uuidof(IDrawingObjects));
_COM_SMARTPTR_TYPEDEF(IPivotCache, __uuidof(IPivotCache));
_COM_SMARTPTR_TYPEDEF(IPivotCaches, __uuidof(IPivotCaches));
_COM_SMARTPTR_TYPEDEF(IPivotFormula, __uuidof(IPivotFormula));
_COM_SMARTPTR_TYPEDEF(IPivotFormulas, __uuidof(IPivotFormulas));
_COM_SMARTPTR_TYPEDEF(IPivotTables, __uuidof(IPivotTables));
_COM_SMARTPTR_TYPEDEF(IPivotFields, __uuidof(IPivotFields));
_COM_SMARTPTR_TYPEDEF(ICalculatedFields, __uuidof(ICalculatedFields));
_COM_SMARTPTR_TYPEDEF(IPivotItem, __uuidof(IPivotItem));
_COM_SMARTPTR_TYPEDEF(IPivotItems, __uuidof(IPivotItems));
_COM_SMARTPTR_TYPEDEF(ICalculatedItems, __uuidof(ICalculatedItems));
_COM_SMARTPTR_TYPEDEF(ICharacters, __uuidof(ICharacters));
_COM_SMARTPTR_TYPEDEF(IDialogs, __uuidof(IDialogs));
_COM_SMARTPTR_TYPEDEF(IDialog, __uuidof(IDialog));
_COM_SMARTPTR_TYPEDEF(ISoundNote, __uuidof(ISoundNote));
_COM_SMARTPTR_TYPEDEF(IButton, __uuidof(IButton));
_COM_SMARTPTR_TYPEDEF(IButtons, __uuidof(IButtons));
_COM_SMARTPTR_TYPEDEF(ICheckBox, __uuidof(ICheckBox));
_COM_SMARTPTR_TYPEDEF(ICheckBoxes, __uuidof(ICheckBoxes));
_COM_SMARTPTR_TYPEDEF(IOptionButton, __uuidof(IOptionButton));
_COM_SMARTPTR_TYPEDEF(IOptionButtons, __uuidof(IOptionButtons));
_COM_SMARTPTR_TYPEDEF(IEditBox, __uuidof(IEditBox));
_COM_SMARTPTR_TYPEDEF(IEditBoxes, __uuidof(IEditBoxes));
_COM_SMARTPTR_TYPEDEF(IScrollBar, __uuidof(IScrollBar));
_COM_SMARTPTR_TYPEDEF(IScrollBars, __uuidof(IScrollBars));
_COM_SMARTPTR_TYPEDEF(IListBox, __uuidof(IListBox));
_COM_SMARTPTR_TYPEDEF(IListBoxes, __uuidof(IListBoxes));
_COM_SMARTPTR_TYPEDEF(IGroupBox, __uuidof(IGroupBox));
_COM_SMARTPTR_TYPEDEF(IGroupBoxes, __uuidof(IGroupBoxes));
_COM_SMARTPTR_TYPEDEF(IDropDown, __uuidof(IDropDown));
_COM_SMARTPTR_TYPEDEF(IDropDowns, __uuidof(IDropDowns));
_COM_SMARTPTR_TYPEDEF(ISpinner, __uuidof(ISpinner));
_COM_SMARTPTR_TYPEDEF(ISpinners, __uuidof(ISpinners));
_COM_SMARTPTR_TYPEDEF(IDialogFrame, __uuidof(IDialogFrame));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(ILabels, __uuidof(ILabels));
_COM_SMARTPTR_TYPEDEF(IPanes, __uuidof(IPanes));
_COM_SMARTPTR_TYPEDEF(IPane, __uuidof(IPane));
_COM_SMARTPTR_TYPEDEF(IScenarios, __uuidof(IScenarios));
_COM_SMARTPTR_TYPEDEF(IScenario, __uuidof(IScenario));
_COM_SMARTPTR_TYPEDEF(IGroupObject, __uuidof(IGroupObject));
_COM_SMARTPTR_TYPEDEF(IGroupObjects, __uuidof(IGroupObjects));
_COM_SMARTPTR_TYPEDEF(ILine, __uuidof(ILine));
_COM_SMARTPTR_TYPEDEF(ILines, __uuidof(ILines));
_COM_SMARTPTR_TYPEDEF(IRectangle, __uuidof(IRectangle));
_COM_SMARTPTR_TYPEDEF(IRectangles, __uuidof(IRectangles));
_COM_SMARTPTR_TYPEDEF(IOval, __uuidof(IOval));
_COM_SMARTPTR_TYPEDEF(IOvals, __uuidof(IOvals));
_COM_SMARTPTR_TYPEDEF(IArc, __uuidof(IArc));
_COM_SMARTPTR_TYPEDEF(IArcs, __uuidof(IArcs));
_COM_SMARTPTR_TYPEDEF(_IOLEObject, __uuidof(_IOLEObject));
_COM_SMARTPTR_TYPEDEF(ITextBox, __uuidof(ITextBox));
_COM_SMARTPTR_TYPEDEF(ITextBoxes, __uuidof(ITextBoxes));
_COM_SMARTPTR_TYPEDEF(IPictures, __uuidof(IPictures));
_COM_SMARTPTR_TYPEDEF(IDrawing, __uuidof(IDrawing));
_COM_SMARTPTR_TYPEDEF(IDrawings, __uuidof(IDrawings));
_COM_SMARTPTR_TYPEDEF(IRoutingSlip, __uuidof(IRoutingSlip));
_COM_SMARTPTR_TYPEDEF(IOutline, __uuidof(IOutline));
_COM_SMARTPTR_TYPEDEF(IModule, __uuidof(IModule));
_COM_SMARTPTR_TYPEDEF(IModules, __uuidof(IModules));
_COM_SMARTPTR_TYPEDEF(IDialogSheet, __uuidof(IDialogSheet));
_COM_SMARTPTR_TYPEDEF(IDialogSheets, __uuidof(IDialogSheets));
_COM_SMARTPTR_TYPEDEF(IWorksheets, __uuidof(IWorksheets));
_COM_SMARTPTR_TYPEDEF(IPageSetup, __uuidof(IPageSetup));
_COM_SMARTPTR_TYPEDEF(INames, __uuidof(INames));
_COM_SMARTPTR_TYPEDEF(IName, __uuidof(IName));
_COM_SMARTPTR_TYPEDEF(IChartObjects, __uuidof(IChartObjects));
_COM_SMARTPTR_TYPEDEF(IMailer, __uuidof(IMailer));
_COM_SMARTPTR_TYPEDEF(ICustomViews, __uuidof(ICustomViews));
_COM_SMARTPTR_TYPEDEF(ICustomView, __uuidof(ICustomView));
_COM_SMARTPTR_TYPEDEF(IFormatConditions, __uuidof(IFormatConditions));
_COM_SMARTPTR_TYPEDEF(IFormatCondition, __uuidof(IFormatCondition));
_COM_SMARTPTR_TYPEDEF(IComments, __uuidof(IComments));
_COM_SMARTPTR_TYPEDEF(IComment, __uuidof(IComment));
_COM_SMARTPTR_TYPEDEF(_IQueryTable, __uuidof(_IQueryTable));
_COM_SMARTPTR_TYPEDEF(IQueryTables, __uuidof(IQueryTables));
_COM_SMARTPTR_TYPEDEF(IParameter, __uuidof(IParameter));
_COM_SMARTPTR_TYPEDEF(IParameters, __uuidof(IParameters));
_COM_SMARTPTR_TYPEDEF(IODBCError, __uuidof(IODBCError));
_COM_SMARTPTR_TYPEDEF(IODBCErrors, __uuidof(IODBCErrors));
_COM_SMARTPTR_TYPEDEF(IValidation, __uuidof(IValidation));
_COM_SMARTPTR_TYPEDEF(IHyperlinks, __uuidof(IHyperlinks));
_COM_SMARTPTR_TYPEDEF(IHyperlink, __uuidof(IHyperlink));
_COM_SMARTPTR_TYPEDEF(IAutoFilter, __uuidof(IAutoFilter));
_COM_SMARTPTR_TYPEDEF(IFilters, __uuidof(IFilters));
_COM_SMARTPTR_TYPEDEF(IFilter, __uuidof(IFilter));
_COM_SMARTPTR_TYPEDEF(IAutoCorrect, __uuidof(IAutoCorrect));
_COM_SMARTPTR_TYPEDEF(IBorder, __uuidof(IBorder));
_COM_SMARTPTR_TYPEDEF(IInterior, __uuidof(IInterior));
_COM_SMARTPTR_TYPEDEF(IChartFillFormat, __uuidof(IChartFillFormat));
_COM_SMARTPTR_TYPEDEF(IChartColorFormat, __uuidof(IChartColorFormat));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IChartTitle, __uuidof(IChartTitle));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(IChartGroup, __uuidof(IChartGroup));
_COM_SMARTPTR_TYPEDEF(IChartGroups, __uuidof(IChartGroups));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IPoints, __uuidof(IPoints));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(ISeriesCollection, __uuidof(ISeriesCollection));
_COM_SMARTPTR_TYPEDEF(IDataLabel, __uuidof(IDataLabel));
_COM_SMARTPTR_TYPEDEF(IDataLabels, __uuidof(IDataLabels));
_COM_SMARTPTR_TYPEDEF(ILegendEntry, __uuidof(ILegendEntry));
_COM_SMARTPTR_TYPEDEF(ILegendEntries, __uuidof(ILegendEntries));
_COM_SMARTPTR_TYPEDEF(ILegendKey, __uuidof(ILegendKey));
_COM_SMARTPTR_TYPEDEF(ITrendlines, __uuidof(ITrendlines));
_COM_SMARTPTR_TYPEDEF(ITrendline, __uuidof(ITrendline));
_COM_SMARTPTR_TYPEDEF(ICorners, __uuidof(ICorners));
_COM_SMARTPTR_TYPEDEF(ISeriesLines, __uuidof(ISeriesLines));
_COM_SMARTPTR_TYPEDEF(IHiLoLines, __uuidof(IHiLoLines));
_COM_SMARTPTR_TYPEDEF(IGridlines, __uuidof(IGridlines));
_COM_SMARTPTR_TYPEDEF(IDropLines, __uuidof(IDropLines));
_COM_SMARTPTR_TYPEDEF(ILeaderLines, __uuidof(ILeaderLines));
_COM_SMARTPTR_TYPEDEF(IUpBars, __uuidof(IUpBars));
_COM_SMARTPTR_TYPEDEF(IDownBars, __uuidof(IDownBars));
_COM_SMARTPTR_TYPEDEF(IFloor, __uuidof(IFloor));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(ITickLabels, __uuidof(ITickLabels));
_COM_SMARTPTR_TYPEDEF(IPlotArea, __uuidof(IPlotArea));
_COM_SMARTPTR_TYPEDEF(IChartArea, __uuidof(IChartArea));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(IErrorBars, __uuidof(IErrorBars));
_COM_SMARTPTR_TYPEDEF(IDataTable, __uuidof(IDataTable));
_COM_SMARTPTR_TYPEDEF(IPhonetic, __uuidof(IPhonetic));
_COM_SMARTPTR_TYPEDEF(IShape, __uuidof(IShape));
_COM_SMARTPTR_TYPEDEF(IShapes, __uuidof(IShapes));
_COM_SMARTPTR_TYPEDEF(IShapeRange, __uuidof(IShapeRange));
_COM_SMARTPTR_TYPEDEF(IGroupShapes, __uuidof(IGroupShapes));
_COM_SMARTPTR_TYPEDEF(ITextFrame, __uuidof(ITextFrame));
_COM_SMARTPTR_TYPEDEF(IConnectorFormat, __uuidof(IConnectorFormat));
_COM_SMARTPTR_TYPEDEF(IFreeformBuilder, __uuidof(IFreeformBuilder));
_COM_SMARTPTR_TYPEDEF(IControlFormat, __uuidof(IControlFormat));
_COM_SMARTPTR_TYPEDEF(IOLEFormat, __uuidof(IOLEFormat));
_COM_SMARTPTR_TYPEDEF(ILinkFormat, __uuidof(ILinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(IPublishObjects, __uuidof(IPublishObjects));
_COM_SMARTPTR_TYPEDEF(IOLEDBError, __uuidof(IOLEDBError));
_COM_SMARTPTR_TYPEDEF(IOLEDBErrors, __uuidof(IOLEDBErrors));
_COM_SMARTPTR_TYPEDEF(IPhonetics, __uuidof(IPhonetics));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(TreeviewControl, __uuidof(TreeviewControl));
_COM_SMARTPTR_TYPEDEF(CubeField, __uuidof(CubeField));
_COM_SMARTPTR_TYPEDEF(IPivotField, __uuidof(IPivotField));
_COM_SMARTPTR_TYPEDEF(CubeFields, __uuidof(CubeFields));
_COM_SMARTPTR_TYPEDEF(IPivotTable, __uuidof(IPivotTable));
_COM_SMARTPTR_TYPEDEF(IPivotLayout, __uuidof(IPivotLayout));
_COM_SMARTPTR_TYPEDEF(IDisplayUnitLabel, __uuidof(IDisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(IWindow, __uuidof(IWindow));
_COM_SMARTPTR_TYPEDEF(_Chart, __uuidof(_Chart));
_COM_SMARTPTR_TYPEDEF(_Workbook, __uuidof(_Workbook));
_COM_SMARTPTR_TYPEDEF(ICharts, __uuidof(ICharts));
_COM_SMARTPTR_TYPEDEF(IChartObject, __uuidof(IChartObject));
_COM_SMARTPTR_TYPEDEF(IRange, __uuidof(IRange));
_COM_SMARTPTR_TYPEDEF(IVPageBreak, __uuidof(IVPageBreak));
_COM_SMARTPTR_TYPEDEF(IHPageBreak, __uuidof(IHPageBreak));
_COM_SMARTPTR_TYPEDEF(IAppEvents, __uuidof(IAppEvents));
_COM_SMARTPTR_TYPEDEF(IRecentFile, __uuidof(IRecentFile));
_COM_SMARTPTR_TYPEDEF(Workbooks, __uuidof(Workbooks));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(IOLEObjects, __uuidof(IOLEObjects));

//
// Type library items
//

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAccent,put=PutAccent))
    enum Office::MsoTriState Accent;
    __declspec(property(get=GetAngle,put=PutAngle))
    enum Office::MsoCalloutAngleType Angle;
    __declspec(property(get=GetAutoAttach,put=PutAutoAttach))
    enum Office::MsoTriState AutoAttach;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetBorder,put=PutBorder))
    enum Office::MsoTriState Border;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoCalloutType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum Office::MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum Office::MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum Office::MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum Office::MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum Office::MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum Office::MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum Office::MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum Office::MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum Office::MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum Office::MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetExcelRGB,put=PutExcelRGB))
    Office::MsoRGBType ExcelRGB;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    Office::MsoRGBType GetExcelRGB ( );
    void PutExcelRGB (
        Office::MsoRGBType ExcelRGB );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum Office::MsoColorType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_ExcelRGB (
        /*[out,retval]*/ Office::MsoRGBType * ExcelRGB ) = 0;
      virtual HRESULT __stdcall put_ExcelRGB (
        /*[in]*/ Office::MsoRGBType ExcelRGB ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ int * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ int SchemeColor ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoColorType * Type ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetBeginArrowheadLength,put=PutBeginArrowheadLength))
    enum Office::MsoArrowheadLength BeginArrowheadLength;
    __declspec(property(get=GetBeginArrowheadStyle,put=PutBeginArrowheadStyle))
    enum Office::MsoArrowheadStyle BeginArrowheadStyle;
    __declspec(property(get=GetBeginArrowheadWidth,put=PutBeginArrowheadWidth))
    enum Office::MsoArrowheadWidth BeginArrowheadWidth;
    __declspec(property(get=GetDashStyle,put=PutDashStyle))
    enum Office::MsoLineDashStyle DashStyle;
    __declspec(property(get=GetEndArrowheadLength,put=PutEndArrowheadLength))
    enum Office::MsoArrowheadLength EndArrowheadLength;
    __declspec(property(get=GetEndArrowheadStyle,put=PutEndArrowheadStyle))
    enum Office::MsoArrowheadStyle EndArrowheadStyle;
    __declspec(property(get=GetEndArrowheadWidth,put=PutEndArrowheadWidth))
    enum Office::MsoArrowheadWidth EndArrowheadWidth;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetPattern,put=PutPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum Office::MsoLineStyle Style;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum Office::MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum Office::MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum Office::MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetColorType,put=PutColorType))
    enum Office::MsoPictureColorType ColorType;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetTransparencyColor,put=PutTransparencyColor))
    Office::MsoRGBType TransparencyColor;
    __declspec(property(get=GetTransparentBackground,put=PutTransparentBackground))
    enum Office::MsoTriState TransparentBackground;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ Office::MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ Office::MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum Office::MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetObscured,put=PutObscured))
    enum Office::MsoTriState Obscured;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoShadowType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum Office::MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum Office::MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum Office::MsoTextEffectAlignment Alignment;
    __declspec(property(get=GetFontBold,put=PutFontBold))
    enum Office::MsoTriState FontBold;
    __declspec(property(get=GetFontItalic,put=PutFontItalic))
    enum Office::MsoTriState FontItalic;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetKernedPairs,put=PutKernedPairs))
    enum Office::MsoTriState KernedPairs;
    __declspec(property(get=GetNormalizedHeight,put=PutNormalizedHeight))
    enum Office::MsoTriState NormalizedHeight;
    __declspec(property(get=GetPresetShape,put=PutPresetShape))
    enum Office::MsoPresetTextEffectShape PresetShape;
    __declspec(property(get=GetPresetTextEffect,put=PutPresetTextEffect))
    enum Office::MsoPresetTextEffect PresetTextEffect;
    __declspec(property(get=GetRotatedChars,put=PutRotatedChars))
    enum Office::MsoTriState RotatedChars;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum Office::MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum Office::MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum Office::MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum Office::MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum Office::MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum Office::MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum Office::MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum Office::MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum Office::MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum Office::MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum Office::MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum Office::MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetExtrusionColorType,put=PutExtrusionColorType))
    enum Office::MsoExtrusionColorType ExtrusionColorType;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    enum Office::MsoTriState Perspective;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetLightingDirection,put=PutPresetLightingDirection))
    enum Office::MsoPresetLightingDirection PresetLightingDirection;
    __declspec(property(get=GetPresetLightingSoftness,put=PutPresetLightingSoftness))
    enum Office::MsoPresetLightingSoftness PresetLightingSoftness;
    __declspec(property(get=GetPresetMaterial,put=PutPresetMaterial))
    enum Office::MsoPresetMaterial PresetMaterial;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum Office::MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum Office::MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum Office::MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

enum Constants
{
    xlAll = -4104,
    xlAutomatic = -4105,
    xlBoth = 1,
    xlCenter = -4108,
    xlChecker = 9,
    xlCircle = 8,
    xlCorner = 2,
    xlCrissCross = 16,
    xlCross = 4,
    xlDiamond = 2,
    xlDistributed = -4117,
    xlDoubleAccounting = 5,
    xlFixedValue = 1,
    xlFormats = -4122,
    xlGray16 = 17,
    xlGray8 = 18,
    xlGrid = 15,
    xlHigh = -4127,
    xlInside = 2,
    xlJustify = -4130,
    xlLightDown = 13,
    xlLightHorizontal = 11,
    xlLightUp = 14,
    xlLightVertical = 12,
    xlLow = -4134,
    xlManual = -4135,
    xlMinusValues = 3,
    xlModule = -4141,
    xlNextToAxis = 4,
    xlNone = -4142,
    xlNotes = -4144,
    xlOff = -4146,
    xlOn = 1,
    xlPercent = 2,
    xlPlus = 9,
    xlPlusValues = 2,
    xlSemiGray75 = 10,
    xlShowLabel = 4,
    xlShowLabelAndPercent = 5,
    xlShowPercent = 3,
    xlShowValue = 2,
    xlSimple = -4154,
    xlSingle = 2,
    xlSingleAccounting = 4,
    xlSolid = 1,
    xlSquare = 1,
    xlStar = 5,
    xlStError = 4,
    xlToolbarButton = 2,
    xlTriangle = 3,
    xlGray25 = -4124,
    xlGray50 = -4125,
    xlGray75 = -4126,
    xlBottom = -4107,
    xlLeft = -4131,
    xlRight = -4152,
    xlTop = -4160,
    xl3DBar = -4099,
    xl3DSurface = -4103,
    xlBar = 2,
    xlColumn = 3,
    xlCombination = -4111,
    xlCustom = -4114,
    xlDefaultAutoFormat = -1,
    xlMaximum = 2,
    xlMinimum = 4,
    xlOpaque = 3,
    xlTransparent = 2,
    xlBidi = -5000,
    xlLatin = -5001,
    xlContext = -5002,
    xlLTR = -5003,
    xlRTL = -5004,
    xlFullScript = 1,
    xlPartialScript = 2,
    xlMixedScript = 3,
    xlMixedAuthorizedScript = 4,
    xlVisualCursor = 2,
    xlLogicalCursor = 1,
    xlSystem = 1,
    xlPartial = 3,
    xlHindiNumerals = 3,
    xlBidiCalendar = 3,
    xlGregorian = 2,
    xlComplete = 4,
    xlScale = 3,
    xlClosed = 3,
    xlColor1 = 7,
    xlColor2 = 8,
    xlColor3 = 9,
    xlConstants = 2,
    xlContents = 2,
    xlBelow = 1,
    xlCascade = 7,
    xlCenterAcrossSelection = 7,
    xlChart4 = 2,
    xlChartSeries = 17,
    xlChartShort = 6,
    xlChartTitles = 18,
    xlClassic1 = 1,
    xlClassic2 = 2,
    xlClassic3 = 3,
    xl3DEffects1 = 13,
    xl3DEffects2 = 14,
    xlAbove = 0,
    xlAccounting1 = 4,
    xlAccounting2 = 5,
    xlAccounting3 = 6,
    xlAccounting4 = 17,
    xlAdd = 2,
    xlDebugCodePane = 13,
    xlDesktop = 9,
    xlDirect = 1,
    xlDivide = 5,
    xlDoubleClosed = 5,
    xlDoubleOpen = 4,
    xlDoubleQuote = 1,
    xlEntireChart = 20,
    xlExcelMenus = 1,
    xlExtended = 3,
    xlFill = 5,
    xlFirst = 0,
    xlFloating = 5,
    xlFormula = 5,
    xlGeneral = 1,
    xlGridline = 22,
    xlIcons = 1,
    xlImmediatePane = 12,
    xlInteger = 2,
    xlLast = 1,
    xlLastCell = 11,
    xlList1 = 10,
    xlList2 = 11,
    xlList3 = 12,
    xlLocalFormat1 = 15,
    xlLocalFormat2 = 16,
    xlLong = 3,
    xlLotusHelp = 2,
    xlMacrosheetCell = 7,
    xlMixed = 2,
    xlMultiply = 4,
    xlNarrow = 1,
    xlNoDocuments = 3,
    xlOpen = 2,
    xlOutside = 3,
    xlReference = 4,
    xlSemiautomatic = 2,
    xlShort = 1,
    xlSingleQuote = 2,
    xlStrict = 2,
    xlSubtract = 3,
    xlTextBox = 16,
    xlTiled = 1,
    xlTitleBar = 8,
    xlToolbar = 1,
    xlVisible = 12,
    xlWatchPane = 11,
    xlWide = 3,
    xlWorkbookTab = 6,
    xlWorksheet4 = 1,
    xlWorksheetCell = 3,
    xlWorksheetShort = 5,
    xlAllExceptBorders = 6,
    xlLeftToRight = 2,
    xlTopToBottom = 1,
    xlVeryHidden = 2,
    xlDrawingObject = 14
};

enum XlCreator
{
    xlCreatorCode = 1480803660
};

enum XlChartGallery
{
    xlBuiltIn = 21,
    xlUserDefined = 22,
    xlAnyGallery = 23
};

enum XlColorIndex
{
    xlColorIndexAutomatic = -4105,
    xlColorIndexNone = -4142
};

enum XlEndStyleCap
{
    xlCap = 1,
    xlNoCap = 2
};

enum XlRowCol
{
    xlColumns = 2,
    xlRows = 1
};

enum XlScaleType
{
    xlScaleLinear = -4132,
    xlScaleLogarithmic = -4133
};

enum XlDataSeriesType
{
    xlAutoFill = 4,
    xlChronological = 3,
    xlGrowth = 2,
    xlDataSeriesLinear = -4132
};

enum XlAxisCrosses
{
    xlAxisCrossesAutomatic = -4105,
    xlAxisCrossesCustom = -4114,
    xlAxisCrossesMaximum = 2,
    xlAxisCrossesMinimum = 4
};

enum XlAxisGroup
{
    xlPrimary = 1,
    xlSecondary = 2
};

enum XlBackground
{
    xlBackgroundAutomatic = -4105,
    xlBackgroundOpaque = 3,
    xlBackgroundTransparent = 2
};

enum XlWindowState
{
    xlMaximized = -4137,
    xlMinimized = -4140,
    xlNormal = -4143
};

enum XlAxisType
{
    xlCategory = 1,
    xlSeriesAxis = 3,
    xlValue = 2
};

enum XlArrowHeadLength
{
    xlArrowHeadLengthLong = 3,
    xlArrowHeadLengthMedium = -4138,
    xlArrowHeadLengthShort = 1
};

enum XlVAlign
{
    xlVAlignBottom = -4107,
    xlVAlignCenter = -4108,
    xlVAlignDistributed = -4117,
    xlVAlignJustify = -4130,
    xlVAlignTop = -4160
};

enum XlTickMark
{
    xlTickMarkCross = 4,
    xlTickMarkInside = 2,
    xlTickMarkNone = -4142,
    xlTickMarkOutside = 3
};

enum XlErrorBarDirection
{
    xlX = -4168,
    xlY = 1
};

enum XlErrorBarInclude
{
    xlErrorBarIncludeBoth = 1,
    xlErrorBarIncludeMinusValues = 3,
    xlErrorBarIncludeNone = -4142,
    xlErrorBarIncludePlusValues = 2
};

enum XlDisplayBlanksAs
{
    xlInterpolated = 3,
    xlNotPlotted = 1,
    xlZero = 2
};

enum XlArrowHeadStyle
{
    xlArrowHeadStyleClosed = 3,
    xlArrowHeadStyleDoubleClosed = 5,
    xlArrowHeadStyleDoubleOpen = 4,
    xlArrowHeadStyleNone = -4142,
    xlArrowHeadStyleOpen = 2
};

enum XlArrowHeadWidth
{
    xlArrowHeadWidthMedium = -4138,
    xlArrowHeadWidthNarrow = 1,
    xlArrowHeadWidthWide = 3
};

enum XlHAlign
{
    xlHAlignCenter = -4108,
    xlHAlignCenterAcrossSelection = 7,
    xlHAlignDistributed = -4117,
    xlHAlignFill = 5,
    xlHAlignGeneral = 1,
    xlHAlignJustify = -4130,
    xlHAlignLeft = -4131,
    xlHAlignRight = -4152
};

enum XlTickLabelPosition
{
    xlTickLabelPositionHigh = -4127,
    xlTickLabelPositionLow = -4134,
    xlTickLabelPositionNextToAxis = 4,
    xlTickLabelPositionNone = -4142
};

enum XlLegendPosition
{
    xlLegendPositionBottom = -4107,
    xlLegendPositionCorner = 2,
    xlLegendPositionLeft = -4131,
    xlLegendPositionRight = -4152,
    xlLegendPositionTop = -4160
};

enum XlChartPictureType
{
    xlStackScale = 3,
    xlStack = 2,
    xlStretch = 1
};

enum XlChartPicturePlacement
{
    xlSides = 1,
    xlEnd = 2,
    xlEndSides = 3,
    xlFront = 4,
    xlFrontSides = 5,
    xlFrontEnd = 6,
    xlAllFaces = 7
};

enum XlOrientation
{
    xlDownward = -4170,
    xlHorizontal = -4128,
    xlUpward = -4171,
    xlVertical = -4166
};

enum XlTickLabelOrientation
{
    xlTickLabelOrientationAutomatic = -4105,
    xlTickLabelOrientationDownward = -4170,
    xlTickLabelOrientationHorizontal = -4128,
    xlTickLabelOrientationUpward = -4171,
    xlTickLabelOrientationVertical = -4166
};

enum XlBorderWeight
{
    xlHairline = 1,
    xlMedium = -4138,
    xlThick = 4,
    xlThin = 2
};

enum XlDataSeriesDate
{
    xlDay = 1,
    xlMonth = 3,
    xlWeekday = 2,
    xlYear = 4
};

enum XlUnderlineStyle
{
    xlUnderlineStyleDouble = -4119,
    xlUnderlineStyleDoubleAccounting = 5,
    xlUnderlineStyleNone = -4142,
    xlUnderlineStyleSingle = 2,
    xlUnderlineStyleSingleAccounting = 4
};

enum XlErrorBarType
{
    xlErrorBarTypeCustom = -4114,
    xlErrorBarTypeFixedValue = 1,
    xlErrorBarTypePercent = 2,
    xlErrorBarTypeStDev = -4155,
    xlErrorBarTypeStError = 4
};

enum XlTrendlineType
{
    xlExponential = 5,
    xlLinear = -4132,
    xlLogarithmic = -4133,
    xlMovingAvg = 6,
    xlPolynomial = 3,
    xlPower = 4
};

enum XlLineStyle
{
    xlContinuous = 1,
    xlDash = -4115,
    xlDashDot = 4,
    xlDashDotDot = 5,
    xlDot = -4118,
    xlDouble = -4119,
    xlSlantDashDot = 13,
    xlLineStyleNone = -4142
};

enum XlDataLabelsType
{
    xlDataLabelsShowNone = -4142,
    xlDataLabelsShowValue = 2,
    xlDataLabelsShowPercent = 3,
    xlDataLabelsShowLabel = 4,
    xlDataLabelsShowLabelAndPercent = 5,
    xlDataLabelsShowBubbleSizes = 6
};

enum XlMarkerStyle
{
    xlMarkerStyleAutomatic = -4105,
    xlMarkerStyleCircle = 8,
    xlMarkerStyleDash = -4115,
    xlMarkerStyleDiamond = 2,
    xlMarkerStyleDot = -4118,
    xlMarkerStyleNone = -4142,
    xlMarkerStylePicture = -4147,
    xlMarkerStylePlus = 9,
    xlMarkerStyleSquare = 1,
    xlMarkerStyleStar = 5,
    xlMarkerStyleTriangle = 3,
    xlMarkerStyleX = -4168
};

enum XlPictureConvertorType
{
    xlBMP = 1,
    xlCGM = 7,
    xlDRW = 4,
    xlDXF = 5,
    xlEPS = 8,
    xlHGL = 6,
    xlPCT = 13,
    xlPCX = 10,
    xlPIC = 11,
    xlPLT = 12,
    xlTIF = 9,
    xlWMF = 2,
    xlWPG = 3
};

enum XlPattern
{
    xlPatternAutomatic = -4105,
    xlPatternChecker = 9,
    xlPatternCrissCross = 16,
    xlPatternDown = -4121,
    xlPatternGray16 = 17,
    xlPatternGray25 = -4124,
    xlPatternGray50 = -4125,
    xlPatternGray75 = -4126,
    xlPatternGray8 = 18,
    xlPatternGrid = 15,
    xlPatternHorizontal = -4128,
    xlPatternLightDown = 13,
    xlPatternLightHorizontal = 11,
    xlPatternLightUp = 14,
    xlPatternLightVertical = 12,
    xlPatternNone = -4142,
    xlPatternSemiGray75 = 10,
    xlPatternSolid = 1,
    xlPatternUp = -4162,
    xlPatternVertical = -4166
};

enum XlChartSplitType
{
    xlSplitByPosition = 1,
    xlSplitByPercentValue = 3,
    xlSplitByCustomSplit = 4,
    xlSplitByValue = 2
};

enum XlDisplayUnit
{
    xlHundreds = -2,
    xlThousands = -3,
    xlTenThousands = -4,
    xlHundredThousands = -5,
    xlMillions = -6,
    xlTenMillions = -7,
    xlHundredMillions = -8,
    xlThousandMillions = -9,
    xlMillionMillions = -10
};

enum XlDataLabelPosition
{
    xlLabelPositionCenter = -4108,
    xlLabelPositionAbove = 0,
    xlLabelPositionBelow = 1,
    xlLabelPositionLeft = -4131,
    xlLabelPositionRight = -4152,
    xlLabelPositionOutsideEnd = 2,
    xlLabelPositionInsideEnd = 3,
    xlLabelPositionInsideBase = 4,
    xlLabelPositionBestFit = 5,
    xlLabelPositionMixed = 6,
    xlLabelPositionCustom = 7
};

enum XlTimeUnit
{
    xlDays = 0,
    xlMonths = 1,
    xlYears = 2
};

enum XlCategoryType
{
    xlCategoryScale = 2,
    xlTimeScale = 3,
    xlAutomaticScale = -4105
};

enum XlBarShape
{
    xlBox = 0,
    xlPyramidToPoint = 1,
    xlPyramidToMax = 2,
    xlCylinder = 3,
    xlConeToPoint = 4,
    xlConeToMax = 5
};

enum XlChartType
{
    xlColumnClustered = 51,
    xlColumnStacked = 52,
    xlColumnStacked100 = 53,
    xl3DColumnClustered = 54,
    xl3DColumnStacked = 55,
    xl3DColumnStacked100 = 56,
    xlBarClustered = 57,
    xlBarStacked = 58,
    xlBarStacked100 = 59,
    xl3DBarClustered = 60,
    xl3DBarStacked = 61,
    xl3DBarStacked100 = 62,
    xlLineStacked = 63,
    xlLineStacked100 = 64,
    xlLineMarkers = 65,
    xlLineMarkersStacked = 66,
    xlLineMarkersStacked100 = 67,
    xlPieOfPie = 68,
    xlPieExploded = 69,
    xl3DPieExploded = 70,
    xlBarOfPie = 71,
    xlXYScatterSmooth = 72,
    xlXYScatterSmoothNoMarkers = 73,
    xlXYScatterLines = 74,
    xlXYScatterLinesNoMarkers = 75,
    xlAreaStacked = 76,
    xlAreaStacked100 = 77,
    xl3DAreaStacked = 78,
    xl3DAreaStacked100 = 79,
    xlDoughnutExploded = 80,
    xlRadarMarkers = 81,
    xlRadarFilled = 82,
    xlSurface = 83,
    xlSurfaceWireframe = 84,
    xlSurfaceTopView = 85,
    xlSurfaceTopViewWireframe = 86,
    xlBubble = 15,
    xlBubble3DEffect = 87,
    xlStockHLC = 88,
    xlStockOHLC = 89,
    xlStockVHLC = 90,
    xlStockVOHLC = 91,
    xlCylinderColClustered = 92,
    xlCylinderColStacked = 93,
    xlCylinderColStacked100 = 94,
    xlCylinderBarClustered = 95,
    xlCylinderBarStacked = 96,
    xlCylinderBarStacked100 = 97,
    xlCylinderCol = 98,
    xlConeColClustered = 99,
    xlConeColStacked = 100,
    xlConeColStacked100 = 101,
    xlConeBarClustered = 102,
    xlConeBarStacked = 103,
    xlConeBarStacked100 = 104,
    xlConeCol = 105,
    xlPyramidColClustered = 106,
    xlPyramidColStacked = 107,
    xlPyramidColStacked100 = 108,
    xlPyramidBarClustered = 109,
    xlPyramidBarStacked = 110,
    xlPyramidBarStacked100 = 111,
    xlPyramidCol = 112,
    xl3DColumn = -4100,
    xlLine = 4,
    xl3DLine = -4101,
    xl3DPie = -4102,
    xlPie = 5,
    xlXYScatter = -4169,
    xl3DArea = -4098,
    xlArea = 1,
    xlDoughnut = -4120,
    xlRadar = -4151
};

enum XlChartItem
{
    xlDataLabel = 0,
    xlChartArea = 2,
    xlSeries = 3,
    xlChartTitle = 4,
    xlWalls = 5,
    xlCorners = 6,
    xlDataTable = 7,
    xlTrendline = 8,
    xlErrorBars = 9,
    xlXErrorBars = 10,
    xlYErrorBars = 11,
    xlLegendEntry = 12,
    xlLegendKey = 13,
    xlShape = 14,
    xlMajorGridlines = 15,
    xlMinorGridlines = 16,
    xlAxisTitle = 17,
    xlUpBars = 18,
    xlPlotArea = 19,
    xlDownBars = 20,
    xlAxis = 21,
    xlSeriesLines = 22,
    xlFloor = 23,
    xlLegend = 24,
    xlHiLoLines = 25,
    xlDropLines = 26,
    xlRadarAxisLabels = 27,
    xlNothing = 28,
    xlLeaderLines = 29,
    xlDisplayUnitLabel = 30,
    xlPivotChartFieldButton = 31,
    xlPivotChartDropZone = 32
};

enum XlSizeRepresents
{
    xlSizeIsWidth = 2,
    xlSizeIsArea = 1
};

enum XlInsertShiftDirection
{
    xlShiftDown = -4121,
    xlShiftToRight = -4161
};

enum XlDeleteShiftDirection
{
    xlShiftToLeft = -4159,
    xlShiftUp = -4162
};

enum XlDirection
{
    xlDown = -4121,
    xlToLeft = -4159,
    xlToRight = -4161,
    xlUp = -4162
};

enum XlConsolidationFunction
{
    xlAverage = -4106,
    xlCount = -4112,
    xlCountNums = -4113,
    xlMax = -4136,
    xlMin = -4139,
    xlProduct = -4149,
    xlStDev = -4155,
    xlStDevP = -4156,
    xlSum = -4157,
    xlVar = -4164,
    xlVarP = -4165,
    xlUnknown = 1000
};

enum XlSheetType
{
    xlChart = -4109,
    xlDialogSheet = -4116,
    xlExcel4IntlMacroSheet = 4,
    xlExcel4MacroSheet = 3,
    xlWorksheet = -4167
};

enum XlLocationInTable
{
    xlColumnHeader = -4110,
    xlColumnItem = 5,
    xlDataHeader = 3,
    xlDataItem = 7,
    xlPageHeader = 2,
    xlPageItem = 6,
    xlRowHeader = -4153,
    xlRowItem = 4,
    xlTableBody = 8
};

enum XlFindLookIn
{
    xlFormulas = -4123,
    xlComments = -4144,
    xlValues = -4163
};

enum XlWindowType
{
    xlChartAsWindow = 5,
    xlChartInPlace = 4,
    xlClipboard = 3,
    xlInfo = -4129,
    xlWorkbook = 1
};

enum XlPivotFieldDataType
{
    xlDate = 2,
    xlNumber = -4145,
    xlText = -4158
};

enum XlCopyPictureFormat
{
    xlBitmap = 2,
    xlPicture = -4147
};

enum XlPivotTableSourceType
{
    xlConsolidation = 3,
    xlDatabase = 1,
    xlExternal = 2,
    xlPivotTable = -4148
};

enum XlReferenceStyle
{
    xlA1 = 1,
    xlR1C1 = -4150
};

enum XlMSApplication
{
    xlMicrosoftAccess = 4,
    xlMicrosoftFoxPro = 5,
    xlMicrosoftMail = 3,
    xlMicrosoftPowerPoint = 2,
    xlMicrosoftProject = 6,
    xlMicrosoftSchedulePlus = 7,
    xlMicrosoftWord = 1
};

enum XlMouseButton
{
    xlNoButton = 0,
    xlPrimaryButton = 1,
    xlSecondaryButton = 2
};

enum XlCutCopyMode
{
    xlCopy = 1,
    xlCut = 2
};

enum XlFillWith
{
    xlFillWithAll = -4104,
    xlFillWithContents = 2,
    xlFillWithFormats = -4122
};

enum XlFilterAction
{
    xlFilterCopy = 2,
    xlFilterInPlace = 1
};

enum XlOrder
{
    xlDownThenOver = 1,
    xlOverThenDown = 2
};

enum XlLinkType
{
    xlLinkTypeExcelLinks = 1,
    xlLinkTypeOLELinks = 2
};

enum XlApplyNamesOrder
{
    xlColumnThenRow = 2,
    xlRowThenColumn = 1
};

enum XlEnableCancelKey
{
    xlDisabled = 0,
    xlErrorHandler = 2,
    xlInterrupt = 1
};

enum XlPageBreak
{
    xlPageBreakAutomatic = -4105,
    xlPageBreakManual = -4135,
    xlPageBreakNone = -4142
};

enum XlOLEType
{
    xlOLEControl = 2,
    xlOLEEmbed = 1,
    xlOLELink = 0
};

enum XlPageOrientation
{
    xlLandscape = 2,
    xlPortrait = 1
};

enum XlLinkInfo
{
    xlEditionDate = 2,
    xlUpdateState = 1
};

enum XlCommandUnderlines
{
    xlCommandUnderlinesAutomatic = -4105,
    xlCommandUnderlinesOff = -4146,
    xlCommandUnderlinesOn = 1
};

enum XlOLEVerb
{
    xlVerbOpen = 2,
    xlVerbPrimary = 1
};

enum XlCalculation
{
    xlCalculationAutomatic = -4105,
    xlCalculationManual = -4135,
    xlCalculationSemiautomatic = 2
};

enum XlFileAccess
{
    xlReadOnly = 3,
    xlReadWrite = 2
};

enum XlEditionType
{
    xlPublisher = 1,
    xlSubscriber = 2
};

enum XlObjectSize
{
    xlFitToPage = 2,
    xlFullPage = 3,
    xlScreenSize = 1
};

enum XlLookAt
{
    xlPart = 2,
    xlWhole = 1
};

enum XlMailSystem
{
    xlMAPI = 1,
    xlNoMailSystem = 0,
    xlPowerTalk = 2
};

enum XlLinkInfoType
{
    xlLinkInfoOLELinks = 2,
    xlLinkInfoPublishers = 5,
    xlLinkInfoSubscribers = 6
};

enum XlCVError
{
    xlErrDiv0 = 2007,
    xlErrNA = 2042,
    xlErrName = 2029,
    xlErrNull = 2000,
    xlErrNum = 2036,
    xlErrRef = 2023,
    xlErrValue = 2015
};

enum XlEditionFormat
{
    xlBIFF = 2,
    xlPICT = 1,
    xlRTF = 4,
    xlVALU = 8
};

enum XlLink
{
    xlExcelLinks = 1,
    xlOLELinks = 2,
    xlPublishers = 5,
    xlSubscribers = 6
};

enum XlCellType
{
    xlCellTypeBlanks = 4,
    xlCellTypeConstants = 2,
    xlCellTypeFormulas = -4123,
    xlCellTypeLastCell = 11,
    xlCellTypeComments = -4144,
    xlCellTypeVisible = 12,
    xlCellTypeAllFormatConditions = -4172,
    xlCellTypeSameFormatConditions = -4173,
    xlCellTypeAllValidation = -4174,
    xlCellTypeSameValidation = -4175
};

enum XlArrangeStyle
{
    xlArrangeStyleCascade = 7,
    xlArrangeStyleHorizontal = -4128,
    xlArrangeStyleTiled = 1,
    xlArrangeStyleVertical = -4166
};

enum XlMousePointer
{
    xlIBeam = 3,
    xlDefault = -4143,
    xlNorthwestArrow = 1,
    xlWait = 2
};

enum XlEditionOptionsOption
{
    xlAutomaticUpdate = 4,
    xlCancel = 1,
    xlChangeAttributes = 6,
    xlManualUpdate = 5,
    xlOpenSource = 3,
    xlSelect = 3,
    xlSendPublisher = 2,
    xlUpdateSubscriber = 2
};

enum XlAutoFillType
{
    xlFillCopy = 1,
    xlFillDays = 5,
    xlFillDefault = 0,
    xlFillFormats = 3,
    xlFillMonths = 7,
    xlFillSeries = 2,
    xlFillValues = 4,
    xlFillWeekdays = 6,
    xlFillYears = 8,
    xlGrowthTrend = 10,
    xlLinearTrend = 9
};

enum XlAutoFilterOperator
{
    xlAnd = 1,
    xlBottom10Items = 4,
    xlBottom10Percent = 6,
    xlOr = 2,
    xlTop10Items = 3,
    xlTop10Percent = 5
};

enum XlClipboardFormat
{
    xlClipboardFormatBIFF = 8,
    xlClipboardFormatBIFF2 = 18,
    xlClipboardFormatBIFF3 = 20,
    xlClipboardFormatBIFF4 = 30,
    xlClipboardFormatBinary = 15,
    xlClipboardFormatBitmap = 9,
    xlClipboardFormatCGM = 13,
    xlClipboardFormatCSV = 5,
    xlClipboardFormatDIF = 4,
    xlClipboardFormatDspText = 12,
    xlClipboardFormatEmbeddedObject = 21,
    xlClipboardFormatEmbedSource = 22,
    xlClipboardFormatLink = 11,
    xlClipboardFormatLinkSource = 23,
    xlClipboardFormatLinkSourceDesc = 32,
    xlClipboardFormatMovie = 24,
    xlClipboardFormatNative = 14,
    xlClipboardFormatObjectDesc = 31,
    xlClipboardFormatObjectLink = 19,
    xlClipboardFormatOwnerLink = 17,
    xlClipboardFormatPICT = 2,
    xlClipboardFormatPrintPICT = 3,
    xlClipboardFormatRTF = 7,
    xlClipboardFormatScreenPICT = 29,
    xlClipboardFormatStandardFont = 28,
    xlClipboardFormatStandardScale = 27,
    xlClipboardFormatSYLK = 6,
    xlClipboardFormatTable = 16,
    xlClipboardFormatText = 0,
    xlClipboardFormatToolFace = 25,
    xlClipboardFormatToolFacePICT = 26,
    xlClipboardFormatVALU = 1,
    xlClipboardFormatWK1 = 10
};

enum XlFileFormat
{
    xlAddIn = 18,
    xlCSV = 6,
    xlCSVMac = 22,
    xlCSVMSDOS = 24,
    xlCSVWindows = 23,
    xlDBF2 = 7,
    xlDBF3 = 8,
    xlDBF4 = 11,
    xlDIF = 9,
    xlExcel2 = 16,
    xlExcel2FarEast = 27,
    xlExcel3 = 29,
    xlExcel4 = 33,
    xlExcel5 = 39,
    xlExcel7 = 39,
    xlExcel9795 = 43,
    xlExcel4Workbook = 35,
    xlIntlAddIn = 26,
    xlIntlMacro = 25,
    xlWorkbookNormal = -4143,
    xlSYLK = 2,
    xlTemplate = 17,
    xlCurrentPlatformText = -4158,
    xlTextMac = 19,
    xlTextMSDOS = 21,
    xlTextPrinter = 36,
    xlTextWindows = 20,
    xlWJ2WD1 = 14,
    xlWK1 = 5,
    xlWK1ALL = 31,
    xlWK1FMT = 30,
    xlWK3 = 15,
    xlWK4 = 38,
    xlWK3FM3 = 32,
    xlWKS = 4,
    xlWorks2FarEast = 28,
    xlWQ1 = 34,
    xlWJ3 = 40,
    xlWJ3FJ3 = 41,
    xlUnicodeText = 42,
    xlHtml = 44
};

enum XlApplicationInternational
{
    xl24HourClock = 33,
    xl4DigitYears = 43,
    xlAlternateArraySeparator = 16,
    xlColumnSeparator = 14,
    xlCountryCode = 1,
    xlCountrySetting = 2,
    xlCurrencyBefore = 37,
    xlCurrencyCode = 25,
    xlCurrencyDigits = 27,
    xlCurrencyLeadingZeros = 40,
    xlCurrencyMinusSign = 38,
    xlCurrencyNegative = 28,
    xlCurrencySpaceBefore = 36,
    xlCurrencyTrailingZeros = 39,
    xlDateOrder = 32,
    xlDateSeparator = 17,
    xlDayCode = 21,
    xlDayLeadingZero = 42,
    xlDecimalSeparator = 3,
    xlGeneralFormatName = 26,
    xlHourCode = 22,
    xlLeftBrace = 12,
    xlLeftBracket = 10,
    xlListSeparator = 5,
    xlLowerCaseColumnLetter = 9,
    xlLowerCaseRowLetter = 8,
    xlMDY = 44,
    xlMetric = 35,
    xlMinuteCode = 23,
    xlMonthCode = 20,
    xlMonthLeadingZero = 41,
    xlMonthNameChars = 30,
    xlNoncurrencyDigits = 29,
    xlNonEnglishFunctions = 34,
    xlRightBrace = 13,
    xlRightBracket = 11,
    xlRowSeparator = 15,
    xlSecondCode = 24,
    xlThousandsSeparator = 4,
    xlTimeLeadingZero = 45,
    xlTimeSeparator = 18,
    xlUpperCaseColumnLetter = 7,
    xlUpperCaseRowLetter = 6,
    xlWeekdayNameChars = 31,
    xlYearCode = 19
};

enum XlPageBreakExtent
{
    xlPageBreakFull = 1,
    xlPageBreakPartial = 2
};

enum XlCellInsertionMode
{
    xlOverwriteCells = 0,
    xlInsertDeleteCells = 1,
    xlInsertEntireRows = 2
};

enum XlFormulaLabel
{
    xlNoLabels = -4142,
    xlRowLabels = 1,
    xlColumnLabels = 2,
    xlMixedLabels = 3
};

enum XlHighlightChangesTime
{
    xlSinceMyLastSave = 1,
    xlAllChanges = 2,
    xlNotYetReviewed = 3
};

enum XlCommentDisplayMode
{
    xlNoIndicator = 0,
    xlCommentIndicatorOnly = -1,
    xlCommentAndIndicator = 1
};

enum XlFormatConditionType
{
    xlCellValue = 1,
    xlExpression = 2
};

enum XlFormatConditionOperator
{
    xlBetween = 1,
    xlNotBetween = 2,
    xlEqual = 3,
    xlNotEqual = 4,
    xlGreater = 5,
    xlLess = 6,
    xlGreaterEqual = 7,
    xlLessEqual = 8
};

enum XlEnableSelection
{
    xlNoRestrictions = 0,
    xlUnlockedCells = 1,
    xlNoSelection = -4142
};

enum XlDVType
{
    xlValidateInputOnly = 0,
    xlValidateWholeNumber = 1,
    xlValidateDecimal = 2,
    xlValidateList = 3,
    xlValidateDate = 4,
    xlValidateTime = 5,
    xlValidateTextLength = 6,
    xlValidateCustom = 7
};

enum XlIMEMode
{
    xlIMEModeNoControl = 0,
    xlIMEModeOn = 1,
    xlIMEModeOff = 2,
    xlIMEModeDisable = 3,
    xlIMEModeHiragana = 4,
    xlIMEModeKatakana = 5,
    xlIMEModeKatakanaHalf = 6,
    xlIMEModeAlphaFull = 7,
    xlIMEModeAlpha = 8,
    xlIMEModeHangulFull = 9,
    xlIMEModeHangul = 10
};

enum XlDVAlertStyle
{
    xlValidAlertStop = 1,
    xlValidAlertWarning = 2,
    xlValidAlertInformation = 3
};

enum XlChartLocation
{
    xlLocationAsNewSheet = 1,
    xlLocationAsObject = 2,
    xlLocationAutomatic = 3
};

enum XlPaperSize
{
    xlPaper10x14 = 16,
    xlPaper11x17 = 17,
    xlPaperA3 = 8,
    xlPaperA4 = 9,
    xlPaperA4Small = 10,
    xlPaperA5 = 11,
    xlPaperB4 = 12,
    xlPaperB5 = 13,
    xlPaperCsheet = 24,
    xlPaperDsheet = 25,
    xlPaperEnvelope10 = 20,
    xlPaperEnvelope11 = 21,
    xlPaperEnvelope12 = 22,
    xlPaperEnvelope14 = 23,
    xlPaperEnvelope9 = 19,
    xlPaperEnvelopeB4 = 33,
    xlPaperEnvelopeB5 = 34,
    xlPaperEnvelopeB6 = 35,
    xlPaperEnvelopeC3 = 29,
    xlPaperEnvelopeC4 = 30,
    xlPaperEnvelopeC5 = 28,
    xlPaperEnvelopeC6 = 31,
    xlPaperEnvelopeC65 = 32,
    xlPaperEnvelopeDL = 27,
    xlPaperEnvelopeItaly = 36,
    xlPaperEnvelopeMonarch = 37,
    xlPaperEnvelopePersonal = 38,
    xlPaperEsheet = 26,
    xlPaperExecutive = 7,
    xlPaperFanfoldLegalGerman = 41,
    xlPaperFanfoldStdGerman = 40,
    xlPaperFanfoldUS = 39,
    xlPaperFolio = 14,
    xlPaperLedger = 4,
    xlPaperLegal = 5,
    xlPaperLetter = 1,
    xlPaperLetterSmall = 2,
    xlPaperNote = 18,
    xlPaperQuarto = 15,
    xlPaperStatement = 6,
    xlPaperTabloid = 3,
    xlPaperUser = 256
};

enum XlPasteSpecialOperation
{
    xlPasteSpecialOperationAdd = 2,
    xlPasteSpecialOperationDivide = 5,
    xlPasteSpecialOperationMultiply = 4,
    xlPasteSpecialOperationNone = -4142,
    xlPasteSpecialOperationSubtract = 3
};

enum XlPasteType
{
    xlPasteAll = -4104,
    xlPasteAllExceptBorders = 7,
    xlPasteFormats = -4122,
    xlPasteFormulas = -4123,
    xlPasteComments = -4144,
    xlPasteValues = -4163
};

enum XlPhoneticCharacterType
{
    xlKatakanaHalf = 0,
    xlKatakana = 1,
    xlHiragana = 2,
    xlNoConversion = 3
};

enum XlPhoneticAlignment
{
    xlPhoneticAlignNoControl = 0,
    xlPhoneticAlignLeft = 1,
    xlPhoneticAlignCenter = 2,
    xlPhoneticAlignDistributed = 3
};

enum XlPictureAppearance
{
    xlPrinter = 2,
    xlScreen = 1
};

enum XlPivotFieldOrientation
{
    xlColumnField = 2,
    xlDataField = 4,
    xlHidden = 0,
    xlPageField = 3,
    xlRowField = 1
};

enum XlPivotFieldCalculation
{
    xlDifferenceFrom = 2,
    xlIndex = 9,
    xlNoAdditionalCalculation = -4143,
    xlPercentDifferenceFrom = 4,
    xlPercentOf = 3,
    xlPercentOfColumn = 7,
    xlPercentOfRow = 6,
    xlPercentOfTotal = 8,
    xlRunningTotal = 5
};

enum XlPlacement
{
    xlFreeFloating = 3,
    xlMove = 2,
    xlMoveAndSize = 1
};

enum XlPlatform
{
    xlMacintosh = 1,
    xlMSDOS = 3,
    xlWindows = 2
};

enum XlPrintLocation
{
    xlPrintSheetEnd = 1,
    xlPrintInPlace = 16,
    xlPrintNoComments = -4142
};

enum XlPriority
{
    xlPriorityHigh = -4127,
    xlPriorityLow = -4134,
    xlPriorityNormal = -4143
};

enum XlPTSelectionMode
{
    xlLabelOnly = 1,
    xlDataAndLabel = 0,
    xlDataOnly = 2,
    xlOrigin = 3,
    xlButton = 15,
    xlBlanks = 4,
    xlFirstRow = 256
};

enum XlRangeAutoFormat
{
    xlRangeAutoFormat3DEffects1 = 13,
    xlRangeAutoFormat3DEffects2 = 14,
    xlRangeAutoFormatAccounting1 = 4,
    xlRangeAutoFormatAccounting2 = 5,
    xlRangeAutoFormatAccounting3 = 6,
    xlRangeAutoFormatAccounting4 = 17,
    xlRangeAutoFormatClassic1 = 1,
    xlRangeAutoFormatClassic2 = 2,
    xlRangeAutoFormatClassic3 = 3,
    xlRangeAutoFormatColor1 = 7,
    xlRangeAutoFormatColor2 = 8,
    xlRangeAutoFormatColor3 = 9,
    xlRangeAutoFormatList1 = 10,
    xlRangeAutoFormatList2 = 11,
    xlRangeAutoFormatList3 = 12,
    xlRangeAutoFormatLocalFormat1 = 15,
    xlRangeAutoFormatLocalFormat2 = 16,
    xlRangeAutoFormatLocalFormat3 = 19,
    xlRangeAutoFormatLocalFormat4 = 20,
    xlRangeAutoFormatReport1 = 21,
    xlRangeAutoFormatReport2 = 22,
    xlRangeAutoFormatReport3 = 23,
    xlRangeAutoFormatReport4 = 24,
    xlRangeAutoFormatReport5 = 25,
    xlRangeAutoFormatReport6 = 26,
    xlRangeAutoFormatReport7 = 27,
    xlRangeAutoFormatReport8 = 28,
    xlRangeAutoFormatReport9 = 29,
    xlRangeAutoFormatReport10 = 30,
    xlRangeAutoFormatClassicPivotTable = 31,
    xlRangeAutoFormatTable1 = 32,
    xlRangeAutoFormatTable2 = 33,
    xlRangeAutoFormatTable3 = 34,
    xlRangeAutoFormatTable4 = 35,
    xlRangeAutoFormatTable5 = 36,
    xlRangeAutoFormatTable6 = 37,
    xlRangeAutoFormatTable7 = 38,
    xlRangeAutoFormatTable8 = 39,
    xlRangeAutoFormatTable9 = 40,
    xlRangeAutoFormatTable10 = 41,
    xlRangeAutoFormatPTNone = 42,
    xlRangeAutoFormatNone = -4142,
    xlRangeAutoFormatSimple = -4154
};

enum XlReferenceType
{
    xlAbsolute = 1,
    xlAbsRowRelColumn = 2,
    xlRelative = 4,
    xlRelRowAbsColumn = 3
};

enum XlLayoutFormType
{
    xlTabular = 0,
    xlOutline = 1
};

enum XlRoutingSlipDelivery
{
    xlAllAtOnce = 2,
    xlOneAfterAnother = 1
};

enum XlRoutingSlipStatus
{
    xlNotYetRouted = 0,
    xlRoutingComplete = 2,
    xlRoutingInProgress = 1
};

enum XlRunAutoMacro
{
    xlAutoActivate = 3,
    xlAutoClose = 2,
    xlAutoDeactivate = 4,
    xlAutoOpen = 1
};

enum XlSaveAction
{
    xlDoNotSaveChanges = 2,
    xlSaveChanges = 1
};

enum XlSaveAsAccessMode
{
    xlExclusive = 3,
    xlNoChange = 1,
    xlShared = 2
};

enum XlSaveConflictResolution
{
    xlLocalSessionChanges = 2,
    xlOtherSessionChanges = 3,
    xlUserResolution = 1
};

enum XlSearchDirection
{
    xlNext = 1,
    xlPrevious = 2
};

enum XlSearchOrder
{
    xlByColumns = 2,
    xlByRows = 1
};

enum XlSheetVisibility
{
    xlSheetVisible = -1,
    xlSheetHidden = 0,
    xlSheetVeryHidden = 2
};

enum XlSortMethod
{
    xlPinYin = 1,
    xlStroke = 2
};

enum XlSortMethodOld
{
    xlCodePage = 2,
    xlSyllabary = 1
};

enum XlSortOrder
{
    xlAscending = 1,
    xlDescending = 2
};

enum XlSortOrientation
{
    xlSortRows = 2,
    xlSortColumns = 1
};

enum XlSortType
{
    xlSortLabels = 2,
    xlSortValues = 1
};

enum XlSpecialCellsValue
{
    xlErrors = 16,
    xlLogical = 4,
    xlNumbers = 1,
    xlTextValues = 2
};

enum XlSubscribeToFormat
{
    xlSubscribeToPicture = -4147,
    xlSubscribeToText = -4158
};

enum XlSummaryRow
{
    xlSummaryAbove = 0,
    xlSummaryBelow = 1
};

enum XlSummaryColumn
{
    xlSummaryOnLeft = -4131,
    xlSummaryOnRight = -4152
};

enum XlSummaryReportType
{
    xlSummaryPivotTable = -4148,
    xlStandardSummary = 1
};

enum XlTabPosition
{
    xlTabPositionFirst = 0,
    xlTabPositionLast = 1
};

enum XlTextParsingType
{
    xlDelimited = 1,
    xlFixedWidth = 2
};

enum XlTextQualifier
{
    xlTextQualifierDoubleQuote = 1,
    xlTextQualifierNone = -4142,
    xlTextQualifierSingleQuote = 2
};

enum XlWBATemplate
{
    xlWBATChart = -4109,
    xlWBATExcel4IntlMacroSheet = 4,
    xlWBATExcel4MacroSheet = 3,
    xlWBATWorksheet = -4167
};

enum XlWindowView
{
    xlNormalView = 1,
    xlPageBreakPreview = 2
};

enum XlXLMMacroType
{
    xlCommand = 2,
    xlFunction = 1,
    xlNotXLM = 3
};

enum XlYesNoGuess
{
    xlGuess = 0,
    xlNo = 2,
    xlYes = 1
};

enum XlBordersIndex
{
    xlInsideHorizontal = 12,
    xlInsideVertical = 11,
    xlDiagonalDown = 5,
    xlDiagonalUp = 6,
    xlEdgeBottom = 9,
    xlEdgeLeft = 7,
    xlEdgeRight = 10,
    xlEdgeTop = 8
};

enum XlToolbarProtection
{
    xlNoButtonChanges = 1,
    xlNoChanges = 4,
    xlNoDockingChanges = 3,
    xlToolbarProtectionNone = -4143,
    xlNoShapeChanges = 2
};

enum XlBuiltInDialog
{
    xlDialogOpen = 1,
    xlDialogOpenLinks = 2,
    xlDialogSaveAs = 5,
    xlDialogFileDelete = 6,
    xlDialogPageSetup = 7,
    xlDialogPrint = 8,
    xlDialogPrinterSetup = 9,
    xlDialogArrangeAll = 12,
    xlDialogWindowSize = 13,
    xlDialogWindowMove = 14,
    xlDialogRun = 17,
    xlDialogSetPrintTitles = 23,
    xlDialogFont = 26,
    xlDialogDisplay = 27,
    xlDialogProtectDocument = 28,
    xlDialogCalculation = 32,
    xlDialogExtract = 35,
    xlDialogDataDelete = 36,
    xlDialogSort = 39,
    xlDialogDataSeries = 40,
    xlDialogTable = 41,
    xlDialogFormatNumber = 42,
    xlDialogAlignment = 43,
    xlDialogStyle = 44,
    xlDialogBorder = 45,
    xlDialogCellProtection = 46,
    xlDialogColumnWidth = 47,
    xlDialogClear = 52,
    xlDialogPasteSpecial = 53,
    xlDialogEditDelete = 54,
    xlDialogInsert = 55,
    xlDialogPasteNames = 58,
    xlDialogDefineName = 61,
    xlDialogCreateNames = 62,
    xlDialogFormulaGoto = 63,
    xlDialogFormulaFind = 64,
    xlDialogGalleryArea = 67,
    xlDialogGalleryBar = 68,
    xlDialogGalleryColumn = 69,
    xlDialogGalleryLine = 70,
    xlDialogGalleryPie = 71,
    xlDialogGalleryScatter = 72,
    xlDialogCombination = 73,
    xlDialogGridlines = 76,
    xlDialogAxes = 78,
    xlDialogAttachText = 80,
    xlDialogPatterns = 84,
    xlDialogMainChart = 85,
    xlDialogOverlay = 86,
    xlDialogScale = 87,
    xlDialogFormatLegend = 88,
    xlDialogFormatText = 89,
    xlDialogParse = 91,
    xlDialogUnhide = 94,
    xlDialogWorkspace = 95,
    xlDialogActivate = 103,
    xlDialogCopyPicture = 108,
    xlDialogDeleteName = 110,
    xlDialogDeleteFormat = 111,
    xlDialogNew = 119,
    xlDialogRowHeight = 127,
    xlDialogFormatMove = 128,
    xlDialogFormatSize = 129,
    xlDialogFormulaReplace = 130,
    xlDialogSelectSpecial = 132,
    xlDialogApplyNames = 133,
    xlDialogReplaceFont = 134,
    xlDialogSplit = 137,
    xlDialogOutline = 142,
    xlDialogSaveWorkbook = 145,
    xlDialogCopyChart = 147,
    xlDialogFormatFont = 150,
    xlDialogNote = 154,
    xlDialogSetUpdateStatus = 159,
    xlDialogColorPalette = 161,
    xlDialogChangeLink = 166,
    xlDialogAppMove = 170,
    xlDialogAppSize = 171,
    xlDialogMainChartType = 185,
    xlDialogOverlayChartType = 186,
    xlDialogOpenMail = 188,
    xlDialogSendMail = 189,
    xlDialogStandardFont = 190,
    xlDialogConsolidate = 191,
    xlDialogSortSpecial = 192,
    xlDialogGallery3dArea = 193,
    xlDialogGallery3dColumn = 194,
    xlDialogGallery3dLine = 195,
    xlDialogGallery3dPie = 196,
    xlDialogView3d = 197,
    xlDialogGoalSeek = 198,
    xlDialogWorkgroup = 199,
    xlDialogFillGroup = 200,
    xlDialogUpdateLink = 201,
    xlDialogPromote = 202,
    xlDialogDemote = 203,
    xlDialogShowDetail = 204,
    xlDialogObjectProperties = 207,
    xlDialogSaveNewObject = 208,
    xlDialogApplyStyle = 212,
    xlDialogAssignToObject = 213,
    xlDialogObjectProtection = 214,
    xlDialogCreatePublisher = 217,
    xlDialogSubscribeTo = 218,
    xlDialogShowToolbar = 220,
    xlDialogPrintPreview = 222,
    xlDialogEditColor = 223,
    xlDialogFormatMain = 225,
    xlDialogFormatOverlay = 226,
    xlDialogEditSeries = 228,
    xlDialogDefineStyle = 229,
    xlDialogGalleryRadar = 249,
    xlDialogEditionOptions = 251,
    xlDialogZoom = 256,
    xlDialogInsertObject = 259,
    xlDialogSize = 261,
    xlDialogMove = 262,
    xlDialogFormatAuto = 269,
    xlDialogGallery3dBar = 272,
    xlDialogGallery3dSurface = 273,
    xlDialogCustomizeToolbar = 276,
    xlDialogWorkbookAdd = 281,
    xlDialogWorkbookMove = 282,
    xlDialogWorkbookCopy = 283,
    xlDialogWorkbookOptions = 284,
    xlDialogSaveWorkspace = 285,
    xlDialogChartWizard = 288,
    xlDialogAssignToTool = 293,
    xlDialogPlacement = 300,
    xlDialogFillWorkgroup = 301,
    xlDialogWorkbookNew = 302,
    xlDialogScenarioCells = 305,
    xlDialogScenarioAdd = 307,
    xlDialogScenarioEdit = 308,
    xlDialogScenarioSummary = 311,
    xlDialogPivotTableWizard = 312,
    xlDialogPivotFieldProperties = 313,
    xlDialogOptionsCalculation = 318,
    xlDialogOptionsEdit = 319,
    xlDialogOptionsView = 320,
    xlDialogAddinManager = 321,
    xlDialogMenuEditor = 322,
    xlDialogAttachToolbars = 323,
    xlDialogOptionsChart = 325,
    xlDialogVbaInsertFile = 328,
    xlDialogVbaProcedureDefinition = 330,
    xlDialogRoutingSlip = 336,
    xlDialogMailLogon = 339,
    xlDialogInsertPicture = 342,
    xlDialogGalleryDoughnut = 344,
    xlDialogChartTrend = 350,
    xlDialogWorkbookInsert = 354,
    xlDialogOptionsTransition = 355,
    xlDialogOptionsGeneral = 356,
    xlDialogFilterAdvanced = 370,
    xlDialogMailNextLetter = 378,
    xlDialogDataLabel = 379,
    xlDialogInsertTitle = 380,
    xlDialogFontProperties = 381,
    xlDialogMacroOptions = 382,
    xlDialogWorkbookUnhide = 384,
    xlDialogWorkbookName = 386,
    xlDialogGalleryCustom = 388,
    xlDialogAddChartAutoformat = 390,
    xlDialogChartAddData = 392,
    xlDialogTabOrder = 394,
    xlDialogSubtotalCreate = 398,
    xlDialogWorkbookTabSplit = 415,
    xlDialogWorkbookProtect = 417,
    xlDialogScrollbarProperties = 420,
    xlDialogPivotShowPages = 421,
    xlDialogTextToColumns = 422,
    xlDialogFormatCharttype = 423,
    xlDialogPivotFieldGroup = 433,
    xlDialogPivotFieldUngroup = 434,
    xlDialogCheckboxProperties = 435,
    xlDialogLabelProperties = 436,
    xlDialogListboxProperties = 437,
    xlDialogEditboxProperties = 438,
    xlDialogOpenText = 441,
    xlDialogPushbuttonProperties = 445,
    xlDialogFilter = 447,
    xlDialogFunctionWizard = 450,
    xlDialogSaveCopyAs = 456,
    xlDialogOptionsListsAdd = 458,
    xlDialogSeriesAxes = 460,
    xlDialogSeriesX = 461,
    xlDialogSeriesY = 462,
    xlDialogErrorbarX = 463,
    xlDialogErrorbarY = 464,
    xlDialogFormatChart = 465,
    xlDialogSeriesOrder = 466,
    xlDialogMailEditMailer = 470,
    xlDialogStandardWidth = 472,
    xlDialogScenarioMerge = 473,
    xlDialogProperties = 474,
    xlDialogSummaryInfo = 474,
    xlDialogFindFile = 475,
    xlDialogActiveCellFont = 476,
    xlDialogVbaMakeAddin = 478,
    xlDialogFileSharing = 481,
    xlDialogAutoCorrect = 485,
    xlDialogCustomViews = 493,
    xlDialogInsertNameLabel = 496,
    xlDialogSeriesShape = 504,
    xlDialogChartOptionsDataLabels = 505,
    xlDialogChartOptionsDataTable = 506,
    xlDialogSetBackgroundPicture = 509,
    xlDialogDataValidation = 525,
    xlDialogChartType = 526,
    xlDialogChartLocation = 527,
    _xlDialogPhonetic = 538,
    xlDialogChartSourceData = 540,
    _xlDialogChartSourceData = 541,
    xlDialogSeriesOptions = 557,
    xlDialogPivotTableOptions = 567,
    xlDialogPivotSolveOrder = 568,
    xlDialogPivotCalculatedField = 570,
    xlDialogPivotCalculatedItem = 572,
    xlDialogConditionalFormatting = 583,
    xlDialogInsertHyperlink = 596,
    xlDialogProtectSharing = 620,
    xlDialogOptionsME = 647,
    xlDialogPublishAsWebPage = 653,
    xlDialogPhonetic = 656,
    xlDialogNewWebQuery = 667,
    xlDialogImportTextFile = 666,
    xlDialogExternalDataProperties = 530,
    xlDialogWebOptionsGeneral = 683,
    xlDialogWebOptionsFiles = 684,
    xlDialogWebOptionsPictures = 685,
    xlDialogWebOptionsEncoding = 686,
    xlDialogWebOptionsFonts = 687,
    xlDialogPivotClientServerSet = 689
};

enum XlParameterType
{
    xlPrompt = 0,
    xlConstant = 1,
    xlRange = 2
};

enum XlParameterDataType
{
    xlParamTypeUnknown = 0,
    xlParamTypeChar = 1,
    xlParamTypeNumeric = 2,
    xlParamTypeDecimal = 3,
    xlParamTypeInteger = 4,
    xlParamTypeSmallInt = 5,
    xlParamTypeFloat = 6,
    xlParamTypeReal = 7,
    xlParamTypeDouble = 8,
    xlParamTypeVarChar = 12,
    xlParamTypeDate = 9,
    xlParamTypeTime = 10,
    xlParamTypeTimestamp = 11,
    xlParamTypeLongVarChar = -1,
    xlParamTypeBinary = -2,
    xlParamTypeVarBinary = -3,
    xlParamTypeLongVarBinary = -4,
    xlParamTypeBigInt = -5,
    xlParamTypeTinyInt = -6,
    xlParamTypeBit = -7,
    xlParamTypeWChar = -8
};

enum XlFormControl
{
    xlButtonControl = 0,
    xlCheckBox = 1,
    xlDropDown = 2,
    xlEditBox = 3,
    xlGroupBox = 4,
    xlLabel = 5,
    xlListBox = 6,
    xlOptionButton = 7,
    xlScrollBar = 8,
    xlSpinner = 9
};

enum XlSourceType
{
    xlSourceSheet = 1,
    xlSourcePrintArea = 2,
    xlSourceAutoFilter = 3,
    xlSourceRange = 4,
    xlSourceChart = 5,
    xlSourcePivotTable = 6,
    xlSourceQuery = 7
};

enum XlHtmlType
{
    xlHtmlStatic = 0,
    xlHtmlCalc = 1,
    xlHtmlList = 2,
    xlHtmlChart = 3
};

enum xlPivotFormatType
{
    xlReport1 = 0,
    xlReport2 = 1,
    xlReport3 = 2,
    xlReport4 = 3,
    xlReport5 = 4,
    xlReport6 = 5,
    xlReport7 = 6,
    xlReport8 = 7,
    xlReport9 = 8,
    xlReport10 = 9,
    xlTable1 = 10,
    xlTable2 = 11,
    xlTable3 = 12,
    xlTable4 = 13,
    xlTable5 = 14,
    xlTable6 = 15,
    xlTable7 = 16,
    xlTable8 = 17,
    xlTable9 = 18,
    xlTable10 = 19,
    xlPTClassic = 20,
    xlPTNone = 21
};

enum XlCmdType
{
    xlCmdCube = 1,
    xlCmdSql = 2,
    xlCmdTable = 3,
    xlCmdDefault = 4
};

enum xlColumnDataType
{
    xlGeneralFormat = 1,
    xlTextFormat = 2,
    xlMDYFormat = 3,
    xlDMYFormat = 4,
    xlYMDFormat = 5,
    xlMYDFormat = 6,
    xlDYMFormat = 7,
    xlYDMFormat = 8,
    xlSkipColumn = 9,
    xlEMDFormat = 10
};

enum xlQueryType
{
    xlODBCQuery = 1,
    xlDAORecordSet = 2,
    xlWebQuery = 4,
    xlOLEDBQuery = 5,
    xlTextImport = 6,
    xlADORecordset = 7
};

enum xlWebSelectionType
{
    xlEntirePage = 1,
    xlAllTables = 2,
    xlSpecifiedTables = 3
};

enum XlCubeFieldType
{
    xlHierarchy = 1,
    xlMeasure = 2
};

enum xlWebFormatting
{
    xlWebFormattingAll = 1,
    xlWebFormattingRTF = 2,
    xlWebFormattingNone = 3
};

enum xlDisplayDrawingObjects
{
    xlDisplayShapes = -4104,
    xlHide = 3,
    xlPlaceholders = 2
};

enum xLSubtototalLocationType
{
    xlAtTop = 1,
    xlAtBottom = 2
};

struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
IChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Resize ( ) = 0;
      virtual HRESULT __stdcall raw_MouseDown (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseUp (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseMove (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_DragPlot ( ) = 0;
      virtual HRESULT __stdcall raw_DragOver ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SeriesChange (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long PointIndex ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
};

struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
IOLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
IRefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRefresh (
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterRefresh (
        /*[in]*/ VARIANT_BOOL Success ) = 0;
};

struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBold,put=PutBold))
    _variant_t Bold;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetItalic,put=PutItalic))
    _variant_t Italic;
    __declspec(property(get=GetShadow,put=PutShadow))
    _variant_t Shadow;
    __declspec(property(get=GetSize,put=PutSize))
    _variant_t Size;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    _variant_t Strikethrough;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    _variant_t Underline;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _variant_t FontStyle;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    _variant_t Superscript;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    _variant_t Subscript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackground,put=PutBackground))
    _variant_t Background;
    __declspec(property(get=GetOutlineFont,put=PutOutlineFont))
    _variant_t OutlineFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBackground ( );
    void PutBackground (
        const _variant_t & _arg1 );
    _variant_t GetBold ( );
    void PutBold (
        const _variant_t & _arg1 );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetFontStyle ( );
    void PutFontStyle (
        const _variant_t & _arg1 );
    _variant_t GetItalic ( );
    void PutItalic (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t GetOutlineFont ( );
    void PutOutlineFont (
        const _variant_t & _arg1 );
    _variant_t GetShadow ( );
    void PutShadow (
        const _variant_t & _arg1 );
    _variant_t GetSize ( );
    void PutSize (
        const _variant_t & _arg1 );
    _variant_t GetStrikethrough ( );
    void PutStrikethrough (
        const _variant_t & _arg1 );
    _variant_t GetSubscript ( );
    void PutSubscript (
        const _variant_t & _arg1 );
    _variant_t GetSuperscript ( );
    void PutSuperscript (
        const _variant_t & _arg1 );
    _variant_t GetUnderline ( );
    void PutUnderline (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & _arg1 );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL _arg1 );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long _arg1 );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t _arg1 );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL _arg1 );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long _arg1 );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double _arg1 );
    long GetSplitRow ( );
    void PutSplitRow (
        long _arg1 );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double _arg1 );
    double GetTabRatio ( );
    void PutTabRatio (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView _arg1 );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
AppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
};

struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
WorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
};

struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
Range : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr _Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2;
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & _arg1 );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t DialogBoxEx ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula ( );
    void PutFormula (
        const _variant_t & _arg1 );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & _arg1 );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & _arg1 );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & _arg1 );
    long GetPageBreak ( );
    void PutPageBreak (
        long _arg1 );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & _arg1 );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & _arg1 );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & _arg1 );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & _arg1 );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & _arg1 );
    ValidationPtr GetValidation ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t GetValue2 ( );
    void PutValue2 (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t _arg1 );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
ChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );
};

struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
VPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
HPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
HPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
VPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
RecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
RecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long _arg1 );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
DocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
};

struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
Style : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL _arg1 );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL _arg1 );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t _arg1 );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation _arg1 );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL _arg1 );
    _bstr_t GetValue ( );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL _arg1 );
    _bstr_t Get_Default ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
Styles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[];
    __declspec(property(get=GetItem))
    StylePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );
};

struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
};

struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & ExcelCopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
Toolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetLeft ( );
    void PutLeft (
        long _arg1 );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection _arg1 );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
Toolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
ToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL _arg1 );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
ToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
Areas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
WorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
};

struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
MenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
MenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );
};

struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
Menus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
Menu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );
};

struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
MenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
MenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
Charts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
DrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
PivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum xlQueryType QueryType;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL _arg1 );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    enum xlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & _arg1 );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
PivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );
};

struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
PivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    long GetIndex ( );
    void PutIndex (
        long _arg1 );
};

struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
PivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
PivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long _arg1 );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL _arg1 );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t _arg1 );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t _arg1 );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL _arg1 );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long _arg1 );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t _arg1 );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t _arg1 );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode _arg1 );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t _arg1 );
    HRESULT Format (
        enum xlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL _arg1 );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
PivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing );
};

struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
PivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum xLSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation _arg1 );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & _arg1 );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction _arg1 );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation _arg1 );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & _arg1 );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & _arg1 );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & _arg1 );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL _arg1 );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL _arg1 );
    enum xLSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum xLSubtototalLocationType _arg1 );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL _arg1 );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType _arg1 );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
PivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
CalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
PivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
PivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
CalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
Characters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
Dialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
Dialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
};

struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
SoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );
};

struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
Button : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
Buttons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
CheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
CheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
OptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
};

struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
OptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
EditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
EditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
ScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
};

struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
ScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
ListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
ListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
GroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
GroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
DropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
DropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
Spinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
Spinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
DialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
Label : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
Labels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
Panes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
Scenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
Scenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );
};

struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
GroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
GroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
Line : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
};

struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
Lines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
Rectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
Rectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
Oval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
Ovals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
Arc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
};

struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
Arcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
OLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GotFocus ( );
    HRESULT LostFocus ( );
};

struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
_OLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    _bstr_t GetProgId ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
OLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
TextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
TextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
Picture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
Pictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );
};

struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
Drawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
};

struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
Drawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery _arg1 );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & _arg1 );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL _arg1 );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
Outline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL _arg1 );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn _arg1 );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow _arg1 );
};

struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
Module : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectionMode ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
};

struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
Modules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
DialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter;
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects;
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectDrawingObjects ( );
    VARIANT_BOOL GetProtectionMode ( );
    VARIANT_BOOL GetProtectScenarios ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL _arg1 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks ( );
    void PutDisplayAutomaticPageBreaks (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableAutoFilter ( );
    void PutEnableAutoFilter (
        VARIANT_BOOL _arg1 );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection _arg1 );
    VARIANT_BOOL GetEnableOutlining ( );
    void PutEnableOutlining (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnablePivotTable ( );
    void PutEnablePivotTable (
        VARIANT_BOOL _arg1 );
    _variant_t Evaluate (
        const _variant_t & Name );
    _variant_t _Evaluate (
        const _variant_t & Name );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t _arg1 );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL _arg1 );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        long _arg1 );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & _arg1 );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & _arg1 );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );
};

struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
DialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
Worksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL _arg1 );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double _arg1 );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t _arg1 );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t _arg1 );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL _arg1 );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize _arg1 );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL _arg1 );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long _arg1 );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & _arg1 );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & _arg1 );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double _arg1 );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double _arg1 );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t _arg1 );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t _arg1 );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double _arg1 );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder _arg1 );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation _arg1 );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize _arg1 );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t _arg1 );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL _arg1 );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t _arg1 );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t _arg1 );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t _arg1 );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t _arg1 );
    double GetRightMargin ( );
    void PutRightMargin (
        double _arg1 );
    double GetTopMargin ( );
    void PutTopMargin (
        double _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation _arg1 );
};

struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
Names : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
Name : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t _Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1;
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetRefersTo ( );
    void PutRefersTo (
        const _variant_t & _arg1 );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t _arg1 );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1 ( );
    void PutRefersToR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & _arg1 );
    RangePtr GetRefersToRange ( );
};

struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
ChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
ChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
Mailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t _arg1 );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & _arg1 );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
CustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
CustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
FormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
FormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
Comments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );
};

struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
RefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );
};

struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
_QueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum xlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum xlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum xlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    enum XlPlatform TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t _arg1 );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL _arg1 );
    enum XlPlatform GetTextFilePlatform ( );
    void PutTextFilePlatform (
        enum XlPlatform _arg1 );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long _arg1 );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType _arg1 );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier _arg1 );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t _arg1 );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & _arg1 );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL _arg1 );
    enum xlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t _arg1 );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    HRESULT ResetTimer ( );
    enum xlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum xlWebSelectionType _arg1 );
    enum xlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum xlWebFormatting _arg1 );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t _arg1 );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
QueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
Parameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType _arg1 );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
Parameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
ODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
};

struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
ODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
Validation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL _arg1 );
    long GetIMEMode ( );
    void PutIMEMode (
        long _arg1 );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t _arg1 );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t _arg1 );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t _arg1 );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t _arg1 );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL _arg1 );
    long GetType ( );
    VARIANT_BOOL GetValue ( );
};

struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
Hyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t _arg1 );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t _arg1 );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t _arg1 );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t _arg1 );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t _arg1 );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );
};

struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
IDocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectionChange (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ struct Hyperlink * Target ) = 0;
};

struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
IWorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeClose (
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeSave (
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforePrint (
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_NewSheet (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_AddinInstall ( ) = 0;
      virtual HRESULT __stdcall raw_AddinUninstall ( ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
};

struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
AutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );
};

struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
Filters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
Filter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );
};

struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetExcelReplaceText,put=PutExcelReplaceText))
    VARIANT_BOOL ExcelReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL _arg1 );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    VARIANT_BOOL GetExcelReplaceText ( );
    void PutExcelReplaceText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
Border : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
Interior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & _arg1 );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & _arg1 );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & _arg1 );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
ChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
};

struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
ChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExcelRGB))
    long ExcelRGB;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long _arg1 );
    long GetExcelRGB ( );
    long Get_Default ( );
    long GetType ( );
};

struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
Axis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL _arg1 );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & _arg1 );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses _arg1 );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark _arg1 );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double _arg1 );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double _arg1 );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double _arg1 );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark _arg1 );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double _arg1 );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL _arg1 );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType _arg1 );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition _arg1 );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long _arg1 );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long _arg1 );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType _arg1 );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit _arg1 );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL _arg1 );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit _arg1 );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double _arg1 );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL _arg1 );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );
};

struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
ChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
AxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
ChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long _arg1 );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long _arg1 );
    long GetGapWidth ( );
    void PutGapWidth (
        long _arg1 );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL _arg1 );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long _arg1 );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long _arg1 );
    long GetType ( );
    void PutType (
        long _arg1 );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL _arg1 );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents _arg1 );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long _arg1 );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL _arg1 );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType _arg1 );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & _arg1 );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long _arg1 );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
ChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
Axes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
Points : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
Point : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL _arg1 );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
Series : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long _arg1 );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long _arg1 );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType _arg1 );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & _arg1 );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & _arg1 );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & _arg1 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape _arg1 );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL _arg1 );
    LeaderLinesPtr GetLeaderLines ( );
};

struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
SeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );
};

struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
DataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
};

struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
DataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
LegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
};

struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
LegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
LegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    long GetPictureType ( );
    void PutPictureType (
        long _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
Trendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
Trendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL _arg1 );
    long GetForward ( );
    void PutForward (
        long _arg1 );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double _arg1 );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL _arg1 );
    long GetOrder ( );
    void PutOrder (
        long _arg1 );
    long GetPeriod ( );
    void PutPeriod (
        long _arg1 );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType _arg1 );
};

struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
Corners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
};

struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
SeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
HiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
Gridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
DropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
LeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );
};

struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
UpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
DownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
Floor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
};

struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
Walls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
TickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation _arg1 );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
};

struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
PlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );
};

struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
ChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
Legend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
ErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap _arg1 );
};

struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
DataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
Phonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement _arg1 );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    Office::ScriptPtr GetScript ( );
};

struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
};

struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Office::MsoTextOrientation Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float _arg1 );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float _arg1 );
    float GetMarginRight ( );
    void PutMarginRight (
        float _arg1 );
    float GetMarginTop ( );
    void PutMarginTop (
        float _arg1 );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation _arg1 );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoConnectorType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType _arg1 );
};

struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );
};

struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
ControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgId ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );
};

struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    HRESULT Update ( );
};

struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
PublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );
};

struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
OLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );
};

struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
OLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
Phonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
PivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );
};

struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
DisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
IDummy : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _ActiveSheetOrChart ( );
    HRESULT ExcelRGB ( );
    HRESULT ChDir ( );
    HRESULT DoScript ( );
    HRESULT DirectObject ( );
    HRESULT RefreshDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__ActiveSheetOrChart ( ) = 0;
      virtual HRESULT __stdcall raw_ExcelRGB ( ) = 0;
      virtual HRESULT __stdcall raw_ChDir ( ) = 0;
      virtual HRESULT __stdcall raw_DoScript ( ) = 0;
      virtual HRESULT __stdcall raw_DirectObject ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshDocument ( ) = 0;
};

struct __declspec(uuid("59191da1-ea47-11ce-a51f-00aa0061507f"))
QueryTable;
    // [ default ] dispinterface _QueryTable
    // [ default, source ] dispinterface RefreshEvents

struct __declspec(uuid("00024500-0000-0000-c000-000000000046"))
Application;
    // [ default ] interface _Application
    // [ default, source ] dispinterface AppEvents

struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
IWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum XlArrangeStyle ArrangeStyle,
        /*[in]*/ VARIANT ActiveWorkbook,
        /*[in]*/ VARIANT SyncHorizontal,
        /*[in]*/ VARIANT SyncVertical,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
};

struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
IWorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNA (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsError (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sum (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Average (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Min (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Max (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Npv (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dollar (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fixed (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pi (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ln (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log10 (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Round (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Index (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rept (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_And (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Or (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCount (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DSum (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DAverage (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMin (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMax (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDev (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Var (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVar (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ BSTR Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trend (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Growth (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NPer (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rate (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MIrr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Irr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Match (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weekday (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Transpose (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atan2 (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asin (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acos (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Choose (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_HLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_VLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Proper (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Substitute (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ BSTR Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsErr (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNumber (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sln (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Syd (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ddb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clean (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MDeterm (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MInverse (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_MMult (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ipmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ppmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountA (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Product (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fact (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DProduct (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNonText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDevP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_VarP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDevP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVarP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsLogical (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCountA (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_USDollar (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SearchB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReplaceB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundUp (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundDown (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rank (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Days360 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Vdb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ double Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Median (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumProduct (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Tanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DGet (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Db (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Frequency (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AveDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaLn (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Combin (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Confidence (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CritBinom (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Even (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExponDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fisher (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FisherInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Floor (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ceiling (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HypGeomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogNormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NegBinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSDist (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Standardize (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Odd (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Permut (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Poisson (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weibull (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumXMY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2MY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2PY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Correl (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Covar (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Forecast (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intercept (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pearson (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StEyx (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Slope (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Prob (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DevSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GeoMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HarMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Kurt (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Large (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Small (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Quartile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Percentile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_PercentRank (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Mode (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TrimMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Power (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Radians (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Degrees (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountBlank (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ispmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Roman (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asc (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dbcs (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Phonetic (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
Sheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
IHPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
IVPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
IRecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long RHS );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
_Worksheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetConsolidationFunction))
    enum XlConsolidationFunction ConsolidationFunction[];
    __declspec(property(get=GetConsolidationOptions))
    _variant_t ConsolidationOptions[];
    __declspec(property(get=GetConsolidationSources))
    _variant_t ConsolidationSources[];
    __declspec(property(get=GetAutoFilterMode,put=PutAutoFilterMode))
    VARIANT_BOOL AutoFilterMode[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFilterMode))
    VARIANT_BOOL FilterMode[];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetTransitionExpEval,put=PutTransitionExpEval))
    VARIANT_BOOL TransitionExpEval[];
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetTransitionFormEntry,put=PutTransitionFormEntry))
    VARIANT_BOOL TransitionFormEntry[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetCircularReference))
    RangePtr CircularReference[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetStandardHeight))
    double StandardHeight[];
    __declspec(property(get=GetUsedRange))
    RangePtr UsedRange[];
    __declspec(property(get=GetStandardWidth,put=PutStandardWidth))
    double StandardWidth[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetOutline))
    OutlinePtr Outline;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetType))
    enum XlSheetType Type[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    VARIANT_BOOL GetTransitionExpEval (
        long lcid = 0 );
    void PutTransitionExpEval (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAutoFilterMode (
        long lcid = 0 );
    void PutAutoFilterMode (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Calculate (
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    RangePtr GetCells ( );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    RangePtr GetCircularReference (
        long lcid = 0 );
    HRESULT ClearArrows (
        long lcid = 0 );
    RangePtr GetColumns ( );
    enum XlConsolidationFunction GetConsolidationFunction (
        long lcid = 0 );
    _variant_t GetConsolidationOptions (
        long lcid = 0 );
    _variant_t GetConsolidationSources (
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    VARIANT_BOOL GetFilterMode (
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    OutlinePtr GetOutline ( );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr PivotTables (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PivotTablePtr PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    RangePtr GetRows ( );
    IDispatchPtr Scenarios (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT ShowAllData (
        long lcid = 0 );
    HRESULT ShowDataForm (
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    double GetStandardHeight (
        long lcid = 0 );
    double GetStandardWidth (
        long lcid = 0 );
    void PutStandardWidth (
        long lcid,
        double RHS );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetTransitionFormEntry (
        long lcid = 0 );
    void PutTransitionFormEntry (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlSheetType GetType (
        long lcid = 0 );
    RangePtr GetUsedRange (
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CircularReference (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearArrows (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationFunction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationOptions (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationSources (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct Outline * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTables (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT RowGrand,
        /*[in]*/ VARIANT ColumnGrand,
        /*[in]*/ VARIANT SaveData,
        /*[in]*/ VARIANT HasAutoFormat,
        /*[in]*/ VARIANT AutoPage,
        /*[in]*/ VARIANT Reserved,
        /*[in]*/ VARIANT BackgroundQuery,
        /*[in]*/ VARIANT OptimizeCache,
        /*[in]*/ VARIANT PageFieldOrder,
        /*[in]*/ VARIANT PageFieldWrapCount,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT Connection,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Scenarios (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowAllData (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ShowDataForm (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsedRange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
IStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value[];
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL RHS );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL RHS );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _bstr_t GetName (
        long lcid = 0 );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t RHS );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation RHS );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL RHS );
    _bstr_t GetValue (
        long lcid = 0 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL RHS );
    _bstr_t Get_Default (
        long lcid = 0 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeAlignment (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeAlignment (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeBorder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeBorder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeFont (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeFont (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeNumber (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeNumber (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludePatterns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludePatterns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeProtection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeProtection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
IStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[][];
    __declspec(property(get=GetItem))
    StylePtr Item[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT BasedOn,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Workbook,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
};

struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
IBorders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
IAddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Installed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Installed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
IAddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & ExcelCopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT ExcelCopyFile,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
};

struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
IToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long RHS );
    long GetLeft ( );
    void PutLeft (
        long RHS );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection RHS );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ enum XlToolbarProtection * RHS ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ enum XlToolbarProtection RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_ToolbarButtons (
        /*[out,retval]*/ struct ToolbarButtons * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
IToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
IToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL RHS );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL RHS );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltInFace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BuiltInFace (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IsGap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
      virtual HRESULT __stdcall get_Pushed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Pushed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
IToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Button,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT Pushed,
        /*[in]*/ VARIANT Enabled,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
};

struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
IAreas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
IMenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
IMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Menus (
        /*[out,retval]*/ struct Menus * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
IMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
IMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuItems (
        /*[out,retval]*/ struct MenuItems * * RHS ) = 0;
};

struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
IMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct MenuItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddMenu (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
IMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
IDrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkCombo (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
IPivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum xlQueryType QueryType;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL RHS );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    enum xlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & RHS );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OptimizeCache (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OptimizeCache (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum xlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_LocalConnection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LocalConnection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePivotTable (
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_UseLocalConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLocalConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
IPivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlPivotTableSourceType SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
};

struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
IPivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    long GetIndex ( );
    void PutIndex (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
IPivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
IPivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct PivotCache * PivotCache,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
};

struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
IPivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
ICalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
IPivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL RHS );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
IPivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
ICalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
ICharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticCharacters (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticCharacters (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
IDialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
IDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
ISoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Play (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
IButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
IButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Button * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
ICheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
ICheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct CheckBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
IOptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
};

struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
IOptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct OptionButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
IEditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
IEditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct EditBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
IScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
IScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ScrollBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
IListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
IListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ListBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
IGroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
IGroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
IDropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
IDropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT Editable,
        /*[out,retval]*/ struct DropDown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
ISpinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
ISpinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Spinner * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
IDialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual void __stdcall _Dummy4 ( ) = 0;
      virtual void __stdcall _Dummy5 ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual void __stdcall _Dummy8 ( ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy20 ( ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
ILabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
ILabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Label * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
IPanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
};

struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
IPane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
IScenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[in]*/ VARIANT Comment,
        /*[in]*/ VARIANT Locked,
        /*[in]*/ VARIANT Hidden,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateSummary (
        /*[in]*/ enum XlSummaryReportType ReportType,
        /*[in]*/ VARIANT ResultCells,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Source,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
IScenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeScenario (
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ChangingCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
IGroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
IGroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
ILine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
ILines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Line * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
IRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
IRectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Rectangle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
IOval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
IOvals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Oval * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
IArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
};

struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
IArcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Arc * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
_IOLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    _bstr_t GetProgId ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ enum XlOLEVerb Verb,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ProgId (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
ITextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
ITextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct TextBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
IPictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Converter,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
};

struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
IDrawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
IDrawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy46 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ struct Drawing * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
IRoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery RHS );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & RHS );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL RHS );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & RHS );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ enum XlRoutingSlipDelivery * RHS ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ enum XlRoutingSlipDelivery RHS ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Message (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Recipients (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Recipients (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReturnWhenDone (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReturnWhenDone (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum XlRoutingSlipStatus * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TrackStatus (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TrackStatus (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
IOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL RHS );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn RHS );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutomaticStyles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutomaticStyles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowLevels (
        /*[in]*/ VARIANT RowLevels,
        /*[in]*/ VARIANT ColumnLevels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryColumn (
        /*[out,retval]*/ enum XlSummaryColumn * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryColumn (
        /*[in]*/ enum XlSummaryColumn RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryRow (
        /*[out,retval]*/ enum XlSummaryRow * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryRow (
        /*[in]*/ enum XlSummaryRow RHS ) = 0;
};

struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
IModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy21 ( ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertFile (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Merge,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
IModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct Module * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
IDialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & RHS );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & RHS );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy69 ( ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy74 ( ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual void __stdcall _Dummy76 ( ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy78 ( ) = 0;
      virtual void __stdcall _Dummy79 ( ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy82 ( ) = 0;
      virtual void __stdcall _Dummy83 ( ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy85 ( ) = 0;
      virtual void __stdcall _Dummy86 ( ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy88 ( ) = 0;
      virtual void __stdcall _Dummy89 ( ) = 0;
      virtual void __stdcall _Dummy90 ( ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DialogFrame (
        /*[out,retval]*/ struct DialogFrame * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditBoxes (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Focus (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Hide (
        /*[in]*/ VARIANT Cancel,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
IDialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
IWorksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
IPageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL RHS );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double RHS );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t RHS );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t RHS );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL RHS );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize RHS );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL RHS );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long RHS );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & RHS );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & RHS );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double RHS );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double RHS );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t RHS );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t RHS );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double RHS );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder RHS );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation RHS );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize RHS );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t RHS );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL RHS );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t RHS );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t RHS );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t RHS );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t RHS );
    double GetRightMargin ( );
    void PutRightMargin (
        double RHS );
    double GetTopMargin ( );
    void PutTopMargin (
        double RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BottomMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_BottomMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_CenterFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHorizontally (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHorizontally (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CenterVertically (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterVertically (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChartSize (
        /*[out,retval]*/ enum XlObjectSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartSize (
        /*[in]*/ enum XlObjectSize RHS ) = 0;
      virtual HRESULT __stdcall get_Draft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Draft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FirstPageNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstPageNumber (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesTall (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesTall (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesWide (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesWide (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FooterMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_FooterMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HeaderMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_HeaderMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LeftFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ enum XlOrder * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ enum XlOrder RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPageOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPageOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ enum XlPaperSize * RHS ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ enum XlPaperSize RHS ) = 0;
      virtual HRESULT __stdcall get_PrintArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintNotes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintNotes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PrintTitleColumns (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleColumns (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintTitleRows (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleRows (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_RightMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TopMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintComments (
        /*[out,retval]*/ enum XlPrintLocation * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintComments (
        /*[in]*/ enum XlPrintLocation RHS ) = 0;
};

struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
INames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT RefersTo,
        /*[in]*/ VARIANT Visible,
        /*[in]*/ VARIANT MacroType,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Category,
        /*[in]*/ VARIANT NameLocal,
        /*[in]*/ VARIANT RefersToLocal,
        /*[in]*/ VARIANT CategoryLocal,
        /*[in]*/ VARIANT RefersToR1C1,
        /*[in]*/ VARIANT RefersToR1C1Local,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
IName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category[];
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo[];
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1[];
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory (
        long lcidIn = 0 );
    void PutCategory (
        long lcidIn,
        _bstr_t RHS );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t RHS );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType RHS );
    _bstr_t GetName (
        long lcidIn = 0 );
    void PutName (
        long lcidIn,
        _bstr_t RHS );
    _variant_t GetRefersTo (
        long lcidIn = 0 );
    void PutRefersTo (
        long lcidIn,
        const _variant_t & RHS );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t RHS );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1 (
        long lcidIn = 0 );
    void PutRefersToR1C1 (
        long lcidIn,
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & RHS );
    RangePtr GetRefersToRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_MacroType (
        /*[out,retval]*/ enum XlXLMMacroType * RHS ) = 0;
      virtual HRESULT __stdcall put_MacroType (
        /*[in]*/ enum XlXLMMacroType RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutKey (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ShortcutKey (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
IChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ChartObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
IMailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & RHS );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & RHS );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & RHS );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t RHS );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & RHS );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BCCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BCCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Enclosures (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Enclosures (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Received (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SendDateTime (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_Sender (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ToRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ToRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_WhichAddress (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WhichAddress (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
ICustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ViewName,
        /*[in]*/ VARIANT PrintSettings,
        /*[in]*/ VARIANT RowColSettings,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
ICustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowColSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
IFormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator,
        /*[in]*/ VARIANT Formula1,
        /*[in]*/ VARIANT Formula2,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
IFormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
IComments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
IComment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
};

struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
_IQueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum xlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum xlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum xlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    enum XlPlatform TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t RHS );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL RHS );
    enum XlPlatform GetTextFilePlatform ( );
    void PutTextFilePlatform (
        enum XlPlatform RHS );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long RHS );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType RHS );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier RHS );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t RHS );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & RHS );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & RHS );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL RHS );
    enum xlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    HRESULT ResetTimer ( );
    enum xlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum xlWebSelectionType RHS );
    enum xlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum xlWebFormatting RHS );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t RHS );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FieldNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FieldNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowNumbers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowNumbers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FillAdjacentFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FillAdjacentFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Refreshing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FetchedRowOverflow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CancelRefresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshStyle (
        /*[out,retval]*/ enum XlCellInsertionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshStyle (
        /*[in]*/ enum XlCellInsertionMode RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PostText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PostText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ResultRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ VARIANT BackgroundQuery,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct Parameters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TablesOnlyFromHTML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TablesOnlyFromHTML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEditing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEditing (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePlatform (
        /*[out,retval]*/ enum XlPlatform * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePlatform (
        /*[in]*/ enum XlPlatform RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileStartRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileStartRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileParseType (
        /*[out,retval]*/ enum XlTextParsingType * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileParseType (
        /*[in]*/ enum XlTextParsingType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTextQualifier (
        /*[out,retval]*/ enum XlTextQualifier * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTextQualifier (
        /*[in]*/ enum XlTextQualifier RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileConsecutiveDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileConsecutiveDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTabDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTabDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSemicolonDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSemicolonDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileCommaDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileCommaDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSpaceDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSpaceDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileOtherDelimiter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileOtherDelimiter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileColumnDataTypes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileColumnDataTypes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileFixedColumnWidths (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileFixedColumnWidths (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveColumnInfo (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveColumnInfo (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AdjustColumnWidth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AdjustColumnWidth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePromptOnRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePromptOnRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum xlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileDecimalSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileDecimalSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileThousandsSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileThousandsSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_WebSelectionType (
        /*[out,retval]*/ enum xlWebSelectionType * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSelectionType (
        /*[in]*/ enum xlWebSelectionType RHS ) = 0;
      virtual HRESULT __stdcall get_WebFormatting (
        /*[out,retval]*/ enum xlWebFormatting * RHS ) = 0;
      virtual HRESULT __stdcall put_WebFormatting (
        /*[in]*/ enum xlWebFormatting RHS ) = 0;
      virtual HRESULT __stdcall get_WebTables (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_WebTables (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_WebPreFormattedTextToColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebPreFormattedTextToColumns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebSingleBlockTextImport (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSingleBlockTextImport (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebDisableDateRecognition (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebDisableDateRecognition (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebConsecutiveDelimitersAsOne (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebConsecutiveDelimitersAsOne (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
IQueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Connection,
        /*[in]*/ struct Range * Destination,
        /*[in]*/ VARIANT Sql,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
IParameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType RHS );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlParameterDataType * RHS ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum XlParameterDataType RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlParameterType * RHS ) = 0;
      virtual HRESULT __stdcall get_PromptString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_SetParam (
        /*[in]*/ enum XlParameterType Type,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_RefreshOnChange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnChange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
IParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT iDataType,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
IODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
IODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
IValidation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL RHS );
    long GetIMEMode ( );
    void PutIMEMode (
        long RHS );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t RHS );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t RHS );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t RHS );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t RHS );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL RHS );
    long GetType ( );
    VARIANT_BOOL GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlDVType Type,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AlertStyle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreBlank (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreBlank (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_InCellDropdown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InCellDropdown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_ErrorMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowError (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowError (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowInput (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowInput (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
IHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Anchor,
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress,
        /*[in]*/ VARIANT ScreenTip,
        /*[in]*/ VARIANT TextToDisplay,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
IHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t RHS );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t RHS );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t RHS );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t RHS );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t RHS );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Follow (
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT_BOOL EditNow,
        /*[in]*/ VARIANT_BOOL Overwrite ) = 0;
};

struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
IAutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct Filters * * RHS ) = 0;
};

struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
IFilters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
IFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_On (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria1 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ enum XlAutoFilterOperator * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria2 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
IAutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetExcelReplaceText,put=PutExcelReplaceText))
    VARIANT_BOOL ExcelReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL RHS );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetExcelReplaceText ( );
    void PutExcelReplaceText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddReplacement (
        /*[in]*/ BSTR What,
        /*[in]*/ BSTR Replacement,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CapitalizeNamesOfDays (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CapitalizeNamesOfDays (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteReplacement (
        /*[in]*/ BSTR What,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ExcelReplaceText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExcelReplaceText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TwoInitialCapitals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TwoInitialCapitals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectSentenceCap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectSentenceCap (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectCapsLock (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectCapsLock (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
IBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
IInterior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & RHS );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & RHS );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & RHS );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColor (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColor (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
IChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ VARIANT PictureFile = vtMissing,
        /*[in]*/ VARIANT PictureFormat = vtMissing,
        /*[in]*/ VARIANT PictureStackUnit = vtMissing,
        /*[in]*/ VARIANT PicturePlacement = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
};

struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
IChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetExcelRGB))
    long ExcelRGB;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long RHS );
    long GetExcelRGB ( );
    long Get_Default ( );
    long GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ExcelRGB (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL RHS );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & RHS );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses RHS );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark RHS );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double RHS );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL RHS );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double RHS );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL RHS );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double RHS );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark RHS );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double RHS );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL RHS );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType RHS );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition RHS );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long RHS );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long RHS );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType RHS );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit RHS );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL RHS );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit RHS );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit RHS );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit RHS );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double RHS );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL RHS );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisBetweenCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisBetweenCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisTitle (
        /*[out,retval]*/ struct AxisTitle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryNames (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Crosses (
        /*[out,retval]*/ enum XlAxisCrosses * RHS ) = 0;
      virtual HRESULT __stdcall put_Crosses (
        /*[in]*/ enum XlAxisCrosses RHS ) = 0;
      virtual HRESULT __stdcall get_CrossesAt (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_CrossesAt (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMajorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMajorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasMinorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMinorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MajorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MinorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReversePlotOrder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReversePlotOrder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScaleType (
        /*[out,retval]*/ enum XlScaleType * RHS ) = 0;
      virtual HRESULT __stdcall put_ScaleType (
        /*[in]*/ enum XlScaleType RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelPosition (
        /*[out,retval]*/ enum XlTickLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelPosition (
        /*[in]*/ enum XlTickLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TickMarkSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickMarkSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlAxisType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlAxisType RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnit (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnit (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryType (
        /*[out,retval]*/ enum XlCategoryType * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryType (
        /*[in]*/ enum XlCategoryType RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnit (
        /*[out,retval]*/ enum XlDisplayUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnit (
        /*[in]*/ enum XlDisplayUnit RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitCustom (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnitCustom (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HasDisplayUnitLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDisplayUnitLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitLabel (
        /*[out,retval]*/ struct DisplayUnitLabel * * RHS ) = 0;
};

struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
IChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
IChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long RHS );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long RHS );
    long GetGapWidth ( );
    void PutGapWidth (
        long RHS );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL RHS );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long RHS );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long RHS );
    long GetType ( );
    void PutType (
        long RHS );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL RHS );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents RHS );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long RHS );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL RHS );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType RHS );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & RHS );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long RHS );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_DoughnutHoleSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DoughnutHoleSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DownBars (
        /*[out,retval]*/ struct DownBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct DropLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_FirstSliceAngle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstSliceAngle (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GapWidth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapWidth (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDropLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDropLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasHiLoLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasHiLoLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasRadarAxisLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRadarAxisLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasSeriesLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasSeriesLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasUpDownBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasUpDownBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiLoLines (
        /*[out,retval]*/ struct HiLoLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadarAxisLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SeriesLines (
        /*[out,retval]*/ struct SeriesLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_UpBars (
        /*[out,retval]*/ struct UpBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_VaryByCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_VaryByCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SizeRepresents (
        /*[out,retval]*/ enum XlSizeRepresents * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeRepresents (
        /*[in]*/ enum XlSizeRepresents RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleScale (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleScale (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitType (
        /*[out,retval]*/ enum XlChartSplitType * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitType (
        /*[in]*/ enum XlChartSplitType RHS ) = 0;
      virtual HRESULT __stdcall get_SplitValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitValue (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SecondPlotSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondPlotSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
IChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum XlAxisType Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[out,retval]*/ struct Axis * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
IPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Point * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
IPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL RHS );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SecondaryPlot (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondaryPlot (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t RHS );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long RHS );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & RHS );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & RHS );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & RHS );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL RHS );
    LeaderLinesPtr GetLeaderLines ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataLabels (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ErrorBar (
        /*[in]*/ enum XlErrorBarDirection Direction,
        /*[in]*/ enum XlErrorBarInclude Include,
        /*[in]*/ enum XlErrorBarType Type,
        /*[in]*/ VARIANT Amount,
        /*[in]*/ VARIANT MinusValues,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorBars (
        /*[out,retval]*/ struct ErrorBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasErrorBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasErrorBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PlotOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Points (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Trendlines (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_XValues (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleSizes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleSizes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DEffect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DEffect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLeaderLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLeaderLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LeaderLines (
        /*[out,retval]*/ struct LeaderLines * * RHS ) = 0;
};

struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
ISeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ VARIANT CategoryLabels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT NewSeries,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewSeries (
        /*[out,retval]*/ struct Series * * RHS ) = 0;
};

struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
IDataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
};

struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
IDataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy13 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy16 ( ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
ILegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_LegendKey (
        /*[out,retval]*/ struct LegendKey * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
ILegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LegendEntry * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
ILegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    long GetPictureType ( );
    void PutPictureType (
        long RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
ITrendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlTrendlineType Type,
        /*[in]*/ VARIANT Order,
        /*[in]*/ VARIANT Period,
        /*[in]*/ VARIANT Forward,
        /*[in]*/ VARIANT Backward,
        /*[in]*/ VARIANT Intercept,
        /*[in]*/ VARIANT DisplayEquation,
        /*[in]*/ VARIANT DisplayRSquared,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
ITrendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL RHS );
    long GetForward ( );
    void PutForward (
        long RHS );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double RHS );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL RHS );
    long GetOrder ( );
    void PutOrder (
        long RHS );
    long GetPeriod ( );
    void PutPeriod (
        long RHS );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEquation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEquation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRSquared (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRSquared (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Forward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Forward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Intercept (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Intercept (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InterceptIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InterceptIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NameIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NameIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlTrendlineType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlTrendlineType RHS ) = 0;
};

struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
ICorners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
ISeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
IHiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
IGridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
IDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
ILeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
};

struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
IUpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
IDownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
IFloor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
};

struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
ITickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation RHS );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlTickLabelOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlTickLabelOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
IPlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideLeft (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideTop (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
IChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
ILegend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LegendEntries (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlLegendPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlLegendPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
IErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum XlEndStyleCap * RHS ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum XlEndStyleCap RHS ) = 0;
};

struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
IDataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderHorizontal (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderVertical (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderVertical (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
IPhonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
IShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement RHS );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    Office::ScriptPtr GetScript ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_DrawingObject (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum XlPlacement * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum XlPlacement RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ VARIANT Appearance = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ControlFormat (
        /*[out,retval]*/ struct ControlFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormControlType (
        /*[out,retval]*/ enum XlFormControl * RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * RHS ) = 0;
};

struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
IShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddFormControl (
        /*[in]*/ enum XlFormControl Type,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
IShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    enum Office::MsoTriState LockAspectRatio;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetAutoShapeType,put=PutAutoShapeType))
    enum Office::MsoAutoShapeType AutoShapeType;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum Office::MsoTriState Visible;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetBlackWhiteMode,put=PutBlackWhiteMode))
    enum Office::MsoBlackWhiteMode BlackWhiteMode;
    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum Office::MsoAlignCmd AlignCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum Office::MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
IGroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
ITextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Office::MsoTextOrientation Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float RHS );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float RHS );
    float GetMarginRight ( );
    void PutMarginRight (
        float RHS );
    float GetMarginTop ( );
    void PutMarginTop (
        float RHS );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation RHS );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoMargins (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoMargins (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
IConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetType,put=PutType))
    enum Office::MsoConnectorType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoConnectorType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoConnectorType RHS ) = 0;
};

struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
IFreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ VARIANT X2 = vtMissing,
        /*[in]*/ VARIANT Y2 = vtMissing,
        /*[in]*/ VARIANT X3 = vtMissing,
        /*[in]*/ VARIANT Y3 = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
IControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Index = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
IOLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProgId))
    _bstr_t ProgId;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetProgId ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProgId (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ VARIANT Verb = vtMissing ) = 0;
};

struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
ILinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHtmlType,put=PutHtmlType))
    enum XlHtmlType HtmlType;
    __declspec(property(get=GetDivID))
    _bstr_t DivID;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetSourceType))
    enum XlSourceType SourceType;
    __declspec(property(get=GetSheet))
    _bstr_t Sheet;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _bstr_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT Publish (
        const _variant_t & Create = vtMissing );
    _bstr_t GetDivID ( );
    _bstr_t GetSheet ( );
    enum XlSourceType GetSourceType ( );
    _bstr_t GetSource ( );
    enum XlHtmlType GetHtmlType ( );
    void PutHtmlType (
        enum XlHtmlType RHS );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ VARIANT Create = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DivID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Sheet (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HtmlType (
        /*[out,retval]*/ enum XlHtmlType * RHS ) = 0;
      virtual HRESULT __stdcall put_HtmlType (
        /*[in]*/ enum XlHtmlType RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
IPublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlSourceType SourceType,
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Sheet,
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT HtmlType,
        /*[in]*/ VARIANT DivID,
        /*[in]*/ VARIANT Title,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
IOLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Native (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Stage (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
IOLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
IPhonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Start,
        /*[in]*/ long Length,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetSaveHiddenData,put=PutSaveHiddenData))
    VARIANT_BOOL SaveHiddenData;
    __declspec(property(get=GetLoadPictures,put=PutLoadPictures))
    VARIANT_BOOL LoadPictures;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    VARIANT_BOOL UpdateLinksOnSave;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    VARIANT_BOOL CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetScreenSize,put=PutScreenSize))
    enum Office::MsoScreenSize ScreenSize;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    VARIANT_BOOL AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum Office::MsoEncoding Encoding;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveHiddenData ( );
    void PutSaveHiddenData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLoadPictures ( );
    void PutLoadPictures (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    VARIANT_BOOL GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        VARIANT_BOOL RHS );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveHiddenData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveHiddenData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LoadPictures (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LoadPictures (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Office::WebPageFonts * * RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetScreenSize,put=PutScreenSize))
    enum Office::MsoScreenSize ScreenSize;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum Office::MsoEncoding Encoding;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
};

struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
TreeviewControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrilled,put=PutDrilled))
    _variant_t Drilled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetDrilled ( );
    void PutDrilled (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Drilled (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Drilled (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
CubeField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHiddenLevels,put=PutHiddenLevels))
    long HiddenLevels;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetCubeFieldType))
    enum XlCubeFieldType CubeFieldType;
    __declspec(property(get=GetTreeviewControl))
    TreeviewControlPtr TreeviewControl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlCubeFieldType GetCubeFieldType ( );
    _bstr_t GetCaption ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    TreeviewControlPtr GetTreeviewControl ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    long GetHiddenLevels ( );
    void PutHiddenLevels (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFieldType (
        /*[out,retval]*/ enum XlCubeFieldType * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TreeviewControl (
        /*[out,retval]*/ struct TreeviewControl * * RHS ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenLevels (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HiddenLevels (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
IPivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum xLSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation RHS );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & RHS );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction RHS );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL RHS );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & RHS );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & RHS );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & RHS );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL RHS );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL RHS );
    enum xLSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum xLSubtototalLocationType RHS );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL RHS );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ enum XlPivotFieldCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ enum XlPivotFieldCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_ChildField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlPivotFieldDataType * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Function (
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall put_Function (
        /*[in]*/ enum XlConsolidationFunction RHS ) = 0;
      virtual HRESULT __stdcall get_GroupLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShowAllItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowAllItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ParentField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_BaseField (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseField (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BaseItem (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseItem (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TotalLevels (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedItems (
        /*[out,retval]*/ struct CalculatedItems * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ServerBased (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ServerBased (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoSort (
        /*[in]*/ long Order,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall raw_AutoShow (
        /*[in]*/ long Type,
        /*[in]*/ long Range,
        /*[in]*/ long Count,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall get_AutoSortOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSortField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowRange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutBlankLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutBlankLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        /*[out,retval]*/ enum xLSubtototalLocationType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        /*[in]*/ enum xLSubtototalLocationType RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutPageBreak (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutPageBreak (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutForm (
        /*[out,retval]*/ enum XlLayoutFormType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutForm (
        /*[in]*/ enum XlLayoutFormType RHS ) = 0;
      virtual HRESULT __stdcall get_SubtotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeField (
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPageName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPageName (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
CubeFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CubeFieldPtr _Default[];
    __declspec(property(get=GetItem))
    CubeFieldPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CubeFieldPtr GetItem (
        const _variant_t & Index );
    CubeFieldPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
IPivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL RHS );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL RHS );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long RHS );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL RHS );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t RHS );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL RHS );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t RHS );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL RHS );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long RHS );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t RHS );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t RHS );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode RHS );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t RHS );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t RHS );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t RHS );
    HRESULT Format (
        enum xlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL RHS );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t RHS );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields,
        /*[in]*/ VARIANT ColumnFields,
        /*[in]*/ VARIANT PageFields,
        /*[in]*/ VARIANT AddToTable,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPages (
        /*[in]*/ VARIANT PageField,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBodyRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRangeCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange1 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange2 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CacheIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CacheIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedFields (
        /*[out,retval]*/ struct CalculatedFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayErrorString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayErrorString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNullString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNullString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableDrilldown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableDrilldown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableFieldDialog (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableFieldDialog (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableWizard (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableWizard (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListFormulas ( ) = 0;
      virtual HRESULT __stdcall get_ManualUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ManualUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NullString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NullString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFormulas (
        /*[out,retval]*/ struct PivotFormulas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SubtotalHiddenPageItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalHiddenPageItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldWrapCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldWrapCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotSelect (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlPTSelectionMode Mode ) = 0;
      virtual HRESULT __stdcall get_PivotSelection (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotSelection (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SelectionMode (
        /*[out,retval]*/ enum XlPTSelectionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_SelectionMode (
        /*[in]*/ enum XlPTSelectionMode RHS ) = 0;
      virtual HRESULT __stdcall get_TableStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TableStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_VacatedStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_VacatedStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ enum xlPivotFormatType Format ) = 0;
      virtual HRESULT __stdcall get_PrintTitles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_GrandTotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_GrandTotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SmallGrid (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallGrid (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RepeatItemsOnEachPrintedPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RepeatItemsOnEachPrintedPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsAnnotation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TotalsAnnotation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
IPivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields = vtMissing,
        /*[in]*/ VARIANT ColumnFields = vtMissing,
        /*[in]*/ VARIANT PageFields = vtMissing,
        /*[in]*/ VARIANT AppendField = vtMissing ) = 0;
};

struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
IDisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020821-0000-0000-c000-000000000046"))
Chart;
    // [ default ] interface _Chart
    // [ default, source ] dispinterface ChartEvents

struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
IWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & RHS );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL RHS );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long RHS );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t RHS );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL RHS );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long RHS );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double RHS );
    long GetSplitRow ( );
    void PutSplitRow (
        long RHS );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double RHS );
    double GetTabRatio ( );
    void PutTabRatio (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView RHS );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL RHS );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateNext (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivatePrevious (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT RouteWorkbook,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHorizontalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHorizontalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayWorkbookTabs (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayWorkbookTabs (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayZeros (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayZeros (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableResize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableResize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FreezePanes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FreezePanes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RangeSelection (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollWorkbookTabs (
        /*[in]*/ VARIANT Sheets,
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SelectedSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Split (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Split (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_SplitRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TabRatio (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TabRatio (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlWindowType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ enum XlWindowView * RHS ) = 0;
      virtual HRESULT __stdcall put_View (
        /*[in]*/ enum XlWindowView RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
_Chart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetArea3DGroup))
    ChartGroupPtr Area3DGroup[];
    __declspec(property(get=GetBar3DGroup))
    ChartGroupPtr Bar3DGroup[];
    __declspec(property(get=GetColumn3DGroup))
    ChartGroupPtr Column3DGroup[];
    __declspec(property(get=GetLine3DGroup))
    ChartGroupPtr Line3DGroup[];
    __declspec(property(get=GetPie3DGroup))
    ChartGroupPtr Pie3DGroup[];
    __declspec(property(get=GetSurfaceGroup))
    ChartGroupPtr SurfaceGroup[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent[];
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation[];
    __declspec(property(get=GetGapDepth,put=PutGapDepth))
    long GapDepth[];
    __declspec(property(get=GetHasAxis,put=PutHasAxis))
    _variant_t HasAxis[][][];
    __declspec(property(get=GetHasLegend,put=PutHasLegend))
    VARIANT_BOOL HasLegend[];
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle[];
    __declspec(property(get=GetHeightPercent,put=PutHeightPercent))
    long HeightPercent[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective[];
    __declspec(property(get=GetRightAngleAxes,put=PutRightAngleAxes))
    _variant_t RightAngleAxes[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetRotation,put=PutRotation))
    _variant_t Rotation[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetPivotLayout))
    PivotLayoutPtr PivotLayout;
    __declspec(property(get=GetHasPivotFields,put=PutHasPivotFields))
    VARIANT_BOOL HasPivotFields;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDataTable))
    DataTablePtr DataTable;
    __declspec(property(get=GetHasDataTable,put=PutHasDataTable))
    VARIANT_BOOL HasDataTable;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    VARIANT_BOOL ShowWindow;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetChartTitle))
    ChartTitlePtr ChartTitle[];
    __declspec(property(get=GetCorners))
    CornersPtr Corners[];
    __declspec(property(get=GetFloor))
    FloorPtr Floor[];
    __declspec(property(get=GetLegend))
    LegendPtr Legend[];
    __declspec(property(get=GetPlotArea))
    PlotAreaPtr PlotArea[];
    __declspec(property(get=GetWalls))
    WallsPtr Walls[];
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetChartArea))
    ChartAreaPtr ChartArea[];
    __declspec(property(get=GetProtectFormatting,put=PutProtectFormatting))
    VARIANT_BOOL ProtectFormatting;
    __declspec(property(get=GetProtectData,put=PutProtectData))
    VARIANT_BOOL ProtectData;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPlotVisibleOnly,put=PutPlotVisibleOnly))
    VARIANT_BOOL PlotVisibleOnly[];
    __declspec(property(get=GetDisplayBlanksAs,put=PutDisplayBlanksAs))
    enum XlDisplayBlanksAs DisplayBlanksAs[];
    __declspec(property(get=GetSizeWithWindow,put=PutSizeWithWindow))
    VARIANT_BOOL SizeWithWindow[];
    __declspec(property(get=GetPlotBy,put=PutPlotBy))
    enum XlRowCol PlotBy;
    __declspec(property(get=GetProtectGoalSeek,put=PutProtectGoalSeek))
    VARIANT_BOOL ProtectGoalSeek;
    __declspec(property(get=GetProtectSelection,put=PutProtectSelection))
    VARIANT_BOOL ProtectSelection;
    __declspec(property(get=GetWallsAndGridlines2D,put=PutWallsAndGridlines2D))
    VARIANT_BOOL WallsAndGridlines2D[];
    __declspec(property(get=GetAutoScaling,put=PutAutoScaling))
    VARIANT_BOOL AutoScaling[];
    __declspec(property(get=GetType,put=PutType))
    long Type[];
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    HRESULT ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        long lcid = 0 );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetArea3DGroup (
        long lcid = 0 );
    IDispatchPtr AreaGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT AutoFormat (
        long Gallery,
        const _variant_t & Format = vtMissing );
    VARIANT_BOOL GetAutoScaling (
        long lcid = 0 );
    void PutAutoScaling (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Axes (
        const _variant_t & Type,
        enum XlAxisGroup AxisGroup,
        long lcid = 0 );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    ChartGroupPtr GetBar3DGroup (
        long lcid = 0 );
    IDispatchPtr BarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartAreaPtr GetChartArea (
        long lcid = 0 );
    IDispatchPtr ChartGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartTitlePtr GetChartTitle (
        long lcid = 0 );
    HRESULT ChartWizard (
        const _variant_t & Source = vtMissing,
        const _variant_t & Gallery = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & PlotBy = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & HasLegend = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & CategoryTitle = vtMissing,
        const _variant_t & ValueTitle = vtMissing,
        const _variant_t & ExtraTitle = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetColumn3DGroup (
        long lcid = 0 );
    IDispatchPtr ColumnGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long lcid = 0 );
    CornersPtr GetCorners (
        long lcid = 0 );
    HRESULT CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance Size,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing,
        long lcid = 0 );
    DataTablePtr GetDataTable ( );
    long GetDepthPercent (
        long lcid = 0 );
    void PutDepthPercent (
        long lcid,
        long RHS );
    HRESULT Deselect (
        long lcid = 0 );
    enum XlDisplayBlanksAs GetDisplayBlanksAs (
        long lcid = 0 );
    void PutDisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS );
    IDispatchPtr DoughnutGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetElevation (
        long lcid = 0 );
    void PutElevation (
        long lcid,
        long RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    FloorPtr GetFloor (
        long lcid = 0 );
    long GetGapDepth (
        long lcid = 0 );
    void PutGapDepth (
        long lcid,
        long RHS );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetHasAxis (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    void PutHasAxis (
        const _variant_t & Index1,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetHasDataTable ( );
    void PutHasDataTable (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLegend (
        long lcid = 0 );
    void PutHasLegend (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle (
        long lcid = 0 );
    void PutHasTitle (
        long lcid,
        VARIANT_BOOL RHS );
    long GetHeightPercent (
        long lcid = 0 );
    void PutHeightPercent (
        long lcid,
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    LegendPtr GetLegend (
        long lcid = 0 );
    ChartGroupPtr GetLine3DGroup (
        long lcid = 0 );
    IDispatchPtr LineGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _ChartPtr Location (
        enum XlChartLocation Where,
        const _variant_t & Name = vtMissing );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    long GetPerspective (
        long lcid = 0 );
    void PutPerspective (
        long lcid,
        long RHS );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetPie3DGroup (
        long lcid = 0 );
    IDispatchPtr PieGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PlotAreaPtr GetPlotArea (
        long lcid = 0 );
    VARIANT_BOOL GetPlotVisibleOnly (
        long lcid = 0 );
    void PutPlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr RadarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetRightAngleAxes (
        long lcid = 0 );
    void PutRightAngleAxes (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetRotation (
        long lcid = 0 );
    void PutRotation (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSizeWithWindow (
        long lcid = 0 );
    void PutSizeWithWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowWindow ( );
    void PutShowWindow (
        VARIANT_BOOL RHS );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetSubType (
        long lcid = 0 );
    void PutSubType (
        long lcid,
        long RHS );
    ChartGroupPtr GetSurfaceGroup (
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType,
        const _variant_t & TypeName = vtMissing );
    WallsPtr GetWalls (
        long lcid = 0 );
    VARIANT_BOOL GetWallsAndGridlines2D (
        long lcid = 0 );
    void PutWallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr XYGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    enum XlRowCol GetPlotBy ( );
    void PutPlotBy (
        enum XlRowCol RHS );
    HRESULT CopyChartBuild ( );
    VARIANT_BOOL GetProtectFormatting ( );
    void PutProtectFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectData ( );
    void PutProtectData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectGoalSeek ( );
    void PutProtectGoalSeek (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectSelection ( );
    void PutProtectSelection (
        VARIANT_BOOL RHS );
    HRESULT GetChartElement (
        long x,
        long y,
        long * ElementID,
        long * Arg1,
        long * Arg2 );
    HRESULT SetSourceData (
        struct Range * Source,
        const _variant_t & PlotBy = vtMissing );
    VARIANT_BOOL Export (
        _bstr_t Filename,
        const _variant_t & FilterName = vtMissing,
        const _variant_t & Interactive = vtMissing );
    HRESULT Refresh ( );
    PivotLayoutPtr GetPivotLayout ( );
    VARIANT_BOOL GetHasPivotFields ( );
    void PutHasPivotFields (
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Area3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AreaGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ long Gallery,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Axes (
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Bar3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartArea * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartTitle * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartWizard (
        /*[in]*/ VARIANT Source = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT PlotBy = vtMissing,
        /*[in]*/ VARIANT CategoryLabels = vtMissing,
        /*[in]*/ VARIANT SeriesLabels = vtMissing,
        /*[in]*/ VARIANT HasLegend = vtMissing,
        /*[in]*/ VARIANT Title = vtMissing,
        /*[in]*/ VARIANT CategoryTitle = vtMissing,
        /*[in]*/ VARIANT ValueTitle = vtMissing,
        /*[in]*/ VARIANT ExtraTitle = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Column3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Corners (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Corners * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in]*/ VARIANT ContainsPICT = vtMissing,
        /*[in]*/ VARIANT ContainsBIFF = vtMissing,
        /*[in]*/ VARIANT ContainsRTF = vtMissing,
        /*[in]*/ VARIANT ContainsVALU = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DataTable (
        /*[out,retval]*/ struct DataTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Deselect (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayBlanksAs * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayBlanksAs RHS ) = 0;
      virtual HRESULT __stdcall raw_DoughnutGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Floor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Floor * * RHS ) = 0;
      virtual HRESULT __stdcall get_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2 = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HasDataTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataTable (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Legend * * RHS ) = 0;
      virtual HRESULT __stdcall get_Line3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LineGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Location (
        /*[in]*/ enum XlChartLocation Where,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Pie3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PieGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PlotArea * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_RadarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SurfaceGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType,
        /*[in]*/ VARIANT TypeName = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_XYGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_PlotBy (
        /*[out,retval]*/ enum XlRowCol * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotBy (
        /*[in]*/ enum XlRowCol RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyChartBuild ( ) = 0;
      virtual HRESULT __stdcall get_ProtectFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectGoalSeek (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectGoalSeek (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_GetChartElement (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long * ElementID,
        /*[in]*/ long * Arg1,
        /*[in]*/ long * Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SetSourceData (
        /*[in]*/ struct Range * Source,
        /*[in]*/ VARIANT PlotBy = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FilterName,
        /*[in]*/ VARIANT Interactive,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_PivotLayout (
        /*[out,retval]*/ struct PivotLayout * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasPivotFields (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasPivotFields (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
_Workbook : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowConflictHistory,put=PutShowConflictHistory))
    VARIANT_BOOL ShowConflictHistory[];
    __declspec(property(get=GetRevisionNumber))
    long RevisionNumber[];
    __declspec(property(get=GetHasPassword))
    VARIANT_BOOL HasPassword[];
    __declspec(property(get=GetConflictResolution,put=PutConflictResolution))
    enum XlSaveConflictResolution ConflictResolution;
    __declspec(property(get=GetBuiltinDocumentProperties))
    IDispatchPtr BuiltinDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetOnSave,put=PutOnSave))
    _bstr_t OnSave[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetProtectWindows))
    VARIANT_BOOL ProtectWindows;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly[];
    __declspec(property(get=GetReadOnlyRecommended))
    VARIANT_BOOL ReadOnlyRecommended[];
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetUserStatus))
    _variant_t UserStatus[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetWriteReserved))
    VARIANT_BOOL WriteReserved[];
    __declspec(property(get=GetWriteReservedBy))
    _bstr_t WriteReservedBy[];
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    VARIANT_BOOL EnvelopeVisible;
    __declspec(property(get=GetStyles))
    StylesPtr Styles;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title[];
    __declspec(property(get=GetVBASigned))
    VARIANT_BOOL VBASigned;
    __declspec(property(get=GetRoutingSlip))
    RoutingSlipPtr RoutingSlip;
    __declspec(property(get=GetHasRoutingSlip,put=PutHasRoutingSlip))
    VARIANT_BOOL HasRoutingSlip[];
    __declspec(property(get=GetRouted))
    VARIANT_BOOL Routed[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject[];
    __declspec(property(get=GetHasMailer,put=PutHasMailer))
    VARIANT_BOOL HasMailer[];
    __declspec(property(get=GetMailer))
    MailerPtr Mailer;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetDate1904,put=PutDate1904))
    VARIANT_BOOL Date1904[];
    __declspec(property(get=GetAcceptLabelsInFormulas,put=PutAcceptLabelsInFormulas))
    VARIANT_BOOL AcceptLabelsInFormulas;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoUpdateFrequency,put=PutAutoUpdateFrequency))
    long AutoUpdateFrequency;
    __declspec(property(get=GetAutoUpdateSaveChanges,put=PutAutoUpdateSaveChanges))
    VARIANT_BOOL AutoUpdateSaveChanges;
    __declspec(property(get=GetChangeHistoryDuration,put=PutChangeHistoryDuration))
    long ChangeHistoryDuration;
    __declspec(property(get=GetIsAddin,put=PutIsAddin))
    VARIANT_BOOL IsAddin;
    __declspec(property(get=GetPersonalViewListSettings,put=PutPersonalViewListSettings))
    VARIANT_BOOL PersonalViewListSettings;
    __declspec(property(get=GetPersonalViewPrintSettings,put=PutPersonalViewPrintSettings))
    VARIANT_BOOL PersonalViewPrintSettings;
    __declspec(property(get=GetDisplayDrawingObjects,put=PutDisplayDrawingObjects))
    enum xlDisplayDrawingObjects DisplayDrawingObjects[];
    __declspec(property(get=GetPrecisionAsDisplayed,put=PutPrecisionAsDisplayed))
    VARIANT_BOOL PrecisionAsDisplayed[];
    __declspec(property(get=GetSaveLinkValues,put=PutSaveLinkValues))
    VARIANT_BOOL SaveLinkValues[];
    __declspec(property(get=GetUpdateRemoteReferences,put=PutUpdateRemoteReferences))
    VARIANT_BOOL UpdateRemoteReferences[];
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetCustomViews))
    CustomViewsPtr CustomViews;
    __declspec(property(get=GetTemplateRemoveExtData,put=PutTemplateRemoveExtData))
    VARIANT_BOOL TemplateRemoveExtData;
    __declspec(property(get=GetHighlightChangesOnScreen,put=PutHighlightChangesOnScreen))
    VARIANT_BOOL HighlightChangesOnScreen;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author[];
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments[];
    __declspec(property(get=GetKeepChangeHistory,put=PutKeepChangeHistory))
    VARIANT_BOOL KeepChangeHistory;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords[];
    __declspec(property(get=GetListChangesOnNewSheet,put=PutListChangesOnNewSheet))
    VARIANT_BOOL ListChangesOnNewSheet;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetMultiUserEditing))
    VARIANT_BOOL MultiUserEditing[];
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    SheetsPtr Modules;
    __declspec(property(get=GetVBProject))
    VBE6::_VBProjectPtr VBProject;
    __declspec(property(get=GetColors,put=PutColors))
    _variant_t Colors[][];
    __declspec(property(get=GetIsInplace))
    VARIANT_BOOL IsInplace;
    __declspec(property(get=GetCreateBackup))
    VARIANT_BOOL CreateBackup[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetProtectStructure))
    VARIANT_BOOL ProtectStructure;
    __declspec(property(get=GetFileFormat))
    enum XlFileFormat FileFormat[];
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetFullName))
    _bstr_t FullName[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAcceptLabelsInFormulas ( );
    void PutAcceptLabelsInFormulas (
        VARIANT_BOOL RHS );
    HRESULT Activate (
        long lcid = 0 );
    _ChartPtr GetActiveChart ( );
    IDispatchPtr GetActiveSheet ( );
    _bstr_t GetAuthor (
        long lcid = 0 );
    void PutAuthor (
        long lcid,
        _bstr_t RHS );
    long GetAutoUpdateFrequency ( );
    void PutAutoUpdateFrequency (
        long RHS );
    VARIANT_BOOL GetAutoUpdateSaveChanges ( );
    void PutAutoUpdateSaveChanges (
        VARIANT_BOOL RHS );
    long GetChangeHistoryDuration ( );
    void PutChangeHistoryDuration (
        long RHS );
    IDispatchPtr GetBuiltinDocumentProperties ( );
    HRESULT ChangeFileAccess (
        enum XlFileAccess Mode,
        const _variant_t & WritePassword = vtMissing,
        const _variant_t & Notify = vtMissing,
        long lcid = 0 );
    HRESULT ChangeLink (
        _bstr_t Name,
        _bstr_t NewName,
        enum XlLinkType Type,
        long lcid = 0 );
    SheetsPtr GetCharts ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    _variant_t GetColors (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    void PutColors (
        const _variant_t & Index,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetComments (
        long lcid = 0 );
    void PutComments (
        long lcid,
        _bstr_t RHS );
    enum XlSaveConflictResolution GetConflictResolution ( );
    void PutConflictResolution (
        enum XlSaveConflictResolution RHS );
    IDispatchPtr GetContainer ( );
    VARIANT_BOOL GetCreateBackup (
        long lcid = 0 );
    IDispatchPtr GetCustomDocumentProperties ( );
    VARIANT_BOOL GetDate1904 (
        long lcid = 0 );
    void PutDate1904 (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DeleteNumberFormat (
        _bstr_t NumberFormat,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    enum xlDisplayDrawingObjects GetDisplayDrawingObjects (
        long lcid = 0 );
    void PutDisplayDrawingObjects (
        long lcid,
        enum xlDisplayDrawingObjects RHS );
    VARIANT_BOOL ExclusiveAccess (
        long lcid = 0 );
    enum XlFileFormat GetFileFormat (
        long lcid = 0 );
    HRESULT ForwardMailer (
        long lcid = 0 );
    _bstr_t GetFullName (
        long lcid = 0 );
    VARIANT_BOOL GetHasMailer (
        long lcid = 0 );
    void PutHasMailer (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasPassword (
        long lcid = 0 );
    VARIANT_BOOL GetHasRoutingSlip (
        long lcid = 0 );
    void PutHasRoutingSlip (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsAddin ( );
    void PutIsAddin (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords (
        long lcid = 0 );
    void PutKeywords (
        long lcid,
        _bstr_t RHS );
    _variant_t LinkInfo (
        _bstr_t Name,
        enum XlLinkInfo LinkInfo,
        const _variant_t & Type = vtMissing,
        const _variant_t & EditionRef = vtMissing,
        long lcid = 0 );
    _variant_t LinkSources (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    MailerPtr GetMailer ( );
    HRESULT MergeWorkbook (
        const _variant_t & Filename );
    SheetsPtr GetModules ( );
    VARIANT_BOOL GetMultiUserEditing (
        long lcid = 0 );
    _bstr_t GetName ( );
    NamesPtr GetNames ( );
    WindowPtr NewWindow (
        long lcid = 0 );
    _bstr_t GetOnSave (
        long lcid = 0 );
    void PutOnSave (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OpenLinks (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    VARIANT_BOOL GetPersonalViewListSettings ( );
    void PutPersonalViewListSettings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPersonalViewPrintSettings ( );
    void PutPersonalViewPrintSettings (
        VARIANT_BOOL RHS );
    PivotCachesPtr PivotCaches ( );
    HRESULT Post (
        const _variant_t & DestName = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPrecisionAsDisplayed (
        long lcid = 0 );
    void PutPrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    HRESULT ProtectSharing (
        const _variant_t & Filename = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & SharingPassword = vtMissing );
    VARIANT_BOOL GetProtectStructure ( );
    VARIANT_BOOL GetProtectWindows ( );
    VARIANT_BOOL GetReadOnly (
        long lcid = 0 );
    VARIANT_BOOL GetReadOnlyRecommended (
        long lcid = 0 );
    HRESULT RefreshAll ( );
    HRESULT Reply (
        long lcid = 0 );
    HRESULT ReplyAll (
        long lcid = 0 );
    HRESULT RemoveUser (
        long Index );
    long GetRevisionNumber (
        long lcid = 0 );
    HRESULT Route (
        long lcid = 0 );
    VARIANT_BOOL GetRouted (
        long lcid = 0 );
    RoutingSlipPtr GetRoutingSlip ( );
    HRESULT RunAutoMacros (
        enum XlRunAutoMacro Which,
        long lcid = 0 );
    HRESULT Save (
        long lcid = 0 );
    HRESULT SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT SaveCopyAs (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSaved (
        long lcid = 0 );
    void PutSaved (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveLinkValues (
        long lcid = 0 );
    void PutSaveLinkValues (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SendMail (
        const _variant_t & Recipients,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing,
        long lcid = 0 );
    HRESULT SendMailer (
        const _variant_t & FileFormat,
        enum XlPriority Priority,
        long lcid = 0 );
    HRESULT SetLinkOnData (
        _bstr_t Name,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    VARIANT_BOOL GetShowConflictHistory (
        long lcid = 0 );
    void PutShowConflictHistory (
        long lcid,
        VARIANT_BOOL RHS );
    StylesPtr GetStyles ( );
    _bstr_t GetSubject (
        long lcid = 0 );
    void PutSubject (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetTitle (
        long lcid = 0 );
    void PutTitle (
        long lcid,
        _bstr_t RHS );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    HRESULT UnprotectSharing (
        const _variant_t & SharingPassword = vtMissing );
    HRESULT UpdateFromFile (
        long lcid = 0 );
    HRESULT UpdateLink (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetUpdateRemoteReferences (
        long lcid = 0 );
    void PutUpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _variant_t GetUserStatus (
        long lcid = 0 );
    CustomViewsPtr GetCustomViews ( );
    WindowsPtr GetWindows ( );
    SheetsPtr GetWorksheets ( );
    VARIANT_BOOL GetWriteReserved (
        long lcid = 0 );
    _bstr_t GetWriteReservedBy (
        long lcid = 0 );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    VARIANT_BOOL GetTemplateRemoveExtData ( );
    void PutTemplateRemoveExtData (
        VARIANT_BOOL RHS );
    HRESULT HighlightChangesOptions (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    VARIANT_BOOL GetHighlightChangesOnScreen ( );
    void PutHighlightChangesOnScreen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKeepChangeHistory ( );
    void PutKeepChangeHistory (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListChangesOnNewSheet ( );
    void PutListChangesOnNewSheet (
        VARIANT_BOOL RHS );
    HRESULT PurgeChangeHistoryNow (
        long Days,
        const _variant_t & SharingPassword = vtMissing );
    HRESULT AcceptAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT RejectAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    HRESULT ResetColors ( );
    VBE6::_VBProjectPtr GetVBProject ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    HRESULT AddToFavorites ( );
    VARIANT_BOOL GetIsInplace ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT WebPagePreview ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding Encoding );
    Office::HTMLProjectPtr GetHTMLProject ( );
    VARIANT_BOOL GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        VARIANT_BOOL RHS );
    long GetCalculationVersion ( );
    HRESULT Dummy1 (
        long unused );
    HRESULT sblt (
        _bstr_t s );
    VARIANT_BOOL GetVBASigned ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AcceptLabelsInFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AcceptLabelsInFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateFrequency (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateFrequency (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateSaveChanges (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateSaveChanges (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChangeHistoryDuration (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ChangeHistoryDuration (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltinDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeFileAccess (
        /*[in]*/ enum XlFileAccess Mode,
        /*[in]*/ VARIANT WritePassword = vtMissing,
        /*[in]*/ VARIANT Notify = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ChangeLink (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR NewName,
        /*[in]*/ enum XlLinkType Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ConflictResolution (
        /*[out,retval]*/ enum XlSaveConflictResolution * RHS ) = 0;
      virtual HRESULT __stdcall put_ConflictResolution (
        /*[in]*/ enum XlSaveConflictResolution RHS ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CreateBackup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteNumberFormat (
        /*[in]*/ BSTR NumberFormat,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum xlDisplayDrawingObjects * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum xlDisplayDrawingObjects RHS ) = 0;
      virtual HRESULT __stdcall raw_ExclusiveAccess (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFormat (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall raw_ForwardMailer (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasPassword (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IsAddin (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IsAddin (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkInfo (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlLinkInfo LinkInfo,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT EditionRef,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkSources (
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Mailer (
        /*[out,retval]*/ struct Mailer * * RHS ) = 0;
      virtual HRESULT __stdcall raw_MergeWorkbook (
        /*[in]*/ VARIANT Filename ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiUserEditing (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenLinks (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ReadOnly = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewListSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewListSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewPrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewPrintSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCaches (
        /*[out,retval]*/ struct PivotCaches * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Post (
        /*[in]*/ VARIANT DestName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT Structure = vtMissing,
        /*[in]*/ VARIANT Windows = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ProtectSharing (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ProtectStructure (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectWindows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnlyRecommended (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshAll ( ) = 0;
      virtual HRESULT __stdcall raw_Reply (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ReplyAll (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_RevisionNumber (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Route (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Routed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RoutingSlip (
        /*[out,retval]*/ struct RoutingSlip * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RunAutoMacros (
        /*[in]*/ enum XlRunAutoMacro Which,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT ReadOnlyRecommended,
        /*[in]*/ VARIANT CreateBackup,
        /*[in]*/ enum XlSaveAsAccessMode AccessMode,
        /*[in]*/ VARIANT ConflictResolution = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SendMail (
        /*[in]*/ VARIANT Recipients,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ReturnReceipt = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SendMailer (
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ enum XlPriority Priority,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SetLinkOnData (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Styles (
        /*[out,retval]*/ struct Styles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UnprotectSharing (
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UpdateFromFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UpdateLink (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserStatus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomViews (
        /*[out,retval]*/ struct CustomViews * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReserved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReservedBy (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_TemplateRemoveExtData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TemplateRemoveExtData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_HighlightChangesOptions (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HighlightChangesOnScreen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HighlightChangesOnScreen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KeepChangeHistory (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KeepChangeHistory (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ListChangesOnNewSheet (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ListChangesOnNewSheet (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PurgeChangeHistoryNow (
        /*[in]*/ long Days,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AcceptAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RejectAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetColors ( ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct VBE6::_VBProject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress = vtMissing,
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_IsInplace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * RHS ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ struct Office::HTMLProject * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy1 (
        /*[in]*/ long unused ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
ICharts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
IChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectChartObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectChartObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020820-0000-0000-c000-000000000046"))
Worksheet;
    // [ default ] interface _Worksheet
    // [ default, source ] dispinterface DocEvents

struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
IRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2[];
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][][];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula[];
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1[];
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & RHS );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t DialogBoxEx ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula (
        long lcid = 0 );
    void PutFormula (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & RHS );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1 (
        long lcid = 0 );
    void PutFormulaR1C1 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & RHS );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & RHS );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & RHS );
    long GetPageBreak ( );
    void PutPageBreak (
        long RHS );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & RHS );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & RHS );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & RHS );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & RHS );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & RHS );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        long lcid = 0 );
    void PutValue (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetValue2 (
        long lcid = 0 );
    void PutValue2 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t RHS );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AddressLocal (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AdvancedFilter (
        /*[in]*/ enum XlFilterAction Action,
        /*[in]*/ VARIANT CriteriaRange,
        /*[in]*/ VARIANT CopyToRange,
        /*[in]*/ VARIANT Unique,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyNames (
        /*[in]*/ VARIANT Names,
        /*[in]*/ VARIANT IgnoreRelativeAbsolute,
        /*[in]*/ VARIANT UseRowColumnNames,
        /*[in]*/ VARIANT OmitColumn,
        /*[in]*/ VARIANT OmitRow,
        /*[in]*/ enum XlApplyNamesOrder Order,
        /*[in]*/ VARIANT AppendLast,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyOutlineStyles (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Areas (
        /*[out,retval]*/ struct Areas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoComplete (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFill (
        /*[in]*/ struct Range * Destination,
        /*[in]*/ enum XlAutoFillType Type,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFilter (
        /*[in]*/ VARIANT Field,
        /*[in]*/ VARIANT Criteria1,
        /*[in]*/ enum XlAutoFilterOperator Operator,
        /*[in]*/ VARIANT Criteria2,
        /*[in]*/ VARIANT VisibleDropDown,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ enum XlRangeAutoFormat Format,
        /*[in]*/ VARIANT Number,
        /*[in]*/ VARIANT Font,
        /*[in]*/ VARIANT Alignment,
        /*[in]*/ VARIANT Border,
        /*[in]*/ VARIANT Pattern,
        /*[in]*/ VARIANT Width,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_BorderAround (
        /*[in]*/ VARIANT LineStyle,
        /*[in]*/ enum XlBorderWeight Weight,
        /*[in]*/ enum XlColorIndex ColorIndex,
        /*[in]*/ VARIANT Color,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearNotes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Consolidate (
        /*[in]*/ VARIANT Sources,
        /*[in]*/ VARIANT Function,
        /*[in]*/ VARIANT TopRow,
        /*[in]*/ VARIANT LeftColumn,
        /*[in]*/ VARIANT CreateLinks,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRecordset (
        /*[in]*/ IUnknown * Data,
        /*[in]*/ VARIANT MaxRows,
        /*[in]*/ VARIANT MaxColumns,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNames (
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Bottom,
        /*[in]*/ VARIANT Right,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ VARIANT ContainsPICT,
        /*[in]*/ VARIANT ContainsBIFF,
        /*[in]*/ VARIANT ContainsRTF,
        /*[in]*/ VARIANT ContainsVALU,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentArray (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentRegion (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataSeries (
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ enum XlDataSeriesType Type,
        /*[in]*/ enum XlDataSeriesDate Date,
        /*[in]*/ VARIANT Step,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Trend,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Shift,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Dependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DialogBoxEx (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectDependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectPrecedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditionOptions (
        /*[in]*/ enum XlEditionType Type,
        /*[in]*/ enum XlEditionOptionsOption Option,
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Reference,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance ChartSize,
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[in]*/ enum XlDirection Direction,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireColumn (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireRow (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillDown (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillLeft (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillRight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillUp (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT LookIn,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ enum XlSearchDirection SearchDirection,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindNext (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindPrevious (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaArray (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLabel (
        /*[out,retval]*/ enum XlFormulaLabel * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLabel (
        /*[in]*/ enum XlFormulaLabel RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_FunctionWizard (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GoalSeek (
        /*[in]*/ VARIANT Goal,
        /*[in]*/ struct Range * ChangingCell,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT End,
        /*[in]*/ VARIANT By,
        /*[in]*/ VARIANT Periods,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasFormula (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertIndent (
        /*[in]*/ long InsertAmount ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Shift,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Justify (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListHeaderRows (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LocationInTable (
        /*[out,retval]*/ enum XlLocationInTable * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Across = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UnMerge ( ) = 0;
      virtual HRESULT __stdcall get_MergeArea (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_NavigateArrow (
        /*[in]*/ VARIANT TowardPrecedent,
        /*[in]*/ VARIANT ArrowNumber,
        /*[in]*/ VARIANT LinkNumber,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NoteText (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[in]*/ VARIANT RowOffset,
        /*[in]*/ VARIANT ColumnOffset,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_OutlineLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_OutlineLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PageBreak (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageBreak (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Parse (
        /*[in]*/ VARIANT ParseLine,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum XlPasteType Paste,
        /*[in]*/ enum XlPasteSpecialOperation Operation,
        /*[in]*/ VARIANT SkipBlanks,
        /*[in]*/ VARIANT Transpose,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Precedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PrefixCharacter (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTable (
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubtotal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT Replacement,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Resize (
        /*[in]*/ VARIANT RowSize,
        /*[in]*/ VARIANT ColumnSize,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RowDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowDependents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowErrors (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPrecedents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Sort (
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SortSpecial (
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SoundNote (
        /*[out,retval]*/ struct SoundNote * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SpecialCells (
        /*[in]*/ enum XlCellType Type,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_SubscribeTo (
        /*[in]*/ BSTR Edition,
        /*[in]*/ enum XlSubscribeToFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ long GroupBy,
        /*[in]*/ enum XlConsolidationFunction Function,
        /*[in]*/ VARIANT TotalList,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT PageBreaks,
        /*[in]*/ enum XlSummaryRow SummaryBelowData,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Summary (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Table (
        /*[in]*/ VARIANT RowInput,
        /*[in]*/ VARIANT ColumnInput,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextToColumns (
        /*[in]*/ VARIANT Destination,
        /*[in]*/ enum XlTextParsingType DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter,
        /*[in]*/ VARIANT Tab,
        /*[in]*/ VARIANT Semicolon,
        /*[in]*/ VARIANT Comma,
        /*[in]*/ VARIANT Space,
        /*[in]*/ VARIANT Other,
        /*[in]*/ VARIANT OtherChar,
        /*[in]*/ VARIANT FieldInfo,
        /*[in]*/ VARIANT DecimalSeparator,
        /*[in]*/ VARIANT ThousandsSeparator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Validation (
        /*[out,retval]*/ struct Validation * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheet (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearComments ( ) = 0;
      virtual HRESULT __stdcall get_Phonetic (
        /*[out,retval]*/ struct Phonetic * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormatConditions (
        /*[out,retval]*/ struct FormatConditions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Phonetics (
        /*[out,retval]*/ struct Phonetics * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetPhonetic ( ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ID (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
IVPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
IHPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00020812-0000-0000-c000-000000000046"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("00020819-0000-0000-c000-000000000046"))
Workbook;
    // [ default ] interface _Workbook
    // [ default, source ] dispinterface WorkbookEvents

struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
IAppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NewWorkbook (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookOpen (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookActivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookDeactivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeClose (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeSave (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforePrint (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookNewSheet (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinInstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinUninstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
};

struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
IRecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
Workbooks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _WorkbookPtr _Default[];
    __declspec(property(get=GetItem))
    _WorkbookPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _WorkbookPtr Add (
        const _variant_t & Template = vtMissing,
        long lcid = 0 );
    HRESULT Close (
        long lcid = 0 );
    long GetCount ( );
    _WorkbookPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _WorkbookPtr Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        long lcid = 0 );
    HRESULT _OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Get_Default (
        const _variant_t & Index );
    HRESULT OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Template,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT UpdateLinks,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Format,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT IgnoreReadOnlyRecommended,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT Delimiter,
        /*[in]*/ VARIANT Editable,
        /*[in]*/ VARIANT Notify,
        /*[in]*/ VARIANT Converter,
        /*[in]*/ VARIANT AddToMru,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw__OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT DecimalSeparator = vtMissing,
        /*[in]*/ VARIANT ThousandsSeparator = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetEnableTipWizard,put=PutEnableTipWizard))
    VARIANT_BOOL EnableTipWizard[];
    __declspec(property(get=GetUILanguage,put=PutUILanguage))
    long UILanguage[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetEnableCancelKey,put=PutEnableCancelKey))
    enum XlEnableCancelKey EnableCancelKey[];
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetTransitionMenuKey,put=PutTransitionMenuKey))
    _bstr_t TransitionMenuKey[];
    __declspec(property(get=GetTransitionMenuKeyAction,put=PutTransitionMenuKeyAction))
    long TransitionMenuKeyAction[];
    __declspec(property(get=GetTransitionNavigKeys,put=PutTransitionNavigKeys))
    VARIANT_BOOL TransitionNavigKeys[];
    __declspec(property(get=GetAltStartupPath,put=PutAltStartupPath))
    _bstr_t AltStartupPath[];
    __declspec(property(get=GetBuild))
    long Build[];
    __declspec(property(get=GetCalculateBeforeSave,put=PutCalculateBeforeSave))
    VARIANT_BOOL CalculateBeforeSave[];
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlCalculation Calculation[];
    __declspec(property(get=GetCaller))
    _variant_t Caller[][];
    __declspec(property(get=GetCanPlaySounds))
    VARIANT_BOOL CanPlaySounds[];
    __declspec(property(get=GetCanRecordSounds))
    VARIANT_BOOL CanRecordSounds[];
    __declspec(property(get=GetCellDragAndDrop,put=PutCellDragAndDrop))
    VARIANT_BOOL CellDragAndDrop[];
    __declspec(property(get=GetClipboardFormats))
    _variant_t ClipboardFormats[][];
    __declspec(property(get=GetDisplayClipboardWindow,put=PutDisplayClipboardWindow))
    VARIANT_BOOL DisplayClipboardWindow[];
    __declspec(property(get=GetCommandUnderlines,put=PutCommandUnderlines))
    enum XlCommandUnderlines CommandUnderlines[];
    __declspec(property(get=GetConstrainNumeric,put=PutConstrainNumeric))
    VARIANT_BOOL ConstrainNumeric[];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetCutCopyMode,put=PutCutCopyMode))
    enum XlCutCopyMode CutCopyMode[];
    __declspec(property(get=GetDataEntryMode,put=PutDataEntryMode))
    long DataEntryMode[];
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts[];
    __declspec(property(get=GetDisplayFormulaBar,put=PutDisplayFormulaBar))
    VARIANT_BOOL DisplayFormulaBar[];
    __declspec(property(get=GetDisplayNoteIndicator,put=PutDisplayNoteIndicator))
    VARIANT_BOOL DisplayNoteIndicator;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars[];
    __declspec(property(get=GetDisplayStatusBar,put=PutDisplayStatusBar))
    VARIANT_BOOL DisplayStatusBar[];
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetMoveAfterReturnDirection,put=PutMoveAfterReturnDirection))
    enum XlDirection MoveAfterReturnDirection[];
    __declspec(property(get=GetFixedDecimal,put=PutFixedDecimal))
    VARIANT_BOOL FixedDecimal[];
    __declspec(property(get=GetFixedDecimalPlaces,put=PutFixedDecimalPlaces))
    long FixedDecimalPlaces[];
    __declspec(property(get=GetIgnoreRemoteRequests,put=PutIgnoreRemoteRequests))
    VARIANT_BOOL IgnoreRemoteRequests[];
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive[];
    __declspec(property(get=GetInternational))
    _variant_t International[][];
    __declspec(property(get=GetIteration,put=PutIteration))
    VARIANT_BOOL Iteration[];
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetColorButtons,put=PutColorButtons))
    VARIANT_BOOL ColorButtons;
    __declspec(property(get=GetLibraryPath))
    _bstr_t LibraryPath[];
    __declspec(property(get=GetMathCoprocessorAvailable))
    VARIANT_BOOL MathCoprocessorAvailable[];
    __declspec(property(get=GetMaxChange,put=PutMaxChange))
    double MaxChange[];
    __declspec(property(get=GetMaxIterations,put=PutMaxIterations))
    long MaxIterations[];
    __declspec(property(get=GetMemoryFree))
    long MemoryFree[];
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetPathSeparator))
    _bstr_t PathSeparator[];
    __declspec(property(get=GetPreviousSelections))
    _variant_t PreviousSelections[][];
    __declspec(property(get=GetRecordRelative))
    VARIANT_BOOL RecordRelative[];
    __declspec(property(get=GetReferenceStyle,put=PutReferenceStyle))
    enum XlReferenceStyle ReferenceStyle[];
    __declspec(property(get=GetTemplatesPath))
    _bstr_t TemplatesPath[];
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating[];
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetMemoryTotal))
    long MemoryTotal[];
    __declspec(property(get=GetStartupPath))
    _bstr_t StartupPath[];
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _variant_t StatusBar[];
    __declspec(property(get=GetShowToolTips,put=PutShowToolTips))
    VARIANT_BOOL ShowToolTips;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height[];
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed[];
    __declspec(property(get=GetMouseAvailable))
    VARIANT_BOOL MouseAvailable[];
    __declspec(property(get=GetTop,put=PutTop))
    double Top[];
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left[];
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDisplayExcel4Menus,put=PutDisplayExcel4Menus))
    VARIANT_BOOL DisplayExcel4Menus[];
    __declspec(property(get=GetStandardFont,put=PutStandardFont))
    _bstr_t StandardFont[];
    __declspec(property(get=GetEditDirectlyInCell,put=PutEditDirectlyInCell))
    VARIANT_BOOL EditDirectlyInCell[];
    __declspec(property(get=GetDisplayCommentIndicator,put=PutDisplayCommentIndicator))
    enum XlCommentDisplayMode DisplayCommentIndicator;
    __declspec(property(get=GetEnableSound,put=PutEnableSound))
    VARIANT_BOOL EnableSound;
    __declspec(property(get=GetAlertBeforeOverwriting,put=PutAlertBeforeOverwriting))
    VARIANT_BOOL AlertBeforeOverwriting[];
    __declspec(property(get=GetFileConverters))
    _variant_t FileConverters[][][];
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetODBCErrors))
    ODBCErrorsPtr ODBCErrors;
    __declspec(property(get=GetODBCTimeout,put=PutODBCTimeout))
    long ODBCTimeout;
    __declspec(property(get=GetPivotTableSelection,put=PutPivotTableSelection))
    VARIANT_BOOL PivotTableSelection;
    __declspec(property(get=GetRollZoom,put=PutRollZoom))
    VARIANT_BOOL RollZoom;
    __declspec(property(get=GetShowChartTipNames,put=PutShowChartTipNames))
    VARIANT_BOOL ShowChartTipNames;
    __declspec(property(get=GetShowChartTipValues,put=PutShowChartTipValues))
    VARIANT_BOOL ShowChartTipValues;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetStandardFontSize,put=PutStandardFontSize))
    double StandardFontSize[];
    __declspec(property(get=GetMailSession))
    _variant_t MailSession[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetMoveAfterReturn,put=PutMoveAfterReturn))
    VARIANT_BOOL MoveAfterReturn[];
    __declspec(property(get=GetCursor,put=PutCursor))
    enum XlMousePointer Cursor[];
    __declspec(property(get=GetEnableAutoComplete,put=PutEnableAutoComplete))
    VARIANT_BOOL EnableAutoComplete;
    __declspec(property(get=GetEnableAnimations,put=PutEnableAnimations))
    VARIANT_BOOL EnableAnimations[];
    __declspec(property(get=GetNetworkTemplatesPath))
    _bstr_t NetworkTemplatesPath[];
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem[];
    __declspec(property(get=GetOrganizationName))
    _bstr_t OrganizationName[];
    __declspec(property(get=GetDefaultSaveFormat,put=PutDefaultSaveFormat))
    enum XlFileFormat DefaultSaveFormat;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight[];
    __declspec(property(get=GetUsableWidth))
    double UsableWidth[];
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetVBE))
    VBE6::VBEPtr VBE;
    __declspec(property(get=GetVersion))
    _bstr_t Version[];
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width[];
    __declspec(property(get=GetWindowsForPens))
    VARIANT_BOOL WindowsForPens[];
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState[];
    __declspec(property(get=GetEnableEvents,put=PutEnableEvents))
    VARIANT_BOOL EnableEvents;
    __declspec(property(get=GetDisplayInfoWindow,put=PutDisplayInfoWindow))
    VARIANT_BOOL DisplayInfoWindow;
    __declspec(property(get=GetMailSystem))
    enum XlMailSystem MailSystem[];
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetCopyObjectsWithCells,put=PutCopyObjectsWithCells))
    VARIANT_BOOL CopyObjectsWithCells[];
    __declspec(property(get=GetAskToUpdateLinks,put=PutAskToUpdateLinks))
    VARIANT_BOOL AskToUpdateLinks[];
    __declspec(property(get=GetSheetsInNewWorkbook,put=PutSheetsInNewWorkbook))
    long SheetsInNewWorkbook[];
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetExtendList,put=PutExtendList))
    VARIANT_BOOL ExtendList;
    __declspec(property(get=GetOLEDBErrors))
    OLEDBErrorsPtr OLEDBErrors;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetUserLibraryPath))
    _bstr_t UserLibraryPath;
    __declspec(property(get=GetAutoPercentEntry,put=PutAutoPercentEntry))
    VARIANT_BOOL AutoPercentEntry;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetDummy101))
    VARIANT_BOOL Dummy101;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetShowWindowsInTaskbar,put=PutShowWindowsInTaskbar))
    VARIANT_BOOL ShowWindowsInTaskbar;
    __declspec(property(get=GetFeatureInstall,put=PutFeatureInstall))
    enum Office::MsoFeatureInstall FeatureInstall;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetDefaultSheetDirection,put=PutDefaultSheetDirection))
    long DefaultSheetDirection[];
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetCursorMovement,put=PutCursorMovement))
    long CursorMovement[];
    __declspec(property(get=GetControlCharacters,put=PutControlCharacters))
    VARIANT_BOOL ControlCharacters[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath[];
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetRegisteredFunctions))
    _variant_t RegisteredFunctions[][][];
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetCustomListCount))
    long CustomListCount[];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen[];
    __declspec(property(get=GetPromptForSummaryInfo,put=PutPromptForSummaryInfo))
    VARIANT_BOOL PromptForSummaryInfo[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    HRESULT ActivateMicrosoftApp (
        enum XlMSApplication Index,
        long lcid = 0 );
    HRESULT AddChartAutoFormat (
        const _variant_t & Chart,
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        long lcid = 0 );
    HRESULT AddCustomList (
        const _variant_t & ListArray,
        const _variant_t & ByRow = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAlertBeforeOverwriting (
        long lcid = 0 );
    void PutAlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL RHS );
    _bstr_t GetAltStartupPath (
        long lcid = 0 );
    void PutAltStartupPath (
        long lcid,
        _bstr_t RHS );
    VARIANT_BOOL GetAskToUpdateLinks (
        long lcid = 0 );
    void PutAskToUpdateLinks (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAnimations (
        long lcid = 0 );
    void PutEnableAnimations (
        long lcid,
        VARIANT_BOOL RHS );
    AutoCorrectPtr GetAutoCorrect ( );
    long GetBuild (
        long lcid = 0 );
    VARIANT_BOOL GetCalculateBeforeSave (
        long lcid = 0 );
    void PutCalculateBeforeSave (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlCalculation GetCalculation (
        long lcid = 0 );
    void PutCalculation (
        long lcid,
        enum XlCalculation RHS );
    _variant_t GetCaller (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCanPlaySounds (
        long lcid = 0 );
    VARIANT_BOOL GetCanRecordSounds (
        long lcid = 0 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetCellDragAndDrop (
        long lcid = 0 );
    void PutCellDragAndDrop (
        long lcid,
        VARIANT_BOOL RHS );
    double CentimetersToPoints (
        double Centimeters,
        long lcid = 0 );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        long lcid = 0 );
    _variant_t GetClipboardFormats (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayClipboardWindow (
        long lcid = 0 );
    void PutDisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetColorButtons ( );
    void PutColorButtons (
        VARIANT_BOOL RHS );
    enum XlCommandUnderlines GetCommandUnderlines (
        long lcid = 0 );
    void PutCommandUnderlines (
        long lcid,
        enum XlCommandUnderlines RHS );
    VARIANT_BOOL GetConstrainNumeric (
        long lcid = 0 );
    void PutConstrainNumeric (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t ConvertFormula (
        const _variant_t & Formula,
        enum XlReferenceStyle FromReferenceStyle,
        const _variant_t & ToReferenceStyle = vtMissing,
        const _variant_t & ToAbsolute = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCopyObjectsWithCells (
        long lcid = 0 );
    void PutCopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlMousePointer GetCursor (
        long lcid = 0 );
    void PutCursor (
        long lcid,
        enum XlMousePointer RHS );
    long GetCustomListCount (
        long lcid = 0 );
    enum XlCutCopyMode GetCutCopyMode (
        long lcid = 0 );
    void PutCutCopyMode (
        long lcid,
        enum XlCutCopyMode RHS );
    long GetDataEntryMode (
        long lcid = 0 );
    void PutDataEntryMode (
        long lcid,
        long RHS );
    HRESULT Dummy1 ( );
    HRESULT Dummy2 ( );
    HRESULT Dummy3 ( );
    HRESULT Dummy4 ( );
    HRESULT Dummy5 ( );
    HRESULT Dummy6 ( );
    HRESULT Dummy7 ( );
    HRESULT Dummy8 ( );
    HRESULT Dummy9 ( );
    HRESULT Dummy10 ( );
    HRESULT Dummy11 ( );
    _bstr_t Get_Default ( );
    _bstr_t GetDefaultFilePath (
        long lcid = 0 );
    void PutDefaultFilePath (
        long lcid,
        _bstr_t RHS );
    HRESULT DeleteChartAutoFormat (
        _bstr_t Name,
        long lcid = 0 );
    HRESULT DeleteCustomList (
        long ListNum,
        long lcid = 0 );
    DialogsPtr GetDialogs ( );
    VARIANT_BOOL GetDisplayAlerts (
        long lcid = 0 );
    void PutDisplayAlerts (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFormulaBar (
        long lcid = 0 );
    void PutDisplayFormulaBar (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFullScreen (
        long lcid = 0 );
    void PutDisplayFullScreen (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNoteIndicator ( );
    void PutDisplayNoteIndicator (
        VARIANT_BOOL RHS );
    enum XlCommentDisplayMode GetDisplayCommentIndicator ( );
    void PutDisplayCommentIndicator (
        enum XlCommentDisplayMode RHS );
    VARIANT_BOOL GetDisplayExcel4Menus (
        long lcid = 0 );
    void PutDisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayScrollBars (
        long lcid = 0 );
    void PutDisplayScrollBars (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayStatusBar (
        long lcid = 0 );
    void PutDisplayStatusBar (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DoubleClick (
        long lcid = 0 );
    VARIANT_BOOL GetEditDirectlyInCell (
        long lcid = 0 );
    void PutEditDirectlyInCell (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAutoComplete ( );
    void PutEnableAutoComplete (
        VARIANT_BOOL RHS );
    enum XlEnableCancelKey GetEnableCancelKey (
        long lcid = 0 );
    void PutEnableCancelKey (
        long lcid,
        enum XlEnableCancelKey RHS );
    VARIANT_BOOL GetEnableSound ( );
    void PutEnableSound (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableTipWizard (
        long lcid = 0 );
    void PutEnableTipWizard (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetFileConverters (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    HRESULT _FindFile (
        long lcid = 0 );
    VARIANT_BOOL GetFixedDecimal (
        long lcid = 0 );
    void PutFixedDecimal (
        long lcid,
        VARIANT_BOOL RHS );
    long GetFixedDecimalPlaces (
        long lcid = 0 );
    void PutFixedDecimalPlaces (
        long lcid,
        long RHS );
    _variant_t GetCustomListContents (
        long ListNum,
        long lcid = 0 );
    long GetCustomListNum (
        const _variant_t & ListArray,
        long lcid = 0 );
    _variant_t GetOpenFilename (
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        const _variant_t & MultiSelect = vtMissing,
        long lcid = 0 );
    _variant_t GetSaveAsFilename (
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        long lcid = 0 );
    HRESULT Goto (
        const _variant_t & Reference = vtMissing,
        const _variant_t & Scroll = vtMissing,
        long lcid = 0 );
    double GetHeight (
        long lcid = 0 );
    void PutHeight (
        long lcid,
        double RHS );
    HRESULT Help (
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIgnoreRemoteRequests (
        long lcid = 0 );
    void PutIgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL RHS );
    double InchesToPoints (
        double Inches,
        long lcid = 0 );
    _variant_t InputBox (
        _bstr_t Prompt,
        const _variant_t & Title = vtMissing,
        const _variant_t & Default = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetInteractive (
        long lcid = 0 );
    void PutInteractive (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetInternational (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIteration (
        long lcid = 0 );
    void PutIteration (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL RHS );
    double GetLeft (
        long lcid = 0 );
    void PutLeft (
        long lcid,
        double RHS );
    _bstr_t GetLibraryPath (
        long lcid = 0 );
    HRESULT MacroOptions (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Description = vtMissing,
        const _variant_t & HasMenu = vtMissing,
        const _variant_t & MenuText = vtMissing,
        const _variant_t & HasShortcutKey = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        long lcid = 0 );
    HRESULT MailLogoff (
        long lcid = 0 );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing,
        long lcid = 0 );
    _variant_t GetMailSession (
        long lcid = 0 );
    enum XlMailSystem GetMailSystem (
        long lcid = 0 );
    VARIANT_BOOL GetMathCoprocessorAvailable (
        long lcid = 0 );
    double GetMaxChange (
        long lcid = 0 );
    void PutMaxChange (
        long lcid,
        double RHS );
    long GetMaxIterations (
        long lcid = 0 );
    void PutMaxIterations (
        long lcid,
        long RHS );
    long GetMemoryFree (
        long lcid = 0 );
    long GetMemoryTotal (
        long lcid = 0 );
    long GetMemoryUsed (
        long lcid = 0 );
    VARIANT_BOOL GetMouseAvailable (
        long lcid = 0 );
    VARIANT_BOOL GetMoveAfterReturn (
        long lcid = 0 );
    void PutMoveAfterReturn (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlDirection GetMoveAfterReturnDirection (
        long lcid = 0 );
    void PutMoveAfterReturnDirection (
        long lcid,
        enum XlDirection RHS );
    RecentFilesPtr GetRecentFiles ( );
    _bstr_t GetName ( );
    _WorkbookPtr NextLetter (
        long lcid = 0 );
    _bstr_t GetNetworkTemplatesPath (
        long lcid = 0 );
    ODBCErrorsPtr GetODBCErrors ( );
    long GetODBCTimeout ( );
    void PutODBCTimeout (
        long RHS );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    HRESULT OnKey (
        _bstr_t Key,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    HRESULT OnRepeat (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OnTime (
        const _variant_t & EarliestTime,
        _bstr_t Procedure,
        const _variant_t & LatestTime = vtMissing,
        const _variant_t & Schedule = vtMissing,
        long lcid = 0 );
    HRESULT OnUndo (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnWindow (
        long lcid = 0 );
    void PutOnWindow (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOperatingSystem (
        long lcid = 0 );
    _bstr_t GetOrganizationName (
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    _bstr_t GetPathSeparator (
        long lcid = 0 );
    _variant_t GetPreviousSelections (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPivotTableSelection ( );
    void PutPivotTableSelection (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPromptForSummaryInfo (
        long lcid = 0 );
    void PutPromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Quit ( );
    HRESULT RecordMacro (
        const _variant_t & BasicCode = vtMissing,
        const _variant_t & XlmCode = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetRecordRelative (
        long lcid = 0 );
    enum XlReferenceStyle GetReferenceStyle (
        long lcid = 0 );
    void PutReferenceStyle (
        long lcid,
        enum XlReferenceStyle RHS );
    _variant_t GetRegisteredFunctions (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL RegisterXLL (
        _bstr_t Filename,
        long lcid = 0 );
    HRESULT Repeat (
        long lcid = 0 );
    HRESULT ResetTipWizard (
        long lcid = 0 );
    VARIANT_BOOL GetRollZoom ( );
    void PutRollZoom (
        VARIANT_BOOL RHS );
    HRESULT Save (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    HRESULT SaveWorkspace (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetScreenUpdating (
        long lcid = 0 );
    void PutScreenUpdating (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetDefaultChart (
        const _variant_t & FormatName = vtMissing,
        const _variant_t & Gallery = vtMissing );
    long GetSheetsInNewWorkbook (
        long lcid = 0 );
    void PutSheetsInNewWorkbook (
        long lcid,
        long RHS );
    VARIANT_BOOL GetShowChartTipNames ( );
    void PutShowChartTipNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowChartTipValues ( );
    void PutShowChartTipValues (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFont (
        long lcid = 0 );
    void PutStandardFont (
        long lcid,
        _bstr_t RHS );
    double GetStandardFontSize (
        long lcid = 0 );
    void PutStandardFontSize (
        long lcid,
        double RHS );
    _bstr_t GetStartupPath (
        long lcid = 0 );
    _variant_t GetStatusBar (
        long lcid = 0 );
    void PutStatusBar (
        long lcid,
        const _variant_t & RHS );
    _bstr_t GetTemplatesPath (
        long lcid = 0 );
    VARIANT_BOOL GetShowToolTips ( );
    void PutShowToolTips (
        VARIANT_BOOL RHS );
    double GetTop (
        long lcid = 0 );
    void PutTop (
        long lcid,
        double RHS );
    enum XlFileFormat GetDefaultSaveFormat ( );
    void PutDefaultSaveFormat (
        enum XlFileFormat RHS );
    _bstr_t GetTransitionMenuKey (
        long lcid = 0 );
    void PutTransitionMenuKey (
        long lcid,
        _bstr_t RHS );
    long GetTransitionMenuKeyAction (
        long lcid = 0 );
    void PutTransitionMenuKeyAction (
        long lcid,
        long RHS );
    VARIANT_BOOL GetTransitionNavigKeys (
        long lcid = 0 );
    void PutTransitionNavigKeys (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Undo (
        long lcid = 0 );
    double GetUsableHeight (
        long lcid = 0 );
    double GetUsableWidth (
        long lcid = 0 );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _bstr_t GetUserName (
        long lcid = 0 );
    void PutUserName (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetValue ( );
    VBE6::VBEPtr GetVBE ( );
    _bstr_t GetVersion (
        long lcid = 0 );
    VARIANT_BOOL GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Volatile (
        const _variant_t & Volatile = vtMissing,
        long lcid = 0 );
    HRESULT _Wait (
        const _variant_t & Time,
        long lcid = 0 );
    double GetWidth (
        long lcid = 0 );
    void PutWidth (
        long lcid,
        double RHS );
    VARIANT_BOOL GetWindowsForPens (
        long lcid = 0 );
    enum XlWindowState GetWindowState (
        long lcid = 0 );
    void PutWindowState (
        long lcid,
        enum XlWindowState RHS );
    long GetUILanguage (
        long lcid = 0 );
    void PutUILanguage (
        long lcid,
        long RHS );
    long GetDefaultSheetDirection (
        long lcid = 0 );
    void PutDefaultSheetDirection (
        long lcid,
        long RHS );
    long GetCursorMovement (
        long lcid = 0 );
    void PutCursorMovement (
        long lcid,
        long RHS );
    VARIANT_BOOL GetControlCharacters (
        long lcid = 0 );
    void PutControlCharacters (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableEvents ( );
    void PutEnableEvents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInfoWindow ( );
    void PutDisplayInfoWindow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Wait (
        const _variant_t & Time,
        long lcid = 0 );
    VARIANT_BOOL GetExtendList ( );
    void PutExtendList (
        VARIANT_BOOL RHS );
    OLEDBErrorsPtr GetOLEDBErrors ( );
    _bstr_t GetPhonetic (
        const _variant_t & Text = vtMissing );
    Office::COMAddInsPtr GetCOMAddIns ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    _bstr_t GetProductCode ( );
    _bstr_t GetUserLibraryPath ( );
    VARIANT_BOOL GetAutoPercentEntry ( );
    void PutAutoPercentEntry (
        VARIANT_BOOL RHS );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    VARIANT_BOOL GetDummy101 ( );
    HRESULT Dummy12 ( );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    HRESULT CalculateFull ( );
    VARIANT_BOOL FindFile (
        long lcid = 0 );
    long GetCalculationVersion ( );
    VARIANT_BOOL GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        VARIANT_BOOL RHS );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateMicrosoftApp (
        /*[in]*/ enum XlMSApplication Index,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddChartAutoFormat (
        /*[in]*/ VARIANT Chart,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddCustomList (
        /*[in]*/ VARIANT ListArray,
        /*[in]*/ VARIANT ByRow = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoCorrect (
        /*[out,retval]*/ struct AutoCorrect * * RHS ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_Caller (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CanPlaySounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CanRecordSounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CentimetersToPoints (
        /*[in]*/ double Centimeters,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ BSTR Word,
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ClipboardFormats (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColorButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCommandUnderlines * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCommandUnderlines RHS ) = 0;
      virtual HRESULT __stdcall get_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ConvertFormula (
        /*[in]*/ VARIANT Formula,
        /*[in]*/ enum XlReferenceStyle FromReferenceStyle,
        /*[in]*/ VARIANT ToReferenceStyle,
        /*[in]*/ VARIANT ToAbsolute,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMousePointer * RHS ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlMousePointer RHS ) = 0;
      virtual HRESULT __stdcall get_CustomListCount (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCutCopyMode * RHS ) = 0;
      virtual HRESULT __stdcall put_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCutCopyMode RHS ) = 0;
      virtual HRESULT __stdcall get_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy1 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy2 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy4 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy5 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy6 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy7 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy8 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy9 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy10 ( ) = 0;
      virtual HRESULT __stdcall raw_Dummy11 ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteChartAutoFormat (
        /*[in]*/ BSTR Name,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DeleteCustomList (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ struct Dialogs * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNoteIndicator (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNoteIndicator (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayCommentIndicator (
        /*[out,retval]*/ enum XlCommentDisplayMode * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayCommentIndicator (
        /*[in]*/ enum XlCommentDisplayMode RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRecentFiles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRecentFiles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DoubleClick (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoComplete (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoComplete (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlEnableCancelKey * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlEnableCancelKey RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSound (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSound (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FileConverters (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ struct Office::FileSearch * * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ struct Office::IFind * * RHS ) = 0;
      virtual HRESULT __stdcall raw__FindFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListContents (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListNum (
        /*[in]*/ VARIANT ListArray,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetOpenFilename (
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in]*/ VARIANT MultiSelect,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetSaveAsFilename (
        /*[in]*/ VARIANT InitialFilename,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Goto (
        /*[in]*/ VARIANT Reference = vtMissing,
        /*[in]*/ VARIANT Scroll = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_InchesToPoints (
        /*[in]*/ double Inches,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_InputBox (
        /*[in]*/ BSTR Prompt,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT Default,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_International (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LibraryPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MacroOptions (
        /*[in]*/ VARIANT Macro = vtMissing,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT HasMenu = vtMissing,
        /*[in]*/ VARIANT MenuText = vtMissing,
        /*[in]*/ VARIANT HasShortcutKey = vtMissing,
        /*[in]*/ VARIANT ShortcutKey = vtMissing,
        /*[in]*/ VARIANT Category = vtMissing,
        /*[in]*/ VARIANT StatusBar = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogoff (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogon (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DownloadNewMail = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_MailSession (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_MailSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMailSystem * RHS ) = 0;
      virtual HRESULT __stdcall get_MathCoprocessorAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryFree (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryTotal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MouseAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDirection * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDirection RHS ) = 0;
      virtual HRESULT __stdcall get_RecentFiles (
        /*[out,retval]*/ struct RecentFiles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_NextLetter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_NetworkTemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCErrors (
        /*[out,retval]*/ struct ODBCErrors * * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCTimeout (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ODBCTimeout (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnKey (
        /*[in]*/ BSTR Key,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnRepeat (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnTime (
        /*[in]*/ VARIANT EarliestTime,
        /*[in]*/ BSTR Procedure,
        /*[in]*/ VARIANT LatestTime = vtMissing,
        /*[in]*/ VARIANT Schedule = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnUndo (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizationName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PathSeparator (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PreviousSelections (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTableSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotTableSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_RecordMacro (
        /*[in]*/ VARIANT BasicCode = vtMissing,
        /*[in]*/ VARIANT XlmCode = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RecordRelative (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlReferenceStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlReferenceStyle RHS ) = 0;
      virtual HRESULT __stdcall get_RegisteredFunctions (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RegisterXLL (
        /*[in]*/ BSTR Filename,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Repeat (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetTipWizard (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RollZoom (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RollZoom (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveWorkspace (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultChart (
        /*[in]*/ VARIANT FormatName = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipValues (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipValues (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_StartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowToolTips (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowToolTips (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSaveFormat (
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSaveFormat (
        /*[in]*/ enum XlFileFormat RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Undo (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBE6::VBE * * RHS ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Volatile (
        /*[in]*/ VARIANT Volatile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowsForPens (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEvents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEvents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInfoWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInfoWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ExtendList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExtendList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OLEDBErrors (
        /*[out,retval]*/ struct OLEDBErrors * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetPhonetic (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ struct Office::COMAddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_UserLibraryPath (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoPercentEntry (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoPercentEntry (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ struct Office::LanguageSettings * * RHS ) = 0;
      virtual HRESULT __stdcall get_Dummy101 (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculateFull ( ) = 0;
      virtual HRESULT __stdcall raw_FindFile (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ enum Office::MsoFeatureInstall * RHS ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ enum Office::MsoFeatureInstall RHS ) = 0;
};

struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
};

struct __declspec(uuid("00020818-0000-0000-c000-000000000046"))
OLEObject;
    // [ default ] dispinterface _OLEObject
    // [ default, source ] dispinterface OLEObjectEvents

struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
IOLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual void __stdcall _Dummy39 ( ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct _OLEObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("f:\hitetouchpro_work\test_cross_1\utility\win32\debug\excel9.tli")
__declspec(implementation_key(1)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(2)) int Adjustments::GetCount ( );
__declspec(implementation_key(3)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(4)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(5)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(6)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(7)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(8)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(9)) HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType );
__declspec(implementation_key(10)) enum Office::MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(11)) void CalloutFormat::PutAccent ( enum Office::MsoTriState Accent );
__declspec(implementation_key(12)) enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(13)) void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle );
__declspec(implementation_key(14)) enum Office::MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(15)) void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach );
__declspec(implementation_key(16)) enum Office::MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(17)) enum Office::MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(18)) void CalloutFormat::PutBorder ( enum Office::MsoTriState Border );
__declspec(implementation_key(19)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(20)) enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(21)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(22)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(23)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(24)) enum Office::MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(25)) void CalloutFormat::PutType ( enum Office::MsoCalloutType Type );
__declspec(implementation_key(26)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(27)) Office::MsoRGBType ColorFormat::GetExcelRGB ( );
__declspec(implementation_key(28)) void ColorFormat::PutExcelRGB ( Office::MsoRGBType ExcelRGB );
__declspec(implementation_key(29)) int ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(30)) void ColorFormat::PutSchemeColor ( int SchemeColor );
__declspec(implementation_key(31)) enum Office::MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(32)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(33)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(34)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(35)) enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(36)) void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(37)) enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(38)) void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(39)) enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(40)) void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(41)) enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(42)) void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle );
__declspec(implementation_key(43)) enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(44)) void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(45)) enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(46)) void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(47)) enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(48)) void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(49)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(50)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(51)) enum Office::MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(52)) void LineFormat::PutPattern ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(53)) enum Office::MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(54)) void LineFormat::PutStyle ( enum Office::MsoLineStyle Style );
__declspec(implementation_key(55)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(56)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(57)) enum Office::MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(58)) void LineFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(59)) float LineFormat::GetWeight ( );
__declspec(implementation_key(60)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(61)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(62)) enum Office::MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(63)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(64)) enum Office::MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(65)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(66)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(67)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(68)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(69)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(70)) HRESULT ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(71)) HRESULT ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType );
__declspec(implementation_key(72)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(73)) HRESULT ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType );
__declspec(implementation_key(74)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(75)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(76)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(77)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(78)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(79)) enum Office::MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(80)) void PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType );
__declspec(implementation_key(81)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(82)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(83)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(84)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(85)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(86)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(87)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(88)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(89)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(90)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(91)) Office::MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(92)) void PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor );
__declspec(implementation_key(93)) enum Office::MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(94)) void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground );
__declspec(implementation_key(95)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(96)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(97)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(98)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(99)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(100)) enum Office::MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(101)) void ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured );
__declspec(implementation_key(102)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(103)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(104)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(105)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(106)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(107)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(108)) enum Office::MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(109)) void ShadowFormat::PutType ( enum Office::MsoShadowType Type );
__declspec(implementation_key(110)) enum Office::MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(111)) void ShadowFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(112)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(113)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(114)) enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(115)) void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment );
__declspec(implementation_key(116)) enum Office::MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(117)) void TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold );
__declspec(implementation_key(118)) enum Office::MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(119)) void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic );
__declspec(implementation_key(120)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(121)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(122)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(123)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(124)) enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(125)) void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs );
__declspec(implementation_key(126)) enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(127)) void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight );
__declspec(implementation_key(128)) enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(129)) void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(130)) enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(131)) void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset );
__declspec(implementation_key(132)) enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(133)) void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars );
__declspec(implementation_key(134)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(135)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(136)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(137)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(138)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(139)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(140)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(141)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(142)) HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(143)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(144)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(145)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(146)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(147)) enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(148)) void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(149)) enum Office::MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(150)) void ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective );
__declspec(implementation_key(151)) enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(152)) enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(153)) void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(154)) enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(155)) void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(156)) enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(157)) void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(158)) enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(159)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(160)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(161)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(162)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(163)) enum Office::MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(164)) void ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(165)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(166)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(167)) HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(168)) HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(169)) HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(170)) HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(171)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(172)) HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant );
__declspec(implementation_key(173)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(174)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(175)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(176)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(177)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(178)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(179)) enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(180)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(181)) enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(182)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(183)) enum Office::MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(184)) enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(185)) enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(186)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(187)) enum Office::MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(188)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(189)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(190)) enum Office::MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(191)) enum Office::MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(192)) void FillFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(193)) HRESULT IChartEvents::Activate ( );
__declspec(implementation_key(194)) HRESULT IChartEvents::Deactivate ( );
__declspec(implementation_key(195)) HRESULT IChartEvents::Resize ( );
__declspec(implementation_key(196)) HRESULT IChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(197)) HRESULT IChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(198)) HRESULT IChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(199)) HRESULT IChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(200)) HRESULT IChartEvents::DragPlot ( );
__declspec(implementation_key(201)) HRESULT IChartEvents::DragOver ( );
__declspec(implementation_key(202)) HRESULT IChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(203)) HRESULT IChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(204)) HRESULT IChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(205)) HRESULT IChartEvents::Calculate ( );
__declspec(implementation_key(206)) HRESULT IOLEObjectEvents::GotFocus ( );
__declspec(implementation_key(207)) HRESULT IOLEObjectEvents::LostFocus ( );
__declspec(implementation_key(208)) HRESULT IRefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(209)) HRESULT IRefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(210)) _ApplicationPtr Font::GetApplication ( );
__declspec(implementation_key(211)) enum XlCreator Font::GetCreator ( );
__declspec(implementation_key(212)) IDispatchPtr Font::GetParent ( );
__declspec(implementation_key(213)) _variant_t Font::GetBackground ( );
__declspec(implementation_key(214)) void Font::PutBackground ( const _variant_t & _arg1 );
__declspec(implementation_key(215)) _variant_t Font::GetBold ( );
__declspec(implementation_key(216)) void Font::PutBold ( const _variant_t & _arg1 );
__declspec(implementation_key(217)) _variant_t Font::GetColor ( );
__declspec(implementation_key(218)) void Font::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(219)) _variant_t Font::GetColorIndex ( );
__declspec(implementation_key(220)) void Font::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(221)) _variant_t Font::GetFontStyle ( );
__declspec(implementation_key(222)) void Font::PutFontStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(223)) _variant_t Font::GetItalic ( );
__declspec(implementation_key(224)) void Font::PutItalic ( const _variant_t & _arg1 );
__declspec(implementation_key(225)) _variant_t Font::GetName ( );
__declspec(implementation_key(226)) void Font::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(227)) _variant_t Font::GetOutlineFont ( );
__declspec(implementation_key(228)) void Font::PutOutlineFont ( const _variant_t & _arg1 );
__declspec(implementation_key(229)) _variant_t Font::GetShadow ( );
__declspec(implementation_key(230)) void Font::PutShadow ( const _variant_t & _arg1 );
__declspec(implementation_key(231)) _variant_t Font::GetSize ( );
__declspec(implementation_key(232)) void Font::PutSize ( const _variant_t & _arg1 );
__declspec(implementation_key(233)) _variant_t Font::GetStrikethrough ( );
__declspec(implementation_key(234)) void Font::PutStrikethrough ( const _variant_t & _arg1 );
__declspec(implementation_key(235)) _variant_t Font::GetSubscript ( );
__declspec(implementation_key(236)) void Font::PutSubscript ( const _variant_t & _arg1 );
__declspec(implementation_key(237)) _variant_t Font::GetSuperscript ( );
__declspec(implementation_key(238)) void Font::PutSuperscript ( const _variant_t & _arg1 );
__declspec(implementation_key(239)) _variant_t Font::GetUnderline ( );
__declspec(implementation_key(240)) void Font::PutUnderline ( const _variant_t & _arg1 );
__declspec(implementation_key(241)) _ApplicationPtr Window::GetApplication ( );
__declspec(implementation_key(242)) enum XlCreator Window::GetCreator ( );
__declspec(implementation_key(243)) IDispatchPtr Window::GetParent ( );
__declspec(implementation_key(244)) _variant_t Window::Activate ( );
__declspec(implementation_key(245)) _variant_t Window::ActivateNext ( );
__declspec(implementation_key(246)) _variant_t Window::ActivatePrevious ( );
__declspec(implementation_key(247)) RangePtr Window::GetActiveCell ( );
__declspec(implementation_key(248)) _ChartPtr Window::GetActiveChart ( );
__declspec(implementation_key(249)) PanePtr Window::GetActivePane ( );
__declspec(implementation_key(250)) IDispatchPtr Window::GetActiveSheet ( );
__declspec(implementation_key(251)) _variant_t Window::GetCaption ( );
__declspec(implementation_key(252)) void Window::PutCaption ( const _variant_t & _arg1 );
__declspec(implementation_key(253)) VARIANT_BOOL Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(254)) VARIANT_BOOL Window::GetDisplayFormulas ( );
__declspec(implementation_key(255)) void Window::PutDisplayFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(256)) VARIANT_BOOL Window::GetDisplayGridlines ( );
__declspec(implementation_key(257)) void Window::PutDisplayGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(258)) VARIANT_BOOL Window::GetDisplayHeadings ( );
__declspec(implementation_key(259)) void Window::PutDisplayHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(260)) VARIANT_BOOL Window::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(261)) void Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(262)) VARIANT_BOOL Window::GetDisplayOutline ( );
__declspec(implementation_key(263)) void Window::PutDisplayOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(264)) VARIANT_BOOL Window::Get_DisplayRightToLeft ( );
__declspec(implementation_key(265)) void Window::Put_DisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(266)) VARIANT_BOOL Window::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(267)) void Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(268)) VARIANT_BOOL Window::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(269)) void Window::PutDisplayWorkbookTabs ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(270)) VARIANT_BOOL Window::GetDisplayZeros ( );
__declspec(implementation_key(271)) void Window::PutDisplayZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(272)) VARIANT_BOOL Window::GetEnableResize ( );
__declspec(implementation_key(273)) void Window::PutEnableResize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(274)) VARIANT_BOOL Window::GetFreezePanes ( );
__declspec(implementation_key(275)) void Window::PutFreezePanes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(276)) long Window::GetGridlineColor ( );
__declspec(implementation_key(277)) void Window::PutGridlineColor ( long _arg1 );
__declspec(implementation_key(278)) enum XlColorIndex Window::GetGridlineColorIndex ( );
__declspec(implementation_key(279)) void Window::PutGridlineColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(280)) double Window::GetHeight ( );
__declspec(implementation_key(281)) void Window::PutHeight ( double _arg1 );
__declspec(implementation_key(282)) long Window::GetIndex ( );
__declspec(implementation_key(283)) _variant_t Window::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(284)) double Window::GetLeft ( );
__declspec(implementation_key(285)) void Window::PutLeft ( double _arg1 );
__declspec(implementation_key(286)) WindowPtr Window::NewWindow ( );
__declspec(implementation_key(287)) _bstr_t Window::GetOnWindow ( );
__declspec(implementation_key(288)) void Window::PutOnWindow ( _bstr_t _arg1 );
__declspec(implementation_key(289)) PanesPtr Window::GetPanes ( );
__declspec(implementation_key(290)) _variant_t Window::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(291)) _variant_t Window::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(292)) RangePtr Window::GetRangeSelection ( );
__declspec(implementation_key(293)) long Window::GetScrollColumn ( );
__declspec(implementation_key(294)) void Window::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(295)) long Window::GetScrollRow ( );
__declspec(implementation_key(296)) void Window::PutScrollRow ( long _arg1 );
__declspec(implementation_key(297)) _variant_t Window::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(298)) SheetsPtr Window::GetSelectedSheets ( );
__declspec(implementation_key(299)) IDispatchPtr Window::GetSelection ( );
__declspec(implementation_key(300)) _variant_t Window::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(301)) VARIANT_BOOL Window::GetSplit ( );
__declspec(implementation_key(302)) void Window::PutSplit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(303)) long Window::GetSplitColumn ( );
__declspec(implementation_key(304)) void Window::PutSplitColumn ( long _arg1 );
__declspec(implementation_key(305)) double Window::GetSplitHorizontal ( );
__declspec(implementation_key(306)) void Window::PutSplitHorizontal ( double _arg1 );
__declspec(implementation_key(307)) long Window::GetSplitRow ( );
__declspec(implementation_key(308)) void Window::PutSplitRow ( long _arg1 );
__declspec(implementation_key(309)) double Window::GetSplitVertical ( );
__declspec(implementation_key(310)) void Window::PutSplitVertical ( double _arg1 );
__declspec(implementation_key(311)) double Window::GetTabRatio ( );
__declspec(implementation_key(312)) void Window::PutTabRatio ( double _arg1 );
__declspec(implementation_key(313)) double Window::GetTop ( );
__declspec(implementation_key(314)) void Window::PutTop ( double _arg1 );
__declspec(implementation_key(315)) enum XlWindowType Window::GetType ( );
__declspec(implementation_key(316)) double Window::GetUsableHeight ( );
__declspec(implementation_key(317)) double Window::GetUsableWidth ( );
__declspec(implementation_key(318)) VARIANT_BOOL Window::GetVisible ( );
__declspec(implementation_key(319)) void Window::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(320)) RangePtr Window::GetVisibleRange ( );
__declspec(implementation_key(321)) double Window::GetWidth ( );
__declspec(implementation_key(322)) void Window::PutWidth ( double _arg1 );
__declspec(implementation_key(323)) long Window::GetWindowNumber ( );
__declspec(implementation_key(324)) enum XlWindowState Window::GetWindowState ( );
__declspec(implementation_key(325)) void Window::PutWindowState ( enum XlWindowState _arg1 );
__declspec(implementation_key(326)) _variant_t Window::GetZoom ( );
__declspec(implementation_key(327)) void Window::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(328)) enum XlWindowView Window::GetView ( );
__declspec(implementation_key(329)) void Window::PutView ( enum XlWindowView _arg1 );
__declspec(implementation_key(330)) VARIANT_BOOL Window::GetDisplayRightToLeft ( );
__declspec(implementation_key(331)) void Window::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(332)) long Window::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(333)) long Window::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(334)) IDispatchPtr Window::RangeFromPoint ( long x, long y );
__declspec(implementation_key(335)) HRESULT Window::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(336)) _ApplicationPtr Windows::GetApplication ( );
__declspec(implementation_key(337)) enum XlCreator Windows::GetCreator ( );
__declspec(implementation_key(338)) IDispatchPtr Windows::GetParent ( );
__declspec(implementation_key(339)) _variant_t Windows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(340)) long Windows::GetCount ( );
__declspec(implementation_key(341)) WindowPtr Windows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(342)) IUnknownPtr Windows::Get_NewEnum ( );
__declspec(implementation_key(343)) WindowPtr Windows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(344)) HRESULT AppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(345)) HRESULT AppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(346)) HRESULT AppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(347)) HRESULT AppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(348)) HRESULT AppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(349)) HRESULT AppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(350)) HRESULT AppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(351)) HRESULT AppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(352)) HRESULT AppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(353)) HRESULT AppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(354)) HRESULT AppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(355)) HRESULT AppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(356)) HRESULT AppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(357)) HRESULT AppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(358)) HRESULT AppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(359)) HRESULT AppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(360)) HRESULT AppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(361)) HRESULT AppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(362)) HRESULT AppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(363)) HRESULT AppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(364)) HRESULT AppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(365)) _ApplicationPtr WorksheetFunction::GetApplication ( );
__declspec(implementation_key(366)) enum XlCreator WorksheetFunction::GetCreator ( );
__declspec(implementation_key(367)) IDispatchPtr WorksheetFunction::GetParent ( );
__declspec(implementation_key(368)) _variant_t WorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(369)) double WorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(370)) VARIANT_BOOL WorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(371)) VARIANT_BOOL WorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(372)) double WorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(373)) double WorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(374)) double WorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(375)) double WorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(376)) double WorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(377)) double WorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(378)) _bstr_t WorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(379)) _bstr_t WorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(380)) double WorksheetFunction::Pi ( );
__declspec(implementation_key(381)) double WorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(382)) double WorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(383)) double WorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(384)) _variant_t WorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(385)) _variant_t WorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(386)) _bstr_t WorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(387)) VARIANT_BOOL WorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(388)) VARIANT_BOOL WorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(389)) double WorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(390)) double WorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(391)) double WorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(392)) double WorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(393)) double WorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(394)) double WorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(395)) double WorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(396)) double WorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(397)) _bstr_t WorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(398)) _variant_t WorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(399)) _variant_t WorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(400)) _variant_t WorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(401)) _variant_t WorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(402)) double WorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(403)) double WorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(404)) double WorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(405)) double WorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(406)) double WorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(407)) double WorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(408)) double WorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(409)) double WorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(410)) double WorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(411)) double WorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(412)) _variant_t WorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(413)) double WorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(414)) double WorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(415)) double WorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(416)) _variant_t WorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(417)) _variant_t WorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(418)) _variant_t WorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(419)) double WorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(420)) _bstr_t WorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(421)) _bstr_t WorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(422)) _bstr_t WorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(423)) _bstr_t WorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(424)) double WorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(425)) VARIANT_BOOL WorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(426)) VARIANT_BOOL WorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(427)) VARIANT_BOOL WorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(428)) double WorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(429)) double WorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(430)) double WorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(431)) _bstr_t WorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(432)) double WorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(433)) _variant_t WorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(434)) _variant_t WorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(435)) double WorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(436)) double WorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(437)) double WorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(438)) double WorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(439)) double WorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(440)) double WorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(441)) VARIANT_BOOL WorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(442)) double WorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(443)) double WorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(444)) double WorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(445)) double WorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(446)) VARIANT_BOOL WorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(447)) double WorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(448)) _bstr_t WorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(449)) double WorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(450)) double WorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(451)) _bstr_t WorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(452)) double WorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(453)) double WorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(454)) double WorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(455)) double WorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(456)) double WorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(457)) double WorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(458)) double WorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(459)) double WorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(460)) double WorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(461)) double WorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(462)) double WorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(463)) double WorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(464)) double WorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(465)) _variant_t WorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(466)) double WorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(467)) _variant_t WorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(468)) double WorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(469)) double WorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(470)) double WorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(471)) double WorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(472)) double WorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(473)) double WorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(474)) double WorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(475)) double WorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(476)) double WorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(477)) double WorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(478)) double WorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(479)) double WorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(480)) double WorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(481)) double WorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(482)) double WorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(483)) double WorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(484)) double WorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(485)) double WorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(486)) double WorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(487)) double WorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(488)) double WorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(489)) double WorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(490)) double WorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(491)) double WorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(492)) double WorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(493)) double WorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(494)) double WorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(495)) double WorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(496)) double WorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(497)) double WorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(498)) double WorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(499)) double WorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(500)) double WorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(501)) double WorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(502)) double WorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(503)) double WorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(504)) double WorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(505)) double WorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(506)) double WorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(507)) double WorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(508)) double WorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(509)) double WorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(510)) double WorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(511)) double WorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(512)) double WorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(513)) double WorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(514)) double WorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(515)) double WorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(516)) double WorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(517)) double WorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(518)) double WorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(519)) double WorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(520)) double WorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(521)) double WorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(522)) double WorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(523)) double WorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(524)) double WorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(525)) double WorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(526)) double WorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(527)) double WorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(528)) double WorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(529)) double WorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(530)) double WorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(531)) double WorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(532)) double WorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(533)) double WorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(534)) double WorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(535)) double WorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(536)) double WorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(537)) double WorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(538)) double WorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(539)) double WorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(540)) _bstr_t WorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(541)) _bstr_t WorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(542)) _bstr_t WorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(543)) _bstr_t WorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(544)) _ApplicationPtr Range::GetApplication ( );
__declspec(implementation_key(545)) enum XlCreator Range::GetCreator ( );
__declspec(implementation_key(546)) IDispatchPtr Range::GetParent ( );
__declspec(implementation_key(547)) _variant_t Range::Activate ( );
__declspec(implementation_key(548)) _variant_t Range::GetAddIndent ( );
__declspec(implementation_key(549)) void Range::PutAddIndent ( const _variant_t & _arg1 );
__declspec(implementation_key(550)) _bstr_t Range::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(551)) _bstr_t Range::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(552)) _variant_t Range::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(553)) _variant_t Range::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(554)) _variant_t Range::ApplyOutlineStyles ( );
__declspec(implementation_key(555)) AreasPtr Range::GetAreas ( );
__declspec(implementation_key(556)) _bstr_t Range::AutoComplete ( _bstr_t String );
__declspec(implementation_key(557)) _variant_t Range::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(558)) _variant_t Range::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(559)) _variant_t Range::AutoFit ( );
__declspec(implementation_key(560)) _variant_t Range::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(561)) _variant_t Range::AutoOutline ( );
__declspec(implementation_key(562)) _variant_t Range::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(563)) BordersPtr Range::GetBorders ( );
__declspec(implementation_key(564)) _variant_t Range::Calculate ( );
__declspec(implementation_key(565)) RangePtr Range::GetCells ( );
__declspec(implementation_key(566)) CharactersPtr Range::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(567)) _variant_t Range::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(568)) _variant_t Range::Clear ( );
__declspec(implementation_key(569)) _variant_t Range::ClearContents ( );
__declspec(implementation_key(570)) _variant_t Range::ClearFormats ( );
__declspec(implementation_key(571)) _variant_t Range::ClearNotes ( );
__declspec(implementation_key(572)) _variant_t Range::ClearOutline ( );
__declspec(implementation_key(573)) long Range::GetColumn ( );
__declspec(implementation_key(574)) RangePtr Range::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(575)) RangePtr Range::GetColumns ( );
__declspec(implementation_key(576)) _variant_t Range::GetColumnWidth ( );
__declspec(implementation_key(577)) void Range::PutColumnWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(578)) _variant_t Range::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(579)) _variant_t Range::Copy ( const _variant_t & Destination );
__declspec(implementation_key(580)) long Range::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(581)) _variant_t Range::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(582)) long Range::GetCount ( );
__declspec(implementation_key(583)) _variant_t Range::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(584)) _variant_t Range::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(585)) RangePtr Range::GetCurrentArray ( );
__declspec(implementation_key(586)) RangePtr Range::GetCurrentRegion ( );
__declspec(implementation_key(587)) _variant_t Range::Cut ( const _variant_t & Destination );
__declspec(implementation_key(588)) _variant_t Range::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(589)) _variant_t Range::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(590)) void Range::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(591)) _variant_t Range::Delete ( const _variant_t & Shift );
__declspec(implementation_key(592)) RangePtr Range::GetDependents ( );
__declspec(implementation_key(593)) _variant_t Range::DialogBoxEx ( );
__declspec(implementation_key(594)) RangePtr Range::GetDirectDependents ( );
__declspec(implementation_key(595)) RangePtr Range::GetDirectPrecedents ( );
__declspec(implementation_key(596)) _variant_t Range::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(597)) RangePtr Range::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(598)) RangePtr Range::GetEntireColumn ( );
__declspec(implementation_key(599)) RangePtr Range::GetEntireRow ( );
__declspec(implementation_key(600)) _variant_t Range::FillDown ( );
__declspec(implementation_key(601)) _variant_t Range::FillLeft ( );
__declspec(implementation_key(602)) _variant_t Range::FillRight ( );
__declspec(implementation_key(603)) _variant_t Range::FillUp ( );
__declspec(implementation_key(604)) RangePtr Range::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte );
__declspec(implementation_key(605)) RangePtr Range::FindNext ( const _variant_t & After );
__declspec(implementation_key(606)) RangePtr Range::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(607)) FontPtr Range::GetFont ( );
__declspec(implementation_key(608)) _variant_t Range::GetFormula ( );
__declspec(implementation_key(609)) void Range::PutFormula ( const _variant_t & _arg1 );
__declspec(implementation_key(610)) _variant_t Range::GetFormulaArray ( );
__declspec(implementation_key(611)) void Range::PutFormulaArray ( const _variant_t & _arg1 );
__declspec(implementation_key(612)) enum XlFormulaLabel Range::GetFormulaLabel ( );
__declspec(implementation_key(613)) void Range::PutFormulaLabel ( enum XlFormulaLabel _arg1 );
__declspec(implementation_key(614)) _variant_t Range::GetFormulaHidden ( );
__declspec(implementation_key(615)) void Range::PutFormulaHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(616)) _variant_t Range::GetFormulaLocal ( );
__declspec(implementation_key(617)) void Range::PutFormulaLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(618)) _variant_t Range::GetFormulaR1C1 ( );
__declspec(implementation_key(619)) void Range::PutFormulaR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(620)) _variant_t Range::GetFormulaR1C1Local ( );
__declspec(implementation_key(621)) void Range::PutFormulaR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(622)) _variant_t Range::FunctionWizard ( );
__declspec(implementation_key(623)) VARIANT_BOOL Range::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(624)) _variant_t Range::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(625)) _variant_t Range::GetHasArray ( );
__declspec(implementation_key(626)) _variant_t Range::GetHasFormula ( );
__declspec(implementation_key(627)) _variant_t Range::GetHeight ( );
__declspec(implementation_key(628)) _variant_t Range::GetHidden ( );
__declspec(implementation_key(629)) void Range::PutHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(630)) _variant_t Range::GetHorizontalAlignment ( );
__declspec(implementation_key(631)) void Range::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(632)) _variant_t Range::GetIndentLevel ( );
__declspec(implementation_key(633)) void Range::PutIndentLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(634)) HRESULT Range::InsertIndent ( long InsertAmount );
__declspec(implementation_key(635)) _variant_t Range::Insert ( const _variant_t & Shift );
__declspec(implementation_key(636)) InteriorPtr Range::GetInterior ( );
__declspec(implementation_key(637)) _variant_t Range::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(638)) void Range::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(639)) _variant_t Range::Justify ( );
__declspec(implementation_key(640)) _variant_t Range::GetLeft ( );
__declspec(implementation_key(641)) long Range::GetListHeaderRows ( );
__declspec(implementation_key(642)) _variant_t Range::ListNames ( );
__declspec(implementation_key(643)) enum XlLocationInTable Range::GetLocationInTable ( );
__declspec(implementation_key(644)) _variant_t Range::GetLocked ( );
__declspec(implementation_key(645)) void Range::PutLocked ( const _variant_t & _arg1 );
__declspec(implementation_key(646)) HRESULT Range::Merge ( const _variant_t & Across );
__declspec(implementation_key(647)) HRESULT Range::UnMerge ( );
__declspec(implementation_key(648)) RangePtr Range::GetMergeArea ( );
__declspec(implementation_key(649)) _variant_t Range::GetMergeCells ( );
__declspec(implementation_key(650)) void Range::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(651)) _variant_t Range::GetName ( );
__declspec(implementation_key(652)) void Range::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(653)) _variant_t Range::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(654)) IUnknownPtr Range::Get_NewEnum ( );
__declspec(implementation_key(655)) RangePtr Range::GetNext ( );
__declspec(implementation_key(656)) _bstr_t Range::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(657)) _variant_t Range::GetNumberFormat ( );
__declspec(implementation_key(658)) void Range::PutNumberFormat ( const _variant_t & _arg1 );
__declspec(implementation_key(659)) _variant_t Range::GetNumberFormatLocal ( );
__declspec(implementation_key(660)) void Range::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(661)) RangePtr Range::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(662)) _variant_t Range::GetOrientation ( );
__declspec(implementation_key(663)) void Range::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(664)) _variant_t Range::GetOutlineLevel ( );
__declspec(implementation_key(665)) void Range::PutOutlineLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(666)) long Range::GetPageBreak ( );
__declspec(implementation_key(667)) void Range::PutPageBreak ( long _arg1 );
__declspec(implementation_key(668)) _variant_t Range::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(669)) _variant_t Range::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(670)) PivotFieldPtr Range::GetPivotField ( );
__declspec(implementation_key(671)) PivotItemPtr Range::GetPivotItem ( );
__declspec(implementation_key(672)) PivotTablePtr Range::GetPivotTable ( );
__declspec(implementation_key(673)) RangePtr Range::GetPrecedents ( );
__declspec(implementation_key(674)) _variant_t Range::GetPrefixCharacter ( );
__declspec(implementation_key(675)) RangePtr Range::GetPrevious ( );
__declspec(implementation_key(676)) _variant_t Range::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(677)) _variant_t Range::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(678)) _QueryTablePtr Range::GetQueryTable ( );
__declspec(implementation_key(679)) RangePtr Range::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(680)) _variant_t Range::RemoveSubtotal ( );
__declspec(implementation_key(681)) VARIANT_BOOL Range::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte );
__declspec(implementation_key(682)) RangePtr Range::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(683)) long Range::GetRow ( );
__declspec(implementation_key(684)) RangePtr Range::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(685)) _variant_t Range::GetRowHeight ( );
__declspec(implementation_key(686)) void Range::PutRowHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(687)) RangePtr Range::GetRows ( );
__declspec(implementation_key(688)) _variant_t Range::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(689)) _variant_t Range::Select ( );
__declspec(implementation_key(690)) _variant_t Range::Show ( );
__declspec(implementation_key(691)) _variant_t Range::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(692)) _variant_t Range::GetShowDetail ( );
__declspec(implementation_key(693)) void Range::PutShowDetail ( const _variant_t & _arg1 );
__declspec(implementation_key(694)) _variant_t Range::ShowErrors ( );
__declspec(implementation_key(695)) _variant_t Range::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(696)) _variant_t Range::GetShrinkToFit ( );
__declspec(implementation_key(697)) void Range::PutShrinkToFit ( const _variant_t & _arg1 );
__declspec(implementation_key(698)) _variant_t Range::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod );
__declspec(implementation_key(699)) _variant_t Range::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation );
__declspec(implementation_key(700)) SoundNotePtr Range::GetSoundNote ( );
__declspec(implementation_key(701)) RangePtr Range::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(702)) _variant_t Range::GetStyle ( );
__declspec(implementation_key(703)) void Range::PutStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(704)) _variant_t Range::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(705)) _variant_t Range::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(706)) _variant_t Range::GetSummary ( );
__declspec(implementation_key(707)) _variant_t Range::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(708)) _variant_t Range::GetText ( );
__declspec(implementation_key(709)) _variant_t Range::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator );
__declspec(implementation_key(710)) _variant_t Range::GetTop ( );
__declspec(implementation_key(711)) _variant_t Range::Ungroup ( );
__declspec(implementation_key(712)) _variant_t Range::GetUseStandardHeight ( );
__declspec(implementation_key(713)) void Range::PutUseStandardHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(714)) _variant_t Range::GetUseStandardWidth ( );
__declspec(implementation_key(715)) void Range::PutUseStandardWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(716)) ValidationPtr Range::GetValidation ( );
__declspec(implementation_key(717)) _variant_t Range::GetValue ( );
__declspec(implementation_key(718)) void Range::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(719)) _variant_t Range::GetValue2 ( );
__declspec(implementation_key(720)) void Range::PutValue2 ( const _variant_t & _arg1 );
__declspec(implementation_key(721)) _variant_t Range::GetVerticalAlignment ( );
__declspec(implementation_key(722)) void Range::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(723)) _variant_t Range::GetWidth ( );
__declspec(implementation_key(724)) _WorksheetPtr Range::GetWorksheet ( );
__declspec(implementation_key(725)) _variant_t Range::GetWrapText ( );
__declspec(implementation_key(726)) void Range::PutWrapText ( const _variant_t & _arg1 );
__declspec(implementation_key(727)) CommentPtr Range::AddComment ( const _variant_t & Text );
__declspec(implementation_key(728)) CommentPtr Range::GetComment ( );
__declspec(implementation_key(729)) HRESULT Range::ClearComments ( );
__declspec(implementation_key(730)) PhoneticPtr Range::GetPhonetic ( );
__declspec(implementation_key(731)) FormatConditionsPtr Range::GetFormatConditions ( );
__declspec(implementation_key(732)) long Range::GetReadingOrder ( );
__declspec(implementation_key(733)) void Range::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(734)) HyperlinksPtr Range::GetHyperlinks ( );
__declspec(implementation_key(735)) PhoneticsPtr Range::GetPhonetics ( );
__declspec(implementation_key(736)) HRESULT Range::SetPhonetic ( );
__declspec(implementation_key(737)) _bstr_t Range::GetID ( );
__declspec(implementation_key(738)) void Range::PutID ( _bstr_t _arg1 );
__declspec(implementation_key(739)) _variant_t Range::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(740)) HRESULT ChartEvents::Activate ( );
__declspec(implementation_key(741)) HRESULT ChartEvents::Deactivate ( );
__declspec(implementation_key(742)) HRESULT ChartEvents::Resize ( );
__declspec(implementation_key(743)) HRESULT ChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(744)) HRESULT ChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(745)) HRESULT ChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(746)) HRESULT ChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(747)) HRESULT ChartEvents::DragPlot ( );
__declspec(implementation_key(748)) HRESULT ChartEvents::DragOver ( );
__declspec(implementation_key(749)) HRESULT ChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(750)) HRESULT ChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(751)) HRESULT ChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(752)) HRESULT ChartEvents::Calculate ( );
__declspec(implementation_key(753)) _ApplicationPtr VPageBreak::GetApplication ( );
__declspec(implementation_key(754)) enum XlCreator VPageBreak::GetCreator ( );
__declspec(implementation_key(755)) _WorksheetPtr VPageBreak::GetParent ( );
__declspec(implementation_key(756)) HRESULT VPageBreak::Delete ( );
__declspec(implementation_key(757)) HRESULT VPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(758)) enum XlPageBreak VPageBreak::GetType ( );
__declspec(implementation_key(759)) void VPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(760)) enum XlPageBreakExtent VPageBreak::GetExtent ( );
__declspec(implementation_key(761)) RangePtr VPageBreak::GetLocation ( );
__declspec(implementation_key(762)) void VPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(763)) _ApplicationPtr HPageBreak::GetApplication ( );
__declspec(implementation_key(764)) enum XlCreator HPageBreak::GetCreator ( );
__declspec(implementation_key(765)) _WorksheetPtr HPageBreak::GetParent ( );
__declspec(implementation_key(766)) HRESULT HPageBreak::Delete ( );
__declspec(implementation_key(767)) HRESULT HPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(768)) enum XlPageBreak HPageBreak::GetType ( );
__declspec(implementation_key(769)) void HPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(770)) enum XlPageBreakExtent HPageBreak::GetExtent ( );
__declspec(implementation_key(771)) RangePtr HPageBreak::GetLocation ( );
__declspec(implementation_key(772)) void HPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(773)) _ApplicationPtr HPageBreaks::GetApplication ( );
__declspec(implementation_key(774)) enum XlCreator HPageBreaks::GetCreator ( );
__declspec(implementation_key(775)) IDispatchPtr HPageBreaks::GetParent ( );
__declspec(implementation_key(776)) long HPageBreaks::GetCount ( );
__declspec(implementation_key(777)) HPageBreakPtr HPageBreaks::GetItem ( long Index );
__declspec(implementation_key(778)) HPageBreakPtr HPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(779)) IUnknownPtr HPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(780)) HPageBreakPtr HPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(781)) _ApplicationPtr VPageBreaks::GetApplication ( );
__declspec(implementation_key(782)) enum XlCreator VPageBreaks::GetCreator ( );
__declspec(implementation_key(783)) IDispatchPtr VPageBreaks::GetParent ( );
__declspec(implementation_key(784)) long VPageBreaks::GetCount ( );
__declspec(implementation_key(785)) VPageBreakPtr VPageBreaks::GetItem ( long Index );
__declspec(implementation_key(786)) VPageBreakPtr VPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(787)) IUnknownPtr VPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(788)) VPageBreakPtr VPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(789)) _ApplicationPtr RecentFile::GetApplication ( );
__declspec(implementation_key(790)) enum XlCreator RecentFile::GetCreator ( );
__declspec(implementation_key(791)) IDispatchPtr RecentFile::GetParent ( );
__declspec(implementation_key(792)) _bstr_t RecentFile::GetName ( );
__declspec(implementation_key(793)) _bstr_t RecentFile::GetPath ( );
__declspec(implementation_key(794)) long RecentFile::GetIndex ( );
__declspec(implementation_key(795)) _WorkbookPtr RecentFile::Open ( );
__declspec(implementation_key(796)) HRESULT RecentFile::Delete ( );
__declspec(implementation_key(797)) _ApplicationPtr RecentFiles::GetApplication ( );
__declspec(implementation_key(798)) enum XlCreator RecentFiles::GetCreator ( );
__declspec(implementation_key(799)) IDispatchPtr RecentFiles::GetParent ( );
__declspec(implementation_key(800)) long RecentFiles::GetMaximum ( );
__declspec(implementation_key(801)) void RecentFiles::PutMaximum ( long _arg1 );
__declspec(implementation_key(802)) long RecentFiles::GetCount ( );
__declspec(implementation_key(803)) RecentFilePtr RecentFiles::GetItem ( long Index );
__declspec(implementation_key(804)) RecentFilePtr RecentFiles::Get_Default ( long Index );
__declspec(implementation_key(805)) RecentFilePtr RecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(806)) IUnknownPtr RecentFiles::Get_NewEnum ( );
__declspec(implementation_key(807)) HRESULT DocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(808)) HRESULT DocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(809)) HRESULT DocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(810)) HRESULT DocEvents::Activate ( );
__declspec(implementation_key(811)) HRESULT DocEvents::Deactivate ( );
__declspec(implementation_key(812)) HRESULT DocEvents::Calculate ( );
__declspec(implementation_key(813)) HRESULT DocEvents::Change ( struct Range * Target );
__declspec(implementation_key(814)) HRESULT DocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(815)) _ApplicationPtr Style::GetApplication ( );
__declspec(implementation_key(816)) enum XlCreator Style::GetCreator ( );
__declspec(implementation_key(817)) IDispatchPtr Style::GetParent ( );
__declspec(implementation_key(818)) VARIANT_BOOL Style::GetAddIndent ( );
__declspec(implementation_key(819)) void Style::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(820)) VARIANT_BOOL Style::GetBuiltIn ( );
__declspec(implementation_key(821)) BordersPtr Style::GetBorders ( );
__declspec(implementation_key(822)) _variant_t Style::Delete ( );
__declspec(implementation_key(823)) FontPtr Style::GetFont ( );
__declspec(implementation_key(824)) VARIANT_BOOL Style::GetFormulaHidden ( );
__declspec(implementation_key(825)) void Style::PutFormulaHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(826)) enum XlHAlign Style::GetHorizontalAlignment ( );
__declspec(implementation_key(827)) void Style::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(828)) VARIANT_BOOL Style::GetIncludeAlignment ( );
__declspec(implementation_key(829)) void Style::PutIncludeAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(830)) VARIANT_BOOL Style::GetIncludeBorder ( );
__declspec(implementation_key(831)) void Style::PutIncludeBorder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(832)) VARIANT_BOOL Style::GetIncludeFont ( );
__declspec(implementation_key(833)) void Style::PutIncludeFont ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(834)) VARIANT_BOOL Style::GetIncludeNumber ( );
__declspec(implementation_key(835)) void Style::PutIncludeNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(836)) VARIANT_BOOL Style::GetIncludePatterns ( );
__declspec(implementation_key(837)) void Style::PutIncludePatterns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(838)) VARIANT_BOOL Style::GetIncludeProtection ( );
__declspec(implementation_key(839)) void Style::PutIncludeProtection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(840)) long Style::GetIndentLevel ( );
__declspec(implementation_key(841)) void Style::PutIndentLevel ( long _arg1 );
__declspec(implementation_key(842)) InteriorPtr Style::GetInterior ( );
__declspec(implementation_key(843)) VARIANT_BOOL Style::GetLocked ( );
__declspec(implementation_key(844)) void Style::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(845)) _variant_t Style::GetMergeCells ( );
__declspec(implementation_key(846)) void Style::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(847)) _bstr_t Style::GetName ( );
__declspec(implementation_key(848)) _bstr_t Style::GetNameLocal ( );
__declspec(implementation_key(849)) _bstr_t Style::GetNumberFormat ( );
__declspec(implementation_key(850)) void Style::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(851)) _bstr_t Style::GetNumberFormatLocal ( );
__declspec(implementation_key(852)) void Style::PutNumberFormatLocal ( _bstr_t _arg1 );
__declspec(implementation_key(853)) enum XlOrientation Style::GetOrientation ( );
__declspec(implementation_key(854)) void Style::PutOrientation ( enum XlOrientation _arg1 );
__declspec(implementation_key(855)) VARIANT_BOOL Style::GetShrinkToFit ( );
__declspec(implementation_key(856)) void Style::PutShrinkToFit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(857)) _bstr_t Style::GetValue ( );
__declspec(implementation_key(858)) enum XlVAlign Style::GetVerticalAlignment ( );
__declspec(implementation_key(859)) void Style::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(860)) VARIANT_BOOL Style::GetWrapText ( );
__declspec(implementation_key(861)) void Style::PutWrapText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(862)) _bstr_t Style::Get_Default ( );
__declspec(implementation_key(863)) long Style::GetReadingOrder ( );
__declspec(implementation_key(864)) void Style::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(865)) _ApplicationPtr Styles::GetApplication ( );
__declspec(implementation_key(866)) enum XlCreator Styles::GetCreator ( );
__declspec(implementation_key(867)) IDispatchPtr Styles::GetParent ( );
__declspec(implementation_key(868)) StylePtr Styles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(869)) long Styles::GetCount ( );
__declspec(implementation_key(870)) StylePtr Styles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(871)) _variant_t Styles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(872)) IUnknownPtr Styles::Get_NewEnum ( );
__declspec(implementation_key(873)) StylePtr Styles::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(874)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(875)) enum XlCreator Borders::GetCreator ( );
__declspec(implementation_key(876)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(877)) _variant_t Borders::GetColor ( );
__declspec(implementation_key(878)) void Borders::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(879)) _variant_t Borders::GetColorIndex ( );
__declspec(implementation_key(880)) void Borders::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(881)) long Borders::GetCount ( );
__declspec(implementation_key(882)) BorderPtr Borders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(883)) _variant_t Borders::GetLineStyle ( );
__declspec(implementation_key(884)) void Borders::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(885)) IUnknownPtr Borders::Get_NewEnum ( );
__declspec(implementation_key(886)) _variant_t Borders::GetValue ( );
__declspec(implementation_key(887)) void Borders::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(888)) _variant_t Borders::GetWeight ( );
__declspec(implementation_key(889)) void Borders::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(890)) BorderPtr Borders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(891)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(892)) enum XlCreator AddIn::GetCreator ( );
__declspec(implementation_key(893)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(894)) _bstr_t AddIn::GetAuthor ( );
__declspec(implementation_key(895)) _bstr_t AddIn::GetComments ( );
__declspec(implementation_key(896)) _bstr_t AddIn::GetFullName ( );
__declspec(implementation_key(897)) VARIANT_BOOL AddIn::GetInstalled ( );
__declspec(implementation_key(898)) void AddIn::PutInstalled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(899)) _bstr_t AddIn::GetKeywords ( );
__declspec(implementation_key(900)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(901)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(902)) _bstr_t AddIn::GetSubject ( );
__declspec(implementation_key(903)) _bstr_t AddIn::GetTitle ( );
__declspec(implementation_key(904)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(905)) enum XlCreator AddIns::GetCreator ( );
__declspec(implementation_key(906)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(907)) AddInPtr AddIns::Add ( _bstr_t Filename, const _variant_t & ExcelCopyFile );
__declspec(implementation_key(908)) long AddIns::GetCount ( );
__declspec(implementation_key(909)) AddInPtr AddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(910)) IUnknownPtr AddIns::Get_NewEnum ( );
__declspec(implementation_key(911)) AddInPtr AddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(912)) _ApplicationPtr Toolbar::GetApplication ( );
__declspec(implementation_key(913)) enum XlCreator Toolbar::GetCreator ( );
__declspec(implementation_key(914)) IDispatchPtr Toolbar::GetParent ( );
__declspec(implementation_key(915)) VARIANT_BOOL Toolbar::GetBuiltIn ( );
__declspec(implementation_key(916)) HRESULT Toolbar::Delete ( );
__declspec(implementation_key(917)) long Toolbar::GetHeight ( );
__declspec(implementation_key(918)) void Toolbar::PutHeight ( long _arg1 );
__declspec(implementation_key(919)) long Toolbar::GetLeft ( );
__declspec(implementation_key(920)) void Toolbar::PutLeft ( long _arg1 );
__declspec(implementation_key(921)) _bstr_t Toolbar::GetName ( );
__declspec(implementation_key(922)) long Toolbar::GetPosition ( );
__declspec(implementation_key(923)) void Toolbar::PutPosition ( long _arg1 );
__declspec(implementation_key(924)) enum XlToolbarProtection Toolbar::GetProtection ( );
__declspec(implementation_key(925)) void Toolbar::PutProtection ( enum XlToolbarProtection _arg1 );
__declspec(implementation_key(926)) HRESULT Toolbar::Reset ( );
__declspec(implementation_key(927)) ToolbarButtonsPtr Toolbar::GetToolbarButtons ( );
__declspec(implementation_key(928)) long Toolbar::GetTop ( );
__declspec(implementation_key(929)) void Toolbar::PutTop ( long _arg1 );
__declspec(implementation_key(930)) VARIANT_BOOL Toolbar::GetVisible ( );
__declspec(implementation_key(931)) void Toolbar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(932)) long Toolbar::GetWidth ( );
__declspec(implementation_key(933)) void Toolbar::PutWidth ( long _arg1 );
__declspec(implementation_key(934)) _ApplicationPtr Toolbars::GetApplication ( );
__declspec(implementation_key(935)) enum XlCreator Toolbars::GetCreator ( );
__declspec(implementation_key(936)) IDispatchPtr Toolbars::GetParent ( );
__declspec(implementation_key(937)) ToolbarPtr Toolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(938)) long Toolbars::GetCount ( );
__declspec(implementation_key(939)) ToolbarPtr Toolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(940)) ToolbarPtr Toolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(941)) IUnknownPtr Toolbars::Get_NewEnum ( );
__declspec(implementation_key(942)) _ApplicationPtr ToolbarButton::GetApplication ( );
__declspec(implementation_key(943)) enum XlCreator ToolbarButton::GetCreator ( );
__declspec(implementation_key(944)) IDispatchPtr ToolbarButton::GetParent ( );
__declspec(implementation_key(945)) VARIANT_BOOL ToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(946)) VARIANT_BOOL ToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(947)) void ToolbarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(948)) HRESULT ToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(949)) HRESULT ToolbarButton::CopyFace ( );
__declspec(implementation_key(950)) HRESULT ToolbarButton::Delete ( );
__declspec(implementation_key(951)) HRESULT ToolbarButton::Edit ( );
__declspec(implementation_key(952)) VARIANT_BOOL ToolbarButton::GetEnabled ( );
__declspec(implementation_key(953)) void ToolbarButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(954)) long ToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(955)) void ToolbarButton::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(956)) _bstr_t ToolbarButton::GetHelpFile ( );
__declspec(implementation_key(957)) void ToolbarButton::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(958)) long ToolbarButton::GetID ( );
__declspec(implementation_key(959)) VARIANT_BOOL ToolbarButton::GetIsGap ( );
__declspec(implementation_key(960)) HRESULT ToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(961)) _bstr_t ToolbarButton::GetName ( );
__declspec(implementation_key(962)) void ToolbarButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(963)) _bstr_t ToolbarButton::GetOnAction ( );
__declspec(implementation_key(964)) void ToolbarButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(965)) HRESULT ToolbarButton::PasteFace ( );
__declspec(implementation_key(966)) VARIANT_BOOL ToolbarButton::GetPushed ( );
__declspec(implementation_key(967)) void ToolbarButton::PutPushed ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(968)) HRESULT ToolbarButton::Reset ( );
__declspec(implementation_key(969)) _bstr_t ToolbarButton::GetStatusBar ( );
__declspec(implementation_key(970)) void ToolbarButton::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(971)) long ToolbarButton::GetWidth ( );
__declspec(implementation_key(972)) void ToolbarButton::PutWidth ( long _arg1 );
__declspec(implementation_key(973)) _ApplicationPtr ToolbarButtons::GetApplication ( );
__declspec(implementation_key(974)) enum XlCreator ToolbarButtons::GetCreator ( );
__declspec(implementation_key(975)) IDispatchPtr ToolbarButtons::GetParent ( );
__declspec(implementation_key(976)) ToolbarButtonPtr ToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(977)) long ToolbarButtons::GetCount ( );
__declspec(implementation_key(978)) ToolbarButtonPtr ToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(979)) IUnknownPtr ToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(980)) ToolbarButtonPtr ToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(981)) _ApplicationPtr Areas::GetApplication ( );
__declspec(implementation_key(982)) enum XlCreator Areas::GetCreator ( );
__declspec(implementation_key(983)) IDispatchPtr Areas::GetParent ( );
__declspec(implementation_key(984)) long Areas::GetCount ( );
__declspec(implementation_key(985)) RangePtr Areas::GetItem ( long Index );
__declspec(implementation_key(986)) IUnknownPtr Areas::Get_NewEnum ( );
__declspec(implementation_key(987)) RangePtr Areas::Get_Default ( long Index );
__declspec(implementation_key(988)) HRESULT WorkbookEvents::Open ( );
__declspec(implementation_key(989)) HRESULT WorkbookEvents::Activate ( );
__declspec(implementation_key(990)) HRESULT WorkbookEvents::Deactivate ( );
__declspec(implementation_key(991)) HRESULT WorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(992)) HRESULT WorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(993)) HRESULT WorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(994)) HRESULT WorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(995)) HRESULT WorkbookEvents::AddinInstall ( );
__declspec(implementation_key(996)) HRESULT WorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(997)) HRESULT WorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(998)) HRESULT WorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(999)) HRESULT WorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(1000)) HRESULT WorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1001)) HRESULT WorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1002)) HRESULT WorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1003)) HRESULT WorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(1004)) HRESULT WorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(1005)) HRESULT WorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(1006)) HRESULT WorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1007)) HRESULT WorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(1008)) _ApplicationPtr MenuBars::GetApplication ( );
__declspec(implementation_key(1009)) enum XlCreator MenuBars::GetCreator ( );
__declspec(implementation_key(1010)) IDispatchPtr MenuBars::GetParent ( );
__declspec(implementation_key(1011)) MenuBarPtr MenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(1012)) long MenuBars::GetCount ( );
__declspec(implementation_key(1013)) MenuBarPtr MenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1014)) MenuBarPtr MenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1015)) IUnknownPtr MenuBars::Get_NewEnum ( );
__declspec(implementation_key(1016)) _ApplicationPtr MenuBar::GetApplication ( );
__declspec(implementation_key(1017)) enum XlCreator MenuBar::GetCreator ( );
__declspec(implementation_key(1018)) IDispatchPtr MenuBar::GetParent ( );
__declspec(implementation_key(1019)) HRESULT MenuBar::Activate ( );
__declspec(implementation_key(1020)) VARIANT_BOOL MenuBar::GetBuiltIn ( );
__declspec(implementation_key(1021)) _bstr_t MenuBar::GetCaption ( );
__declspec(implementation_key(1022)) void MenuBar::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1023)) HRESULT MenuBar::Delete ( );
__declspec(implementation_key(1024)) long MenuBar::GetIndex ( );
__declspec(implementation_key(1025)) MenusPtr MenuBar::GetMenus ( );
__declspec(implementation_key(1026)) HRESULT MenuBar::Reset ( );
__declspec(implementation_key(1027)) _ApplicationPtr Menus::GetApplication ( );
__declspec(implementation_key(1028)) enum XlCreator Menus::GetCreator ( );
__declspec(implementation_key(1029)) IDispatchPtr Menus::GetParent ( );
__declspec(implementation_key(1030)) MenuPtr Menus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(1031)) long Menus::GetCount ( );
__declspec(implementation_key(1032)) MenuPtr Menus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1033)) MenuPtr Menus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1034)) IUnknownPtr Menus::Get_NewEnum ( );
__declspec(implementation_key(1035)) _ApplicationPtr Menu::GetApplication ( );
__declspec(implementation_key(1036)) enum XlCreator Menu::GetCreator ( );
__declspec(implementation_key(1037)) IDispatchPtr Menu::GetParent ( );
__declspec(implementation_key(1038)) _bstr_t Menu::GetCaption ( );
__declspec(implementation_key(1039)) void Menu::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1040)) HRESULT Menu::Delete ( );
__declspec(implementation_key(1041)) VARIANT_BOOL Menu::GetEnabled ( );
__declspec(implementation_key(1042)) void Menu::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1043)) long Menu::GetIndex ( );
__declspec(implementation_key(1044)) MenuItemsPtr Menu::GetMenuItems ( );
__declspec(implementation_key(1045)) _ApplicationPtr MenuItems::GetApplication ( );
__declspec(implementation_key(1046)) enum XlCreator MenuItems::GetCreator ( );
__declspec(implementation_key(1047)) IDispatchPtr MenuItems::GetParent ( );
__declspec(implementation_key(1048)) MenuItemPtr MenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(1049)) MenuPtr MenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(1050)) long MenuItems::GetCount ( );
__declspec(implementation_key(1051)) IDispatchPtr MenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1052)) IDispatchPtr MenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1053)) IUnknownPtr MenuItems::Get_NewEnum ( );
__declspec(implementation_key(1054)) _ApplicationPtr MenuItem::GetApplication ( );
__declspec(implementation_key(1055)) enum XlCreator MenuItem::GetCreator ( );
__declspec(implementation_key(1056)) IDispatchPtr MenuItem::GetParent ( );
__declspec(implementation_key(1057)) _bstr_t MenuItem::GetCaption ( );
__declspec(implementation_key(1058)) void MenuItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1059)) VARIANT_BOOL MenuItem::GetChecked ( );
__declspec(implementation_key(1060)) void MenuItem::PutChecked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1061)) HRESULT MenuItem::Delete ( );
__declspec(implementation_key(1062)) VARIANT_BOOL MenuItem::GetEnabled ( );
__declspec(implementation_key(1063)) void MenuItem::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1064)) long MenuItem::GetHelpContextID ( );
__declspec(implementation_key(1065)) void MenuItem::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(1066)) _bstr_t MenuItem::GetHelpFile ( );
__declspec(implementation_key(1067)) void MenuItem::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(1068)) long MenuItem::GetIndex ( );
__declspec(implementation_key(1069)) _bstr_t MenuItem::GetOnAction ( );
__declspec(implementation_key(1070)) void MenuItem::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1071)) _bstr_t MenuItem::GetStatusBar ( );
__declspec(implementation_key(1072)) void MenuItem::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(1073)) _ApplicationPtr Charts::GetApplication ( );
__declspec(implementation_key(1074)) enum XlCreator Charts::GetCreator ( );
__declspec(implementation_key(1075)) IDispatchPtr Charts::GetParent ( );
__declspec(implementation_key(1076)) _ChartPtr Charts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(1077)) HRESULT Charts::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(1078)) long Charts::GetCount ( );
__declspec(implementation_key(1079)) HRESULT Charts::Delete ( );
__declspec(implementation_key(1080)) IDispatchPtr Charts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1081)) HRESULT Charts::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(1082)) IUnknownPtr Charts::Get_NewEnum ( );
__declspec(implementation_key(1083)) HRESULT Charts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(1084)) HRESULT Charts::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(1085)) HRESULT Charts::Select ( const _variant_t & Replace );
__declspec(implementation_key(1086)) HPageBreaksPtr Charts::GetHPageBreaks ( );
__declspec(implementation_key(1087)) VPageBreaksPtr Charts::GetVPageBreaks ( );
__declspec(implementation_key(1088)) _variant_t Charts::GetVisible ( );
__declspec(implementation_key(1089)) void Charts::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(1090)) IDispatchPtr Charts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1091)) HRESULT Charts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(1092)) _ApplicationPtr DrawingObjects::GetApplication ( );
__declspec(implementation_key(1093)) enum XlCreator DrawingObjects::GetCreator ( );
__declspec(implementation_key(1094)) IDispatchPtr DrawingObjects::GetParent ( );
__declspec(implementation_key(1095)) _variant_t DrawingObjects::BringToFront ( );
__declspec(implementation_key(1096)) _variant_t DrawingObjects::Copy ( );
__declspec(implementation_key(1097)) _variant_t DrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1098)) _variant_t DrawingObjects::Cut ( );
__declspec(implementation_key(1099)) _variant_t DrawingObjects::Delete ( );
__declspec(implementation_key(1100)) IDispatchPtr DrawingObjects::Duplicate ( );
__declspec(implementation_key(1101)) VARIANT_BOOL DrawingObjects::GetEnabled ( );
__declspec(implementation_key(1102)) void DrawingObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1103)) double DrawingObjects::GetHeight ( );
__declspec(implementation_key(1104)) void DrawingObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(1105)) double DrawingObjects::GetLeft ( );
__declspec(implementation_key(1106)) void DrawingObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(1107)) VARIANT_BOOL DrawingObjects::GetLocked ( );
__declspec(implementation_key(1108)) void DrawingObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1109)) _bstr_t DrawingObjects::GetOnAction ( );
__declspec(implementation_key(1110)) void DrawingObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1111)) _variant_t DrawingObjects::GetPlacement ( );
__declspec(implementation_key(1112)) void DrawingObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1113)) VARIANT_BOOL DrawingObjects::GetPrintObject ( );
__declspec(implementation_key(1114)) void DrawingObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1115)) _variant_t DrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(1116)) _variant_t DrawingObjects::SendToBack ( );
__declspec(implementation_key(1117)) double DrawingObjects::GetTop ( );
__declspec(implementation_key(1118)) void DrawingObjects::PutTop ( double _arg1 );
__declspec(implementation_key(1119)) VARIANT_BOOL DrawingObjects::GetVisible ( );
__declspec(implementation_key(1120)) void DrawingObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1121)) double DrawingObjects::GetWidth ( );
__declspec(implementation_key(1122)) void DrawingObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(1123)) long DrawingObjects::GetZOrder ( );
__declspec(implementation_key(1124)) ShapeRangePtr DrawingObjects::GetShapeRange ( );
__declspec(implementation_key(1125)) _variant_t DrawingObjects::GetAccelerator ( );
__declspec(implementation_key(1126)) void DrawingObjects::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1127)) VARIANT_BOOL DrawingObjects::GetAddIndent ( );
__declspec(implementation_key(1128)) void DrawingObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1129)) _variant_t DrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(1130)) _variant_t DrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(1131)) void DrawingObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(1132)) _variant_t DrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(1133)) void DrawingObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(1134)) _variant_t DrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(1135)) void DrawingObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(1136)) VARIANT_BOOL DrawingObjects::GetAutoSize ( );
__declspec(implementation_key(1137)) void DrawingObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1138)) BorderPtr DrawingObjects::GetBorder ( );
__declspec(implementation_key(1139)) VARIANT_BOOL DrawingObjects::GetCancelButton ( );
__declspec(implementation_key(1140)) void DrawingObjects::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1141)) _bstr_t DrawingObjects::GetCaption ( );
__declspec(implementation_key(1142)) void DrawingObjects::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1143)) CharactersPtr DrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1144)) _variant_t DrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1145)) long DrawingObjects::Get_Default ( );
__declspec(implementation_key(1146)) void DrawingObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(1147)) VARIANT_BOOL DrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(1148)) void DrawingObjects::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1149)) VARIANT_BOOL DrawingObjects::GetDismissButton ( );
__declspec(implementation_key(1150)) void DrawingObjects::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1151)) VARIANT_BOOL DrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(1152)) void DrawingObjects::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1153)) VARIANT_BOOL DrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(1154)) void DrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1155)) long DrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(1156)) void DrawingObjects::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(1157)) FontPtr DrawingObjects::GetFont ( );
__declspec(implementation_key(1158)) VARIANT_BOOL DrawingObjects::GetHelpButton ( );
__declspec(implementation_key(1159)) void DrawingObjects::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1160)) _variant_t DrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(1161)) void DrawingObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1162)) long DrawingObjects::GetInputType ( );
__declspec(implementation_key(1163)) void DrawingObjects::PutInputType ( long _arg1 );
__declspec(implementation_key(1164)) InteriorPtr DrawingObjects::GetInterior ( );
__declspec(implementation_key(1165)) long DrawingObjects::GetLargeChange ( );
__declspec(implementation_key(1166)) void DrawingObjects::PutLargeChange ( long _arg1 );
__declspec(implementation_key(1167)) _bstr_t DrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(1168)) void DrawingObjects::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1169)) _variant_t DrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(1170)) _bstr_t DrawingObjects::GetListFillRange ( );
__declspec(implementation_key(1171)) void DrawingObjects::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(1172)) long DrawingObjects::GetListIndex ( );
__declspec(implementation_key(1173)) void DrawingObjects::PutListIndex ( long _arg1 );
__declspec(implementation_key(1174)) VARIANT_BOOL DrawingObjects::GetLockedText ( );
__declspec(implementation_key(1175)) void DrawingObjects::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1176)) long DrawingObjects::GetMax ( );
__declspec(implementation_key(1177)) void DrawingObjects::PutMax ( long _arg1 );
__declspec(implementation_key(1178)) long DrawingObjects::GetMin ( );
__declspec(implementation_key(1179)) void DrawingObjects::PutMin ( long _arg1 );
__declspec(implementation_key(1180)) VARIANT_BOOL DrawingObjects::GetMultiLine ( );
__declspec(implementation_key(1181)) void DrawingObjects::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1182)) VARIANT_BOOL DrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(1183)) void DrawingObjects::PutMultiSelect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1184)) _variant_t DrawingObjects::GetOrientation ( );
__declspec(implementation_key(1185)) void DrawingObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1186)) _variant_t DrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(1187)) void DrawingObjects::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1188)) _variant_t DrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(1189)) _variant_t DrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(1190)) _variant_t DrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(1191)) VARIANT_BOOL DrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(1192)) void DrawingObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1193)) _variant_t DrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(1194)) VARIANT_BOOL DrawingObjects::GetShadow ( );
__declspec(implementation_key(1195)) void DrawingObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1196)) long DrawingObjects::GetSmallChange ( );
__declspec(implementation_key(1197)) void DrawingObjects::PutSmallChange ( long _arg1 );
__declspec(implementation_key(1198)) _bstr_t DrawingObjects::GetText ( );
__declspec(implementation_key(1199)) void DrawingObjects::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1200)) IDispatchPtr DrawingObjects::Ungroup ( );
__declspec(implementation_key(1201)) long DrawingObjects::GetValue ( );
__declspec(implementation_key(1202)) void DrawingObjects::PutValue ( long _arg1 );
__declspec(implementation_key(1203)) _variant_t DrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(1204)) void DrawingObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1205)) _variant_t DrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(1206)) long DrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(1207)) void DrawingObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1208)) long DrawingObjects::GetCount ( );
__declspec(implementation_key(1209)) IDispatchPtr DrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(1210)) GroupObjectPtr DrawingObjects::Group ( );
__declspec(implementation_key(1211)) _variant_t DrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(1212)) IUnknownPtr DrawingObjects::_NewEnum ( );
__declspec(implementation_key(1213)) _ApplicationPtr PivotCache::GetApplication ( );
__declspec(implementation_key(1214)) enum XlCreator PivotCache::GetCreator ( );
__declspec(implementation_key(1215)) IDispatchPtr PivotCache::GetParent ( );
__declspec(implementation_key(1216)) VARIANT_BOOL PivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(1217)) void PivotCache::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1218)) _variant_t PivotCache::GetConnection ( );
__declspec(implementation_key(1219)) void PivotCache::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(1220)) VARIANT_BOOL PivotCache::GetEnableRefresh ( );
__declspec(implementation_key(1221)) void PivotCache::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1222)) long PivotCache::GetIndex ( );
__declspec(implementation_key(1223)) long PivotCache::GetMemoryUsed ( );
__declspec(implementation_key(1224)) VARIANT_BOOL PivotCache::GetOptimizeCache ( );
__declspec(implementation_key(1225)) void PivotCache::PutOptimizeCache ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1226)) long PivotCache::GetRecordCount ( );
__declspec(implementation_key(1227)) HRESULT PivotCache::Refresh ( );
__declspec(implementation_key(1228)) DATE PivotCache::GetRefreshDate ( );
__declspec(implementation_key(1229)) _bstr_t PivotCache::GetRefreshName ( );
__declspec(implementation_key(1230)) VARIANT_BOOL PivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(1231)) void PivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1232)) _variant_t PivotCache::GetSql ( );
__declspec(implementation_key(1233)) void PivotCache::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(1234)) VARIANT_BOOL PivotCache::GetSavePassword ( );
__declspec(implementation_key(1235)) void PivotCache::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1236)) _variant_t PivotCache::GetSourceData ( );
__declspec(implementation_key(1237)) void PivotCache::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(1238)) _variant_t PivotCache::GetCommandText ( );
__declspec(implementation_key(1239)) void PivotCache::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(1240)) enum XlCmdType PivotCache::GetCommandType ( );
__declspec(implementation_key(1241)) void PivotCache::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(1242)) enum xlQueryType PivotCache::GetQueryType ( );
__declspec(implementation_key(1243)) VARIANT_BOOL PivotCache::GetMaintainConnection ( );
__declspec(implementation_key(1244)) void PivotCache::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1245)) long PivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(1246)) void PivotCache::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(1247)) IDispatchPtr PivotCache::GetRecordset ( );
__declspec(implementation_key(1248)) void PivotCache::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(1249)) HRESULT PivotCache::ResetTimer ( );
__declspec(implementation_key(1250)) _variant_t PivotCache::GetLocalConnection ( );
__declspec(implementation_key(1251)) void PivotCache::PutLocalConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(1252)) PivotTablePtr PivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData );
__declspec(implementation_key(1253)) VARIANT_BOOL PivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(1254)) void PivotCache::PutUseLocalConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1255)) _ApplicationPtr PivotCaches::GetApplication ( );
__declspec(implementation_key(1256)) enum XlCreator PivotCaches::GetCreator ( );
__declspec(implementation_key(1257)) IDispatchPtr PivotCaches::GetParent ( );
__declspec(implementation_key(1258)) long PivotCaches::GetCount ( );
__declspec(implementation_key(1259)) PivotCachePtr PivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(1260)) PivotCachePtr PivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1261)) IUnknownPtr PivotCaches::_NewEnum ( );
__declspec(implementation_key(1262)) PivotCachePtr PivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(1263)) _ApplicationPtr PivotFormula::GetApplication ( );
__declspec(implementation_key(1264)) enum XlCreator PivotFormula::GetCreator ( );
__declspec(implementation_key(1265)) IDispatchPtr PivotFormula::GetParent ( );
__declspec(implementation_key(1266)) HRESULT PivotFormula::Delete ( );
__declspec(implementation_key(1267)) _bstr_t PivotFormula::Get_Default ( );
__declspec(implementation_key(1268)) void PivotFormula::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1269)) _bstr_t PivotFormula::GetFormula ( );
__declspec(implementation_key(1270)) void PivotFormula::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1271)) _bstr_t PivotFormula::GetValue ( );
__declspec(implementation_key(1272)) void PivotFormula::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1273)) long PivotFormula::GetIndex ( );
__declspec(implementation_key(1274)) void PivotFormula::PutIndex ( long _arg1 );
__declspec(implementation_key(1275)) _ApplicationPtr PivotFormulas::GetApplication ( );
__declspec(implementation_key(1276)) enum XlCreator PivotFormulas::GetCreator ( );
__declspec(implementation_key(1277)) IDispatchPtr PivotFormulas::GetParent ( );
__declspec(implementation_key(1278)) long PivotFormulas::GetCount ( );
__declspec(implementation_key(1279)) PivotFormulaPtr PivotFormulas::Add ( _bstr_t Formula );
__declspec(implementation_key(1280)) PivotFormulaPtr PivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(1281)) PivotFormulaPtr PivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1282)) IUnknownPtr PivotFormulas::_NewEnum ( );
__declspec(implementation_key(1283)) _ApplicationPtr PivotTable::GetApplication ( );
__declspec(implementation_key(1284)) enum XlCreator PivotTable::GetCreator ( );
__declspec(implementation_key(1285)) IDispatchPtr PivotTable::GetParent ( );
__declspec(implementation_key(1286)) _variant_t PivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(1287)) IDispatchPtr PivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(1288)) VARIANT_BOOL PivotTable::GetColumnGrand ( );
__declspec(implementation_key(1289)) void PivotTable::PutColumnGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1290)) RangePtr PivotTable::GetColumnRange ( );
__declspec(implementation_key(1291)) _variant_t PivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(1292)) RangePtr PivotTable::GetDataBodyRange ( );
__declspec(implementation_key(1293)) IDispatchPtr PivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(1294)) RangePtr PivotTable::GetDataLabelRange ( );
__declspec(implementation_key(1295)) _bstr_t PivotTable::Get_Default ( );
__declspec(implementation_key(1296)) void PivotTable::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1297)) VARIANT_BOOL PivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(1298)) void PivotTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1299)) IDispatchPtr PivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(1300)) _bstr_t PivotTable::GetInnerDetail ( );
__declspec(implementation_key(1301)) void PivotTable::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(1302)) _bstr_t PivotTable::GetName ( );
__declspec(implementation_key(1303)) void PivotTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1304)) IDispatchPtr PivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(1305)) RangePtr PivotTable::GetPageRange ( );
__declspec(implementation_key(1306)) RangePtr PivotTable::GetPageRangeCells ( );
__declspec(implementation_key(1307)) IDispatchPtr PivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(1308)) DATE PivotTable::GetRefreshDate ( );
__declspec(implementation_key(1309)) _bstr_t PivotTable::GetRefreshName ( );
__declspec(implementation_key(1310)) VARIANT_BOOL PivotTable::RefreshTable ( );
__declspec(implementation_key(1311)) IDispatchPtr PivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(1312)) VARIANT_BOOL PivotTable::GetRowGrand ( );
__declspec(implementation_key(1313)) void PivotTable::PutRowGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1314)) RangePtr PivotTable::GetRowRange ( );
__declspec(implementation_key(1315)) VARIANT_BOOL PivotTable::GetSaveData ( );
__declspec(implementation_key(1316)) void PivotTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1317)) _variant_t PivotTable::GetSourceData ( );
__declspec(implementation_key(1318)) void PivotTable::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(1319)) RangePtr PivotTable::GetTableRange1 ( );
__declspec(implementation_key(1320)) RangePtr PivotTable::GetTableRange2 ( );
__declspec(implementation_key(1321)) _bstr_t PivotTable::GetValue ( );
__declspec(implementation_key(1322)) void PivotTable::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1323)) IDispatchPtr PivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(1324)) long PivotTable::GetCacheIndex ( );
__declspec(implementation_key(1325)) void PivotTable::PutCacheIndex ( long _arg1 );
__declspec(implementation_key(1326)) CalculatedFieldsPtr PivotTable::CalculatedFields ( );
__declspec(implementation_key(1327)) VARIANT_BOOL PivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(1328)) void PivotTable::PutDisplayErrorString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1329)) VARIANT_BOOL PivotTable::GetDisplayNullString ( );
__declspec(implementation_key(1330)) void PivotTable::PutDisplayNullString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1331)) VARIANT_BOOL PivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(1332)) void PivotTable::PutEnableDrilldown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1333)) VARIANT_BOOL PivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(1334)) void PivotTable::PutEnableFieldDialog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1335)) VARIANT_BOOL PivotTable::GetEnableWizard ( );
__declspec(implementation_key(1336)) void PivotTable::PutEnableWizard ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1337)) _bstr_t PivotTable::GetErrorString ( );
__declspec(implementation_key(1338)) void PivotTable::PutErrorString ( _bstr_t _arg1 );
__declspec(implementation_key(1339)) double PivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(1340)) HRESULT PivotTable::ListFormulas ( );
__declspec(implementation_key(1341)) VARIANT_BOOL PivotTable::GetManualUpdate ( );
__declspec(implementation_key(1342)) void PivotTable::PutManualUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1343)) VARIANT_BOOL PivotTable::GetMergeLabels ( );
__declspec(implementation_key(1344)) void PivotTable::PutMergeLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1345)) _bstr_t PivotTable::GetNullString ( );
__declspec(implementation_key(1346)) void PivotTable::PutNullString ( _bstr_t _arg1 );
__declspec(implementation_key(1347)) PivotCachePtr PivotTable::PivotCache ( );
__declspec(implementation_key(1348)) PivotFormulasPtr PivotTable::GetPivotFormulas ( );
__declspec(implementation_key(1349)) HRESULT PivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(1350)) VARIANT_BOOL PivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(1351)) void PivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1352)) long PivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(1353)) void PivotTable::PutPageFieldOrder ( long _arg1 );
__declspec(implementation_key(1354)) _bstr_t PivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(1355)) void PivotTable::PutPageFieldStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1356)) long PivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(1357)) void PivotTable::PutPageFieldWrapCount ( long _arg1 );
__declspec(implementation_key(1358)) VARIANT_BOOL PivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(1359)) void PivotTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1360)) HRESULT PivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(1361)) _bstr_t PivotTable::GetPivotSelection ( );
__declspec(implementation_key(1362)) void PivotTable::PutPivotSelection ( _bstr_t _arg1 );
__declspec(implementation_key(1363)) enum XlPTSelectionMode PivotTable::GetSelectionMode ( );
__declspec(implementation_key(1364)) void PivotTable::PutSelectionMode ( enum XlPTSelectionMode _arg1 );
__declspec(implementation_key(1365)) _bstr_t PivotTable::GetTableStyle ( );
__declspec(implementation_key(1366)) void PivotTable::PutTableStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1367)) _bstr_t PivotTable::GetTag ( );
__declspec(implementation_key(1368)) void PivotTable::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(1369)) HRESULT PivotTable::Update ( );
__declspec(implementation_key(1370)) _bstr_t PivotTable::GetVacatedStyle ( );
__declspec(implementation_key(1371)) void PivotTable::PutVacatedStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1372)) HRESULT PivotTable::Format ( enum xlPivotFormatType Format );
__declspec(implementation_key(1373)) VARIANT_BOOL PivotTable::GetPrintTitles ( );
__declspec(implementation_key(1374)) void PivotTable::PutPrintTitles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1375)) CubeFieldsPtr PivotTable::GetCubeFields ( );
__declspec(implementation_key(1376)) _bstr_t PivotTable::GetGrandTotalName ( );
__declspec(implementation_key(1377)) void PivotTable::PutGrandTotalName ( _bstr_t _arg1 );
__declspec(implementation_key(1378)) VARIANT_BOOL PivotTable::GetSmallGrid ( );
__declspec(implementation_key(1379)) void PivotTable::PutSmallGrid ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1380)) VARIANT_BOOL PivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(1381)) void PivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1382)) VARIANT_BOOL PivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(1383)) void PivotTable::PutTotalsAnnotation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1384)) _ApplicationPtr PivotTables::GetApplication ( );
__declspec(implementation_key(1385)) enum XlCreator PivotTables::GetCreator ( );
__declspec(implementation_key(1386)) IDispatchPtr PivotTables::GetParent ( );
__declspec(implementation_key(1387)) long PivotTables::GetCount ( );
__declspec(implementation_key(1388)) PivotTablePtr PivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(1389)) IUnknownPtr PivotTables::_NewEnum ( );
__declspec(implementation_key(1390)) PivotTablePtr PivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData );
__declspec(implementation_key(1391)) _ApplicationPtr PivotField::GetApplication ( );
__declspec(implementation_key(1392)) enum XlCreator PivotField::GetCreator ( );
__declspec(implementation_key(1393)) IDispatchPtr PivotField::GetParent ( );
__declspec(implementation_key(1394)) enum XlPivotFieldCalculation PivotField::GetCalculation ( );
__declspec(implementation_key(1395)) void PivotField::PutCalculation ( enum XlPivotFieldCalculation _arg1 );
__declspec(implementation_key(1396)) PivotFieldPtr PivotField::GetChildField ( );
__declspec(implementation_key(1397)) _variant_t PivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(1398)) _variant_t PivotField::GetCurrentPage ( );
__declspec(implementation_key(1399)) void PivotField::PutCurrentPage ( const _variant_t & _arg1 );
__declspec(implementation_key(1400)) RangePtr PivotField::GetDataRange ( );
__declspec(implementation_key(1401)) enum XlPivotFieldDataType PivotField::GetDataType ( );
__declspec(implementation_key(1402)) _bstr_t PivotField::Get_Default ( );
__declspec(implementation_key(1403)) void PivotField::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1404)) enum XlConsolidationFunction PivotField::GetFunction ( );
__declspec(implementation_key(1405)) void PivotField::PutFunction ( enum XlConsolidationFunction _arg1 );
__declspec(implementation_key(1406)) _variant_t PivotField::GetGroupLevel ( );
__declspec(implementation_key(1407)) _variant_t PivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(1408)) RangePtr PivotField::GetLabelRange ( );
__declspec(implementation_key(1409)) _bstr_t PivotField::GetName ( );
__declspec(implementation_key(1410)) void PivotField::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1411)) _bstr_t PivotField::GetNumberFormat ( );
__declspec(implementation_key(1412)) void PivotField::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(1413)) enum XlPivotFieldOrientation PivotField::GetOrientation ( );
__declspec(implementation_key(1414)) void PivotField::PutOrientation ( enum XlPivotFieldOrientation _arg1 );
__declspec(implementation_key(1415)) VARIANT_BOOL PivotField::GetShowAllItems ( );
__declspec(implementation_key(1416)) void PivotField::PutShowAllItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1417)) PivotFieldPtr PivotField::GetParentField ( );
__declspec(implementation_key(1418)) _variant_t PivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(1419)) _variant_t PivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(1420)) _variant_t PivotField::GetPosition ( );
__declspec(implementation_key(1421)) void PivotField::PutPosition ( const _variant_t & _arg1 );
__declspec(implementation_key(1422)) _bstr_t PivotField::GetSourceName ( );
__declspec(implementation_key(1423)) _variant_t PivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(1424)) void PivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(1425)) _variant_t PivotField::GetBaseField ( );
__declspec(implementation_key(1426)) void PivotField::PutBaseField ( const _variant_t & _arg1 );
__declspec(implementation_key(1427)) _variant_t PivotField::GetBaseItem ( );
__declspec(implementation_key(1428)) void PivotField::PutBaseItem ( const _variant_t & _arg1 );
__declspec(implementation_key(1429)) _variant_t PivotField::GetTotalLevels ( );
__declspec(implementation_key(1430)) _bstr_t PivotField::GetValue ( );
__declspec(implementation_key(1431)) void PivotField::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1432)) _variant_t PivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(1433)) CalculatedItemsPtr PivotField::CalculatedItems ( );
__declspec(implementation_key(1434)) HRESULT PivotField::Delete ( );
__declspec(implementation_key(1435)) VARIANT_BOOL PivotField::GetDragToColumn ( );
__declspec(implementation_key(1436)) void PivotField::PutDragToColumn ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1437)) VARIANT_BOOL PivotField::GetDragToHide ( );
__declspec(implementation_key(1438)) void PivotField::PutDragToHide ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1439)) VARIANT_BOOL PivotField::GetDragToPage ( );
__declspec(implementation_key(1440)) void PivotField::PutDragToPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1441)) VARIANT_BOOL PivotField::GetDragToRow ( );
__declspec(implementation_key(1442)) void PivotField::PutDragToRow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1443)) VARIANT_BOOL PivotField::GetDragToData ( );
__declspec(implementation_key(1444)) void PivotField::PutDragToData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1445)) _bstr_t PivotField::GetFormula ( );
__declspec(implementation_key(1446)) void PivotField::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1447)) VARIANT_BOOL PivotField::GetIsCalculated ( );
__declspec(implementation_key(1448)) long PivotField::GetMemoryUsed ( );
__declspec(implementation_key(1449)) VARIANT_BOOL PivotField::GetServerBased ( );
__declspec(implementation_key(1450)) void PivotField::PutServerBased ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1451)) HRESULT PivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(1452)) HRESULT PivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(1453)) long PivotField::GetAutoSortOrder ( );
__declspec(implementation_key(1454)) _bstr_t PivotField::GetAutoSortField ( );
__declspec(implementation_key(1455)) long PivotField::GetAutoShowType ( );
__declspec(implementation_key(1456)) long PivotField::GetAutoShowRange ( );
__declspec(implementation_key(1457)) long PivotField::GetAutoShowCount ( );
__declspec(implementation_key(1458)) _bstr_t PivotField::GetAutoShowField ( );
__declspec(implementation_key(1459)) VARIANT_BOOL PivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(1460)) void PivotField::PutLayoutBlankLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1461)) enum xLSubtototalLocationType PivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(1462)) void PivotField::PutLayoutSubtotalLocation ( enum xLSubtototalLocationType _arg1 );
__declspec(implementation_key(1463)) VARIANT_BOOL PivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(1464)) void PivotField::PutLayoutPageBreak ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1465)) enum XlLayoutFormType PivotField::GetLayoutForm ( );
__declspec(implementation_key(1466)) void PivotField::PutLayoutForm ( enum XlLayoutFormType _arg1 );
__declspec(implementation_key(1467)) _bstr_t PivotField::GetSubtotalName ( );
__declspec(implementation_key(1468)) void PivotField::PutSubtotalName ( _bstr_t _arg1 );
__declspec(implementation_key(1469)) _bstr_t PivotField::GetCaption ( );
__declspec(implementation_key(1470)) void PivotField::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1471)) VARIANT_BOOL PivotField::GetDrilledDown ( );
__declspec(implementation_key(1472)) void PivotField::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1473)) CubeFieldPtr PivotField::GetCubeField ( );
__declspec(implementation_key(1474)) _bstr_t PivotField::GetCurrentPageName ( );
__declspec(implementation_key(1475)) void PivotField::PutCurrentPageName ( _bstr_t _arg1 );
__declspec(implementation_key(1476)) _ApplicationPtr PivotFields::GetApplication ( );
__declspec(implementation_key(1477)) enum XlCreator PivotFields::GetCreator ( );
__declspec(implementation_key(1478)) PivotTablePtr PivotFields::GetParent ( );
__declspec(implementation_key(1479)) long PivotFields::GetCount ( );
__declspec(implementation_key(1480)) IDispatchPtr PivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(1481)) IUnknownPtr PivotFields::_NewEnum ( );
__declspec(implementation_key(1482)) _ApplicationPtr CalculatedFields::GetApplication ( );
__declspec(implementation_key(1483)) enum XlCreator CalculatedFields::GetCreator ( );
__declspec(implementation_key(1484)) IDispatchPtr CalculatedFields::GetParent ( );
__declspec(implementation_key(1485)) long CalculatedFields::GetCount ( );
__declspec(implementation_key(1486)) PivotFieldPtr CalculatedFields::Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(1487)) PivotFieldPtr CalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(1488)) PivotFieldPtr CalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(1489)) IUnknownPtr CalculatedFields::_NewEnum ( );
__declspec(implementation_key(1490)) _ApplicationPtr PivotItem::GetApplication ( );
__declspec(implementation_key(1491)) enum XlCreator PivotItem::GetCreator ( );
__declspec(implementation_key(1492)) PivotFieldPtr PivotItem::GetParent ( );
__declspec(implementation_key(1493)) _variant_t PivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(1494)) RangePtr PivotItem::GetDataRange ( );
__declspec(implementation_key(1495)) _bstr_t PivotItem::Get_Default ( );
__declspec(implementation_key(1496)) void PivotItem::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1497)) RangePtr PivotItem::GetLabelRange ( );
__declspec(implementation_key(1498)) _bstr_t PivotItem::GetName ( );
__declspec(implementation_key(1499)) void PivotItem::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1500)) PivotItemPtr PivotItem::GetParentItem ( );
__declspec(implementation_key(1501)) VARIANT_BOOL PivotItem::GetParentShowDetail ( );
__declspec(implementation_key(1502)) long PivotItem::GetPosition ( );
__declspec(implementation_key(1503)) void PivotItem::PutPosition ( long _arg1 );
__declspec(implementation_key(1504)) VARIANT_BOOL PivotItem::GetShowDetail ( );
__declspec(implementation_key(1505)) void PivotItem::PutShowDetail ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1506)) _variant_t PivotItem::GetSourceName ( );
__declspec(implementation_key(1507)) _bstr_t PivotItem::GetValue ( );
__declspec(implementation_key(1508)) void PivotItem::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1509)) VARIANT_BOOL PivotItem::GetVisible ( );
__declspec(implementation_key(1510)) void PivotItem::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1511)) HRESULT PivotItem::Delete ( );
__declspec(implementation_key(1512)) VARIANT_BOOL PivotItem::GetIsCalculated ( );
__declspec(implementation_key(1513)) long PivotItem::GetRecordCount ( );
__declspec(implementation_key(1514)) _bstr_t PivotItem::GetFormula ( );
__declspec(implementation_key(1515)) void PivotItem::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1516)) _bstr_t PivotItem::GetCaption ( );
__declspec(implementation_key(1517)) void PivotItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1518)) VARIANT_BOOL PivotItem::GetDrilledDown ( );
__declspec(implementation_key(1519)) void PivotItem::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1520)) _ApplicationPtr PivotItems::GetApplication ( );
__declspec(implementation_key(1521)) enum XlCreator PivotItems::GetCreator ( );
__declspec(implementation_key(1522)) PivotFieldPtr PivotItems::GetParent ( );
__declspec(implementation_key(1523)) HRESULT PivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(1524)) long PivotItems::GetCount ( );
__declspec(implementation_key(1525)) IDispatchPtr PivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(1526)) IUnknownPtr PivotItems::_NewEnum ( );
__declspec(implementation_key(1527)) _ApplicationPtr CalculatedItems::GetApplication ( );
__declspec(implementation_key(1528)) enum XlCreator CalculatedItems::GetCreator ( );
__declspec(implementation_key(1529)) IDispatchPtr CalculatedItems::GetParent ( );
__declspec(implementation_key(1530)) long CalculatedItems::GetCount ( );
__declspec(implementation_key(1531)) PivotItemPtr CalculatedItems::Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(1532)) PivotItemPtr CalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(1533)) PivotItemPtr CalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(1534)) IUnknownPtr CalculatedItems::_NewEnum ( );
__declspec(implementation_key(1535)) _ApplicationPtr Characters::GetApplication ( );
__declspec(implementation_key(1536)) enum XlCreator Characters::GetCreator ( );
__declspec(implementation_key(1537)) IDispatchPtr Characters::GetParent ( );
__declspec(implementation_key(1538)) _bstr_t Characters::GetCaption ( );
__declspec(implementation_key(1539)) void Characters::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1540)) long Characters::GetCount ( );
__declspec(implementation_key(1541)) _variant_t Characters::Delete ( );
__declspec(implementation_key(1542)) FontPtr Characters::GetFont ( );
__declspec(implementation_key(1543)) _variant_t Characters::Insert ( _bstr_t String );
__declspec(implementation_key(1544)) _bstr_t Characters::GetText ( );
__declspec(implementation_key(1545)) void Characters::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1546)) _bstr_t Characters::GetPhoneticCharacters ( );
__declspec(implementation_key(1547)) void Characters::PutPhoneticCharacters ( _bstr_t _arg1 );
__declspec(implementation_key(1548)) _ApplicationPtr Dialogs::GetApplication ( );
__declspec(implementation_key(1549)) enum XlCreator Dialogs::GetCreator ( );
__declspec(implementation_key(1550)) IDispatchPtr Dialogs::GetParent ( );
__declspec(implementation_key(1551)) long Dialogs::GetCount ( );
__declspec(implementation_key(1552)) DialogPtr Dialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(1553)) DialogPtr Dialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(1554)) IUnknownPtr Dialogs::Get_NewEnum ( );
__declspec(implementation_key(1555)) _ApplicationPtr Dialog::GetApplication ( );
__declspec(implementation_key(1556)) enum XlCreator Dialog::GetCreator ( );
__declspec(implementation_key(1557)) IDispatchPtr Dialog::GetParent ( );
__declspec(implementation_key(1558)) VARIANT_BOOL Dialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(1559)) _ApplicationPtr SoundNote::GetApplication ( );
__declspec(implementation_key(1560)) enum XlCreator SoundNote::GetCreator ( );
__declspec(implementation_key(1561)) IDispatchPtr SoundNote::GetParent ( );
__declspec(implementation_key(1562)) _variant_t SoundNote::Delete ( );
__declspec(implementation_key(1563)) _variant_t SoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(1564)) _variant_t SoundNote::Play ( );
__declspec(implementation_key(1565)) _variant_t SoundNote::Record ( );
__declspec(implementation_key(1566)) _ApplicationPtr Button::GetApplication ( );
__declspec(implementation_key(1567)) enum XlCreator Button::GetCreator ( );
__declspec(implementation_key(1568)) IDispatchPtr Button::GetParent ( );
__declspec(implementation_key(1569)) RangePtr Button::GetBottomRightCell ( );
__declspec(implementation_key(1570)) _variant_t Button::BringToFront ( );
__declspec(implementation_key(1571)) _variant_t Button::Copy ( );
__declspec(implementation_key(1572)) _variant_t Button::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1573)) _variant_t Button::Cut ( );
__declspec(implementation_key(1574)) _variant_t Button::Delete ( );
__declspec(implementation_key(1575)) IDispatchPtr Button::Duplicate ( );
__declspec(implementation_key(1576)) VARIANT_BOOL Button::GetEnabled ( );
__declspec(implementation_key(1577)) void Button::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1578)) double Button::GetHeight ( );
__declspec(implementation_key(1579)) void Button::PutHeight ( double _arg1 );
__declspec(implementation_key(1580)) long Button::GetIndex ( );
__declspec(implementation_key(1581)) double Button::GetLeft ( );
__declspec(implementation_key(1582)) void Button::PutLeft ( double _arg1 );
__declspec(implementation_key(1583)) VARIANT_BOOL Button::GetLocked ( );
__declspec(implementation_key(1584)) void Button::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1585)) _bstr_t Button::GetName ( );
__declspec(implementation_key(1586)) void Button::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1587)) _bstr_t Button::GetOnAction ( );
__declspec(implementation_key(1588)) void Button::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1589)) _variant_t Button::GetPlacement ( );
__declspec(implementation_key(1590)) void Button::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1591)) VARIANT_BOOL Button::GetPrintObject ( );
__declspec(implementation_key(1592)) void Button::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1593)) _variant_t Button::Select ( const _variant_t & Replace );
__declspec(implementation_key(1594)) _variant_t Button::SendToBack ( );
__declspec(implementation_key(1595)) double Button::GetTop ( );
__declspec(implementation_key(1596)) void Button::PutTop ( double _arg1 );
__declspec(implementation_key(1597)) RangePtr Button::GetTopLeftCell ( );
__declspec(implementation_key(1598)) VARIANT_BOOL Button::GetVisible ( );
__declspec(implementation_key(1599)) void Button::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1600)) double Button::GetWidth ( );
__declspec(implementation_key(1601)) void Button::PutWidth ( double _arg1 );
__declspec(implementation_key(1602)) long Button::GetZOrder ( );
__declspec(implementation_key(1603)) ShapeRangePtr Button::GetShapeRange ( );
__declspec(implementation_key(1604)) VARIANT_BOOL Button::GetAddIndent ( );
__declspec(implementation_key(1605)) void Button::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1606)) _variant_t Button::GetAutoScaleFont ( );
__declspec(implementation_key(1607)) void Button::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(1608)) VARIANT_BOOL Button::GetAutoSize ( );
__declspec(implementation_key(1609)) void Button::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1610)) _bstr_t Button::GetCaption ( );
__declspec(implementation_key(1611)) void Button::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1612)) CharactersPtr Button::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1613)) _variant_t Button::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1614)) FontPtr Button::GetFont ( );
__declspec(implementation_key(1615)) _bstr_t Button::GetFormula ( );
__declspec(implementation_key(1616)) void Button::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1617)) _variant_t Button::GetHorizontalAlignment ( );
__declspec(implementation_key(1618)) void Button::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1619)) VARIANT_BOOL Button::GetLockedText ( );
__declspec(implementation_key(1620)) void Button::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1621)) _variant_t Button::GetOrientation ( );
__declspec(implementation_key(1622)) void Button::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1623)) _bstr_t Button::GetText ( );
__declspec(implementation_key(1624)) void Button::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1625)) _variant_t Button::GetVerticalAlignment ( );
__declspec(implementation_key(1626)) void Button::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1627)) long Button::GetReadingOrder ( );
__declspec(implementation_key(1628)) void Button::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1629)) _variant_t Button::GetAccelerator ( );
__declspec(implementation_key(1630)) void Button::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1631)) VARIANT_BOOL Button::GetCancelButton ( );
__declspec(implementation_key(1632)) void Button::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1633)) VARIANT_BOOL Button::GetDefaultButton ( );
__declspec(implementation_key(1634)) void Button::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1635)) VARIANT_BOOL Button::GetDismissButton ( );
__declspec(implementation_key(1636)) void Button::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1637)) VARIANT_BOOL Button::GetHelpButton ( );
__declspec(implementation_key(1638)) void Button::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1639)) _variant_t Button::GetPhoneticAccelerator ( );
__declspec(implementation_key(1640)) void Button::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1641)) _ApplicationPtr Buttons::GetApplication ( );
__declspec(implementation_key(1642)) enum XlCreator Buttons::GetCreator ( );
__declspec(implementation_key(1643)) IDispatchPtr Buttons::GetParent ( );
__declspec(implementation_key(1644)) _variant_t Buttons::BringToFront ( );
__declspec(implementation_key(1645)) _variant_t Buttons::Copy ( );
__declspec(implementation_key(1646)) _variant_t Buttons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1647)) _variant_t Buttons::Cut ( );
__declspec(implementation_key(1648)) _variant_t Buttons::Delete ( );
__declspec(implementation_key(1649)) IDispatchPtr Buttons::Duplicate ( );
__declspec(implementation_key(1650)) VARIANT_BOOL Buttons::GetEnabled ( );
__declspec(implementation_key(1651)) void Buttons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1652)) double Buttons::GetHeight ( );
__declspec(implementation_key(1653)) void Buttons::PutHeight ( double _arg1 );
__declspec(implementation_key(1654)) double Buttons::GetLeft ( );
__declspec(implementation_key(1655)) void Buttons::PutLeft ( double _arg1 );
__declspec(implementation_key(1656)) VARIANT_BOOL Buttons::GetLocked ( );
__declspec(implementation_key(1657)) void Buttons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1658)) _bstr_t Buttons::GetOnAction ( );
__declspec(implementation_key(1659)) void Buttons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1660)) _variant_t Buttons::GetPlacement ( );
__declspec(implementation_key(1661)) void Buttons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1662)) VARIANT_BOOL Buttons::GetPrintObject ( );
__declspec(implementation_key(1663)) void Buttons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1664)) _variant_t Buttons::Select ( const _variant_t & Replace );
__declspec(implementation_key(1665)) _variant_t Buttons::SendToBack ( );
__declspec(implementation_key(1666)) double Buttons::GetTop ( );
__declspec(implementation_key(1667)) void Buttons::PutTop ( double _arg1 );
__declspec(implementation_key(1668)) VARIANT_BOOL Buttons::GetVisible ( );
__declspec(implementation_key(1669)) void Buttons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1670)) double Buttons::GetWidth ( );
__declspec(implementation_key(1671)) void Buttons::PutWidth ( double _arg1 );
__declspec(implementation_key(1672)) long Buttons::GetZOrder ( );
__declspec(implementation_key(1673)) ShapeRangePtr Buttons::GetShapeRange ( );
__declspec(implementation_key(1674)) VARIANT_BOOL Buttons::GetAddIndent ( );
__declspec(implementation_key(1675)) void Buttons::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1676)) _variant_t Buttons::GetAutoScaleFont ( );
__declspec(implementation_key(1677)) void Buttons::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(1678)) VARIANT_BOOL Buttons::GetAutoSize ( );
__declspec(implementation_key(1679)) void Buttons::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1680)) _bstr_t Buttons::GetCaption ( );
__declspec(implementation_key(1681)) void Buttons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1682)) CharactersPtr Buttons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1683)) _variant_t Buttons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1684)) FontPtr Buttons::GetFont ( );
__declspec(implementation_key(1685)) _bstr_t Buttons::GetFormula ( );
__declspec(implementation_key(1686)) void Buttons::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1687)) _variant_t Buttons::GetHorizontalAlignment ( );
__declspec(implementation_key(1688)) void Buttons::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1689)) VARIANT_BOOL Buttons::GetLockedText ( );
__declspec(implementation_key(1690)) void Buttons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1691)) _variant_t Buttons::GetOrientation ( );
__declspec(implementation_key(1692)) void Buttons::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1693)) _bstr_t Buttons::GetText ( );
__declspec(implementation_key(1694)) void Buttons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1695)) _variant_t Buttons::GetVerticalAlignment ( );
__declspec(implementation_key(1696)) void Buttons::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1697)) long Buttons::GetReadingOrder ( );
__declspec(implementation_key(1698)) void Buttons::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1699)) _variant_t Buttons::GetAccelerator ( );
__declspec(implementation_key(1700)) void Buttons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1701)) VARIANT_BOOL Buttons::GetCancelButton ( );
__declspec(implementation_key(1702)) void Buttons::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1703)) VARIANT_BOOL Buttons::GetDefaultButton ( );
__declspec(implementation_key(1704)) void Buttons::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1705)) VARIANT_BOOL Buttons::GetDismissButton ( );
__declspec(implementation_key(1706)) void Buttons::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1707)) VARIANT_BOOL Buttons::GetHelpButton ( );
__declspec(implementation_key(1708)) void Buttons::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1709)) _variant_t Buttons::GetPhoneticAccelerator ( );
__declspec(implementation_key(1710)) void Buttons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1711)) ButtonPtr Buttons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(1712)) long Buttons::GetCount ( );
__declspec(implementation_key(1713)) GroupObjectPtr Buttons::Group ( );
__declspec(implementation_key(1714)) IDispatchPtr Buttons::Item ( const _variant_t & Index );
__declspec(implementation_key(1715)) IUnknownPtr Buttons::_NewEnum ( );
__declspec(implementation_key(1716)) _ApplicationPtr CheckBox::GetApplication ( );
__declspec(implementation_key(1717)) enum XlCreator CheckBox::GetCreator ( );
__declspec(implementation_key(1718)) IDispatchPtr CheckBox::GetParent ( );
__declspec(implementation_key(1719)) RangePtr CheckBox::GetBottomRightCell ( );
__declspec(implementation_key(1720)) _variant_t CheckBox::BringToFront ( );
__declspec(implementation_key(1721)) _variant_t CheckBox::Copy ( );
__declspec(implementation_key(1722)) _variant_t CheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1723)) _variant_t CheckBox::Cut ( );
__declspec(implementation_key(1724)) _variant_t CheckBox::Delete ( );
__declspec(implementation_key(1725)) IDispatchPtr CheckBox::Duplicate ( );
__declspec(implementation_key(1726)) VARIANT_BOOL CheckBox::GetEnabled ( );
__declspec(implementation_key(1727)) void CheckBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1728)) double CheckBox::GetHeight ( );
__declspec(implementation_key(1729)) void CheckBox::PutHeight ( double _arg1 );
__declspec(implementation_key(1730)) long CheckBox::GetIndex ( );
__declspec(implementation_key(1731)) double CheckBox::GetLeft ( );
__declspec(implementation_key(1732)) void CheckBox::PutLeft ( double _arg1 );
__declspec(implementation_key(1733)) VARIANT_BOOL CheckBox::GetLocked ( );
__declspec(implementation_key(1734)) void CheckBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1735)) _bstr_t CheckBox::GetName ( );
__declspec(implementation_key(1736)) void CheckBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1737)) _bstr_t CheckBox::GetOnAction ( );
__declspec(implementation_key(1738)) void CheckBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1739)) _variant_t CheckBox::GetPlacement ( );
__declspec(implementation_key(1740)) void CheckBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1741)) VARIANT_BOOL CheckBox::GetPrintObject ( );
__declspec(implementation_key(1742)) void CheckBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1743)) _variant_t CheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(1744)) _variant_t CheckBox::SendToBack ( );
__declspec(implementation_key(1745)) double CheckBox::GetTop ( );
__declspec(implementation_key(1746)) void CheckBox::PutTop ( double _arg1 );
__declspec(implementation_key(1747)) RangePtr CheckBox::GetTopLeftCell ( );
__declspec(implementation_key(1748)) VARIANT_BOOL CheckBox::GetVisible ( );
__declspec(implementation_key(1749)) void CheckBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1750)) double CheckBox::GetWidth ( );
__declspec(implementation_key(1751)) void CheckBox::PutWidth ( double _arg1 );
__declspec(implementation_key(1752)) long CheckBox::GetZOrder ( );
__declspec(implementation_key(1753)) ShapeRangePtr CheckBox::GetShapeRange ( );
__declspec(implementation_key(1754)) _bstr_t CheckBox::GetCaption ( );
__declspec(implementation_key(1755)) void CheckBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1756)) CharactersPtr CheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1757)) _variant_t CheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1758)) VARIANT_BOOL CheckBox::GetLockedText ( );
__declspec(implementation_key(1759)) void CheckBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1760)) _bstr_t CheckBox::GetText ( );
__declspec(implementation_key(1761)) void CheckBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1762)) _variant_t CheckBox::GetAccelerator ( );
__declspec(implementation_key(1763)) void CheckBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1764)) BorderPtr CheckBox::GetBorder ( );
__declspec(implementation_key(1765)) long CheckBox::Get_Default ( );
__declspec(implementation_key(1766)) void CheckBox::Put_Default ( long _arg1 );
__declspec(implementation_key(1767)) VARIANT_BOOL CheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(1768)) void CheckBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1769)) InteriorPtr CheckBox::GetInterior ( );
__declspec(implementation_key(1770)) _bstr_t CheckBox::GetLinkedCell ( );
__declspec(implementation_key(1771)) void CheckBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1772)) _variant_t CheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(1773)) void CheckBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1774)) _variant_t CheckBox::GetValue ( );
__declspec(implementation_key(1775)) void CheckBox::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1776)) _ApplicationPtr CheckBoxes::GetApplication ( );
__declspec(implementation_key(1777)) enum XlCreator CheckBoxes::GetCreator ( );
__declspec(implementation_key(1778)) IDispatchPtr CheckBoxes::GetParent ( );
__declspec(implementation_key(1779)) _variant_t CheckBoxes::BringToFront ( );
__declspec(implementation_key(1780)) _variant_t CheckBoxes::Copy ( );
__declspec(implementation_key(1781)) _variant_t CheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1782)) _variant_t CheckBoxes::Cut ( );
__declspec(implementation_key(1783)) _variant_t CheckBoxes::Delete ( );
__declspec(implementation_key(1784)) IDispatchPtr CheckBoxes::Duplicate ( );
__declspec(implementation_key(1785)) VARIANT_BOOL CheckBoxes::GetEnabled ( );
__declspec(implementation_key(1786)) void CheckBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1787)) double CheckBoxes::GetHeight ( );
__declspec(implementation_key(1788)) void CheckBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(1789)) double CheckBoxes::GetLeft ( );
__declspec(implementation_key(1790)) void CheckBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(1791)) VARIANT_BOOL CheckBoxes::GetLocked ( );
__declspec(implementation_key(1792)) void CheckBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1793)) _bstr_t CheckBoxes::GetOnAction ( );
__declspec(implementation_key(1794)) void CheckBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1795)) _variant_t CheckBoxes::GetPlacement ( );
__declspec(implementation_key(1796)) void CheckBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1797)) VARIANT_BOOL CheckBoxes::GetPrintObject ( );
__declspec(implementation_key(1798)) void CheckBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1799)) _variant_t CheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(1800)) _variant_t CheckBoxes::SendToBack ( );
__declspec(implementation_key(1801)) double CheckBoxes::GetTop ( );
__declspec(implementation_key(1802)) void CheckBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(1803)) VARIANT_BOOL CheckBoxes::GetVisible ( );
__declspec(implementation_key(1804)) void CheckBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1805)) double CheckBoxes::GetWidth ( );
__declspec(implementation_key(1806)) void CheckBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(1807)) long CheckBoxes::GetZOrder ( );
__declspec(implementation_key(1808)) ShapeRangePtr CheckBoxes::GetShapeRange ( );
__declspec(implementation_key(1809)) _bstr_t CheckBoxes::GetCaption ( );
__declspec(implementation_key(1810)) void CheckBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1811)) CharactersPtr CheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1812)) _variant_t CheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1813)) VARIANT_BOOL CheckBoxes::GetLockedText ( );
__declspec(implementation_key(1814)) void CheckBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1815)) _bstr_t CheckBoxes::GetText ( );
__declspec(implementation_key(1816)) void CheckBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1817)) _variant_t CheckBoxes::GetAccelerator ( );
__declspec(implementation_key(1818)) void CheckBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1819)) BorderPtr CheckBoxes::GetBorder ( );
__declspec(implementation_key(1820)) long CheckBoxes::Get_Default ( );
__declspec(implementation_key(1821)) void CheckBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(1822)) VARIANT_BOOL CheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(1823)) void CheckBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1824)) InteriorPtr CheckBoxes::GetInterior ( );
__declspec(implementation_key(1825)) _bstr_t CheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(1826)) void CheckBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1827)) _variant_t CheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(1828)) void CheckBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1829)) _variant_t CheckBoxes::GetValue ( );
__declspec(implementation_key(1830)) void CheckBoxes::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1831)) CheckBoxPtr CheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(1832)) long CheckBoxes::GetCount ( );
__declspec(implementation_key(1833)) GroupObjectPtr CheckBoxes::Group ( );
__declspec(implementation_key(1834)) IDispatchPtr CheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(1835)) IUnknownPtr CheckBoxes::_NewEnum ( );
__declspec(implementation_key(1836)) _ApplicationPtr OptionButton::GetApplication ( );
__declspec(implementation_key(1837)) enum XlCreator OptionButton::GetCreator ( );
__declspec(implementation_key(1838)) IDispatchPtr OptionButton::GetParent ( );
__declspec(implementation_key(1839)) RangePtr OptionButton::GetBottomRightCell ( );
__declspec(implementation_key(1840)) _variant_t OptionButton::BringToFront ( );
__declspec(implementation_key(1841)) _variant_t OptionButton::Copy ( );
__declspec(implementation_key(1842)) _variant_t OptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1843)) _variant_t OptionButton::Cut ( );
__declspec(implementation_key(1844)) _variant_t OptionButton::Delete ( );
__declspec(implementation_key(1845)) IDispatchPtr OptionButton::Duplicate ( );
__declspec(implementation_key(1846)) VARIANT_BOOL OptionButton::GetEnabled ( );
__declspec(implementation_key(1847)) void OptionButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1848)) double OptionButton::GetHeight ( );
__declspec(implementation_key(1849)) void OptionButton::PutHeight ( double _arg1 );
__declspec(implementation_key(1850)) long OptionButton::GetIndex ( );
__declspec(implementation_key(1851)) double OptionButton::GetLeft ( );
__declspec(implementation_key(1852)) void OptionButton::PutLeft ( double _arg1 );
__declspec(implementation_key(1853)) VARIANT_BOOL OptionButton::GetLocked ( );
__declspec(implementation_key(1854)) void OptionButton::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1855)) _bstr_t OptionButton::GetName ( );
__declspec(implementation_key(1856)) void OptionButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1857)) _bstr_t OptionButton::GetOnAction ( );
__declspec(implementation_key(1858)) void OptionButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1859)) _variant_t OptionButton::GetPlacement ( );
__declspec(implementation_key(1860)) void OptionButton::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1861)) VARIANT_BOOL OptionButton::GetPrintObject ( );
__declspec(implementation_key(1862)) void OptionButton::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1863)) _variant_t OptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(1864)) _variant_t OptionButton::SendToBack ( );
__declspec(implementation_key(1865)) double OptionButton::GetTop ( );
__declspec(implementation_key(1866)) void OptionButton::PutTop ( double _arg1 );
__declspec(implementation_key(1867)) RangePtr OptionButton::GetTopLeftCell ( );
__declspec(implementation_key(1868)) VARIANT_BOOL OptionButton::GetVisible ( );
__declspec(implementation_key(1869)) void OptionButton::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1870)) double OptionButton::GetWidth ( );
__declspec(implementation_key(1871)) void OptionButton::PutWidth ( double _arg1 );
__declspec(implementation_key(1872)) long OptionButton::GetZOrder ( );
__declspec(implementation_key(1873)) ShapeRangePtr OptionButton::GetShapeRange ( );
__declspec(implementation_key(1874)) _bstr_t OptionButton::GetCaption ( );
__declspec(implementation_key(1875)) void OptionButton::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1876)) CharactersPtr OptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1877)) _variant_t OptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1878)) VARIANT_BOOL OptionButton::GetLockedText ( );
__declspec(implementation_key(1879)) void OptionButton::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1880)) _bstr_t OptionButton::GetText ( );
__declspec(implementation_key(1881)) void OptionButton::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1882)) _variant_t OptionButton::GetAccelerator ( );
__declspec(implementation_key(1883)) void OptionButton::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1884)) BorderPtr OptionButton::GetBorder ( );
__declspec(implementation_key(1885)) long OptionButton::Get_Default ( );
__declspec(implementation_key(1886)) void OptionButton::Put_Default ( long _arg1 );
__declspec(implementation_key(1887)) VARIANT_BOOL OptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(1888)) void OptionButton::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1889)) InteriorPtr OptionButton::GetInterior ( );
__declspec(implementation_key(1890)) _bstr_t OptionButton::GetLinkedCell ( );
__declspec(implementation_key(1891)) void OptionButton::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1892)) _variant_t OptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(1893)) void OptionButton::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1894)) _variant_t OptionButton::GetValue ( );
__declspec(implementation_key(1895)) void OptionButton::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1896)) GroupBoxPtr OptionButton::GetGroupBox ( );
__declspec(implementation_key(1897)) _ApplicationPtr OptionButtons::GetApplication ( );
__declspec(implementation_key(1898)) enum XlCreator OptionButtons::GetCreator ( );
__declspec(implementation_key(1899)) IDispatchPtr OptionButtons::GetParent ( );
__declspec(implementation_key(1900)) _variant_t OptionButtons::BringToFront ( );
__declspec(implementation_key(1901)) _variant_t OptionButtons::Copy ( );
__declspec(implementation_key(1902)) _variant_t OptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1903)) _variant_t OptionButtons::Cut ( );
__declspec(implementation_key(1904)) _variant_t OptionButtons::Delete ( );
__declspec(implementation_key(1905)) IDispatchPtr OptionButtons::Duplicate ( );
__declspec(implementation_key(1906)) VARIANT_BOOL OptionButtons::GetEnabled ( );
__declspec(implementation_key(1907)) void OptionButtons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1908)) double OptionButtons::GetHeight ( );
__declspec(implementation_key(1909)) void OptionButtons::PutHeight ( double _arg1 );
__declspec(implementation_key(1910)) double OptionButtons::GetLeft ( );
__declspec(implementation_key(1911)) void OptionButtons::PutLeft ( double _arg1 );
__declspec(implementation_key(1912)) VARIANT_BOOL OptionButtons::GetLocked ( );
__declspec(implementation_key(1913)) void OptionButtons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1914)) _bstr_t OptionButtons::GetOnAction ( );
__declspec(implementation_key(1915)) void OptionButtons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1916)) _variant_t OptionButtons::GetPlacement ( );
__declspec(implementation_key(1917)) void OptionButtons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1918)) VARIANT_BOOL OptionButtons::GetPrintObject ( );
__declspec(implementation_key(1919)) void OptionButtons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1920)) _variant_t OptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(1921)) _variant_t OptionButtons::SendToBack ( );
__declspec(implementation_key(1922)) double OptionButtons::GetTop ( );
__declspec(implementation_key(1923)) void OptionButtons::PutTop ( double _arg1 );
__declspec(implementation_key(1924)) VARIANT_BOOL OptionButtons::GetVisible ( );
__declspec(implementation_key(1925)) void OptionButtons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1926)) double OptionButtons::GetWidth ( );
__declspec(implementation_key(1927)) void OptionButtons::PutWidth ( double _arg1 );
__declspec(implementation_key(1928)) long OptionButtons::GetZOrder ( );
__declspec(implementation_key(1929)) ShapeRangePtr OptionButtons::GetShapeRange ( );
__declspec(implementation_key(1930)) _bstr_t OptionButtons::GetCaption ( );
__declspec(implementation_key(1931)) void OptionButtons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1932)) CharactersPtr OptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1933)) _variant_t OptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1934)) VARIANT_BOOL OptionButtons::GetLockedText ( );
__declspec(implementation_key(1935)) void OptionButtons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1936)) _bstr_t OptionButtons::GetText ( );
__declspec(implementation_key(1937)) void OptionButtons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1938)) _variant_t OptionButtons::GetAccelerator ( );
__declspec(implementation_key(1939)) void OptionButtons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1940)) BorderPtr OptionButtons::GetBorder ( );
__declspec(implementation_key(1941)) long OptionButtons::Get_Default ( );
__declspec(implementation_key(1942)) void OptionButtons::Put_Default ( long _arg1 );
__declspec(implementation_key(1943)) VARIANT_BOOL OptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(1944)) void OptionButtons::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1945)) InteriorPtr OptionButtons::GetInterior ( );
__declspec(implementation_key(1946)) _bstr_t OptionButtons::GetLinkedCell ( );
__declspec(implementation_key(1947)) void OptionButtons::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1948)) _variant_t OptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(1949)) void OptionButtons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1950)) _variant_t OptionButtons::GetValue ( );
__declspec(implementation_key(1951)) void OptionButtons::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1952)) GroupBoxPtr OptionButtons::GetGroupBox ( );
__declspec(implementation_key(1953)) OptionButtonPtr OptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(1954)) long OptionButtons::GetCount ( );
__declspec(implementation_key(1955)) GroupObjectPtr OptionButtons::Group ( );
__declspec(implementation_key(1956)) IDispatchPtr OptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(1957)) IUnknownPtr OptionButtons::_NewEnum ( );
__declspec(implementation_key(1958)) _ApplicationPtr EditBox::GetApplication ( );
__declspec(implementation_key(1959)) enum XlCreator EditBox::GetCreator ( );
__declspec(implementation_key(1960)) IDispatchPtr EditBox::GetParent ( );
__declspec(implementation_key(1961)) RangePtr EditBox::GetBottomRightCell ( );
__declspec(implementation_key(1962)) _variant_t EditBox::BringToFront ( );
__declspec(implementation_key(1963)) _variant_t EditBox::Copy ( );
__declspec(implementation_key(1964)) _variant_t EditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1965)) _variant_t EditBox::Cut ( );
__declspec(implementation_key(1966)) _variant_t EditBox::Delete ( );
__declspec(implementation_key(1967)) IDispatchPtr EditBox::Duplicate ( );
__declspec(implementation_key(1968)) VARIANT_BOOL EditBox::GetEnabled ( );
__declspec(implementation_key(1969)) void EditBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1970)) double EditBox::GetHeight ( );
__declspec(implementation_key(1971)) void EditBox::PutHeight ( double _arg1 );
__declspec(implementation_key(1972)) long EditBox::GetIndex ( );
__declspec(implementation_key(1973)) double EditBox::GetLeft ( );
__declspec(implementation_key(1974)) void EditBox::PutLeft ( double _arg1 );
__declspec(implementation_key(1975)) VARIANT_BOOL EditBox::GetLocked ( );
__declspec(implementation_key(1976)) void EditBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1977)) _bstr_t EditBox::GetName ( );
__declspec(implementation_key(1978)) void EditBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1979)) _bstr_t EditBox::GetOnAction ( );
__declspec(implementation_key(1980)) void EditBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1981)) _variant_t EditBox::GetPlacement ( );
__declspec(implementation_key(1982)) void EditBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1983)) VARIANT_BOOL EditBox::GetPrintObject ( );
__declspec(implementation_key(1984)) void EditBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1985)) _variant_t EditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(1986)) _variant_t EditBox::SendToBack ( );
__declspec(implementation_key(1987)) double EditBox::GetTop ( );
__declspec(implementation_key(1988)) void EditBox::PutTop ( double _arg1 );
__declspec(implementation_key(1989)) RangePtr EditBox::GetTopLeftCell ( );
__declspec(implementation_key(1990)) VARIANT_BOOL EditBox::GetVisible ( );
__declspec(implementation_key(1991)) void EditBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1992)) double EditBox::GetWidth ( );
__declspec(implementation_key(1993)) void EditBox::PutWidth ( double _arg1 );
__declspec(implementation_key(1994)) long EditBox::GetZOrder ( );
__declspec(implementation_key(1995)) ShapeRangePtr EditBox::GetShapeRange ( );
__declspec(implementation_key(1996)) _bstr_t EditBox::GetCaption ( );
__declspec(implementation_key(1997)) void EditBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1998)) CharactersPtr EditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1999)) _variant_t EditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2000)) VARIANT_BOOL EditBox::GetLockedText ( );
__declspec(implementation_key(2001)) void EditBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2002)) _bstr_t EditBox::GetText ( );
__declspec(implementation_key(2003)) void EditBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2004)) VARIANT_BOOL EditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(2005)) void EditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2006)) long EditBox::GetInputType ( );
__declspec(implementation_key(2007)) void EditBox::PutInputType ( long _arg1 );
__declspec(implementation_key(2008)) _bstr_t EditBox::GetLinkedObject ( );
__declspec(implementation_key(2009)) VARIANT_BOOL EditBox::GetMultiLine ( );
__declspec(implementation_key(2010)) void EditBox::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2011)) VARIANT_BOOL EditBox::GetPasswordEdit ( );
__declspec(implementation_key(2012)) void EditBox::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2013)) _ApplicationPtr EditBoxes::GetApplication ( );
__declspec(implementation_key(2014)) enum XlCreator EditBoxes::GetCreator ( );
__declspec(implementation_key(2015)) IDispatchPtr EditBoxes::GetParent ( );
__declspec(implementation_key(2016)) _variant_t EditBoxes::BringToFront ( );
__declspec(implementation_key(2017)) _variant_t EditBoxes::Copy ( );
__declspec(implementation_key(2018)) _variant_t EditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2019)) _variant_t EditBoxes::Cut ( );
__declspec(implementation_key(2020)) _variant_t EditBoxes::Delete ( );
__declspec(implementation_key(2021)) IDispatchPtr EditBoxes::Duplicate ( );
__declspec(implementation_key(2022)) VARIANT_BOOL EditBoxes::GetEnabled ( );
__declspec(implementation_key(2023)) void EditBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2024)) double EditBoxes::GetHeight ( );
__declspec(implementation_key(2025)) void EditBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2026)) double EditBoxes::GetLeft ( );
__declspec(implementation_key(2027)) void EditBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2028)) VARIANT_BOOL EditBoxes::GetLocked ( );
__declspec(implementation_key(2029)) void EditBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2030)) _bstr_t EditBoxes::GetOnAction ( );
__declspec(implementation_key(2031)) void EditBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2032)) _variant_t EditBoxes::GetPlacement ( );
__declspec(implementation_key(2033)) void EditBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2034)) VARIANT_BOOL EditBoxes::GetPrintObject ( );
__declspec(implementation_key(2035)) void EditBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2036)) _variant_t EditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2037)) _variant_t EditBoxes::SendToBack ( );
__declspec(implementation_key(2038)) double EditBoxes::GetTop ( );
__declspec(implementation_key(2039)) void EditBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2040)) VARIANT_BOOL EditBoxes::GetVisible ( );
__declspec(implementation_key(2041)) void EditBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2042)) double EditBoxes::GetWidth ( );
__declspec(implementation_key(2043)) void EditBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2044)) long EditBoxes::GetZOrder ( );
__declspec(implementation_key(2045)) ShapeRangePtr EditBoxes::GetShapeRange ( );
__declspec(implementation_key(2046)) _bstr_t EditBoxes::GetCaption ( );
__declspec(implementation_key(2047)) void EditBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2048)) CharactersPtr EditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2049)) _variant_t EditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2050)) VARIANT_BOOL EditBoxes::GetLockedText ( );
__declspec(implementation_key(2051)) void EditBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2052)) _bstr_t EditBoxes::GetText ( );
__declspec(implementation_key(2053)) void EditBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2054)) VARIANT_BOOL EditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(2055)) void EditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2056)) long EditBoxes::GetInputType ( );
__declspec(implementation_key(2057)) void EditBoxes::PutInputType ( long _arg1 );
__declspec(implementation_key(2058)) VARIANT_BOOL EditBoxes::GetMultiLine ( );
__declspec(implementation_key(2059)) void EditBoxes::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2060)) VARIANT_BOOL EditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(2061)) void EditBoxes::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2062)) EditBoxPtr EditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2063)) long EditBoxes::GetCount ( );
__declspec(implementation_key(2064)) GroupObjectPtr EditBoxes::Group ( );
__declspec(implementation_key(2065)) _variant_t EditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2066)) IUnknownPtr EditBoxes::_NewEnum ( );
__declspec(implementation_key(2067)) _ApplicationPtr ScrollBar::GetApplication ( );
__declspec(implementation_key(2068)) enum XlCreator ScrollBar::GetCreator ( );
__declspec(implementation_key(2069)) IDispatchPtr ScrollBar::GetParent ( );
__declspec(implementation_key(2070)) RangePtr ScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(2071)) _variant_t ScrollBar::BringToFront ( );
__declspec(implementation_key(2072)) _variant_t ScrollBar::Copy ( );
__declspec(implementation_key(2073)) _variant_t ScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2074)) _variant_t ScrollBar::Cut ( );
__declspec(implementation_key(2075)) _variant_t ScrollBar::Delete ( );
__declspec(implementation_key(2076)) IDispatchPtr ScrollBar::Duplicate ( );
__declspec(implementation_key(2077)) VARIANT_BOOL ScrollBar::GetEnabled ( );
__declspec(implementation_key(2078)) void ScrollBar::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2079)) double ScrollBar::GetHeight ( );
__declspec(implementation_key(2080)) void ScrollBar::PutHeight ( double _arg1 );
__declspec(implementation_key(2081)) long ScrollBar::GetIndex ( );
__declspec(implementation_key(2082)) double ScrollBar::GetLeft ( );
__declspec(implementation_key(2083)) void ScrollBar::PutLeft ( double _arg1 );
__declspec(implementation_key(2084)) VARIANT_BOOL ScrollBar::GetLocked ( );
__declspec(implementation_key(2085)) void ScrollBar::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2086)) _bstr_t ScrollBar::GetName ( );
__declspec(implementation_key(2087)) void ScrollBar::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2088)) _bstr_t ScrollBar::GetOnAction ( );
__declspec(implementation_key(2089)) void ScrollBar::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2090)) _variant_t ScrollBar::GetPlacement ( );
__declspec(implementation_key(2091)) void ScrollBar::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2092)) VARIANT_BOOL ScrollBar::GetPrintObject ( );
__declspec(implementation_key(2093)) void ScrollBar::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2094)) _variant_t ScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(2095)) _variant_t ScrollBar::SendToBack ( );
__declspec(implementation_key(2096)) double ScrollBar::GetTop ( );
__declspec(implementation_key(2097)) void ScrollBar::PutTop ( double _arg1 );
__declspec(implementation_key(2098)) RangePtr ScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(2099)) VARIANT_BOOL ScrollBar::GetVisible ( );
__declspec(implementation_key(2100)) void ScrollBar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2101)) double ScrollBar::GetWidth ( );
__declspec(implementation_key(2102)) void ScrollBar::PutWidth ( double _arg1 );
__declspec(implementation_key(2103)) long ScrollBar::GetZOrder ( );
__declspec(implementation_key(2104)) ShapeRangePtr ScrollBar::GetShapeRange ( );
__declspec(implementation_key(2105)) long ScrollBar::Get_Default ( );
__declspec(implementation_key(2106)) void ScrollBar::Put_Default ( long _arg1 );
__declspec(implementation_key(2107)) VARIANT_BOOL ScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(2108)) void ScrollBar::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2109)) _bstr_t ScrollBar::GetLinkedCell ( );
__declspec(implementation_key(2110)) void ScrollBar::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2111)) long ScrollBar::GetMax ( );
__declspec(implementation_key(2112)) void ScrollBar::PutMax ( long _arg1 );
__declspec(implementation_key(2113)) long ScrollBar::GetMin ( );
__declspec(implementation_key(2114)) void ScrollBar::PutMin ( long _arg1 );
__declspec(implementation_key(2115)) long ScrollBar::GetSmallChange ( );
__declspec(implementation_key(2116)) void ScrollBar::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2117)) long ScrollBar::GetValue ( );
__declspec(implementation_key(2118)) void ScrollBar::PutValue ( long _arg1 );
__declspec(implementation_key(2119)) long ScrollBar::GetLargeChange ( );
__declspec(implementation_key(2120)) void ScrollBar::PutLargeChange ( long _arg1 );
__declspec(implementation_key(2121)) _ApplicationPtr ScrollBars::GetApplication ( );
__declspec(implementation_key(2122)) enum XlCreator ScrollBars::GetCreator ( );
__declspec(implementation_key(2123)) IDispatchPtr ScrollBars::GetParent ( );
__declspec(implementation_key(2124)) _variant_t ScrollBars::BringToFront ( );
__declspec(implementation_key(2125)) _variant_t ScrollBars::Copy ( );
__declspec(implementation_key(2126)) _variant_t ScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2127)) _variant_t ScrollBars::Cut ( );
__declspec(implementation_key(2128)) _variant_t ScrollBars::Delete ( );
__declspec(implementation_key(2129)) IDispatchPtr ScrollBars::Duplicate ( );
__declspec(implementation_key(2130)) VARIANT_BOOL ScrollBars::GetEnabled ( );
__declspec(implementation_key(2131)) void ScrollBars::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2132)) double ScrollBars::GetHeight ( );
__declspec(implementation_key(2133)) void ScrollBars::PutHeight ( double _arg1 );
__declspec(implementation_key(2134)) double ScrollBars::GetLeft ( );
__declspec(implementation_key(2135)) void ScrollBars::PutLeft ( double _arg1 );
__declspec(implementation_key(2136)) VARIANT_BOOL ScrollBars::GetLocked ( );
__declspec(implementation_key(2137)) void ScrollBars::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2138)) _bstr_t ScrollBars::GetOnAction ( );
__declspec(implementation_key(2139)) void ScrollBars::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2140)) _variant_t ScrollBars::GetPlacement ( );
__declspec(implementation_key(2141)) void ScrollBars::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2142)) VARIANT_BOOL ScrollBars::GetPrintObject ( );
__declspec(implementation_key(2143)) void ScrollBars::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2144)) _variant_t ScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(2145)) _variant_t ScrollBars::SendToBack ( );
__declspec(implementation_key(2146)) double ScrollBars::GetTop ( );
__declspec(implementation_key(2147)) void ScrollBars::PutTop ( double _arg1 );
__declspec(implementation_key(2148)) VARIANT_BOOL ScrollBars::GetVisible ( );
__declspec(implementation_key(2149)) void ScrollBars::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2150)) double ScrollBars::GetWidth ( );
__declspec(implementation_key(2151)) void ScrollBars::PutWidth ( double _arg1 );
__declspec(implementation_key(2152)) long ScrollBars::GetZOrder ( );
__declspec(implementation_key(2153)) ShapeRangePtr ScrollBars::GetShapeRange ( );
__declspec(implementation_key(2154)) long ScrollBars::Get_Default ( );
__declspec(implementation_key(2155)) void ScrollBars::Put_Default ( long _arg1 );
__declspec(implementation_key(2156)) VARIANT_BOOL ScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(2157)) void ScrollBars::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2158)) _bstr_t ScrollBars::GetLinkedCell ( );
__declspec(implementation_key(2159)) void ScrollBars::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2160)) long ScrollBars::GetMax ( );
__declspec(implementation_key(2161)) void ScrollBars::PutMax ( long _arg1 );
__declspec(implementation_key(2162)) long ScrollBars::GetMin ( );
__declspec(implementation_key(2163)) void ScrollBars::PutMin ( long _arg1 );
__declspec(implementation_key(2164)) long ScrollBars::GetSmallChange ( );
__declspec(implementation_key(2165)) void ScrollBars::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2166)) long ScrollBars::GetValue ( );
__declspec(implementation_key(2167)) void ScrollBars::PutValue ( long _arg1 );
__declspec(implementation_key(2168)) long ScrollBars::GetLargeChange ( );
__declspec(implementation_key(2169)) void ScrollBars::PutLargeChange ( long _arg1 );
__declspec(implementation_key(2170)) ScrollBarPtr ScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2171)) long ScrollBars::GetCount ( );
__declspec(implementation_key(2172)) GroupObjectPtr ScrollBars::Group ( );
__declspec(implementation_key(2173)) IDispatchPtr ScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(2174)) IUnknownPtr ScrollBars::_NewEnum ( );
__declspec(implementation_key(2175)) _ApplicationPtr ListBox::GetApplication ( );
__declspec(implementation_key(2176)) enum XlCreator ListBox::GetCreator ( );
__declspec(implementation_key(2177)) IDispatchPtr ListBox::GetParent ( );
__declspec(implementation_key(2178)) RangePtr ListBox::GetBottomRightCell ( );
__declspec(implementation_key(2179)) _variant_t ListBox::BringToFront ( );
__declspec(implementation_key(2180)) _variant_t ListBox::Copy ( );
__declspec(implementation_key(2181)) _variant_t ListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2182)) _variant_t ListBox::Cut ( );
__declspec(implementation_key(2183)) _variant_t ListBox::Delete ( );
__declspec(implementation_key(2184)) IDispatchPtr ListBox::Duplicate ( );
__declspec(implementation_key(2185)) VARIANT_BOOL ListBox::GetEnabled ( );
__declspec(implementation_key(2186)) void ListBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2187)) double ListBox::GetHeight ( );
__declspec(implementation_key(2188)) void ListBox::PutHeight ( double _arg1 );
__declspec(implementation_key(2189)) long ListBox::GetIndex ( );
__declspec(implementation_key(2190)) double ListBox::GetLeft ( );
__declspec(implementation_key(2191)) void ListBox::PutLeft ( double _arg1 );
__declspec(implementation_key(2192)) VARIANT_BOOL ListBox::GetLocked ( );
__declspec(implementation_key(2193)) void ListBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2194)) _bstr_t ListBox::GetName ( );
__declspec(implementation_key(2195)) void ListBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2196)) _bstr_t ListBox::GetOnAction ( );
__declspec(implementation_key(2197)) void ListBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2198)) _variant_t ListBox::GetPlacement ( );
__declspec(implementation_key(2199)) void ListBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2200)) VARIANT_BOOL ListBox::GetPrintObject ( );
__declspec(implementation_key(2201)) void ListBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2202)) _variant_t ListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2203)) _variant_t ListBox::SendToBack ( );
__declspec(implementation_key(2204)) double ListBox::GetTop ( );
__declspec(implementation_key(2205)) void ListBox::PutTop ( double _arg1 );
__declspec(implementation_key(2206)) RangePtr ListBox::GetTopLeftCell ( );
__declspec(implementation_key(2207)) VARIANT_BOOL ListBox::GetVisible ( );
__declspec(implementation_key(2208)) void ListBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2209)) double ListBox::GetWidth ( );
__declspec(implementation_key(2210)) void ListBox::PutWidth ( double _arg1 );
__declspec(implementation_key(2211)) long ListBox::GetZOrder ( );
__declspec(implementation_key(2212)) ShapeRangePtr ListBox::GetShapeRange ( );
__declspec(implementation_key(2213)) _variant_t ListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2214)) VARIANT_BOOL ListBox::GetDisplay3DShading ( );
__declspec(implementation_key(2215)) void ListBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2216)) long ListBox::Get_Default ( );
__declspec(implementation_key(2217)) void ListBox::Put_Default ( long _arg1 );
__declspec(implementation_key(2218)) _bstr_t ListBox::GetLinkedCell ( );
__declspec(implementation_key(2219)) void ListBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2220)) _variant_t ListBox::GetLinkedObject ( );
__declspec(implementation_key(2221)) _variant_t ListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(2222)) void ListBox::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2223)) long ListBox::GetListCount ( );
__declspec(implementation_key(2224)) _bstr_t ListBox::GetListFillRange ( );
__declspec(implementation_key(2225)) void ListBox::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2226)) long ListBox::GetListIndex ( );
__declspec(implementation_key(2227)) void ListBox::PutListIndex ( long _arg1 );
__declspec(implementation_key(2228)) long ListBox::GetMultiSelect ( );
__declspec(implementation_key(2229)) void ListBox::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(2230)) _variant_t ListBox::RemoveAllItems ( );
__declspec(implementation_key(2231)) _variant_t ListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2232)) _variant_t ListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2233)) void ListBox::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2234)) long ListBox::GetValue ( );
__declspec(implementation_key(2235)) void ListBox::PutValue ( long _arg1 );
__declspec(implementation_key(2236)) _ApplicationPtr ListBoxes::GetApplication ( );
__declspec(implementation_key(2237)) enum XlCreator ListBoxes::GetCreator ( );
__declspec(implementation_key(2238)) IDispatchPtr ListBoxes::GetParent ( );
__declspec(implementation_key(2239)) _variant_t ListBoxes::BringToFront ( );
__declspec(implementation_key(2240)) _variant_t ListBoxes::Copy ( );
__declspec(implementation_key(2241)) _variant_t ListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2242)) _variant_t ListBoxes::Cut ( );
__declspec(implementation_key(2243)) _variant_t ListBoxes::Delete ( );
__declspec(implementation_key(2244)) IDispatchPtr ListBoxes::Duplicate ( );
__declspec(implementation_key(2245)) VARIANT_BOOL ListBoxes::GetEnabled ( );
__declspec(implementation_key(2246)) void ListBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2247)) double ListBoxes::GetHeight ( );
__declspec(implementation_key(2248)) void ListBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2249)) double ListBoxes::GetLeft ( );
__declspec(implementation_key(2250)) void ListBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2251)) VARIANT_BOOL ListBoxes::GetLocked ( );
__declspec(implementation_key(2252)) void ListBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2253)) _bstr_t ListBoxes::GetOnAction ( );
__declspec(implementation_key(2254)) void ListBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2255)) _variant_t ListBoxes::GetPlacement ( );
__declspec(implementation_key(2256)) void ListBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2257)) VARIANT_BOOL ListBoxes::GetPrintObject ( );
__declspec(implementation_key(2258)) void ListBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2259)) _variant_t ListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2260)) _variant_t ListBoxes::SendToBack ( );
__declspec(implementation_key(2261)) double ListBoxes::GetTop ( );
__declspec(implementation_key(2262)) void ListBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2263)) VARIANT_BOOL ListBoxes::GetVisible ( );
__declspec(implementation_key(2264)) void ListBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2265)) double ListBoxes::GetWidth ( );
__declspec(implementation_key(2266)) void ListBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2267)) long ListBoxes::GetZOrder ( );
__declspec(implementation_key(2268)) ShapeRangePtr ListBoxes::GetShapeRange ( );
__declspec(implementation_key(2269)) _variant_t ListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2270)) VARIANT_BOOL ListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(2271)) void ListBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2272)) long ListBoxes::Get_Default ( );
__declspec(implementation_key(2273)) void ListBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(2274)) _bstr_t ListBoxes::GetLinkedCell ( );
__declspec(implementation_key(2275)) void ListBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2276)) _variant_t ListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(2277)) void ListBoxes::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2278)) _bstr_t ListBoxes::GetListFillRange ( );
__declspec(implementation_key(2279)) void ListBoxes::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2280)) long ListBoxes::GetListIndex ( );
__declspec(implementation_key(2281)) void ListBoxes::PutListIndex ( long _arg1 );
__declspec(implementation_key(2282)) long ListBoxes::GetMultiSelect ( );
__declspec(implementation_key(2283)) void ListBoxes::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(2284)) _variant_t ListBoxes::RemoveAllItems ( );
__declspec(implementation_key(2285)) _variant_t ListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2286)) _variant_t ListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2287)) void ListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2288)) long ListBoxes::GetValue ( );
__declspec(implementation_key(2289)) void ListBoxes::PutValue ( long _arg1 );
__declspec(implementation_key(2290)) ListBoxPtr ListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2291)) long ListBoxes::GetCount ( );
__declspec(implementation_key(2292)) GroupObjectPtr ListBoxes::Group ( );
__declspec(implementation_key(2293)) IDispatchPtr ListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2294)) IUnknownPtr ListBoxes::_NewEnum ( );
__declspec(implementation_key(2295)) _ApplicationPtr GroupBox::GetApplication ( );
__declspec(implementation_key(2296)) enum XlCreator GroupBox::GetCreator ( );
__declspec(implementation_key(2297)) IDispatchPtr GroupBox::GetParent ( );
__declspec(implementation_key(2298)) RangePtr GroupBox::GetBottomRightCell ( );
__declspec(implementation_key(2299)) _variant_t GroupBox::BringToFront ( );
__declspec(implementation_key(2300)) _variant_t GroupBox::Copy ( );
__declspec(implementation_key(2301)) _variant_t GroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2302)) _variant_t GroupBox::Cut ( );
__declspec(implementation_key(2303)) _variant_t GroupBox::Delete ( );
__declspec(implementation_key(2304)) IDispatchPtr GroupBox::Duplicate ( );
__declspec(implementation_key(2305)) VARIANT_BOOL GroupBox::GetEnabled ( );
__declspec(implementation_key(2306)) void GroupBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2307)) double GroupBox::GetHeight ( );
__declspec(implementation_key(2308)) void GroupBox::PutHeight ( double _arg1 );
__declspec(implementation_key(2309)) long GroupBox::GetIndex ( );
__declspec(implementation_key(2310)) double GroupBox::GetLeft ( );
__declspec(implementation_key(2311)) void GroupBox::PutLeft ( double _arg1 );
__declspec(implementation_key(2312)) VARIANT_BOOL GroupBox::GetLocked ( );
__declspec(implementation_key(2313)) void GroupBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2314)) _bstr_t GroupBox::GetName ( );
__declspec(implementation_key(2315)) void GroupBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2316)) _bstr_t GroupBox::GetOnAction ( );
__declspec(implementation_key(2317)) void GroupBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2318)) _variant_t GroupBox::GetPlacement ( );
__declspec(implementation_key(2319)) void GroupBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2320)) VARIANT_BOOL GroupBox::GetPrintObject ( );
__declspec(implementation_key(2321)) void GroupBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2322)) _variant_t GroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2323)) _variant_t GroupBox::SendToBack ( );
__declspec(implementation_key(2324)) double GroupBox::GetTop ( );
__declspec(implementation_key(2325)) void GroupBox::PutTop ( double _arg1 );
__declspec(implementation_key(2326)) RangePtr GroupBox::GetTopLeftCell ( );
__declspec(implementation_key(2327)) VARIANT_BOOL GroupBox::GetVisible ( );
__declspec(implementation_key(2328)) void GroupBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2329)) double GroupBox::GetWidth ( );
__declspec(implementation_key(2330)) void GroupBox::PutWidth ( double _arg1 );
__declspec(implementation_key(2331)) long GroupBox::GetZOrder ( );
__declspec(implementation_key(2332)) ShapeRangePtr GroupBox::GetShapeRange ( );
__declspec(implementation_key(2333)) _bstr_t GroupBox::GetCaption ( );
__declspec(implementation_key(2334)) void GroupBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2335)) CharactersPtr GroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2336)) _variant_t GroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2337)) VARIANT_BOOL GroupBox::GetLockedText ( );
__declspec(implementation_key(2338)) void GroupBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2339)) _bstr_t GroupBox::GetText ( );
__declspec(implementation_key(2340)) void GroupBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2341)) _variant_t GroupBox::GetAccelerator ( );
__declspec(implementation_key(2342)) void GroupBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2343)) VARIANT_BOOL GroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(2344)) void GroupBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2345)) _variant_t GroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(2346)) void GroupBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2347)) _ApplicationPtr GroupBoxes::GetApplication ( );
__declspec(implementation_key(2348)) enum XlCreator GroupBoxes::GetCreator ( );
__declspec(implementation_key(2349)) IDispatchPtr GroupBoxes::GetParent ( );
__declspec(implementation_key(2350)) _variant_t GroupBoxes::BringToFront ( );
__declspec(implementation_key(2351)) _variant_t GroupBoxes::Copy ( );
__declspec(implementation_key(2352)) _variant_t GroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2353)) _variant_t GroupBoxes::Cut ( );
__declspec(implementation_key(2354)) _variant_t GroupBoxes::Delete ( );
__declspec(implementation_key(2355)) IDispatchPtr GroupBoxes::Duplicate ( );
__declspec(implementation_key(2356)) VARIANT_BOOL GroupBoxes::GetEnabled ( );
__declspec(implementation_key(2357)) void GroupBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2358)) double GroupBoxes::GetHeight ( );
__declspec(implementation_key(2359)) void GroupBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2360)) double GroupBoxes::GetLeft ( );
__declspec(implementation_key(2361)) void GroupBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2362)) VARIANT_BOOL GroupBoxes::GetLocked ( );
__declspec(implementation_key(2363)) void GroupBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2364)) _bstr_t GroupBoxes::GetOnAction ( );
__declspec(implementation_key(2365)) void GroupBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2366)) _variant_t GroupBoxes::GetPlacement ( );
__declspec(implementation_key(2367)) void GroupBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2368)) VARIANT_BOOL GroupBoxes::GetPrintObject ( );
__declspec(implementation_key(2369)) void GroupBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2370)) _variant_t GroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2371)) _variant_t GroupBoxes::SendToBack ( );
__declspec(implementation_key(2372)) double GroupBoxes::GetTop ( );
__declspec(implementation_key(2373)) void GroupBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2374)) VARIANT_BOOL GroupBoxes::GetVisible ( );
__declspec(implementation_key(2375)) void GroupBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2376)) double GroupBoxes::GetWidth ( );
__declspec(implementation_key(2377)) void GroupBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2378)) long GroupBoxes::GetZOrder ( );
__declspec(implementation_key(2379)) ShapeRangePtr GroupBoxes::GetShapeRange ( );
__declspec(implementation_key(2380)) _bstr_t GroupBoxes::GetCaption ( );
__declspec(implementation_key(2381)) void GroupBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2382)) CharactersPtr GroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2383)) _variant_t GroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2384)) VARIANT_BOOL GroupBoxes::GetLockedText ( );
__declspec(implementation_key(2385)) void GroupBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2386)) _bstr_t GroupBoxes::GetText ( );
__declspec(implementation_key(2387)) void GroupBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2388)) _variant_t GroupBoxes::GetAccelerator ( );
__declspec(implementation_key(2389)) void GroupBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2390)) VARIANT_BOOL GroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(2391)) void GroupBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2392)) _variant_t GroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(2393)) void GroupBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2394)) GroupBoxPtr GroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2395)) long GroupBoxes::GetCount ( );
__declspec(implementation_key(2396)) GroupObjectPtr GroupBoxes::Group ( );
__declspec(implementation_key(2397)) IDispatchPtr GroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2398)) IUnknownPtr GroupBoxes::_NewEnum ( );
__declspec(implementation_key(2399)) _ApplicationPtr DropDown::GetApplication ( );
__declspec(implementation_key(2400)) enum XlCreator DropDown::GetCreator ( );
__declspec(implementation_key(2401)) IDispatchPtr DropDown::GetParent ( );
__declspec(implementation_key(2402)) RangePtr DropDown::GetBottomRightCell ( );
__declspec(implementation_key(2403)) _variant_t DropDown::BringToFront ( );
__declspec(implementation_key(2404)) _variant_t DropDown::Copy ( );
__declspec(implementation_key(2405)) _variant_t DropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2406)) _variant_t DropDown::Cut ( );
__declspec(implementation_key(2407)) _variant_t DropDown::Delete ( );
__declspec(implementation_key(2408)) IDispatchPtr DropDown::Duplicate ( );
__declspec(implementation_key(2409)) VARIANT_BOOL DropDown::GetEnabled ( );
__declspec(implementation_key(2410)) void DropDown::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2411)) double DropDown::GetHeight ( );
__declspec(implementation_key(2412)) void DropDown::PutHeight ( double _arg1 );
__declspec(implementation_key(2413)) long DropDown::GetIndex ( );
__declspec(implementation_key(2414)) double DropDown::GetLeft ( );
__declspec(implementation_key(2415)) void DropDown::PutLeft ( double _arg1 );
__declspec(implementation_key(2416)) VARIANT_BOOL DropDown::GetLocked ( );
__declspec(implementation_key(2417)) void DropDown::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2418)) _bstr_t DropDown::GetName ( );
__declspec(implementation_key(2419)) void DropDown::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2420)) _bstr_t DropDown::GetOnAction ( );
__declspec(implementation_key(2421)) void DropDown::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2422)) _variant_t DropDown::GetPlacement ( );
__declspec(implementation_key(2423)) void DropDown::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2424)) VARIANT_BOOL DropDown::GetPrintObject ( );
__declspec(implementation_key(2425)) void DropDown::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2426)) _variant_t DropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(2427)) _variant_t DropDown::SendToBack ( );
__declspec(implementation_key(2428)) double DropDown::GetTop ( );
__declspec(implementation_key(2429)) void DropDown::PutTop ( double _arg1 );
__declspec(implementation_key(2430)) RangePtr DropDown::GetTopLeftCell ( );
__declspec(implementation_key(2431)) VARIANT_BOOL DropDown::GetVisible ( );
__declspec(implementation_key(2432)) void DropDown::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2433)) double DropDown::GetWidth ( );
__declspec(implementation_key(2434)) void DropDown::PutWidth ( double _arg1 );
__declspec(implementation_key(2435)) long DropDown::GetZOrder ( );
__declspec(implementation_key(2436)) ShapeRangePtr DropDown::GetShapeRange ( );
__declspec(implementation_key(2437)) _variant_t DropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2438)) VARIANT_BOOL DropDown::GetDisplay3DShading ( );
__declspec(implementation_key(2439)) void DropDown::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2440)) long DropDown::Get_Default ( );
__declspec(implementation_key(2441)) void DropDown::Put_Default ( long _arg1 );
__declspec(implementation_key(2442)) _bstr_t DropDown::GetLinkedCell ( );
__declspec(implementation_key(2443)) void DropDown::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2444)) _variant_t DropDown::GetLinkedObject ( );
__declspec(implementation_key(2445)) _variant_t DropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(2446)) void DropDown::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2447)) long DropDown::GetListCount ( );
__declspec(implementation_key(2448)) _bstr_t DropDown::GetListFillRange ( );
__declspec(implementation_key(2449)) void DropDown::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2450)) long DropDown::GetListIndex ( );
__declspec(implementation_key(2451)) void DropDown::PutListIndex ( long _arg1 );
__declspec(implementation_key(2452)) _variant_t DropDown::RemoveAllItems ( );
__declspec(implementation_key(2453)) _variant_t DropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2454)) _variant_t DropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2455)) void DropDown::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2456)) long DropDown::GetValue ( );
__declspec(implementation_key(2457)) void DropDown::PutValue ( long _arg1 );
__declspec(implementation_key(2458)) _bstr_t DropDown::GetCaption ( );
__declspec(implementation_key(2459)) void DropDown::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2460)) CharactersPtr DropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2461)) long DropDown::GetDropDownLines ( );
__declspec(implementation_key(2462)) void DropDown::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(2463)) _bstr_t DropDown::GetText ( );
__declspec(implementation_key(2464)) void DropDown::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2465)) _ApplicationPtr DropDowns::GetApplication ( );
__declspec(implementation_key(2466)) enum XlCreator DropDowns::GetCreator ( );
__declspec(implementation_key(2467)) IDispatchPtr DropDowns::GetParent ( );
__declspec(implementation_key(2468)) _variant_t DropDowns::BringToFront ( );
__declspec(implementation_key(2469)) _variant_t DropDowns::Copy ( );
__declspec(implementation_key(2470)) _variant_t DropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2471)) _variant_t DropDowns::Cut ( );
__declspec(implementation_key(2472)) _variant_t DropDowns::Delete ( );
__declspec(implementation_key(2473)) IDispatchPtr DropDowns::Duplicate ( );
__declspec(implementation_key(2474)) VARIANT_BOOL DropDowns::GetEnabled ( );
__declspec(implementation_key(2475)) void DropDowns::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2476)) double DropDowns::GetHeight ( );
__declspec(implementation_key(2477)) void DropDowns::PutHeight ( double _arg1 );
__declspec(implementation_key(2478)) double DropDowns::GetLeft ( );
__declspec(implementation_key(2479)) void DropDowns::PutLeft ( double _arg1 );
__declspec(implementation_key(2480)) VARIANT_BOOL DropDowns::GetLocked ( );
__declspec(implementation_key(2481)) void DropDowns::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2482)) _bstr_t DropDowns::GetOnAction ( );
__declspec(implementation_key(2483)) void DropDowns::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2484)) _variant_t DropDowns::GetPlacement ( );
__declspec(implementation_key(2485)) void DropDowns::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2486)) VARIANT_BOOL DropDowns::GetPrintObject ( );
__declspec(implementation_key(2487)) void DropDowns::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2488)) _variant_t DropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(2489)) _variant_t DropDowns::SendToBack ( );
__declspec(implementation_key(2490)) double DropDowns::GetTop ( );
__declspec(implementation_key(2491)) void DropDowns::PutTop ( double _arg1 );
__declspec(implementation_key(2492)) VARIANT_BOOL DropDowns::GetVisible ( );
__declspec(implementation_key(2493)) void DropDowns::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2494)) double DropDowns::GetWidth ( );
__declspec(implementation_key(2495)) void DropDowns::PutWidth ( double _arg1 );
__declspec(implementation_key(2496)) long DropDowns::GetZOrder ( );
__declspec(implementation_key(2497)) ShapeRangePtr DropDowns::GetShapeRange ( );
__declspec(implementation_key(2498)) _variant_t DropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2499)) VARIANT_BOOL DropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(2500)) void DropDowns::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2501)) long DropDowns::Get_Default ( );
__declspec(implementation_key(2502)) void DropDowns::Put_Default ( long _arg1 );
__declspec(implementation_key(2503)) _bstr_t DropDowns::GetLinkedCell ( );
__declspec(implementation_key(2504)) void DropDowns::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2505)) _variant_t DropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(2506)) void DropDowns::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2507)) _bstr_t DropDowns::GetListFillRange ( );
__declspec(implementation_key(2508)) void DropDowns::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2509)) long DropDowns::GetListIndex ( );
__declspec(implementation_key(2510)) void DropDowns::PutListIndex ( long _arg1 );
__declspec(implementation_key(2511)) _variant_t DropDowns::RemoveAllItems ( );
__declspec(implementation_key(2512)) _variant_t DropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2513)) _variant_t DropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2514)) void DropDowns::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2515)) long DropDowns::GetValue ( );
__declspec(implementation_key(2516)) void DropDowns::PutValue ( long _arg1 );
__declspec(implementation_key(2517)) _bstr_t DropDowns::GetCaption ( );
__declspec(implementation_key(2518)) void DropDowns::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2519)) CharactersPtr DropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2520)) long DropDowns::GetDropDownLines ( );
__declspec(implementation_key(2521)) void DropDowns::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(2522)) _bstr_t DropDowns::GetText ( );
__declspec(implementation_key(2523)) void DropDowns::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2524)) DropDownPtr DropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(2525)) long DropDowns::GetCount ( );
__declspec(implementation_key(2526)) GroupObjectPtr DropDowns::Group ( );
__declspec(implementation_key(2527)) IDispatchPtr DropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(2528)) IUnknownPtr DropDowns::_NewEnum ( );
__declspec(implementation_key(2529)) _ApplicationPtr Spinner::GetApplication ( );
__declspec(implementation_key(2530)) enum XlCreator Spinner::GetCreator ( );
__declspec(implementation_key(2531)) IDispatchPtr Spinner::GetParent ( );
__declspec(implementation_key(2532)) RangePtr Spinner::GetBottomRightCell ( );
__declspec(implementation_key(2533)) _variant_t Spinner::BringToFront ( );
__declspec(implementation_key(2534)) _variant_t Spinner::Copy ( );
__declspec(implementation_key(2535)) _variant_t Spinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2536)) _variant_t Spinner::Cut ( );
__declspec(implementation_key(2537)) _variant_t Spinner::Delete ( );
__declspec(implementation_key(2538)) IDispatchPtr Spinner::Duplicate ( );
__declspec(implementation_key(2539)) VARIANT_BOOL Spinner::GetEnabled ( );
__declspec(implementation_key(2540)) void Spinner::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2541)) double Spinner::GetHeight ( );
__declspec(implementation_key(2542)) void Spinner::PutHeight ( double _arg1 );
__declspec(implementation_key(2543)) long Spinner::GetIndex ( );
__declspec(implementation_key(2544)) double Spinner::GetLeft ( );
__declspec(implementation_key(2545)) void Spinner::PutLeft ( double _arg1 );
__declspec(implementation_key(2546)) VARIANT_BOOL Spinner::GetLocked ( );
__declspec(implementation_key(2547)) void Spinner::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2548)) _bstr_t Spinner::GetName ( );
__declspec(implementation_key(2549)) void Spinner::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2550)) _bstr_t Spinner::GetOnAction ( );
__declspec(implementation_key(2551)) void Spinner::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2552)) _variant_t Spinner::GetPlacement ( );
__declspec(implementation_key(2553)) void Spinner::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2554)) VARIANT_BOOL Spinner::GetPrintObject ( );
__declspec(implementation_key(2555)) void Spinner::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2556)) _variant_t Spinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(2557)) _variant_t Spinner::SendToBack ( );
__declspec(implementation_key(2558)) double Spinner::GetTop ( );
__declspec(implementation_key(2559)) void Spinner::PutTop ( double _arg1 );
__declspec(implementation_key(2560)) RangePtr Spinner::GetTopLeftCell ( );
__declspec(implementation_key(2561)) VARIANT_BOOL Spinner::GetVisible ( );
__declspec(implementation_key(2562)) void Spinner::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2563)) double Spinner::GetWidth ( );
__declspec(implementation_key(2564)) void Spinner::PutWidth ( double _arg1 );
__declspec(implementation_key(2565)) long Spinner::GetZOrder ( );
__declspec(implementation_key(2566)) ShapeRangePtr Spinner::GetShapeRange ( );
__declspec(implementation_key(2567)) long Spinner::Get_Default ( );
__declspec(implementation_key(2568)) void Spinner::Put_Default ( long _arg1 );
__declspec(implementation_key(2569)) VARIANT_BOOL Spinner::GetDisplay3DShading ( );
__declspec(implementation_key(2570)) void Spinner::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2571)) _bstr_t Spinner::GetLinkedCell ( );
__declspec(implementation_key(2572)) void Spinner::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2573)) long Spinner::GetMax ( );
__declspec(implementation_key(2574)) void Spinner::PutMax ( long _arg1 );
__declspec(implementation_key(2575)) long Spinner::GetMin ( );
__declspec(implementation_key(2576)) void Spinner::PutMin ( long _arg1 );
__declspec(implementation_key(2577)) long Spinner::GetSmallChange ( );
__declspec(implementation_key(2578)) void Spinner::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2579)) long Spinner::GetValue ( );
__declspec(implementation_key(2580)) void Spinner::PutValue ( long _arg1 );
__declspec(implementation_key(2581)) _ApplicationPtr Spinners::GetApplication ( );
__declspec(implementation_key(2582)) enum XlCreator Spinners::GetCreator ( );
__declspec(implementation_key(2583)) IDispatchPtr Spinners::GetParent ( );
__declspec(implementation_key(2584)) _variant_t Spinners::BringToFront ( );
__declspec(implementation_key(2585)) _variant_t Spinners::Copy ( );
__declspec(implementation_key(2586)) _variant_t Spinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2587)) _variant_t Spinners::Cut ( );
__declspec(implementation_key(2588)) _variant_t Spinners::Delete ( );
__declspec(implementation_key(2589)) IDispatchPtr Spinners::Duplicate ( );
__declspec(implementation_key(2590)) VARIANT_BOOL Spinners::GetEnabled ( );
__declspec(implementation_key(2591)) void Spinners::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2592)) double Spinners::GetHeight ( );
__declspec(implementation_key(2593)) void Spinners::PutHeight ( double _arg1 );
__declspec(implementation_key(2594)) double Spinners::GetLeft ( );
__declspec(implementation_key(2595)) void Spinners::PutLeft ( double _arg1 );
__declspec(implementation_key(2596)) VARIANT_BOOL Spinners::GetLocked ( );
__declspec(implementation_key(2597)) void Spinners::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2598)) _bstr_t Spinners::GetOnAction ( );
__declspec(implementation_key(2599)) void Spinners::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2600)) _variant_t Spinners::GetPlacement ( );
__declspec(implementation_key(2601)) void Spinners::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2602)) VARIANT_BOOL Spinners::GetPrintObject ( );
__declspec(implementation_key(2603)) void Spinners::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2604)) _variant_t Spinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(2605)) _variant_t Spinners::SendToBack ( );
__declspec(implementation_key(2606)) double Spinners::GetTop ( );
__declspec(implementation_key(2607)) void Spinners::PutTop ( double _arg1 );
__declspec(implementation_key(2608)) VARIANT_BOOL Spinners::GetVisible ( );
__declspec(implementation_key(2609)) void Spinners::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2610)) double Spinners::GetWidth ( );
__declspec(implementation_key(2611)) void Spinners::PutWidth ( double _arg1 );
__declspec(implementation_key(2612)) long Spinners::GetZOrder ( );
__declspec(implementation_key(2613)) ShapeRangePtr Spinners::GetShapeRange ( );
__declspec(implementation_key(2614)) long Spinners::Get_Default ( );
__declspec(implementation_key(2615)) void Spinners::Put_Default ( long _arg1 );
__declspec(implementation_key(2616)) VARIANT_BOOL Spinners::GetDisplay3DShading ( );
__declspec(implementation_key(2617)) void Spinners::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2618)) _bstr_t Spinners::GetLinkedCell ( );
__declspec(implementation_key(2619)) void Spinners::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2620)) long Spinners::GetMax ( );
__declspec(implementation_key(2621)) void Spinners::PutMax ( long _arg1 );
__declspec(implementation_key(2622)) long Spinners::GetMin ( );
__declspec(implementation_key(2623)) void Spinners::PutMin ( long _arg1 );
__declspec(implementation_key(2624)) long Spinners::GetSmallChange ( );
__declspec(implementation_key(2625)) void Spinners::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2626)) long Spinners::GetValue ( );
__declspec(implementation_key(2627)) void Spinners::PutValue ( long _arg1 );
__declspec(implementation_key(2628)) SpinnerPtr Spinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2629)) long Spinners::GetCount ( );
__declspec(implementation_key(2630)) GroupObjectPtr Spinners::Group ( );
__declspec(implementation_key(2631)) IDispatchPtr Spinners::Item ( const _variant_t & Index );
__declspec(implementation_key(2632)) IUnknownPtr Spinners::_NewEnum ( );
__declspec(implementation_key(2633)) _ApplicationPtr DialogFrame::GetApplication ( );
__declspec(implementation_key(2634)) enum XlCreator DialogFrame::GetCreator ( );
__declspec(implementation_key(2635)) IDispatchPtr DialogFrame::GetParent ( );
__declspec(implementation_key(2636)) _variant_t DialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2637)) double DialogFrame::GetHeight ( );
__declspec(implementation_key(2638)) void DialogFrame::PutHeight ( double _arg1 );
__declspec(implementation_key(2639)) double DialogFrame::GetLeft ( );
__declspec(implementation_key(2640)) void DialogFrame::PutLeft ( double _arg1 );
__declspec(implementation_key(2641)) VARIANT_BOOL DialogFrame::GetLocked ( );
__declspec(implementation_key(2642)) void DialogFrame::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2643)) _bstr_t DialogFrame::GetName ( );
__declspec(implementation_key(2644)) void DialogFrame::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2645)) _bstr_t DialogFrame::GetOnAction ( );
__declspec(implementation_key(2646)) void DialogFrame::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2647)) _variant_t DialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(2648)) double DialogFrame::GetTop ( );
__declspec(implementation_key(2649)) void DialogFrame::PutTop ( double _arg1 );
__declspec(implementation_key(2650)) double DialogFrame::GetWidth ( );
__declspec(implementation_key(2651)) void DialogFrame::PutWidth ( double _arg1 );
__declspec(implementation_key(2652)) ShapeRangePtr DialogFrame::GetShapeRange ( );
__declspec(implementation_key(2653)) _bstr_t DialogFrame::GetCaption ( );
__declspec(implementation_key(2654)) void DialogFrame::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2655)) CharactersPtr DialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2656)) _variant_t DialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2657)) VARIANT_BOOL DialogFrame::GetLockedText ( );
__declspec(implementation_key(2658)) void DialogFrame::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2659)) _bstr_t DialogFrame::GetText ( );
__declspec(implementation_key(2660)) void DialogFrame::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2661)) _ApplicationPtr Label::GetApplication ( );
__declspec(implementation_key(2662)) enum XlCreator Label::GetCreator ( );
__declspec(implementation_key(2663)) IDispatchPtr Label::GetParent ( );
__declspec(implementation_key(2664)) RangePtr Label::GetBottomRightCell ( );
__declspec(implementation_key(2665)) _variant_t Label::BringToFront ( );
__declspec(implementation_key(2666)) _variant_t Label::Copy ( );
__declspec(implementation_key(2667)) _variant_t Label::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2668)) _variant_t Label::Cut ( );
__declspec(implementation_key(2669)) _variant_t Label::Delete ( );
__declspec(implementation_key(2670)) IDispatchPtr Label::Duplicate ( );
__declspec(implementation_key(2671)) VARIANT_BOOL Label::GetEnabled ( );
__declspec(implementation_key(2672)) void Label::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2673)) double Label::GetHeight ( );
__declspec(implementation_key(2674)) void Label::PutHeight ( double _arg1 );
__declspec(implementation_key(2675)) long Label::GetIndex ( );
__declspec(implementation_key(2676)) double Label::GetLeft ( );
__declspec(implementation_key(2677)) void Label::PutLeft ( double _arg1 );
__declspec(implementation_key(2678)) VARIANT_BOOL Label::GetLocked ( );
__declspec(implementation_key(2679)) void Label::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2680)) _bstr_t Label::GetName ( );
__declspec(implementation_key(2681)) void Label::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2682)) _bstr_t Label::GetOnAction ( );
__declspec(implementation_key(2683)) void Label::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2684)) _variant_t Label::GetPlacement ( );
__declspec(implementation_key(2685)) void Label::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2686)) VARIANT_BOOL Label::GetPrintObject ( );
__declspec(implementation_key(2687)) void Label::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2688)) _variant_t Label::Select ( const _variant_t & Replace );
__declspec(implementation_key(2689)) _variant_t Label::SendToBack ( );
__declspec(implementation_key(2690)) double Label::GetTop ( );
__declspec(implementation_key(2691)) void Label::PutTop ( double _arg1 );
__declspec(implementation_key(2692)) RangePtr Label::GetTopLeftCell ( );
__declspec(implementation_key(2693)) VARIANT_BOOL Label::GetVisible ( );
__declspec(implementation_key(2694)) void Label::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2695)) double Label::GetWidth ( );
__declspec(implementation_key(2696)) void Label::PutWidth ( double _arg1 );
__declspec(implementation_key(2697)) long Label::GetZOrder ( );
__declspec(implementation_key(2698)) ShapeRangePtr Label::GetShapeRange ( );
__declspec(implementation_key(2699)) _bstr_t Label::GetCaption ( );
__declspec(implementation_key(2700)) void Label::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2701)) CharactersPtr Label::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2702)) _variant_t Label::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2703)) VARIANT_BOOL Label::GetLockedText ( );
__declspec(implementation_key(2704)) void Label::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2705)) _bstr_t Label::GetText ( );
__declspec(implementation_key(2706)) void Label::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2707)) _variant_t Label::GetAccelerator ( );
__declspec(implementation_key(2708)) void Label::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2709)) _variant_t Label::GetPhoneticAccelerator ( );
__declspec(implementation_key(2710)) void Label::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2711)) _ApplicationPtr Labels::GetApplication ( );
__declspec(implementation_key(2712)) enum XlCreator Labels::GetCreator ( );
__declspec(implementation_key(2713)) IDispatchPtr Labels::GetParent ( );
__declspec(implementation_key(2714)) _variant_t Labels::BringToFront ( );
__declspec(implementation_key(2715)) _variant_t Labels::Copy ( );
__declspec(implementation_key(2716)) _variant_t Labels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2717)) _variant_t Labels::Cut ( );
__declspec(implementation_key(2718)) _variant_t Labels::Delete ( );
__declspec(implementation_key(2719)) IDispatchPtr Labels::Duplicate ( );
__declspec(implementation_key(2720)) VARIANT_BOOL Labels::GetEnabled ( );
__declspec(implementation_key(2721)) void Labels::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2722)) double Labels::GetHeight ( );
__declspec(implementation_key(2723)) void Labels::PutHeight ( double _arg1 );
__declspec(implementation_key(2724)) double Labels::GetLeft ( );
__declspec(implementation_key(2725)) void Labels::PutLeft ( double _arg1 );
__declspec(implementation_key(2726)) VARIANT_BOOL Labels::GetLocked ( );
__declspec(implementation_key(2727)) void Labels::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2728)) _bstr_t Labels::GetOnAction ( );
__declspec(implementation_key(2729)) void Labels::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2730)) _variant_t Labels::GetPlacement ( );
__declspec(implementation_key(2731)) void Labels::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2732)) VARIANT_BOOL Labels::GetPrintObject ( );
__declspec(implementation_key(2733)) void Labels::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2734)) _variant_t Labels::Select ( const _variant_t & Replace );
__declspec(implementation_key(2735)) _variant_t Labels::SendToBack ( );
__declspec(implementation_key(2736)) double Labels::GetTop ( );
__declspec(implementation_key(2737)) void Labels::PutTop ( double _arg1 );
__declspec(implementation_key(2738)) VARIANT_BOOL Labels::GetVisible ( );
__declspec(implementation_key(2739)) void Labels::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2740)) double Labels::GetWidth ( );
__declspec(implementation_key(2741)) void Labels::PutWidth ( double _arg1 );
__declspec(implementation_key(2742)) long Labels::GetZOrder ( );
__declspec(implementation_key(2743)) ShapeRangePtr Labels::GetShapeRange ( );
__declspec(implementation_key(2744)) _bstr_t Labels::GetCaption ( );
__declspec(implementation_key(2745)) void Labels::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2746)) CharactersPtr Labels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2747)) _variant_t Labels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2748)) VARIANT_BOOL Labels::GetLockedText ( );
__declspec(implementation_key(2749)) void Labels::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2750)) _bstr_t Labels::GetText ( );
__declspec(implementation_key(2751)) void Labels::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2752)) _variant_t Labels::GetAccelerator ( );
__declspec(implementation_key(2753)) void Labels::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2754)) _variant_t Labels::GetPhoneticAccelerator ( );
__declspec(implementation_key(2755)) void Labels::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2756)) LabelPtr Labels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2757)) long Labels::GetCount ( );
__declspec(implementation_key(2758)) GroupObjectPtr Labels::Group ( );
__declspec(implementation_key(2759)) IDispatchPtr Labels::Item ( const _variant_t & Index );
__declspec(implementation_key(2760)) IUnknownPtr Labels::_NewEnum ( );
__declspec(implementation_key(2761)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(2762)) enum XlCreator Panes::GetCreator ( );
__declspec(implementation_key(2763)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(2764)) long Panes::GetCount ( );
__declspec(implementation_key(2765)) PanePtr Panes::GetItem ( long Index );
__declspec(implementation_key(2766)) PanePtr Panes::Get_Default ( long Index );
__declspec(implementation_key(2767)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(2768)) enum XlCreator Pane::GetCreator ( );
__declspec(implementation_key(2769)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(2770)) VARIANT_BOOL Pane::Activate ( );
__declspec(implementation_key(2771)) long Pane::GetIndex ( );
__declspec(implementation_key(2772)) _variant_t Pane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(2773)) long Pane::GetScrollColumn ( );
__declspec(implementation_key(2774)) void Pane::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(2775)) long Pane::GetScrollRow ( );
__declspec(implementation_key(2776)) void Pane::PutScrollRow ( long _arg1 );
__declspec(implementation_key(2777)) _variant_t Pane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(2778)) RangePtr Pane::GetVisibleRange ( );
__declspec(implementation_key(2779)) HRESULT Pane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(2780)) _ApplicationPtr Scenarios::GetApplication ( );
__declspec(implementation_key(2781)) enum XlCreator Scenarios::GetCreator ( );
__declspec(implementation_key(2782)) IDispatchPtr Scenarios::GetParent ( );
__declspec(implementation_key(2783)) ScenarioPtr Scenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(2784)) long Scenarios::GetCount ( );
__declspec(implementation_key(2785)) _variant_t Scenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(2786)) ScenarioPtr Scenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(2787)) _variant_t Scenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(2788)) IUnknownPtr Scenarios::_NewEnum ( );
__declspec(implementation_key(2789)) _ApplicationPtr Scenario::GetApplication ( );
__declspec(implementation_key(2790)) enum XlCreator Scenario::GetCreator ( );
__declspec(implementation_key(2791)) IDispatchPtr Scenario::GetParent ( );
__declspec(implementation_key(2792)) _variant_t Scenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(2793)) RangePtr Scenario::GetChangingCells ( );
__declspec(implementation_key(2794)) _bstr_t Scenario::GetComment ( );
__declspec(implementation_key(2795)) void Scenario::PutComment ( _bstr_t _arg1 );
__declspec(implementation_key(2796)) _variant_t Scenario::Delete ( );
__declspec(implementation_key(2797)) VARIANT_BOOL Scenario::GetHidden ( );
__declspec(implementation_key(2798)) void Scenario::PutHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2799)) long Scenario::GetIndex ( );
__declspec(implementation_key(2800)) VARIANT_BOOL Scenario::GetLocked ( );
__declspec(implementation_key(2801)) void Scenario::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2802)) _bstr_t Scenario::GetName ( );
__declspec(implementation_key(2803)) void Scenario::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2804)) _variant_t Scenario::Show ( );
__declspec(implementation_key(2805)) _variant_t Scenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(2806)) _ApplicationPtr GroupObject::GetApplication ( );
__declspec(implementation_key(2807)) enum XlCreator GroupObject::GetCreator ( );
__declspec(implementation_key(2808)) IDispatchPtr GroupObject::GetParent ( );
__declspec(implementation_key(2809)) RangePtr GroupObject::GetBottomRightCell ( );
__declspec(implementation_key(2810)) _variant_t GroupObject::BringToFront ( );
__declspec(implementation_key(2811)) _variant_t GroupObject::Copy ( );
__declspec(implementation_key(2812)) _variant_t GroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2813)) _variant_t GroupObject::Cut ( );
__declspec(implementation_key(2814)) _variant_t GroupObject::Delete ( );
__declspec(implementation_key(2815)) IDispatchPtr GroupObject::Duplicate ( );
__declspec(implementation_key(2816)) VARIANT_BOOL GroupObject::GetEnabled ( );
__declspec(implementation_key(2817)) void GroupObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2818)) double GroupObject::GetHeight ( );
__declspec(implementation_key(2819)) void GroupObject::PutHeight ( double _arg1 );
__declspec(implementation_key(2820)) long GroupObject::GetIndex ( );
__declspec(implementation_key(2821)) double GroupObject::GetLeft ( );
__declspec(implementation_key(2822)) void GroupObject::PutLeft ( double _arg1 );
__declspec(implementation_key(2823)) VARIANT_BOOL GroupObject::GetLocked ( );
__declspec(implementation_key(2824)) void GroupObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2825)) _bstr_t GroupObject::GetName ( );
__declspec(implementation_key(2826)) void GroupObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2827)) _bstr_t GroupObject::GetOnAction ( );
__declspec(implementation_key(2828)) void GroupObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2829)) _variant_t GroupObject::GetPlacement ( );
__declspec(implementation_key(2830)) void GroupObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2831)) VARIANT_BOOL GroupObject::GetPrintObject ( );
__declspec(implementation_key(2832)) void GroupObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2833)) _variant_t GroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(2834)) _variant_t GroupObject::SendToBack ( );
__declspec(implementation_key(2835)) double GroupObject::GetTop ( );
__declspec(implementation_key(2836)) void GroupObject::PutTop ( double _arg1 );
__declspec(implementation_key(2837)) RangePtr GroupObject::GetTopLeftCell ( );
__declspec(implementation_key(2838)) VARIANT_BOOL GroupObject::GetVisible ( );
__declspec(implementation_key(2839)) void GroupObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2840)) double GroupObject::GetWidth ( );
__declspec(implementation_key(2841)) void GroupObject::PutWidth ( double _arg1 );
__declspec(implementation_key(2842)) long GroupObject::GetZOrder ( );
__declspec(implementation_key(2843)) ShapeRangePtr GroupObject::GetShapeRange ( );
__declspec(implementation_key(2844)) VARIANT_BOOL GroupObject::GetAddIndent ( );
__declspec(implementation_key(2845)) void GroupObject::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2846)) _variant_t GroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(2847)) void GroupObject::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(2848)) _variant_t GroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(2849)) void GroupObject::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(2850)) _variant_t GroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(2851)) void GroupObject::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(2852)) VARIANT_BOOL GroupObject::GetAutoSize ( );
__declspec(implementation_key(2853)) void GroupObject::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2854)) BorderPtr GroupObject::GetBorder ( );
__declspec(implementation_key(2855)) _variant_t GroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2856)) long GroupObject::Get_Default ( );
__declspec(implementation_key(2857)) void GroupObject::Put_Default ( long _arg1 );
__declspec(implementation_key(2858)) FontPtr GroupObject::GetFont ( );
__declspec(implementation_key(2859)) _variant_t GroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(2860)) void GroupObject::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(2861)) InteriorPtr GroupObject::GetInterior ( );
__declspec(implementation_key(2862)) _variant_t GroupObject::GetOrientation ( );
__declspec(implementation_key(2863)) void GroupObject::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(2864)) VARIANT_BOOL GroupObject::GetRoundedCorners ( );
__declspec(implementation_key(2865)) void GroupObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2866)) VARIANT_BOOL GroupObject::GetShadow ( );
__declspec(implementation_key(2867)) void GroupObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2868)) IDispatchPtr GroupObject::Ungroup ( );
__declspec(implementation_key(2869)) _variant_t GroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(2870)) void GroupObject::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(2871)) long GroupObject::GetReadingOrder ( );
__declspec(implementation_key(2872)) void GroupObject::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(2873)) _ApplicationPtr GroupObjects::GetApplication ( );
__declspec(implementation_key(2874)) enum XlCreator GroupObjects::GetCreator ( );
__declspec(implementation_key(2875)) IDispatchPtr GroupObjects::GetParent ( );
__declspec(implementation_key(2876)) _variant_t GroupObjects::BringToFront ( );
__declspec(implementation_key(2877)) _variant_t GroupObjects::Copy ( );
__declspec(implementation_key(2878)) _variant_t GroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2879)) _variant_t GroupObjects::Cut ( );
__declspec(implementation_key(2880)) _variant_t GroupObjects::Delete ( );
__declspec(implementation_key(2881)) IDispatchPtr GroupObjects::Duplicate ( );
__declspec(implementation_key(2882)) VARIANT_BOOL GroupObjects::GetEnabled ( );
__declspec(implementation_key(2883)) void GroupObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2884)) double GroupObjects::GetHeight ( );
__declspec(implementation_key(2885)) void GroupObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(2886)) double GroupObjects::GetLeft ( );
__declspec(implementation_key(2887)) void GroupObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(2888)) VARIANT_BOOL GroupObjects::GetLocked ( );
__declspec(implementation_key(2889)) void GroupObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2890)) _bstr_t GroupObjects::GetOnAction ( );
__declspec(implementation_key(2891)) void GroupObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2892)) _variant_t GroupObjects::GetPlacement ( );
__declspec(implementation_key(2893)) void GroupObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2894)) VARIANT_BOOL GroupObjects::GetPrintObject ( );
__declspec(implementation_key(2895)) void GroupObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2896)) _variant_t GroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(2897)) _variant_t GroupObjects::SendToBack ( );
__declspec(implementation_key(2898)) double GroupObjects::GetTop ( );
__declspec(implementation_key(2899)) void GroupObjects::PutTop ( double _arg1 );
__declspec(implementation_key(2900)) VARIANT_BOOL GroupObjects::GetVisible ( );
__declspec(implementation_key(2901)) void GroupObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2902)) double GroupObjects::GetWidth ( );
__declspec(implementation_key(2903)) void GroupObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(2904)) long GroupObjects::GetZOrder ( );
__declspec(implementation_key(2905)) ShapeRangePtr GroupObjects::GetShapeRange ( );
__declspec(implementation_key(2906)) VARIANT_BOOL GroupObjects::GetAddIndent ( );
__declspec(implementation_key(2907)) void GroupObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2908)) _variant_t GroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(2909)) void GroupObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(2910)) _variant_t GroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(2911)) void GroupObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(2912)) _variant_t GroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(2913)) void GroupObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(2914)) VARIANT_BOOL GroupObjects::GetAutoSize ( );
__declspec(implementation_key(2915)) void GroupObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2916)) BorderPtr GroupObjects::GetBorder ( );
__declspec(implementation_key(2917)) _variant_t GroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2918)) long GroupObjects::Get_Default ( );
__declspec(implementation_key(2919)) void GroupObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(2920)) FontPtr GroupObjects::GetFont ( );
__declspec(implementation_key(2921)) _variant_t GroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(2922)) void GroupObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(2923)) InteriorPtr GroupObjects::GetInterior ( );
__declspec(implementation_key(2924)) _variant_t GroupObjects::GetOrientation ( );
__declspec(implementation_key(2925)) void GroupObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(2926)) VARIANT_BOOL GroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(2927)) void GroupObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2928)) VARIANT_BOOL GroupObjects::GetShadow ( );
__declspec(implementation_key(2929)) void GroupObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2930)) IDispatchPtr GroupObjects::Ungroup ( );
__declspec(implementation_key(2931)) _variant_t GroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(2932)) void GroupObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(2933)) long GroupObjects::GetReadingOrder ( );
__declspec(implementation_key(2934)) void GroupObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(2935)) long GroupObjects::GetCount ( );
__declspec(implementation_key(2936)) GroupObjectPtr GroupObjects::Group ( );
__declspec(implementation_key(2937)) IDispatchPtr GroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(2938)) IUnknownPtr GroupObjects::_NewEnum ( );
__declspec(implementation_key(2939)) _ApplicationPtr Line::GetApplication ( );
__declspec(implementation_key(2940)) enum XlCreator Line::GetCreator ( );
__declspec(implementation_key(2941)) IDispatchPtr Line::GetParent ( );
__declspec(implementation_key(2942)) RangePtr Line::GetBottomRightCell ( );
__declspec(implementation_key(2943)) _variant_t Line::BringToFront ( );
__declspec(implementation_key(2944)) _variant_t Line::Copy ( );
__declspec(implementation_key(2945)) _variant_t Line::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2946)) _variant_t Line::Cut ( );
__declspec(implementation_key(2947)) _variant_t Line::Delete ( );
__declspec(implementation_key(2948)) IDispatchPtr Line::Duplicate ( );
__declspec(implementation_key(2949)) VARIANT_BOOL Line::GetEnabled ( );
__declspec(implementation_key(2950)) void Line::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2951)) double Line::GetHeight ( );
__declspec(implementation_key(2952)) void Line::PutHeight ( double _arg1 );
__declspec(implementation_key(2953)) long Line::GetIndex ( );
__declspec(implementation_key(2954)) double Line::GetLeft ( );
__declspec(implementation_key(2955)) void Line::PutLeft ( double _arg1 );
__declspec(implementation_key(2956)) VARIANT_BOOL Line::GetLocked ( );
__declspec(implementation_key(2957)) void Line::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2958)) _bstr_t Line::GetName ( );
__declspec(implementation_key(2959)) void Line::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2960)) _bstr_t Line::GetOnAction ( );
__declspec(implementation_key(2961)) void Line::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2962)) _variant_t Line::GetPlacement ( );
__declspec(implementation_key(2963)) void Line::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2964)) VARIANT_BOOL Line::GetPrintObject ( );
__declspec(implementation_key(2965)) void Line::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2966)) _variant_t Line::Select ( const _variant_t & Replace );
__declspec(implementation_key(2967)) _variant_t Line::SendToBack ( );
__declspec(implementation_key(2968)) double Line::GetTop ( );
__declspec(implementation_key(2969)) void Line::PutTop ( double _arg1 );
__declspec(implementation_key(2970)) RangePtr Line::GetTopLeftCell ( );
__declspec(implementation_key(2971)) VARIANT_BOOL Line::GetVisible ( );
__declspec(implementation_key(2972)) void Line::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2973)) double Line::GetWidth ( );
__declspec(implementation_key(2974)) void Line::PutWidth ( double _arg1 );
__declspec(implementation_key(2975)) long Line::GetZOrder ( );
__declspec(implementation_key(2976)) ShapeRangePtr Line::GetShapeRange ( );
__declspec(implementation_key(2977)) _variant_t Line::GetArrowHeadLength ( );
__declspec(implementation_key(2978)) void Line::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(2979)) _variant_t Line::GetArrowHeadStyle ( );
__declspec(implementation_key(2980)) void Line::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(2981)) _variant_t Line::GetArrowHeadWidth ( );
__declspec(implementation_key(2982)) void Line::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(2983)) BorderPtr Line::GetBorder ( );
__declspec(implementation_key(2984)) _ApplicationPtr Lines::GetApplication ( );
__declspec(implementation_key(2985)) enum XlCreator Lines::GetCreator ( );
__declspec(implementation_key(2986)) IDispatchPtr Lines::GetParent ( );
__declspec(implementation_key(2987)) _variant_t Lines::BringToFront ( );
__declspec(implementation_key(2988)) _variant_t Lines::Copy ( );
__declspec(implementation_key(2989)) _variant_t Lines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2990)) _variant_t Lines::Cut ( );
__declspec(implementation_key(2991)) _variant_t Lines::Delete ( );
__declspec(implementation_key(2992)) IDispatchPtr Lines::Duplicate ( );
__declspec(implementation_key(2993)) VARIANT_BOOL Lines::GetEnabled ( );
__declspec(implementation_key(2994)) void Lines::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2995)) double Lines::GetHeight ( );
__declspec(implementation_key(2996)) void Lines::PutHeight ( double _arg1 );
__declspec(implementation_key(2997)) double Lines::GetLeft ( );
__declspec(implementation_key(2998)) void Lines::PutLeft ( double _arg1 );
__declspec(implementation_key(2999)) VARIANT_BOOL Lines::GetLocked ( );
__declspec(implementation_key(3000)) void Lines::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3001)) _bstr_t Lines::GetOnAction ( );
__declspec(implementation_key(3002)) void Lines::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3003)) _variant_t Lines::GetPlacement ( );
__declspec(implementation_key(3004)) void Lines::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3005)) VARIANT_BOOL Lines::GetPrintObject ( );
__declspec(implementation_key(3006)) void Lines::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3007)) _variant_t Lines::Select ( const _variant_t & Replace );
__declspec(implementation_key(3008)) _variant_t Lines::SendToBack ( );
__declspec(implementation_key(3009)) double Lines::GetTop ( );
__declspec(implementation_key(3010)) void Lines::PutTop ( double _arg1 );
__declspec(implementation_key(3011)) VARIANT_BOOL Lines::GetVisible ( );
__declspec(implementation_key(3012)) void Lines::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3013)) double Lines::GetWidth ( );
__declspec(implementation_key(3014)) void Lines::PutWidth ( double _arg1 );
__declspec(implementation_key(3015)) long Lines::GetZOrder ( );
__declspec(implementation_key(3016)) ShapeRangePtr Lines::GetShapeRange ( );
__declspec(implementation_key(3017)) _variant_t Lines::GetArrowHeadLength ( );
__declspec(implementation_key(3018)) void Lines::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(3019)) _variant_t Lines::GetArrowHeadStyle ( );
__declspec(implementation_key(3020)) void Lines::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(3021)) _variant_t Lines::GetArrowHeadWidth ( );
__declspec(implementation_key(3022)) void Lines::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(3023)) BorderPtr Lines::GetBorder ( );
__declspec(implementation_key(3024)) LinePtr Lines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(3025)) long Lines::GetCount ( );
__declspec(implementation_key(3026)) GroupObjectPtr Lines::Group ( );
__declspec(implementation_key(3027)) IDispatchPtr Lines::Item ( const _variant_t & Index );
__declspec(implementation_key(3028)) IUnknownPtr Lines::_NewEnum ( );
__declspec(implementation_key(3029)) _ApplicationPtr Rectangle::GetApplication ( );
__declspec(implementation_key(3030)) enum XlCreator Rectangle::GetCreator ( );
__declspec(implementation_key(3031)) IDispatchPtr Rectangle::GetParent ( );
__declspec(implementation_key(3032)) RangePtr Rectangle::GetBottomRightCell ( );
__declspec(implementation_key(3033)) _variant_t Rectangle::BringToFront ( );
__declspec(implementation_key(3034)) _variant_t Rectangle::Copy ( );
__declspec(implementation_key(3035)) _variant_t Rectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3036)) _variant_t Rectangle::Cut ( );
__declspec(implementation_key(3037)) _variant_t Rectangle::Delete ( );
__declspec(implementation_key(3038)) IDispatchPtr Rectangle::Duplicate ( );
__declspec(implementation_key(3039)) VARIANT_BOOL Rectangle::GetEnabled ( );
__declspec(implementation_key(3040)) void Rectangle::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3041)) double Rectangle::GetHeight ( );
__declspec(implementation_key(3042)) void Rectangle::PutHeight ( double _arg1 );
__declspec(implementation_key(3043)) long Rectangle::GetIndex ( );
__declspec(implementation_key(3044)) double Rectangle::GetLeft ( );
__declspec(implementation_key(3045)) void Rectangle::PutLeft ( double _arg1 );
__declspec(implementation_key(3046)) VARIANT_BOOL Rectangle::GetLocked ( );
__declspec(implementation_key(3047)) void Rectangle::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3048)) _bstr_t Rectangle::GetName ( );
__declspec(implementation_key(3049)) void Rectangle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3050)) _bstr_t Rectangle::GetOnAction ( );
__declspec(implementation_key(3051)) void Rectangle::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3052)) _variant_t Rectangle::GetPlacement ( );
__declspec(implementation_key(3053)) void Rectangle::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3054)) VARIANT_BOOL Rectangle::GetPrintObject ( );
__declspec(implementation_key(3055)) void Rectangle::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3056)) _variant_t Rectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(3057)) _variant_t Rectangle::SendToBack ( );
__declspec(implementation_key(3058)) double Rectangle::GetTop ( );
__declspec(implementation_key(3059)) void Rectangle::PutTop ( double _arg1 );
__declspec(implementation_key(3060)) RangePtr Rectangle::GetTopLeftCell ( );
__declspec(implementation_key(3061)) VARIANT_BOOL Rectangle::GetVisible ( );
__declspec(implementation_key(3062)) void Rectangle::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3063)) double Rectangle::GetWidth ( );
__declspec(implementation_key(3064)) void Rectangle::PutWidth ( double _arg1 );
__declspec(implementation_key(3065)) long Rectangle::GetZOrder ( );
__declspec(implementation_key(3066)) ShapeRangePtr Rectangle::GetShapeRange ( );
__declspec(implementation_key(3067)) VARIANT_BOOL Rectangle::GetAddIndent ( );
__declspec(implementation_key(3068)) void Rectangle::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3069)) _variant_t Rectangle::GetAutoScaleFont ( );
__declspec(implementation_key(3070)) void Rectangle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3071)) VARIANT_BOOL Rectangle::GetAutoSize ( );
__declspec(implementation_key(3072)) void Rectangle::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3073)) _bstr_t Rectangle::GetCaption ( );
__declspec(implementation_key(3074)) void Rectangle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3075)) CharactersPtr Rectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3076)) _variant_t Rectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3077)) FontPtr Rectangle::GetFont ( );
__declspec(implementation_key(3078)) _bstr_t Rectangle::GetFormula ( );
__declspec(implementation_key(3079)) void Rectangle::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3080)) _variant_t Rectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(3081)) void Rectangle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3082)) VARIANT_BOOL Rectangle::GetLockedText ( );
__declspec(implementation_key(3083)) void Rectangle::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3084)) _variant_t Rectangle::GetOrientation ( );
__declspec(implementation_key(3085)) void Rectangle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3086)) _bstr_t Rectangle::GetText ( );
__declspec(implementation_key(3087)) void Rectangle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3088)) _variant_t Rectangle::GetVerticalAlignment ( );
__declspec(implementation_key(3089)) void Rectangle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3090)) long Rectangle::GetReadingOrder ( );
__declspec(implementation_key(3091)) void Rectangle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3092)) BorderPtr Rectangle::GetBorder ( );
__declspec(implementation_key(3093)) InteriorPtr Rectangle::GetInterior ( );
__declspec(implementation_key(3094)) VARIANT_BOOL Rectangle::GetShadow ( );
__declspec(implementation_key(3095)) void Rectangle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3096)) VARIANT_BOOL Rectangle::GetRoundedCorners ( );
__declspec(implementation_key(3097)) void Rectangle::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3098)) _ApplicationPtr Rectangles::GetApplication ( );
__declspec(implementation_key(3099)) enum XlCreator Rectangles::GetCreator ( );
__declspec(implementation_key(3100)) IDispatchPtr Rectangles::GetParent ( );
__declspec(implementation_key(3101)) _variant_t Rectangles::BringToFront ( );
__declspec(implementation_key(3102)) _variant_t Rectangles::Copy ( );
__declspec(implementation_key(3103)) _variant_t Rectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3104)) _variant_t Rectangles::Cut ( );
__declspec(implementation_key(3105)) _variant_t Rectangles::Delete ( );
__declspec(implementation_key(3106)) IDispatchPtr Rectangles::Duplicate ( );
__declspec(implementation_key(3107)) VARIANT_BOOL Rectangles::GetEnabled ( );
__declspec(implementation_key(3108)) void Rectangles::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3109)) double Rectangles::GetHeight ( );
__declspec(implementation_key(3110)) void Rectangles::PutHeight ( double _arg1 );
__declspec(implementation_key(3111)) double Rectangles::GetLeft ( );
__declspec(implementation_key(3112)) void Rectangles::PutLeft ( double _arg1 );
__declspec(implementation_key(3113)) VARIANT_BOOL Rectangles::GetLocked ( );
__declspec(implementation_key(3114)) void Rectangles::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3115)) _bstr_t Rectangles::GetOnAction ( );
__declspec(implementation_key(3116)) void Rectangles::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3117)) _variant_t Rectangles::GetPlacement ( );
__declspec(implementation_key(3118)) void Rectangles::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3119)) VARIANT_BOOL Rectangles::GetPrintObject ( );
__declspec(implementation_key(3120)) void Rectangles::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3121)) _variant_t Rectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(3122)) _variant_t Rectangles::SendToBack ( );
__declspec(implementation_key(3123)) double Rectangles::GetTop ( );
__declspec(implementation_key(3124)) void Rectangles::PutTop ( double _arg1 );
__declspec(implementation_key(3125)) VARIANT_BOOL Rectangles::GetVisible ( );
__declspec(implementation_key(3126)) void Rectangles::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3127)) double Rectangles::GetWidth ( );
__declspec(implementation_key(3128)) void Rectangles::PutWidth ( double _arg1 );
__declspec(implementation_key(3129)) long Rectangles::GetZOrder ( );
__declspec(implementation_key(3130)) ShapeRangePtr Rectangles::GetShapeRange ( );
__declspec(implementation_key(3131)) VARIANT_BOOL Rectangles::GetAddIndent ( );
__declspec(implementation_key(3132)) void Rectangles::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3133)) _variant_t Rectangles::GetAutoScaleFont ( );
__declspec(implementation_key(3134)) void Rectangles::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3135)) VARIANT_BOOL Rectangles::GetAutoSize ( );
__declspec(implementation_key(3136)) void Rectangles::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3137)) _bstr_t Rectangles::GetCaption ( );
__declspec(implementation_key(3138)) void Rectangles::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3139)) CharactersPtr Rectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3140)) _variant_t Rectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3141)) FontPtr Rectangles::GetFont ( );
__declspec(implementation_key(3142)) _bstr_t Rectangles::GetFormula ( );
__declspec(implementation_key(3143)) void Rectangles::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3144)) _variant_t Rectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(3145)) void Rectangles::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3146)) VARIANT_BOOL Rectangles::GetLockedText ( );
__declspec(implementation_key(3147)) void Rectangles::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3148)) _variant_t Rectangles::GetOrientation ( );
__declspec(implementation_key(3149)) void Rectangles::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3150)) _bstr_t Rectangles::GetText ( );
__declspec(implementation_key(3151)) void Rectangles::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3152)) _variant_t Rectangles::GetVerticalAlignment ( );
__declspec(implementation_key(3153)) void Rectangles::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3154)) long Rectangles::GetReadingOrder ( );
__declspec(implementation_key(3155)) void Rectangles::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3156)) BorderPtr Rectangles::GetBorder ( );
__declspec(implementation_key(3157)) InteriorPtr Rectangles::GetInterior ( );
__declspec(implementation_key(3158)) VARIANT_BOOL Rectangles::GetShadow ( );
__declspec(implementation_key(3159)) void Rectangles::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3160)) VARIANT_BOOL Rectangles::GetRoundedCorners ( );
__declspec(implementation_key(3161)) void Rectangles::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3162)) RectanglePtr Rectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3163)) long Rectangles::GetCount ( );
__declspec(implementation_key(3164)) GroupObjectPtr Rectangles::Group ( );
__declspec(implementation_key(3165)) IDispatchPtr Rectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(3166)) IUnknownPtr Rectangles::_NewEnum ( );
__declspec(implementation_key(3167)) _ApplicationPtr Oval::GetApplication ( );
__declspec(implementation_key(3168)) enum XlCreator Oval::GetCreator ( );
__declspec(implementation_key(3169)) IDispatchPtr Oval::GetParent ( );
__declspec(implementation_key(3170)) RangePtr Oval::GetBottomRightCell ( );
__declspec(implementation_key(3171)) _variant_t Oval::BringToFront ( );
__declspec(implementation_key(3172)) _variant_t Oval::Copy ( );
__declspec(implementation_key(3173)) _variant_t Oval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3174)) _variant_t Oval::Cut ( );
__declspec(implementation_key(3175)) _variant_t Oval::Delete ( );
__declspec(implementation_key(3176)) IDispatchPtr Oval::Duplicate ( );
__declspec(implementation_key(3177)) VARIANT_BOOL Oval::GetEnabled ( );
__declspec(implementation_key(3178)) void Oval::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3179)) double Oval::GetHeight ( );
__declspec(implementation_key(3180)) void Oval::PutHeight ( double _arg1 );
__declspec(implementation_key(3181)) long Oval::GetIndex ( );
__declspec(implementation_key(3182)) double Oval::GetLeft ( );
__declspec(implementation_key(3183)) void Oval::PutLeft ( double _arg1 );
__declspec(implementation_key(3184)) VARIANT_BOOL Oval::GetLocked ( );
__declspec(implementation_key(3185)) void Oval::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3186)) _bstr_t Oval::GetName ( );
__declspec(implementation_key(3187)) void Oval::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3188)) _bstr_t Oval::GetOnAction ( );
__declspec(implementation_key(3189)) void Oval::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3190)) _variant_t Oval::GetPlacement ( );
__declspec(implementation_key(3191)) void Oval::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3192)) VARIANT_BOOL Oval::GetPrintObject ( );
__declspec(implementation_key(3193)) void Oval::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3194)) _variant_t Oval::Select ( const _variant_t & Replace );
__declspec(implementation_key(3195)) _variant_t Oval::SendToBack ( );
__declspec(implementation_key(3196)) double Oval::GetTop ( );
__declspec(implementation_key(3197)) void Oval::PutTop ( double _arg1 );
__declspec(implementation_key(3198)) RangePtr Oval::GetTopLeftCell ( );
__declspec(implementation_key(3199)) VARIANT_BOOL Oval::GetVisible ( );
__declspec(implementation_key(3200)) void Oval::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3201)) double Oval::GetWidth ( );
__declspec(implementation_key(3202)) void Oval::PutWidth ( double _arg1 );
__declspec(implementation_key(3203)) long Oval::GetZOrder ( );
__declspec(implementation_key(3204)) ShapeRangePtr Oval::GetShapeRange ( );
__declspec(implementation_key(3205)) VARIANT_BOOL Oval::GetAddIndent ( );
__declspec(implementation_key(3206)) void Oval::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3207)) _variant_t Oval::GetAutoScaleFont ( );
__declspec(implementation_key(3208)) void Oval::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3209)) VARIANT_BOOL Oval::GetAutoSize ( );
__declspec(implementation_key(3210)) void Oval::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3211)) _bstr_t Oval::GetCaption ( );
__declspec(implementation_key(3212)) void Oval::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3213)) CharactersPtr Oval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3214)) _variant_t Oval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3215)) FontPtr Oval::GetFont ( );
__declspec(implementation_key(3216)) _bstr_t Oval::GetFormula ( );
__declspec(implementation_key(3217)) void Oval::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3218)) _variant_t Oval::GetHorizontalAlignment ( );
__declspec(implementation_key(3219)) void Oval::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3220)) VARIANT_BOOL Oval::GetLockedText ( );
__declspec(implementation_key(3221)) void Oval::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3222)) _variant_t Oval::GetOrientation ( );
__declspec(implementation_key(3223)) void Oval::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3224)) _bstr_t Oval::GetText ( );
__declspec(implementation_key(3225)) void Oval::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3226)) _variant_t Oval::GetVerticalAlignment ( );
__declspec(implementation_key(3227)) void Oval::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3228)) long Oval::GetReadingOrder ( );
__declspec(implementation_key(3229)) void Oval::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3230)) BorderPtr Oval::GetBorder ( );
__declspec(implementation_key(3231)) InteriorPtr Oval::GetInterior ( );
__declspec(implementation_key(3232)) VARIANT_BOOL Oval::GetShadow ( );
__declspec(implementation_key(3233)) void Oval::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3234)) _ApplicationPtr Ovals::GetApplication ( );
__declspec(implementation_key(3235)) enum XlCreator Ovals::GetCreator ( );
__declspec(implementation_key(3236)) IDispatchPtr Ovals::GetParent ( );
__declspec(implementation_key(3237)) _variant_t Ovals::BringToFront ( );
__declspec(implementation_key(3238)) _variant_t Ovals::Copy ( );
__declspec(implementation_key(3239)) _variant_t Ovals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3240)) _variant_t Ovals::Cut ( );
__declspec(implementation_key(3241)) _variant_t Ovals::Delete ( );
__declspec(implementation_key(3242)) IDispatchPtr Ovals::Duplicate ( );
__declspec(implementation_key(3243)) VARIANT_BOOL Ovals::GetEnabled ( );
__declspec(implementation_key(3244)) void Ovals::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3245)) double Ovals::GetHeight ( );
__declspec(implementation_key(3246)) void Ovals::PutHeight ( double _arg1 );
__declspec(implementation_key(3247)) double Ovals::GetLeft ( );
__declspec(implementation_key(3248)) void Ovals::PutLeft ( double _arg1 );
__declspec(implementation_key(3249)) VARIANT_BOOL Ovals::GetLocked ( );
__declspec(implementation_key(3250)) void Ovals::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3251)) _bstr_t Ovals::GetOnAction ( );
__declspec(implementation_key(3252)) void Ovals::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3253)) _variant_t Ovals::GetPlacement ( );
__declspec(implementation_key(3254)) void Ovals::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3255)) VARIANT_BOOL Ovals::GetPrintObject ( );
__declspec(implementation_key(3256)) void Ovals::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3257)) _variant_t Ovals::Select ( const _variant_t & Replace );
__declspec(implementation_key(3258)) _variant_t Ovals::SendToBack ( );
__declspec(implementation_key(3259)) double Ovals::GetTop ( );
__declspec(implementation_key(3260)) void Ovals::PutTop ( double _arg1 );
__declspec(implementation_key(3261)) VARIANT_BOOL Ovals::GetVisible ( );
__declspec(implementation_key(3262)) void Ovals::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3263)) double Ovals::GetWidth ( );
__declspec(implementation_key(3264)) void Ovals::PutWidth ( double _arg1 );
__declspec(implementation_key(3265)) long Ovals::GetZOrder ( );
__declspec(implementation_key(3266)) ShapeRangePtr Ovals::GetShapeRange ( );
__declspec(implementation_key(3267)) VARIANT_BOOL Ovals::GetAddIndent ( );
__declspec(implementation_key(3268)) void Ovals::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3269)) _variant_t Ovals::GetAutoScaleFont ( );
__declspec(implementation_key(3270)) void Ovals::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3271)) VARIANT_BOOL Ovals::GetAutoSize ( );
__declspec(implementation_key(3272)) void Ovals::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3273)) _bstr_t Ovals::GetCaption ( );
__declspec(implementation_key(3274)) void Ovals::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3275)) CharactersPtr Ovals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3276)) _variant_t Ovals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3277)) FontPtr Ovals::GetFont ( );
__declspec(implementation_key(3278)) _bstr_t Ovals::GetFormula ( );
__declspec(implementation_key(3279)) void Ovals::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3280)) _variant_t Ovals::GetHorizontalAlignment ( );
__declspec(implementation_key(3281)) void Ovals::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3282)) VARIANT_BOOL Ovals::GetLockedText ( );
__declspec(implementation_key(3283)) void Ovals::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3284)) _variant_t Ovals::GetOrientation ( );
__declspec(implementation_key(3285)) void Ovals::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3286)) _bstr_t Ovals::GetText ( );
__declspec(implementation_key(3287)) void Ovals::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3288)) _variant_t Ovals::GetVerticalAlignment ( );
__declspec(implementation_key(3289)) void Ovals::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3290)) long Ovals::GetReadingOrder ( );
__declspec(implementation_key(3291)) void Ovals::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3292)) BorderPtr Ovals::GetBorder ( );
__declspec(implementation_key(3293)) InteriorPtr Ovals::GetInterior ( );
__declspec(implementation_key(3294)) VARIANT_BOOL Ovals::GetShadow ( );
__declspec(implementation_key(3295)) void Ovals::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3296)) OvalPtr Ovals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3297)) long Ovals::GetCount ( );
__declspec(implementation_key(3298)) GroupObjectPtr Ovals::Group ( );
__declspec(implementation_key(3299)) IDispatchPtr Ovals::Item ( const _variant_t & Index );
__declspec(implementation_key(3300)) IUnknownPtr Ovals::_NewEnum ( );
__declspec(implementation_key(3301)) _ApplicationPtr Arc::GetApplication ( );
__declspec(implementation_key(3302)) enum XlCreator Arc::GetCreator ( );
__declspec(implementation_key(3303)) IDispatchPtr Arc::GetParent ( );
__declspec(implementation_key(3304)) RangePtr Arc::GetBottomRightCell ( );
__declspec(implementation_key(3305)) _variant_t Arc::BringToFront ( );
__declspec(implementation_key(3306)) _variant_t Arc::Copy ( );
__declspec(implementation_key(3307)) _variant_t Arc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3308)) _variant_t Arc::Cut ( );
__declspec(implementation_key(3309)) _variant_t Arc::Delete ( );
__declspec(implementation_key(3310)) IDispatchPtr Arc::Duplicate ( );
__declspec(implementation_key(3311)) VARIANT_BOOL Arc::GetEnabled ( );
__declspec(implementation_key(3312)) void Arc::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3313)) double Arc::GetHeight ( );
__declspec(implementation_key(3314)) void Arc::PutHeight ( double _arg1 );
__declspec(implementation_key(3315)) long Arc::GetIndex ( );
__declspec(implementation_key(3316)) double Arc::GetLeft ( );
__declspec(implementation_key(3317)) void Arc::PutLeft ( double _arg1 );
__declspec(implementation_key(3318)) VARIANT_BOOL Arc::GetLocked ( );
__declspec(implementation_key(3319)) void Arc::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3320)) _bstr_t Arc::GetName ( );
__declspec(implementation_key(3321)) void Arc::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3322)) _bstr_t Arc::GetOnAction ( );
__declspec(implementation_key(3323)) void Arc::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3324)) _variant_t Arc::GetPlacement ( );
__declspec(implementation_key(3325)) void Arc::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3326)) VARIANT_BOOL Arc::GetPrintObject ( );
__declspec(implementation_key(3327)) void Arc::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3328)) _variant_t Arc::Select ( const _variant_t & Replace );
__declspec(implementation_key(3329)) _variant_t Arc::SendToBack ( );
__declspec(implementation_key(3330)) double Arc::GetTop ( );
__declspec(implementation_key(3331)) void Arc::PutTop ( double _arg1 );
__declspec(implementation_key(3332)) RangePtr Arc::GetTopLeftCell ( );
__declspec(implementation_key(3333)) VARIANT_BOOL Arc::GetVisible ( );
__declspec(implementation_key(3334)) void Arc::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3335)) double Arc::GetWidth ( );
__declspec(implementation_key(3336)) void Arc::PutWidth ( double _arg1 );
__declspec(implementation_key(3337)) long Arc::GetZOrder ( );
__declspec(implementation_key(3338)) ShapeRangePtr Arc::GetShapeRange ( );
__declspec(implementation_key(3339)) VARIANT_BOOL Arc::GetAddIndent ( );
__declspec(implementation_key(3340)) void Arc::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3341)) _variant_t Arc::GetAutoScaleFont ( );
__declspec(implementation_key(3342)) void Arc::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3343)) VARIANT_BOOL Arc::GetAutoSize ( );
__declspec(implementation_key(3344)) void Arc::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3345)) _bstr_t Arc::GetCaption ( );
__declspec(implementation_key(3346)) void Arc::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3347)) CharactersPtr Arc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3348)) _variant_t Arc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3349)) FontPtr Arc::GetFont ( );
__declspec(implementation_key(3350)) _bstr_t Arc::GetFormula ( );
__declspec(implementation_key(3351)) void Arc::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3352)) _variant_t Arc::GetHorizontalAlignment ( );
__declspec(implementation_key(3353)) void Arc::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3354)) VARIANT_BOOL Arc::GetLockedText ( );
__declspec(implementation_key(3355)) void Arc::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3356)) _variant_t Arc::GetOrientation ( );
__declspec(implementation_key(3357)) void Arc::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3358)) _bstr_t Arc::GetText ( );
__declspec(implementation_key(3359)) void Arc::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3360)) _variant_t Arc::GetVerticalAlignment ( );
__declspec(implementation_key(3361)) void Arc::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3362)) long Arc::GetReadingOrder ( );
__declspec(implementation_key(3363)) void Arc::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3364)) BorderPtr Arc::GetBorder ( );
__declspec(implementation_key(3365)) InteriorPtr Arc::GetInterior ( );
__declspec(implementation_key(3366)) _ApplicationPtr Arcs::GetApplication ( );
__declspec(implementation_key(3367)) enum XlCreator Arcs::GetCreator ( );
__declspec(implementation_key(3368)) IDispatchPtr Arcs::GetParent ( );
__declspec(implementation_key(3369)) _variant_t Arcs::BringToFront ( );
__declspec(implementation_key(3370)) _variant_t Arcs::Copy ( );
__declspec(implementation_key(3371)) _variant_t Arcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3372)) _variant_t Arcs::Cut ( );
__declspec(implementation_key(3373)) _variant_t Arcs::Delete ( );
__declspec(implementation_key(3374)) IDispatchPtr Arcs::Duplicate ( );
__declspec(implementation_key(3375)) VARIANT_BOOL Arcs::GetEnabled ( );
__declspec(implementation_key(3376)) void Arcs::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3377)) double Arcs::GetHeight ( );
__declspec(implementation_key(3378)) void Arcs::PutHeight ( double _arg1 );
__declspec(implementation_key(3379)) double Arcs::GetLeft ( );
__declspec(implementation_key(3380)) void Arcs::PutLeft ( double _arg1 );
__declspec(implementation_key(3381)) VARIANT_BOOL Arcs::GetLocked ( );
__declspec(implementation_key(3382)) void Arcs::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3383)) _bstr_t Arcs::GetOnAction ( );
__declspec(implementation_key(3384)) void Arcs::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3385)) _variant_t Arcs::GetPlacement ( );
__declspec(implementation_key(3386)) void Arcs::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3387)) VARIANT_BOOL Arcs::GetPrintObject ( );
__declspec(implementation_key(3388)) void Arcs::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3389)) _variant_t Arcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(3390)) _variant_t Arcs::SendToBack ( );
__declspec(implementation_key(3391)) double Arcs::GetTop ( );
__declspec(implementation_key(3392)) void Arcs::PutTop ( double _arg1 );
__declspec(implementation_key(3393)) VARIANT_BOOL Arcs::GetVisible ( );
__declspec(implementation_key(3394)) void Arcs::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3395)) double Arcs::GetWidth ( );
__declspec(implementation_key(3396)) void Arcs::PutWidth ( double _arg1 );
__declspec(implementation_key(3397)) long Arcs::GetZOrder ( );
__declspec(implementation_key(3398)) ShapeRangePtr Arcs::GetShapeRange ( );
__declspec(implementation_key(3399)) VARIANT_BOOL Arcs::GetAddIndent ( );
__declspec(implementation_key(3400)) void Arcs::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3401)) _variant_t Arcs::GetAutoScaleFont ( );
__declspec(implementation_key(3402)) void Arcs::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3403)) VARIANT_BOOL Arcs::GetAutoSize ( );
__declspec(implementation_key(3404)) void Arcs::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3405)) _bstr_t Arcs::GetCaption ( );
__declspec(implementation_key(3406)) void Arcs::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3407)) CharactersPtr Arcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3408)) _variant_t Arcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3409)) FontPtr Arcs::GetFont ( );
__declspec(implementation_key(3410)) _bstr_t Arcs::GetFormula ( );
__declspec(implementation_key(3411)) void Arcs::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3412)) _variant_t Arcs::GetHorizontalAlignment ( );
__declspec(implementation_key(3413)) void Arcs::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3414)) VARIANT_BOOL Arcs::GetLockedText ( );
__declspec(implementation_key(3415)) void Arcs::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3416)) _variant_t Arcs::GetOrientation ( );
__declspec(implementation_key(3417)) void Arcs::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3418)) _bstr_t Arcs::GetText ( );
__declspec(implementation_key(3419)) void Arcs::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3420)) _variant_t Arcs::GetVerticalAlignment ( );
__declspec(implementation_key(3421)) void Arcs::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3422)) long Arcs::GetReadingOrder ( );
__declspec(implementation_key(3423)) void Arcs::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3424)) BorderPtr Arcs::GetBorder ( );
__declspec(implementation_key(3425)) InteriorPtr Arcs::GetInterior ( );
__declspec(implementation_key(3426)) ArcPtr Arcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(3427)) long Arcs::GetCount ( );
__declspec(implementation_key(3428)) GroupObjectPtr Arcs::Group ( );
__declspec(implementation_key(3429)) IDispatchPtr Arcs::Item ( const _variant_t & Index );
__declspec(implementation_key(3430)) IUnknownPtr Arcs::_NewEnum ( );
__declspec(implementation_key(3431)) HRESULT OLEObjectEvents::GotFocus ( );
__declspec(implementation_key(3432)) HRESULT OLEObjectEvents::LostFocus ( );
__declspec(implementation_key(3433)) _ApplicationPtr _OLEObject::GetApplication ( );
__declspec(implementation_key(3434)) enum XlCreator _OLEObject::GetCreator ( );
__declspec(implementation_key(3435)) IDispatchPtr _OLEObject::GetParent ( );
__declspec(implementation_key(3436)) RangePtr _OLEObject::GetBottomRightCell ( );
__declspec(implementation_key(3437)) _variant_t _OLEObject::BringToFront ( );
__declspec(implementation_key(3438)) _variant_t _OLEObject::Copy ( );
__declspec(implementation_key(3439)) _variant_t _OLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3440)) _variant_t _OLEObject::Cut ( );
__declspec(implementation_key(3441)) _variant_t _OLEObject::Delete ( );
__declspec(implementation_key(3442)) IDispatchPtr _OLEObject::Duplicate ( );
__declspec(implementation_key(3443)) VARIANT_BOOL _OLEObject::GetEnabled ( );
__declspec(implementation_key(3444)) void _OLEObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3445)) double _OLEObject::GetHeight ( );
__declspec(implementation_key(3446)) void _OLEObject::PutHeight ( double _arg1 );
__declspec(implementation_key(3447)) long _OLEObject::GetIndex ( );
__declspec(implementation_key(3448)) double _OLEObject::GetLeft ( );
__declspec(implementation_key(3449)) void _OLEObject::PutLeft ( double _arg1 );
__declspec(implementation_key(3450)) VARIANT_BOOL _OLEObject::GetLocked ( );
__declspec(implementation_key(3451)) void _OLEObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3452)) _bstr_t _OLEObject::GetName ( );
__declspec(implementation_key(3453)) void _OLEObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3454)) _bstr_t _OLEObject::GetOnAction ( );
__declspec(implementation_key(3455)) void _OLEObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3456)) _variant_t _OLEObject::GetPlacement ( );
__declspec(implementation_key(3457)) void _OLEObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3458)) VARIANT_BOOL _OLEObject::GetPrintObject ( );
__declspec(implementation_key(3459)) void _OLEObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3460)) _variant_t _OLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(3461)) _variant_t _OLEObject::SendToBack ( );
__declspec(implementation_key(3462)) double _OLEObject::GetTop ( );
__declspec(implementation_key(3463)) void _OLEObject::PutTop ( double _arg1 );
__declspec(implementation_key(3464)) RangePtr _OLEObject::GetTopLeftCell ( );
__declspec(implementation_key(3465)) VARIANT_BOOL _OLEObject::GetVisible ( );
__declspec(implementation_key(3466)) void _OLEObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3467)) double _OLEObject::GetWidth ( );
__declspec(implementation_key(3468)) void _OLEObject::PutWidth ( double _arg1 );
__declspec(implementation_key(3469)) long _OLEObject::GetZOrder ( );
__declspec(implementation_key(3470)) ShapeRangePtr _OLEObject::GetShapeRange ( );
__declspec(implementation_key(3471)) BorderPtr _OLEObject::GetBorder ( );
__declspec(implementation_key(3472)) InteriorPtr _OLEObject::GetInterior ( );
__declspec(implementation_key(3473)) VARIANT_BOOL _OLEObject::GetShadow ( );
__declspec(implementation_key(3474)) void _OLEObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3475)) _variant_t _OLEObject::Activate ( );
__declspec(implementation_key(3476)) VARIANT_BOOL _OLEObject::GetAutoLoad ( );
__declspec(implementation_key(3477)) void _OLEObject::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3478)) VARIANT_BOOL _OLEObject::GetAutoUpdate ( );
__declspec(implementation_key(3479)) void _OLEObject::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3480)) IDispatchPtr _OLEObject::GetObject ( );
__declspec(implementation_key(3481)) _variant_t _OLEObject::GetOLEType ( );
__declspec(implementation_key(3482)) _bstr_t _OLEObject::GetSourceName ( );
__declspec(implementation_key(3483)) void _OLEObject::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(3484)) _variant_t _OLEObject::Update ( );
__declspec(implementation_key(3485)) _variant_t _OLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(3486)) _bstr_t _OLEObject::GetLinkedCell ( );
__declspec(implementation_key(3487)) void _OLEObject::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(3488)) _bstr_t _OLEObject::GetListFillRange ( );
__declspec(implementation_key(3489)) void _OLEObject::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(3490)) _bstr_t _OLEObject::GetProgId ( );
__declspec(implementation_key(3491)) _bstr_t _OLEObject::GetAltHTML ( );
__declspec(implementation_key(3492)) void _OLEObject::PutAltHTML ( _bstr_t _arg1 );
__declspec(implementation_key(3493)) _ApplicationPtr OLEObjects::GetApplication ( );
__declspec(implementation_key(3494)) enum XlCreator OLEObjects::GetCreator ( );
__declspec(implementation_key(3495)) IDispatchPtr OLEObjects::GetParent ( );
__declspec(implementation_key(3496)) _variant_t OLEObjects::BringToFront ( );
__declspec(implementation_key(3497)) _variant_t OLEObjects::Copy ( );
__declspec(implementation_key(3498)) _variant_t OLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3499)) _variant_t OLEObjects::Cut ( );
__declspec(implementation_key(3500)) _variant_t OLEObjects::Delete ( );
__declspec(implementation_key(3501)) IDispatchPtr OLEObjects::Duplicate ( );
__declspec(implementation_key(3502)) VARIANT_BOOL OLEObjects::GetEnabled ( );
__declspec(implementation_key(3503)) void OLEObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3504)) double OLEObjects::GetHeight ( );
__declspec(implementation_key(3505)) void OLEObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(3506)) double OLEObjects::GetLeft ( );
__declspec(implementation_key(3507)) void OLEObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(3508)) VARIANT_BOOL OLEObjects::GetLocked ( );
__declspec(implementation_key(3509)) void OLEObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3510)) _bstr_t OLEObjects::GetOnAction ( );
__declspec(implementation_key(3511)) void OLEObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3512)) _variant_t OLEObjects::GetPlacement ( );
__declspec(implementation_key(3513)) void OLEObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3514)) VARIANT_BOOL OLEObjects::GetPrintObject ( );
__declspec(implementation_key(3515)) void OLEObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3516)) _variant_t OLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(3517)) _variant_t OLEObjects::SendToBack ( );
__declspec(implementation_key(3518)) double OLEObjects::GetTop ( );
__declspec(implementation_key(3519)) void OLEObjects::PutTop ( double _arg1 );
__declspec(implementation_key(3520)) VARIANT_BOOL OLEObjects::GetVisible ( );
__declspec(implementation_key(3521)) void OLEObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3522)) double OLEObjects::GetWidth ( );
__declspec(implementation_key(3523)) void OLEObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(3524)) long OLEObjects::GetZOrder ( );
__declspec(implementation_key(3525)) ShapeRangePtr OLEObjects::GetShapeRange ( );
__declspec(implementation_key(3526)) BorderPtr OLEObjects::GetBorder ( );
__declspec(implementation_key(3527)) InteriorPtr OLEObjects::GetInterior ( );
__declspec(implementation_key(3528)) VARIANT_BOOL OLEObjects::GetShadow ( );
__declspec(implementation_key(3529)) void OLEObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3530)) VARIANT_BOOL OLEObjects::GetAutoLoad ( );
__declspec(implementation_key(3531)) void OLEObjects::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3532)) _bstr_t OLEObjects::GetSourceName ( );
__declspec(implementation_key(3533)) void OLEObjects::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(3534)) _OLEObjectPtr OLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(3535)) long OLEObjects::GetCount ( );
__declspec(implementation_key(3536)) GroupObjectPtr OLEObjects::Group ( );
__declspec(implementation_key(3537)) IDispatchPtr OLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(3538)) IUnknownPtr OLEObjects::_NewEnum ( );
__declspec(implementation_key(3539)) _ApplicationPtr TextBox::GetApplication ( );
__declspec(implementation_key(3540)) enum XlCreator TextBox::GetCreator ( );
__declspec(implementation_key(3541)) IDispatchPtr TextBox::GetParent ( );
__declspec(implementation_key(3542)) RangePtr TextBox::GetBottomRightCell ( );
__declspec(implementation_key(3543)) _variant_t TextBox::BringToFront ( );
__declspec(implementation_key(3544)) _variant_t TextBox::Copy ( );
__declspec(implementation_key(3545)) _variant_t TextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3546)) _variant_t TextBox::Cut ( );
__declspec(implementation_key(3547)) _variant_t TextBox::Delete ( );
__declspec(implementation_key(3548)) IDispatchPtr TextBox::Duplicate ( );
__declspec(implementation_key(3549)) VARIANT_BOOL TextBox::GetEnabled ( );
__declspec(implementation_key(3550)) void TextBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3551)) double TextBox::GetHeight ( );
__declspec(implementation_key(3552)) void TextBox::PutHeight ( double _arg1 );
__declspec(implementation_key(3553)) long TextBox::GetIndex ( );
__declspec(implementation_key(3554)) double TextBox::GetLeft ( );
__declspec(implementation_key(3555)) void TextBox::PutLeft ( double _arg1 );
__declspec(implementation_key(3556)) VARIANT_BOOL TextBox::GetLocked ( );
__declspec(implementation_key(3557)) void TextBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3558)) _bstr_t TextBox::GetName ( );
__declspec(implementation_key(3559)) void TextBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3560)) _bstr_t TextBox::GetOnAction ( );
__declspec(implementation_key(3561)) void TextBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3562)) _variant_t TextBox::GetPlacement ( );
__declspec(implementation_key(3563)) void TextBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3564)) VARIANT_BOOL TextBox::GetPrintObject ( );
__declspec(implementation_key(3565)) void TextBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3566)) _variant_t TextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(3567)) _variant_t TextBox::SendToBack ( );
__declspec(implementation_key(3568)) double TextBox::GetTop ( );
__declspec(implementation_key(3569)) void TextBox::PutTop ( double _arg1 );
__declspec(implementation_key(3570)) RangePtr TextBox::GetTopLeftCell ( );
__declspec(implementation_key(3571)) VARIANT_BOOL TextBox::GetVisible ( );
__declspec(implementation_key(3572)) void TextBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3573)) double TextBox::GetWidth ( );
__declspec(implementation_key(3574)) void TextBox::PutWidth ( double _arg1 );
__declspec(implementation_key(3575)) long TextBox::GetZOrder ( );
__declspec(implementation_key(3576)) ShapeRangePtr TextBox::GetShapeRange ( );
__declspec(implementation_key(3577)) VARIANT_BOOL TextBox::GetAddIndent ( );
__declspec(implementation_key(3578)) void TextBox::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3579)) _variant_t TextBox::GetAutoScaleFont ( );
__declspec(implementation_key(3580)) void TextBox::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3581)) VARIANT_BOOL TextBox::GetAutoSize ( );
__declspec(implementation_key(3582)) void TextBox::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3583)) _bstr_t TextBox::GetCaption ( );
__declspec(implementation_key(3584)) void TextBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3585)) CharactersPtr TextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3586)) _variant_t TextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3587)) FontPtr TextBox::GetFont ( );
__declspec(implementation_key(3588)) _bstr_t TextBox::GetFormula ( );
__declspec(implementation_key(3589)) void TextBox::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3590)) _variant_t TextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(3591)) void TextBox::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3592)) VARIANT_BOOL TextBox::GetLockedText ( );
__declspec(implementation_key(3593)) void TextBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3594)) _variant_t TextBox::GetOrientation ( );
__declspec(implementation_key(3595)) void TextBox::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3596)) _bstr_t TextBox::GetText ( );
__declspec(implementation_key(3597)) void TextBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3598)) _variant_t TextBox::GetVerticalAlignment ( );
__declspec(implementation_key(3599)) void TextBox::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3600)) long TextBox::GetReadingOrder ( );
__declspec(implementation_key(3601)) void TextBox::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3602)) BorderPtr TextBox::GetBorder ( );
__declspec(implementation_key(3603)) InteriorPtr TextBox::GetInterior ( );
__declspec(implementation_key(3604)) VARIANT_BOOL TextBox::GetRoundedCorners ( );
__declspec(implementation_key(3605)) void TextBox::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3606)) VARIANT_BOOL TextBox::GetShadow ( );
__declspec(implementation_key(3607)) void TextBox::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3608)) _ApplicationPtr TextBoxes::GetApplication ( );
__declspec(implementation_key(3609)) enum XlCreator TextBoxes::GetCreator ( );
__declspec(implementation_key(3610)) IDispatchPtr TextBoxes::GetParent ( );
__declspec(implementation_key(3611)) _variant_t TextBoxes::BringToFront ( );
__declspec(implementation_key(3612)) _variant_t TextBoxes::Copy ( );
__declspec(implementation_key(3613)) _variant_t TextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3614)) _variant_t TextBoxes::Cut ( );
__declspec(implementation_key(3615)) _variant_t TextBoxes::Delete ( );
__declspec(implementation_key(3616)) IDispatchPtr TextBoxes::Duplicate ( );
__declspec(implementation_key(3617)) VARIANT_BOOL TextBoxes::GetEnabled ( );
__declspec(implementation_key(3618)) void TextBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3619)) double TextBoxes::GetHeight ( );
__declspec(implementation_key(3620)) void TextBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(3621)) double TextBoxes::GetLeft ( );
__declspec(implementation_key(3622)) void TextBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(3623)) VARIANT_BOOL TextBoxes::GetLocked ( );
__declspec(implementation_key(3624)) void TextBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3625)) _bstr_t TextBoxes::GetOnAction ( );
__declspec(implementation_key(3626)) void TextBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3627)) _variant_t TextBoxes::GetPlacement ( );
__declspec(implementation_key(3628)) void TextBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3629)) VARIANT_BOOL TextBoxes::GetPrintObject ( );
__declspec(implementation_key(3630)) void TextBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3631)) _variant_t TextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(3632)) _variant_t TextBoxes::SendToBack ( );
__declspec(implementation_key(3633)) double TextBoxes::GetTop ( );
__declspec(implementation_key(3634)) void TextBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(3635)) VARIANT_BOOL TextBoxes::GetVisible ( );
__declspec(implementation_key(3636)) void TextBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3637)) double TextBoxes::GetWidth ( );
__declspec(implementation_key(3638)) void TextBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(3639)) long TextBoxes::GetZOrder ( );
__declspec(implementation_key(3640)) ShapeRangePtr TextBoxes::GetShapeRange ( );
__declspec(implementation_key(3641)) VARIANT_BOOL TextBoxes::GetAddIndent ( );
__declspec(implementation_key(3642)) void TextBoxes::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3643)) _variant_t TextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(3644)) void TextBoxes::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3645)) VARIANT_BOOL TextBoxes::GetAutoSize ( );
__declspec(implementation_key(3646)) void TextBoxes::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3647)) _bstr_t TextBoxes::GetCaption ( );
__declspec(implementation_key(3648)) void TextBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3649)) CharactersPtr TextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3650)) _variant_t TextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3651)) FontPtr TextBoxes::GetFont ( );
__declspec(implementation_key(3652)) _bstr_t TextBoxes::GetFormula ( );
__declspec(implementation_key(3653)) void TextBoxes::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3654)) _variant_t TextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(3655)) void TextBoxes::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3656)) VARIANT_BOOL TextBoxes::GetLockedText ( );
__declspec(implementation_key(3657)) void TextBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3658)) _variant_t TextBoxes::GetOrientation ( );
__declspec(implementation_key(3659)) void TextBoxes::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3660)) _bstr_t TextBoxes::GetText ( );
__declspec(implementation_key(3661)) void TextBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3662)) _variant_t TextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(3663)) void TextBoxes::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3664)) long TextBoxes::GetReadingOrder ( );
__declspec(implementation_key(3665)) void TextBoxes::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3666)) BorderPtr TextBoxes::GetBorder ( );
__declspec(implementation_key(3667)) InteriorPtr TextBoxes::GetInterior ( );
__declspec(implementation_key(3668)) VARIANT_BOOL TextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(3669)) void TextBoxes::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3670)) VARIANT_BOOL TextBoxes::GetShadow ( );
__declspec(implementation_key(3671)) void TextBoxes::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3672)) TextBoxPtr TextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3673)) long TextBoxes::GetCount ( );
__declspec(implementation_key(3674)) GroupObjectPtr TextBoxes::Group ( );
__declspec(implementation_key(3675)) IDispatchPtr TextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(3676)) IUnknownPtr TextBoxes::_NewEnum ( );
__declspec(implementation_key(3677)) _ApplicationPtr Picture::GetApplication ( );
__declspec(implementation_key(3678)) enum XlCreator Picture::GetCreator ( );
__declspec(implementation_key(3679)) IDispatchPtr Picture::GetParent ( );
__declspec(implementation_key(3680)) RangePtr Picture::GetBottomRightCell ( );
__declspec(implementation_key(3681)) _variant_t Picture::BringToFront ( );
__declspec(implementation_key(3682)) _variant_t Picture::Copy ( );
__declspec(implementation_key(3683)) _variant_t Picture::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3684)) _variant_t Picture::Cut ( );
__declspec(implementation_key(3685)) _variant_t Picture::Delete ( );
__declspec(implementation_key(3686)) IDispatchPtr Picture::Duplicate ( );
__declspec(implementation_key(3687)) VARIANT_BOOL Picture::GetEnabled ( );
__declspec(implementation_key(3688)) void Picture::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3689)) double Picture::GetHeight ( );
__declspec(implementation_key(3690)) void Picture::PutHeight ( double _arg1 );
__declspec(implementation_key(3691)) long Picture::GetIndex ( );
__declspec(implementation_key(3692)) double Picture::GetLeft ( );
__declspec(implementation_key(3693)) void Picture::PutLeft ( double _arg1 );
__declspec(implementation_key(3694)) VARIANT_BOOL Picture::GetLocked ( );
__declspec(implementation_key(3695)) void Picture::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3696)) _bstr_t Picture::GetName ( );
__declspec(implementation_key(3697)) void Picture::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3698)) _bstr_t Picture::GetOnAction ( );
__declspec(implementation_key(3699)) void Picture::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3700)) _variant_t Picture::GetPlacement ( );
__declspec(implementation_key(3701)) void Picture::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3702)) VARIANT_BOOL Picture::GetPrintObject ( );
__declspec(implementation_key(3703)) void Picture::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3704)) _variant_t Picture::Select ( const _variant_t & Replace );
__declspec(implementation_key(3705)) _variant_t Picture::SendToBack ( );
__declspec(implementation_key(3706)) double Picture::GetTop ( );
__declspec(implementation_key(3707)) void Picture::PutTop ( double _arg1 );
__declspec(implementation_key(3708)) RangePtr Picture::GetTopLeftCell ( );
__declspec(implementation_key(3709)) VARIANT_BOOL Picture::GetVisible ( );
__declspec(implementation_key(3710)) void Picture::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3711)) double Picture::GetWidth ( );
__declspec(implementation_key(3712)) void Picture::PutWidth ( double _arg1 );
__declspec(implementation_key(3713)) long Picture::GetZOrder ( );
__declspec(implementation_key(3714)) ShapeRangePtr Picture::GetShapeRange ( );
__declspec(implementation_key(3715)) BorderPtr Picture::GetBorder ( );
__declspec(implementation_key(3716)) InteriorPtr Picture::GetInterior ( );
__declspec(implementation_key(3717)) VARIANT_BOOL Picture::GetShadow ( );
__declspec(implementation_key(3718)) void Picture::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3719)) _bstr_t Picture::GetFormula ( );
__declspec(implementation_key(3720)) void Picture::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3721)) _ApplicationPtr Pictures::GetApplication ( );
__declspec(implementation_key(3722)) enum XlCreator Pictures::GetCreator ( );
__declspec(implementation_key(3723)) IDispatchPtr Pictures::GetParent ( );
__declspec(implementation_key(3724)) _variant_t Pictures::BringToFront ( );
__declspec(implementation_key(3725)) _variant_t Pictures::Copy ( );
__declspec(implementation_key(3726)) _variant_t Pictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3727)) _variant_t Pictures::Cut ( );
__declspec(implementation_key(3728)) _variant_t Pictures::Delete ( );
__declspec(implementation_key(3729)) IDispatchPtr Pictures::Duplicate ( );
__declspec(implementation_key(3730)) VARIANT_BOOL Pictures::GetEnabled ( );
__declspec(implementation_key(3731)) void Pictures::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3732)) double Pictures::GetHeight ( );
__declspec(implementation_key(3733)) void Pictures::PutHeight ( double _arg1 );
__declspec(implementation_key(3734)) double Pictures::GetLeft ( );
__declspec(implementation_key(3735)) void Pictures::PutLeft ( double _arg1 );
__declspec(implementation_key(3736)) VARIANT_BOOL Pictures::GetLocked ( );
__declspec(implementation_key(3737)) void Pictures::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3738)) _bstr_t Pictures::GetOnAction ( );
__declspec(implementation_key(3739)) void Pictures::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3740)) _variant_t Pictures::GetPlacement ( );
__declspec(implementation_key(3741)) void Pictures::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3742)) VARIANT_BOOL Pictures::GetPrintObject ( );
__declspec(implementation_key(3743)) void Pictures::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3744)) _variant_t Pictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(3745)) _variant_t Pictures::SendToBack ( );
__declspec(implementation_key(3746)) double Pictures::GetTop ( );
__declspec(implementation_key(3747)) void Pictures::PutTop ( double _arg1 );
__declspec(implementation_key(3748)) VARIANT_BOOL Pictures::GetVisible ( );
__declspec(implementation_key(3749)) void Pictures::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3750)) double Pictures::GetWidth ( );
__declspec(implementation_key(3751)) void Pictures::PutWidth ( double _arg1 );
__declspec(implementation_key(3752)) long Pictures::GetZOrder ( );
__declspec(implementation_key(3753)) ShapeRangePtr Pictures::GetShapeRange ( );
__declspec(implementation_key(3754)) BorderPtr Pictures::GetBorder ( );
__declspec(implementation_key(3755)) InteriorPtr Pictures::GetInterior ( );
__declspec(implementation_key(3756)) VARIANT_BOOL Pictures::GetShadow ( );
__declspec(implementation_key(3757)) void Pictures::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3758)) _bstr_t Pictures::GetFormula ( );
__declspec(implementation_key(3759)) void Pictures::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3760)) PicturePtr Pictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3761)) long Pictures::GetCount ( );
__declspec(implementation_key(3762)) GroupObjectPtr Pictures::Group ( );
__declspec(implementation_key(3763)) PicturePtr Pictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(3764)) IDispatchPtr Pictures::Item ( const _variant_t & Index );
__declspec(implementation_key(3765)) IUnknownPtr Pictures::_NewEnum ( );
__declspec(implementation_key(3766)) PicturePtr Pictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(3767)) _ApplicationPtr Drawing::GetApplication ( );
__declspec(implementation_key(3768)) enum XlCreator Drawing::GetCreator ( );
__declspec(implementation_key(3769)) IDispatchPtr Drawing::GetParent ( );
__declspec(implementation_key(3770)) RangePtr Drawing::GetBottomRightCell ( );
__declspec(implementation_key(3771)) _variant_t Drawing::BringToFront ( );
__declspec(implementation_key(3772)) _variant_t Drawing::Copy ( );
__declspec(implementation_key(3773)) _variant_t Drawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3774)) _variant_t Drawing::Cut ( );
__declspec(implementation_key(3775)) _variant_t Drawing::Delete ( );
__declspec(implementation_key(3776)) IDispatchPtr Drawing::Duplicate ( );
__declspec(implementation_key(3777)) VARIANT_BOOL Drawing::GetEnabled ( );
__declspec(implementation_key(3778)) void Drawing::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3779)) double Drawing::GetHeight ( );
__declspec(implementation_key(3780)) void Drawing::PutHeight ( double _arg1 );
__declspec(implementation_key(3781)) long Drawing::GetIndex ( );
__declspec(implementation_key(3782)) double Drawing::GetLeft ( );
__declspec(implementation_key(3783)) void Drawing::PutLeft ( double _arg1 );
__declspec(implementation_key(3784)) VARIANT_BOOL Drawing::GetLocked ( );
__declspec(implementation_key(3785)) void Drawing::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3786)) _bstr_t Drawing::GetName ( );
__declspec(implementation_key(3787)) void Drawing::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3788)) _bstr_t Drawing::GetOnAction ( );
__declspec(implementation_key(3789)) void Drawing::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3790)) _variant_t Drawing::GetPlacement ( );
__declspec(implementation_key(3791)) void Drawing::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3792)) VARIANT_BOOL Drawing::GetPrintObject ( );
__declspec(implementation_key(3793)) void Drawing::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3794)) _variant_t Drawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(3795)) _variant_t Drawing::SendToBack ( );
__declspec(implementation_key(3796)) double Drawing::GetTop ( );
__declspec(implementation_key(3797)) void Drawing::PutTop ( double _arg1 );
__declspec(implementation_key(3798)) RangePtr Drawing::GetTopLeftCell ( );
__declspec(implementation_key(3799)) VARIANT_BOOL Drawing::GetVisible ( );
__declspec(implementation_key(3800)) void Drawing::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3801)) double Drawing::GetWidth ( );
__declspec(implementation_key(3802)) void Drawing::PutWidth ( double _arg1 );
__declspec(implementation_key(3803)) long Drawing::GetZOrder ( );
__declspec(implementation_key(3804)) ShapeRangePtr Drawing::GetShapeRange ( );
__declspec(implementation_key(3805)) VARIANT_BOOL Drawing::GetAddIndent ( );
__declspec(implementation_key(3806)) void Drawing::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3807)) _variant_t Drawing::GetAutoScaleFont ( );
__declspec(implementation_key(3808)) void Drawing::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3809)) VARIANT_BOOL Drawing::GetAutoSize ( );
__declspec(implementation_key(3810)) void Drawing::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3811)) _bstr_t Drawing::GetCaption ( );
__declspec(implementation_key(3812)) void Drawing::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3813)) CharactersPtr Drawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3814)) _variant_t Drawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3815)) FontPtr Drawing::GetFont ( );
__declspec(implementation_key(3816)) _bstr_t Drawing::GetFormula ( );
__declspec(implementation_key(3817)) void Drawing::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3818)) _variant_t Drawing::GetHorizontalAlignment ( );
__declspec(implementation_key(3819)) void Drawing::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3820)) VARIANT_BOOL Drawing::GetLockedText ( );
__declspec(implementation_key(3821)) void Drawing::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3822)) _variant_t Drawing::GetOrientation ( );
__declspec(implementation_key(3823)) void Drawing::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3824)) _bstr_t Drawing::GetText ( );
__declspec(implementation_key(3825)) void Drawing::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3826)) _variant_t Drawing::GetVerticalAlignment ( );
__declspec(implementation_key(3827)) void Drawing::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3828)) long Drawing::GetReadingOrder ( );
__declspec(implementation_key(3829)) void Drawing::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3830)) BorderPtr Drawing::GetBorder ( );
__declspec(implementation_key(3831)) InteriorPtr Drawing::GetInterior ( );
__declspec(implementation_key(3832)) VARIANT_BOOL Drawing::GetShadow ( );
__declspec(implementation_key(3833)) void Drawing::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3834)) _variant_t Drawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(3835)) _variant_t Drawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(3836)) _variant_t Drawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(3837)) _ApplicationPtr Drawings::GetApplication ( );
__declspec(implementation_key(3838)) enum XlCreator Drawings::GetCreator ( );
__declspec(implementation_key(3839)) IDispatchPtr Drawings::GetParent ( );
__declspec(implementation_key(3840)) _variant_t Drawings::BringToFront ( );
__declspec(implementation_key(3841)) _variant_t Drawings::Copy ( );
__declspec(implementation_key(3842)) _variant_t Drawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3843)) _variant_t Drawings::Cut ( );
__declspec(implementation_key(3844)) _variant_t Drawings::Delete ( );
__declspec(implementation_key(3845)) IDispatchPtr Drawings::Duplicate ( );
__declspec(implementation_key(3846)) VARIANT_BOOL Drawings::GetEnabled ( );
__declspec(implementation_key(3847)) void Drawings::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3848)) double Drawings::GetHeight ( );
__declspec(implementation_key(3849)) void Drawings::PutHeight ( double _arg1 );
__declspec(implementation_key(3850)) double Drawings::GetLeft ( );
__declspec(implementation_key(3851)) void Drawings::PutLeft ( double _arg1 );
__declspec(implementation_key(3852)) VARIANT_BOOL Drawings::GetLocked ( );
__declspec(implementation_key(3853)) void Drawings::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3854)) _bstr_t Drawings::GetOnAction ( );
__declspec(implementation_key(3855)) void Drawings::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3856)) _variant_t Drawings::GetPlacement ( );
__declspec(implementation_key(3857)) void Drawings::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3858)) VARIANT_BOOL Drawings::GetPrintObject ( );
__declspec(implementation_key(3859)) void Drawings::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3860)) _variant_t Drawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(3861)) _variant_t Drawings::SendToBack ( );
__declspec(implementation_key(3862)) double Drawings::GetTop ( );
__declspec(implementation_key(3863)) void Drawings::PutTop ( double _arg1 );
__declspec(implementation_key(3864)) VARIANT_BOOL Drawings::GetVisible ( );
__declspec(implementation_key(3865)) void Drawings::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3866)) double Drawings::GetWidth ( );
__declspec(implementation_key(3867)) void Drawings::PutWidth ( double _arg1 );
__declspec(implementation_key(3868)) long Drawings::GetZOrder ( );
__declspec(implementation_key(3869)) ShapeRangePtr Drawings::GetShapeRange ( );
__declspec(implementation_key(3870)) VARIANT_BOOL Drawings::GetAddIndent ( );
__declspec(implementation_key(3871)) void Drawings::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3872)) _variant_t Drawings::GetAutoScaleFont ( );
__declspec(implementation_key(3873)) void Drawings::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3874)) VARIANT_BOOL Drawings::GetAutoSize ( );
__declspec(implementation_key(3875)) void Drawings::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3876)) _bstr_t Drawings::GetCaption ( );
__declspec(implementation_key(3877)) void Drawings::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3878)) CharactersPtr Drawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3879)) _variant_t Drawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3880)) FontPtr Drawings::GetFont ( );
__declspec(implementation_key(3881)) _bstr_t Drawings::GetFormula ( );
__declspec(implementation_key(3882)) void Drawings::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3883)) _variant_t Drawings::GetHorizontalAlignment ( );
__declspec(implementation_key(3884)) void Drawings::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3885)) VARIANT_BOOL Drawings::GetLockedText ( );
__declspec(implementation_key(3886)) void Drawings::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3887)) _variant_t Drawings::GetOrientation ( );
__declspec(implementation_key(3888)) void Drawings::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3889)) _bstr_t Drawings::GetText ( );
__declspec(implementation_key(3890)) void Drawings::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3891)) _variant_t Drawings::GetVerticalAlignment ( );
__declspec(implementation_key(3892)) void Drawings::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3893)) long Drawings::GetReadingOrder ( );
__declspec(implementation_key(3894)) void Drawings::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3895)) BorderPtr Drawings::GetBorder ( );
__declspec(implementation_key(3896)) InteriorPtr Drawings::GetInterior ( );
__declspec(implementation_key(3897)) VARIANT_BOOL Drawings::GetShadow ( );
__declspec(implementation_key(3898)) void Drawings::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3899)) _variant_t Drawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(3900)) DrawingPtr Drawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(3901)) long Drawings::GetCount ( );
__declspec(implementation_key(3902)) GroupObjectPtr Drawings::Group ( );
__declspec(implementation_key(3903)) IDispatchPtr Drawings::Item ( const _variant_t & Index );
__declspec(implementation_key(3904)) IUnknownPtr Drawings::_NewEnum ( );
__declspec(implementation_key(3905)) _ApplicationPtr RoutingSlip::GetApplication ( );
__declspec(implementation_key(3906)) enum XlCreator RoutingSlip::GetCreator ( );
__declspec(implementation_key(3907)) IDispatchPtr RoutingSlip::GetParent ( );
__declspec(implementation_key(3908)) enum XlRoutingSlipDelivery RoutingSlip::GetDelivery ( );
__declspec(implementation_key(3909)) void RoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery _arg1 );
__declspec(implementation_key(3910)) _variant_t RoutingSlip::GetMessage ( );
__declspec(implementation_key(3911)) void RoutingSlip::PutMessage ( const _variant_t & _arg1 );
__declspec(implementation_key(3912)) _variant_t RoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(3913)) void RoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(3914)) _variant_t RoutingSlip::Reset ( );
__declspec(implementation_key(3915)) VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(3916)) void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3917)) enum XlRoutingSlipStatus RoutingSlip::GetStatus ( );
__declspec(implementation_key(3918)) _variant_t RoutingSlip::GetSubject ( );
__declspec(implementation_key(3919)) void RoutingSlip::PutSubject ( const _variant_t & _arg1 );
__declspec(implementation_key(3920)) VARIANT_BOOL RoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(3921)) void RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3922)) _ApplicationPtr Outline::GetApplication ( );
__declspec(implementation_key(3923)) enum XlCreator Outline::GetCreator ( );
__declspec(implementation_key(3924)) IDispatchPtr Outline::GetParent ( );
__declspec(implementation_key(3925)) VARIANT_BOOL Outline::GetAutomaticStyles ( );
__declspec(implementation_key(3926)) void Outline::PutAutomaticStyles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3927)) _variant_t Outline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(3928)) enum XlSummaryColumn Outline::GetSummaryColumn ( );
__declspec(implementation_key(3929)) void Outline::PutSummaryColumn ( enum XlSummaryColumn _arg1 );
__declspec(implementation_key(3930)) enum XlSummaryRow Outline::GetSummaryRow ( );
__declspec(implementation_key(3931)) void Outline::PutSummaryRow ( enum XlSummaryRow _arg1 );
__declspec(implementation_key(3932)) _ApplicationPtr Module::GetApplication ( );
__declspec(implementation_key(3933)) enum XlCreator Module::GetCreator ( );
__declspec(implementation_key(3934)) IDispatchPtr Module::GetParent ( );
__declspec(implementation_key(3935)) HRESULT Module::Activate ( );
__declspec(implementation_key(3936)) HRESULT Module::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3937)) HRESULT Module::Delete ( );
__declspec(implementation_key(3938)) _bstr_t Module::GetCodeName ( );
__declspec(implementation_key(3939)) _bstr_t Module::Get_CodeName ( );
__declspec(implementation_key(3940)) void Module::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(3941)) long Module::GetIndex ( );
__declspec(implementation_key(3942)) HRESULT Module::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3943)) _bstr_t Module::GetName ( );
__declspec(implementation_key(3944)) void Module::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3945)) IDispatchPtr Module::GetNext ( );
__declspec(implementation_key(3946)) _bstr_t Module::GetOnDoubleClick ( );
__declspec(implementation_key(3947)) void Module::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(3948)) _bstr_t Module::GetOnSheetActivate ( );
__declspec(implementation_key(3949)) void Module::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(3950)) _bstr_t Module::GetOnSheetDeactivate ( );
__declspec(implementation_key(3951)) void Module::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(3952)) PageSetupPtr Module::GetPageSetup ( );
__declspec(implementation_key(3953)) IDispatchPtr Module::GetPrevious ( );
__declspec(implementation_key(3954)) HRESULT Module::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(3955)) HRESULT Module::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(3956)) VARIANT_BOOL Module::GetProtectContents ( );
__declspec(implementation_key(3957)) VARIANT_BOOL Module::GetProtectionMode ( );
__declspec(implementation_key(3958)) HRESULT Module::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(3959)) HRESULT Module::Select ( const _variant_t & Replace );
__declspec(implementation_key(3960)) HRESULT Module::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(3961)) enum XlSheetVisibility Module::GetVisible ( );
__declspec(implementation_key(3962)) void Module::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(3963)) ShapesPtr Module::GetShapes ( );
__declspec(implementation_key(3964)) _variant_t Module::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(3965)) _ApplicationPtr Modules::GetApplication ( );
__declspec(implementation_key(3966)) enum XlCreator Modules::GetCreator ( );
__declspec(implementation_key(3967)) IDispatchPtr Modules::GetParent ( );
__declspec(implementation_key(3968)) ModulePtr Modules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(3969)) HRESULT Modules::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3970)) long Modules::GetCount ( );
__declspec(implementation_key(3971)) HRESULT Modules::Delete ( );
__declspec(implementation_key(3972)) IDispatchPtr Modules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(3973)) HRESULT Modules::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3974)) IUnknownPtr Modules::Get_NewEnum ( );
__declspec(implementation_key(3975)) HRESULT Modules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(3976)) HRESULT Modules::Select ( const _variant_t & Replace );
__declspec(implementation_key(3977)) HPageBreaksPtr Modules::GetHPageBreaks ( );
__declspec(implementation_key(3978)) VPageBreaksPtr Modules::GetVPageBreaks ( );
__declspec(implementation_key(3979)) _variant_t Modules::GetVisible ( );
__declspec(implementation_key(3980)) void Modules::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(3981)) IDispatchPtr Modules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(3982)) HRESULT Modules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(3983)) _ApplicationPtr DialogSheet::GetApplication ( );
__declspec(implementation_key(3984)) enum XlCreator DialogSheet::GetCreator ( );
__declspec(implementation_key(3985)) IDispatchPtr DialogSheet::GetParent ( );
__declspec(implementation_key(3986)) HRESULT DialogSheet::Activate ( );
__declspec(implementation_key(3987)) HRESULT DialogSheet::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3988)) HRESULT DialogSheet::Delete ( );
__declspec(implementation_key(3989)) _bstr_t DialogSheet::GetCodeName ( );
__declspec(implementation_key(3990)) _bstr_t DialogSheet::Get_CodeName ( );
__declspec(implementation_key(3991)) void DialogSheet::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(3992)) long DialogSheet::GetIndex ( );
__declspec(implementation_key(3993)) HRESULT DialogSheet::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(3994)) _bstr_t DialogSheet::GetName ( );
__declspec(implementation_key(3995)) void DialogSheet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3996)) IDispatchPtr DialogSheet::GetNext ( );
__declspec(implementation_key(3997)) _bstr_t DialogSheet::GetOnDoubleClick ( );
__declspec(implementation_key(3998)) void DialogSheet::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(3999)) _bstr_t DialogSheet::GetOnSheetActivate ( );
__declspec(implementation_key(4000)) void DialogSheet::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(4001)) _bstr_t DialogSheet::GetOnSheetDeactivate ( );
__declspec(implementation_key(4002)) void DialogSheet::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(4003)) PageSetupPtr DialogSheet::GetPageSetup ( );
__declspec(implementation_key(4004)) IDispatchPtr DialogSheet::GetPrevious ( );
__declspec(implementation_key(4005)) HRESULT DialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4006)) HRESULT DialogSheet::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4007)) HRESULT DialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(4008)) VARIANT_BOOL DialogSheet::GetProtectContents ( );
__declspec(implementation_key(4009)) VARIANT_BOOL DialogSheet::GetProtectDrawingObjects ( );
__declspec(implementation_key(4010)) VARIANT_BOOL DialogSheet::GetProtectionMode ( );
__declspec(implementation_key(4011)) VARIANT_BOOL DialogSheet::GetProtectScenarios ( );
__declspec(implementation_key(4012)) HRESULT DialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(4013)) HRESULT DialogSheet::Select ( const _variant_t & Replace );
__declspec(implementation_key(4014)) HRESULT DialogSheet::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(4015)) enum XlSheetVisibility DialogSheet::GetVisible ( );
__declspec(implementation_key(4016)) void DialogSheet::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(4017)) ShapesPtr DialogSheet::GetShapes ( );
__declspec(implementation_key(4018)) IDispatchPtr DialogSheet::Arcs ( const _variant_t & Index );
__declspec(implementation_key(4019)) IDispatchPtr DialogSheet::Buttons ( const _variant_t & Index );
__declspec(implementation_key(4020)) VARIANT_BOOL DialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(4021)) void DialogSheet::PutEnableCalculation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4022)) IDispatchPtr DialogSheet::ChartObjects ( const _variant_t & Index );
__declspec(implementation_key(4023)) IDispatchPtr DialogSheet::CheckBoxes ( const _variant_t & Index );
__declspec(implementation_key(4024)) HRESULT DialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4025)) VARIANT_BOOL DialogSheet::GetDisplayAutomaticPageBreaks ( );
__declspec(implementation_key(4026)) void DialogSheet::PutDisplayAutomaticPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4027)) IDispatchPtr DialogSheet::Drawings ( const _variant_t & Index );
__declspec(implementation_key(4028)) IDispatchPtr DialogSheet::DrawingObjects ( const _variant_t & Index );
__declspec(implementation_key(4029)) IDispatchPtr DialogSheet::DropDowns ( const _variant_t & Index );
__declspec(implementation_key(4030)) VARIANT_BOOL DialogSheet::GetEnableAutoFilter ( );
__declspec(implementation_key(4031)) void DialogSheet::PutEnableAutoFilter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4032)) enum XlEnableSelection DialogSheet::GetEnableSelection ( );
__declspec(implementation_key(4033)) void DialogSheet::PutEnableSelection ( enum XlEnableSelection _arg1 );
__declspec(implementation_key(4034)) VARIANT_BOOL DialogSheet::GetEnableOutlining ( );
__declspec(implementation_key(4035)) void DialogSheet::PutEnableOutlining ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4036)) VARIANT_BOOL DialogSheet::GetEnablePivotTable ( );
__declspec(implementation_key(4037)) void DialogSheet::PutEnablePivotTable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4038)) _variant_t DialogSheet::Evaluate ( const _variant_t & Name );
__declspec(implementation_key(4039)) _variant_t DialogSheet::_Evaluate ( const _variant_t & Name );
__declspec(implementation_key(4040)) HRESULT DialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(4041)) IDispatchPtr DialogSheet::GroupBoxes ( const _variant_t & Index );
__declspec(implementation_key(4042)) IDispatchPtr DialogSheet::GroupObjects ( const _variant_t & Index );
__declspec(implementation_key(4043)) IDispatchPtr DialogSheet::Labels ( const _variant_t & Index );
__declspec(implementation_key(4044)) IDispatchPtr DialogSheet::Lines ( const _variant_t & Index );
__declspec(implementation_key(4045)) IDispatchPtr DialogSheet::ListBoxes ( const _variant_t & Index );
__declspec(implementation_key(4046)) NamesPtr DialogSheet::GetNames ( );
__declspec(implementation_key(4047)) IDispatchPtr DialogSheet::OLEObjects ( const _variant_t & Index );
__declspec(implementation_key(4048)) IDispatchPtr DialogSheet::OptionButtons ( const _variant_t & Index );
__declspec(implementation_key(4049)) IDispatchPtr DialogSheet::Ovals ( const _variant_t & Index );
__declspec(implementation_key(4050)) HRESULT DialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link );
__declspec(implementation_key(4051)) HRESULT DialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel );
__declspec(implementation_key(4052)) IDispatchPtr DialogSheet::Pictures ( const _variant_t & Index );
__declspec(implementation_key(4053)) IDispatchPtr DialogSheet::Rectangles ( const _variant_t & Index );
__declspec(implementation_key(4054)) _bstr_t DialogSheet::GetScrollArea ( );
__declspec(implementation_key(4055)) void DialogSheet::PutScrollArea ( _bstr_t _arg1 );
__declspec(implementation_key(4056)) IDispatchPtr DialogSheet::ScrollBars ( const _variant_t & Index );
__declspec(implementation_key(4057)) IDispatchPtr DialogSheet::Spinners ( const _variant_t & Index );
__declspec(implementation_key(4058)) IDispatchPtr DialogSheet::TextBoxes ( const _variant_t & Index );
__declspec(implementation_key(4059)) HPageBreaksPtr DialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(4060)) VPageBreaksPtr DialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(4061)) QueryTablesPtr DialogSheet::GetQueryTables ( );
__declspec(implementation_key(4062)) VARIANT_BOOL DialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(4063)) void DialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4064)) CommentsPtr DialogSheet::GetComments ( );
__declspec(implementation_key(4065)) HyperlinksPtr DialogSheet::GetHyperlinks ( );
__declspec(implementation_key(4066)) HRESULT DialogSheet::ClearCircles ( );
__declspec(implementation_key(4067)) HRESULT DialogSheet::CircleInvalid ( );
__declspec(implementation_key(4068)) long DialogSheet::Get_DisplayRightToLeft ( );
__declspec(implementation_key(4069)) void DialogSheet::Put_DisplayRightToLeft ( long _arg1 );
__declspec(implementation_key(4070)) AutoFilterPtr DialogSheet::GetAutoFilter ( );
__declspec(implementation_key(4071)) VARIANT_BOOL DialogSheet::GetDisplayRightToLeft ( );
__declspec(implementation_key(4072)) void DialogSheet::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4073)) Office::ScriptsPtr DialogSheet::GetScripts ( );
__declspec(implementation_key(4074)) HRESULT DialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4075)) HRESULT DialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript );
__declspec(implementation_key(4076)) _variant_t DialogSheet::GetDefaultButton ( );
__declspec(implementation_key(4077)) void DialogSheet::PutDefaultButton ( const _variant_t & _arg1 );
__declspec(implementation_key(4078)) DialogFramePtr DialogSheet::GetDialogFrame ( );
__declspec(implementation_key(4079)) IDispatchPtr DialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(4080)) _variant_t DialogSheet::GetFocus ( );
__declspec(implementation_key(4081)) void DialogSheet::PutFocus ( const _variant_t & _arg1 );
__declspec(implementation_key(4082)) VARIANT_BOOL DialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(4083)) VARIANT_BOOL DialogSheet::Show ( );
__declspec(implementation_key(4084)) _ApplicationPtr DialogSheets::GetApplication ( );
__declspec(implementation_key(4085)) enum XlCreator DialogSheets::GetCreator ( );
__declspec(implementation_key(4086)) IDispatchPtr DialogSheets::GetParent ( );
__declspec(implementation_key(4087)) DialogSheetPtr DialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(4088)) HRESULT DialogSheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4089)) long DialogSheets::GetCount ( );
__declspec(implementation_key(4090)) HRESULT DialogSheets::Delete ( );
__declspec(implementation_key(4091)) IDispatchPtr DialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4092)) HRESULT DialogSheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4093)) IUnknownPtr DialogSheets::Get_NewEnum ( );
__declspec(implementation_key(4094)) HRESULT DialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4095)) HRESULT DialogSheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4096)) HRESULT DialogSheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(4097)) HPageBreaksPtr DialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(4098)) VPageBreaksPtr DialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(4099)) _variant_t DialogSheets::GetVisible ( );
__declspec(implementation_key(4100)) void DialogSheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(4101)) IDispatchPtr DialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4102)) HRESULT DialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4103)) _ApplicationPtr Worksheets::GetApplication ( );
__declspec(implementation_key(4104)) enum XlCreator Worksheets::GetCreator ( );
__declspec(implementation_key(4105)) IDispatchPtr Worksheets::GetParent ( );
__declspec(implementation_key(4106)) IDispatchPtr Worksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type );
__declspec(implementation_key(4107)) HRESULT Worksheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4108)) long Worksheets::GetCount ( );
__declspec(implementation_key(4109)) HRESULT Worksheets::Delete ( );
__declspec(implementation_key(4110)) HRESULT Worksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type );
__declspec(implementation_key(4111)) IDispatchPtr Worksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4112)) HRESULT Worksheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4113)) IUnknownPtr Worksheets::Get_NewEnum ( );
__declspec(implementation_key(4114)) HRESULT Worksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4115)) HRESULT Worksheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4116)) HRESULT Worksheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(4117)) HPageBreaksPtr Worksheets::GetHPageBreaks ( );
__declspec(implementation_key(4118)) VPageBreaksPtr Worksheets::GetVPageBreaks ( );
__declspec(implementation_key(4119)) _variant_t Worksheets::GetVisible ( );
__declspec(implementation_key(4120)) void Worksheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(4121)) IDispatchPtr Worksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4122)) HRESULT Worksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4123)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(4124)) enum XlCreator PageSetup::GetCreator ( );
__declspec(implementation_key(4125)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(4126)) VARIANT_BOOL PageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(4127)) void PageSetup::PutBlackAndWhite ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4128)) double PageSetup::GetBottomMargin ( );
__declspec(implementation_key(4129)) void PageSetup::PutBottomMargin ( double _arg1 );
__declspec(implementation_key(4130)) _bstr_t PageSetup::GetCenterFooter ( );
__declspec(implementation_key(4131)) void PageSetup::PutCenterFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4132)) _bstr_t PageSetup::GetCenterHeader ( );
__declspec(implementation_key(4133)) void PageSetup::PutCenterHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4134)) VARIANT_BOOL PageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(4135)) void PageSetup::PutCenterHorizontally ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4136)) VARIANT_BOOL PageSetup::GetCenterVertically ( );
__declspec(implementation_key(4137)) void PageSetup::PutCenterVertically ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4138)) enum XlObjectSize PageSetup::GetChartSize ( );
__declspec(implementation_key(4139)) void PageSetup::PutChartSize ( enum XlObjectSize _arg1 );
__declspec(implementation_key(4140)) VARIANT_BOOL PageSetup::GetDraft ( );
__declspec(implementation_key(4141)) void PageSetup::PutDraft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4142)) long PageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(4143)) void PageSetup::PutFirstPageNumber ( long _arg1 );
__declspec(implementation_key(4144)) _variant_t PageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(4145)) void PageSetup::PutFitToPagesTall ( const _variant_t & _arg1 );
__declspec(implementation_key(4146)) _variant_t PageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(4147)) void PageSetup::PutFitToPagesWide ( const _variant_t & _arg1 );
__declspec(implementation_key(4148)) double PageSetup::GetFooterMargin ( );
__declspec(implementation_key(4149)) void PageSetup::PutFooterMargin ( double _arg1 );
__declspec(implementation_key(4150)) double PageSetup::GetHeaderMargin ( );
__declspec(implementation_key(4151)) void PageSetup::PutHeaderMargin ( double _arg1 );
__declspec(implementation_key(4152)) _bstr_t PageSetup::GetLeftFooter ( );
__declspec(implementation_key(4153)) void PageSetup::PutLeftFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4154)) _bstr_t PageSetup::GetLeftHeader ( );
__declspec(implementation_key(4155)) void PageSetup::PutLeftHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4156)) double PageSetup::GetLeftMargin ( );
__declspec(implementation_key(4157)) void PageSetup::PutLeftMargin ( double _arg1 );
__declspec(implementation_key(4158)) enum XlOrder PageSetup::GetOrder ( );
__declspec(implementation_key(4159)) void PageSetup::PutOrder ( enum XlOrder _arg1 );
__declspec(implementation_key(4160)) enum XlPageOrientation PageSetup::GetOrientation ( );
__declspec(implementation_key(4161)) void PageSetup::PutOrientation ( enum XlPageOrientation _arg1 );
__declspec(implementation_key(4162)) enum XlPaperSize PageSetup::GetPaperSize ( );
__declspec(implementation_key(4163)) void PageSetup::PutPaperSize ( enum XlPaperSize _arg1 );
__declspec(implementation_key(4164)) _bstr_t PageSetup::GetPrintArea ( );
__declspec(implementation_key(4165)) void PageSetup::PutPrintArea ( _bstr_t _arg1 );
__declspec(implementation_key(4166)) VARIANT_BOOL PageSetup::GetPrintGridlines ( );
__declspec(implementation_key(4167)) void PageSetup::PutPrintGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4168)) VARIANT_BOOL PageSetup::GetPrintHeadings ( );
__declspec(implementation_key(4169)) void PageSetup::PutPrintHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4170)) VARIANT_BOOL PageSetup::GetPrintNotes ( );
__declspec(implementation_key(4171)) void PageSetup::PutPrintNotes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4172)) _variant_t PageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(4173)) void PageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(4174)) _bstr_t PageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(4175)) void PageSetup::PutPrintTitleColumns ( _bstr_t _arg1 );
__declspec(implementation_key(4176)) _bstr_t PageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(4177)) void PageSetup::PutPrintTitleRows ( _bstr_t _arg1 );
__declspec(implementation_key(4178)) _bstr_t PageSetup::GetRightFooter ( );
__declspec(implementation_key(4179)) void PageSetup::PutRightFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4180)) _bstr_t PageSetup::GetRightHeader ( );
__declspec(implementation_key(4181)) void PageSetup::PutRightHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4182)) double PageSetup::GetRightMargin ( );
__declspec(implementation_key(4183)) void PageSetup::PutRightMargin ( double _arg1 );
__declspec(implementation_key(4184)) double PageSetup::GetTopMargin ( );
__declspec(implementation_key(4185)) void PageSetup::PutTopMargin ( double _arg1 );
__declspec(implementation_key(4186)) _variant_t PageSetup::GetZoom ( );
__declspec(implementation_key(4187)) void PageSetup::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(4188)) enum XlPrintLocation PageSetup::GetPrintComments ( );
__declspec(implementation_key(4189)) void PageSetup::PutPrintComments ( enum XlPrintLocation _arg1 );
__declspec(implementation_key(4190)) _ApplicationPtr Names::GetApplication ( );
__declspec(implementation_key(4191)) enum XlCreator Names::GetCreator ( );
__declspec(implementation_key(4192)) IDispatchPtr Names::GetParent ( );
__declspec(implementation_key(4193)) NamePtr Names::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(4194)) NamePtr Names::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(4195)) NamePtr Names::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(4196)) long Names::GetCount ( );
__declspec(implementation_key(4197)) IUnknownPtr Names::Get_NewEnum ( );
__declspec(implementation_key(4198)) _ApplicationPtr Name::GetApplication ( );
__declspec(implementation_key(4199)) enum XlCreator Name::GetCreator ( );
__declspec(implementation_key(4200)) IDispatchPtr Name::GetParent ( );
__declspec(implementation_key(4201)) _bstr_t Name::Get_Default ( );
__declspec(implementation_key(4202)) long Name::GetIndex ( );
__declspec(implementation_key(4203)) _bstr_t Name::GetCategory ( );
__declspec(implementation_key(4204)) void Name::PutCategory ( _bstr_t _arg1 );
__declspec(implementation_key(4205)) _bstr_t Name::GetCategoryLocal ( );
__declspec(implementation_key(4206)) void Name::PutCategoryLocal ( _bstr_t _arg1 );
__declspec(implementation_key(4207)) HRESULT Name::Delete ( );
__declspec(implementation_key(4208)) enum XlXLMMacroType Name::GetMacroType ( );
__declspec(implementation_key(4209)) void Name::PutMacroType ( enum XlXLMMacroType _arg1 );
__declspec(implementation_key(4210)) _bstr_t Name::GetName ( );
__declspec(implementation_key(4211)) void Name::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4212)) _variant_t Name::GetRefersTo ( );
__declspec(implementation_key(4213)) void Name::PutRefersTo ( const _variant_t & _arg1 );
__declspec(implementation_key(4214)) _bstr_t Name::GetShortcutKey ( );
__declspec(implementation_key(4215)) void Name::PutShortcutKey ( _bstr_t _arg1 );
__declspec(implementation_key(4216)) _bstr_t Name::GetValue ( );
__declspec(implementation_key(4217)) void Name::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(4218)) VARIANT_BOOL Name::GetVisible ( );
__declspec(implementation_key(4219)) void Name::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4220)) _bstr_t Name::GetNameLocal ( );
__declspec(implementation_key(4221)) void Name::PutNameLocal ( _bstr_t _arg1 );
__declspec(implementation_key(4222)) _variant_t Name::GetRefersToLocal ( );
__declspec(implementation_key(4223)) void Name::PutRefersToLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(4224)) _variant_t Name::GetRefersToR1C1 ( );
__declspec(implementation_key(4225)) void Name::PutRefersToR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(4226)) _variant_t Name::GetRefersToR1C1Local ( );
__declspec(implementation_key(4227)) void Name::PutRefersToR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(4228)) RangePtr Name::GetRefersToRange ( );
__declspec(implementation_key(4229)) _ApplicationPtr ChartObject::GetApplication ( );
__declspec(implementation_key(4230)) enum XlCreator ChartObject::GetCreator ( );
__declspec(implementation_key(4231)) IDispatchPtr ChartObject::GetParent ( );
__declspec(implementation_key(4232)) RangePtr ChartObject::GetBottomRightCell ( );
__declspec(implementation_key(4233)) _variant_t ChartObject::BringToFront ( );
__declspec(implementation_key(4234)) _variant_t ChartObject::Copy ( );
__declspec(implementation_key(4235)) _variant_t ChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4236)) _variant_t ChartObject::Cut ( );
__declspec(implementation_key(4237)) _variant_t ChartObject::Delete ( );
__declspec(implementation_key(4238)) IDispatchPtr ChartObject::Duplicate ( );
__declspec(implementation_key(4239)) VARIANT_BOOL ChartObject::GetEnabled ( );
__declspec(implementation_key(4240)) void ChartObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4241)) double ChartObject::GetHeight ( );
__declspec(implementation_key(4242)) void ChartObject::PutHeight ( double _arg1 );
__declspec(implementation_key(4243)) long ChartObject::GetIndex ( );
__declspec(implementation_key(4244)) double ChartObject::GetLeft ( );
__declspec(implementation_key(4245)) void ChartObject::PutLeft ( double _arg1 );
__declspec(implementation_key(4246)) VARIANT_BOOL ChartObject::GetLocked ( );
__declspec(implementation_key(4247)) void ChartObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4248)) _bstr_t ChartObject::GetName ( );
__declspec(implementation_key(4249)) void ChartObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4250)) _bstr_t ChartObject::GetOnAction ( );
__declspec(implementation_key(4251)) void ChartObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(4252)) _variant_t ChartObject::GetPlacement ( );
__declspec(implementation_key(4253)) void ChartObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(4254)) VARIANT_BOOL ChartObject::GetPrintObject ( );
__declspec(implementation_key(4255)) void ChartObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4256)) _variant_t ChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(4257)) _variant_t ChartObject::SendToBack ( );
__declspec(implementation_key(4258)) double ChartObject::GetTop ( );
__declspec(implementation_key(4259)) void ChartObject::PutTop ( double _arg1 );
__declspec(implementation_key(4260)) RangePtr ChartObject::GetTopLeftCell ( );
__declspec(implementation_key(4261)) VARIANT_BOOL ChartObject::GetVisible ( );
__declspec(implementation_key(4262)) void ChartObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4263)) double ChartObject::GetWidth ( );
__declspec(implementation_key(4264)) void ChartObject::PutWidth ( double _arg1 );
__declspec(implementation_key(4265)) long ChartObject::GetZOrder ( );
__declspec(implementation_key(4266)) ShapeRangePtr ChartObject::GetShapeRange ( );
__declspec(implementation_key(4267)) _variant_t ChartObject::Activate ( );
__declspec(implementation_key(4268)) _ChartPtr ChartObject::GetChart ( );
__declspec(implementation_key(4269)) VARIANT_BOOL ChartObject::GetProtectChartObject ( );
__declspec(implementation_key(4270)) void ChartObject::PutProtectChartObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4271)) VARIANT_BOOL ChartObject::GetRoundedCorners ( );
__declspec(implementation_key(4272)) void ChartObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4273)) BorderPtr ChartObject::GetBorder ( );
__declspec(implementation_key(4274)) InteriorPtr ChartObject::GetInterior ( );
__declspec(implementation_key(4275)) VARIANT_BOOL ChartObject::GetShadow ( );
__declspec(implementation_key(4276)) void ChartObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4277)) _ApplicationPtr ChartObjects::GetApplication ( );
__declspec(implementation_key(4278)) enum XlCreator ChartObjects::GetCreator ( );
__declspec(implementation_key(4279)) IDispatchPtr ChartObjects::GetParent ( );
__declspec(implementation_key(4280)) _variant_t ChartObjects::BringToFront ( );
__declspec(implementation_key(4281)) _variant_t ChartObjects::Copy ( );
__declspec(implementation_key(4282)) _variant_t ChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4283)) _variant_t ChartObjects::Cut ( );
__declspec(implementation_key(4284)) _variant_t ChartObjects::Delete ( );
__declspec(implementation_key(4285)) IDispatchPtr ChartObjects::Duplicate ( );
__declspec(implementation_key(4286)) VARIANT_BOOL ChartObjects::GetEnabled ( );
__declspec(implementation_key(4287)) void ChartObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4288)) double ChartObjects::GetHeight ( );
__declspec(implementation_key(4289)) void ChartObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(4290)) double ChartObjects::GetLeft ( );
__declspec(implementation_key(4291)) void ChartObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(4292)) VARIANT_BOOL ChartObjects::GetLocked ( );
__declspec(implementation_key(4293)) void ChartObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4294)) _bstr_t ChartObjects::GetOnAction ( );
__declspec(implementation_key(4295)) void ChartObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(4296)) _variant_t ChartObjects::GetPlacement ( );
__declspec(implementation_key(4297)) void ChartObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(4298)) VARIANT_BOOL ChartObjects::GetPrintObject ( );
__declspec(implementation_key(4299)) void ChartObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4300)) _variant_t ChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(4301)) _variant_t ChartObjects::SendToBack ( );
__declspec(implementation_key(4302)) double ChartObjects::GetTop ( );
__declspec(implementation_key(4303)) void ChartObjects::PutTop ( double _arg1 );
__declspec(implementation_key(4304)) VARIANT_BOOL ChartObjects::GetVisible ( );
__declspec(implementation_key(4305)) void ChartObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4306)) double ChartObjects::GetWidth ( );
__declspec(implementation_key(4307)) void ChartObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(4308)) ShapeRangePtr ChartObjects::GetShapeRange ( );
__declspec(implementation_key(4309)) VARIANT_BOOL ChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(4310)) void ChartObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4311)) BorderPtr ChartObjects::GetBorder ( );
__declspec(implementation_key(4312)) InteriorPtr ChartObjects::GetInterior ( );
__declspec(implementation_key(4313)) VARIANT_BOOL ChartObjects::GetShadow ( );
__declspec(implementation_key(4314)) void ChartObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4315)) ChartObjectPtr ChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4316)) long ChartObjects::GetCount ( );
__declspec(implementation_key(4317)) GroupObjectPtr ChartObjects::Group ( );
__declspec(implementation_key(4318)) IDispatchPtr ChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(4319)) IUnknownPtr ChartObjects::_NewEnum ( );
__declspec(implementation_key(4320)) _ApplicationPtr Mailer::GetApplication ( );
__declspec(implementation_key(4321)) enum XlCreator Mailer::GetCreator ( );
__declspec(implementation_key(4322)) IDispatchPtr Mailer::GetParent ( );
__declspec(implementation_key(4323)) _variant_t Mailer::GetBCCRecipients ( );
__declspec(implementation_key(4324)) void Mailer::PutBCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4325)) _variant_t Mailer::GetCCRecipients ( );
__declspec(implementation_key(4326)) void Mailer::PutCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4327)) _variant_t Mailer::GetEnclosures ( );
__declspec(implementation_key(4328)) void Mailer::PutEnclosures ( const _variant_t & _arg1 );
__declspec(implementation_key(4329)) VARIANT_BOOL Mailer::GetReceived ( );
__declspec(implementation_key(4330)) DATE Mailer::GetSendDateTime ( );
__declspec(implementation_key(4331)) _bstr_t Mailer::GetSender ( );
__declspec(implementation_key(4332)) _bstr_t Mailer::GetSubject ( );
__declspec(implementation_key(4333)) void Mailer::PutSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4334)) _variant_t Mailer::GetToRecipients ( );
__declspec(implementation_key(4335)) void Mailer::PutToRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4336)) _variant_t Mailer::GetWhichAddress ( );
__declspec(implementation_key(4337)) void Mailer::PutWhichAddress ( const _variant_t & _arg1 );
__declspec(implementation_key(4338)) _ApplicationPtr CustomViews::GetApplication ( );
__declspec(implementation_key(4339)) enum XlCreator CustomViews::GetCreator ( );
__declspec(implementation_key(4340)) IDispatchPtr CustomViews::GetParent ( );
__declspec(implementation_key(4341)) long CustomViews::GetCount ( );
__declspec(implementation_key(4342)) CustomViewPtr CustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(4343)) CustomViewPtr CustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(4344)) CustomViewPtr CustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(4345)) IUnknownPtr CustomViews::Get_NewEnum ( );
__declspec(implementation_key(4346)) _ApplicationPtr CustomView::GetApplication ( );
__declspec(implementation_key(4347)) enum XlCreator CustomView::GetCreator ( );
__declspec(implementation_key(4348)) IDispatchPtr CustomView::GetParent ( );
__declspec(implementation_key(4349)) _bstr_t CustomView::GetName ( );
__declspec(implementation_key(4350)) VARIANT_BOOL CustomView::GetPrintSettings ( );
__declspec(implementation_key(4351)) VARIANT_BOOL CustomView::GetRowColSettings ( );
__declspec(implementation_key(4352)) HRESULT CustomView::Show ( );
__declspec(implementation_key(4353)) HRESULT CustomView::Delete ( );
__declspec(implementation_key(4354)) _ApplicationPtr FormatConditions::GetApplication ( );
__declspec(implementation_key(4355)) enum XlCreator FormatConditions::GetCreator ( );
__declspec(implementation_key(4356)) IDispatchPtr FormatConditions::GetParent ( );
__declspec(implementation_key(4357)) long FormatConditions::GetCount ( );
__declspec(implementation_key(4358)) FormatConditionPtr FormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(4359)) FormatConditionPtr FormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4360)) FormatConditionPtr FormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4361)) IUnknownPtr FormatConditions::Get_NewEnum ( );
__declspec(implementation_key(4362)) HRESULT FormatConditions::Delete ( );
__declspec(implementation_key(4363)) _ApplicationPtr FormatCondition::GetApplication ( );
__declspec(implementation_key(4364)) enum XlCreator FormatCondition::GetCreator ( );
__declspec(implementation_key(4365)) IDispatchPtr FormatCondition::GetParent ( );
__declspec(implementation_key(4366)) HRESULT FormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4367)) long FormatCondition::GetType ( );
__declspec(implementation_key(4368)) long FormatCondition::GetOperator ( );
__declspec(implementation_key(4369)) _bstr_t FormatCondition::GetFormula1 ( );
__declspec(implementation_key(4370)) _bstr_t FormatCondition::GetFormula2 ( );
__declspec(implementation_key(4371)) InteriorPtr FormatCondition::GetInterior ( );
__declspec(implementation_key(4372)) BordersPtr FormatCondition::GetBorders ( );
__declspec(implementation_key(4373)) FontPtr FormatCondition::GetFont ( );
__declspec(implementation_key(4374)) HRESULT FormatCondition::Delete ( );
__declspec(implementation_key(4375)) _ApplicationPtr Comments::GetApplication ( );
__declspec(implementation_key(4376)) enum XlCreator Comments::GetCreator ( );
__declspec(implementation_key(4377)) IDispatchPtr Comments::GetParent ( );
__declspec(implementation_key(4378)) long Comments::GetCount ( );
__declspec(implementation_key(4379)) CommentPtr Comments::Item ( long Index );
__declspec(implementation_key(4380)) CommentPtr Comments::Get_Default ( long Index );
__declspec(implementation_key(4381)) IUnknownPtr Comments::Get_NewEnum ( );
__declspec(implementation_key(4382)) _ApplicationPtr Comment::GetApplication ( );
__declspec(implementation_key(4383)) enum XlCreator Comment::GetCreator ( );
__declspec(implementation_key(4384)) IDispatchPtr Comment::GetParent ( );
__declspec(implementation_key(4385)) _bstr_t Comment::GetAuthor ( );
__declspec(implementation_key(4386)) ShapePtr Comment::GetShape ( );
__declspec(implementation_key(4387)) VARIANT_BOOL Comment::GetVisible ( );
__declspec(implementation_key(4388)) void Comment::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4389)) _bstr_t Comment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(4390)) HRESULT Comment::Delete ( );
__declspec(implementation_key(4391)) CommentPtr Comment::Next ( );
__declspec(implementation_key(4392)) CommentPtr Comment::Previous ( );
__declspec(implementation_key(4393)) HRESULT RefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(4394)) HRESULT RefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(4395)) _ApplicationPtr _QueryTable::GetApplication ( );
__declspec(implementation_key(4396)) enum XlCreator _QueryTable::GetCreator ( );
__declspec(implementation_key(4397)) IDispatchPtr _QueryTable::GetParent ( );
__declspec(implementation_key(4398)) _bstr_t _QueryTable::GetName ( );
__declspec(implementation_key(4399)) void _QueryTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4400)) VARIANT_BOOL _QueryTable::GetFieldNames ( );
__declspec(implementation_key(4401)) void _QueryTable::PutFieldNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4402)) VARIANT_BOOL _QueryTable::GetRowNumbers ( );
__declspec(implementation_key(4403)) void _QueryTable::PutRowNumbers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4404)) VARIANT_BOOL _QueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(4405)) void _QueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4406)) VARIANT_BOOL _QueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(4407)) void _QueryTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4408)) VARIANT_BOOL _QueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(4409)) void _QueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4410)) VARIANT_BOOL _QueryTable::GetRefreshing ( );
__declspec(implementation_key(4411)) VARIANT_BOOL _QueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(4412)) VARIANT_BOOL _QueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(4413)) void _QueryTable::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4414)) HRESULT _QueryTable::CancelRefresh ( );
__declspec(implementation_key(4415)) enum XlCellInsertionMode _QueryTable::GetRefreshStyle ( );
__declspec(implementation_key(4416)) void _QueryTable::PutRefreshStyle ( enum XlCellInsertionMode _arg1 );
__declspec(implementation_key(4417)) VARIANT_BOOL _QueryTable::GetEnableRefresh ( );
__declspec(implementation_key(4418)) void _QueryTable::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4419)) VARIANT_BOOL _QueryTable::GetSavePassword ( );
__declspec(implementation_key(4420)) void _QueryTable::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4421)) RangePtr _QueryTable::GetDestination ( );
__declspec(implementation_key(4422)) _variant_t _QueryTable::GetConnection ( );
__declspec(implementation_key(4423)) void _QueryTable::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(4424)) _variant_t _QueryTable::GetSql ( );
__declspec(implementation_key(4425)) void _QueryTable::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(4426)) _bstr_t _QueryTable::GetPostText ( );
__declspec(implementation_key(4427)) void _QueryTable::PutPostText ( _bstr_t _arg1 );
__declspec(implementation_key(4428)) RangePtr _QueryTable::GetResultRange ( );
__declspec(implementation_key(4429)) HRESULT _QueryTable::Delete ( );
__declspec(implementation_key(4430)) VARIANT_BOOL _QueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(4431)) ParametersPtr _QueryTable::GetParameters ( );
__declspec(implementation_key(4432)) IDispatchPtr _QueryTable::GetRecordset ( );
__declspec(implementation_key(4433)) void _QueryTable::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(4434)) VARIANT_BOOL _QueryTable::GetSaveData ( );
__declspec(implementation_key(4435)) void _QueryTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4436)) VARIANT_BOOL _QueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(4437)) void _QueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4438)) VARIANT_BOOL _QueryTable::GetEnableEditing ( );
__declspec(implementation_key(4439)) void _QueryTable::PutEnableEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4440)) enum XlPlatform _QueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(4441)) void _QueryTable::PutTextFilePlatform ( enum XlPlatform _arg1 );
__declspec(implementation_key(4442)) long _QueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(4443)) void _QueryTable::PutTextFileStartRow ( long _arg1 );
__declspec(implementation_key(4444)) enum XlTextParsingType _QueryTable::GetTextFileParseType ( );
__declspec(implementation_key(4445)) void _QueryTable::PutTextFileParseType ( enum XlTextParsingType _arg1 );
__declspec(implementation_key(4446)) enum XlTextQualifier _QueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(4447)) void _QueryTable::PutTextFileTextQualifier ( enum XlTextQualifier _arg1 );
__declspec(implementation_key(4448)) VARIANT_BOOL _QueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(4449)) void _QueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4450)) VARIANT_BOOL _QueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(4451)) void _QueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4452)) VARIANT_BOOL _QueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(4453)) void _QueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4454)) VARIANT_BOOL _QueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(4455)) void _QueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4456)) VARIANT_BOOL _QueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(4457)) void _QueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4458)) _bstr_t _QueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(4459)) void _QueryTable::PutTextFileOtherDelimiter ( _bstr_t _arg1 );
__declspec(implementation_key(4460)) _variant_t _QueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(4461)) void _QueryTable::PutTextFileColumnDataTypes ( const _variant_t & _arg1 );
__declspec(implementation_key(4462)) _variant_t _QueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(4463)) void _QueryTable::PutTextFileFixedColumnWidths ( const _variant_t & _arg1 );
__declspec(implementation_key(4464)) VARIANT_BOOL _QueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(4465)) void _QueryTable::PutPreserveColumnInfo ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4466)) VARIANT_BOOL _QueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(4467)) void _QueryTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4468)) VARIANT_BOOL _QueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(4469)) void _QueryTable::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4470)) _variant_t _QueryTable::GetCommandText ( );
__declspec(implementation_key(4471)) void _QueryTable::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(4472)) enum XlCmdType _QueryTable::GetCommandType ( );
__declspec(implementation_key(4473)) void _QueryTable::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(4474)) VARIANT_BOOL _QueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(4475)) void _QueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4476)) enum xlQueryType _QueryTable::GetQueryType ( );
__declspec(implementation_key(4477)) VARIANT_BOOL _QueryTable::GetMaintainConnection ( );
__declspec(implementation_key(4478)) void _QueryTable::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4479)) _bstr_t _QueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(4480)) void _QueryTable::PutTextFileDecimalSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(4481)) _bstr_t _QueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(4482)) void _QueryTable::PutTextFileThousandsSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(4483)) long _QueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(4484)) void _QueryTable::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(4485)) HRESULT _QueryTable::ResetTimer ( );
__declspec(implementation_key(4486)) enum xlWebSelectionType _QueryTable::GetWebSelectionType ( );
__declspec(implementation_key(4487)) void _QueryTable::PutWebSelectionType ( enum xlWebSelectionType _arg1 );
__declspec(implementation_key(4488)) enum xlWebFormatting _QueryTable::GetWebFormatting ( );
__declspec(implementation_key(4489)) void _QueryTable::PutWebFormatting ( enum xlWebFormatting _arg1 );
__declspec(implementation_key(4490)) _bstr_t _QueryTable::GetWebTables ( );
__declspec(implementation_key(4491)) void _QueryTable::PutWebTables ( _bstr_t _arg1 );
__declspec(implementation_key(4492)) VARIANT_BOOL _QueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(4493)) void _QueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4494)) VARIANT_BOOL _QueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(4495)) void _QueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4496)) VARIANT_BOOL _QueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(4497)) void _QueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4498)) VARIANT_BOOL _QueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(4499)) void _QueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4500)) _ApplicationPtr QueryTables::GetApplication ( );
__declspec(implementation_key(4501)) enum XlCreator QueryTables::GetCreator ( );
__declspec(implementation_key(4502)) IDispatchPtr QueryTables::GetParent ( );
__declspec(implementation_key(4503)) long QueryTables::GetCount ( );
__declspec(implementation_key(4504)) _QueryTablePtr QueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(4505)) _QueryTablePtr QueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(4506)) _QueryTablePtr QueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4507)) IUnknownPtr QueryTables::_NewEnum ( );
__declspec(implementation_key(4508)) _ApplicationPtr Parameter::GetApplication ( );
__declspec(implementation_key(4509)) enum XlCreator Parameter::GetCreator ( );
__declspec(implementation_key(4510)) IDispatchPtr Parameter::GetParent ( );
__declspec(implementation_key(4511)) enum XlParameterDataType Parameter::GetDataType ( );
__declspec(implementation_key(4512)) void Parameter::PutDataType ( enum XlParameterDataType _arg1 );
__declspec(implementation_key(4513)) enum XlParameterType Parameter::GetType ( );
__declspec(implementation_key(4514)) _bstr_t Parameter::GetPromptString ( );
__declspec(implementation_key(4515)) _variant_t Parameter::GetValue ( );
__declspec(implementation_key(4516)) RangePtr Parameter::GetSourceRange ( );
__declspec(implementation_key(4517)) _bstr_t Parameter::GetName ( );
__declspec(implementation_key(4518)) void Parameter::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4519)) HRESULT Parameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(4520)) VARIANT_BOOL Parameter::GetRefreshOnChange ( );
__declspec(implementation_key(4521)) void Parameter::PutRefreshOnChange ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4522)) _ApplicationPtr Parameters::GetApplication ( );
__declspec(implementation_key(4523)) enum XlCreator Parameters::GetCreator ( );
__declspec(implementation_key(4524)) IDispatchPtr Parameters::GetParent ( );
__declspec(implementation_key(4525)) ParameterPtr Parameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(4526)) long Parameters::GetCount ( );
__declspec(implementation_key(4527)) ParameterPtr Parameters::Item ( const _variant_t & Index );
__declspec(implementation_key(4528)) ParameterPtr Parameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4529)) HRESULT Parameters::Delete ( );
__declspec(implementation_key(4530)) IUnknownPtr Parameters::_NewEnum ( );
__declspec(implementation_key(4531)) _ApplicationPtr ODBCError::GetApplication ( );
__declspec(implementation_key(4532)) enum XlCreator ODBCError::GetCreator ( );
__declspec(implementation_key(4533)) IDispatchPtr ODBCError::GetParent ( );
__declspec(implementation_key(4534)) _bstr_t ODBCError::GetSqlState ( );
__declspec(implementation_key(4535)) _bstr_t ODBCError::GetErrorString ( );
__declspec(implementation_key(4536)) _ApplicationPtr ODBCErrors::GetApplication ( );
__declspec(implementation_key(4537)) enum XlCreator ODBCErrors::GetCreator ( );
__declspec(implementation_key(4538)) IDispatchPtr ODBCErrors::GetParent ( );
__declspec(implementation_key(4539)) long ODBCErrors::GetCount ( );
__declspec(implementation_key(4540)) ODBCErrorPtr ODBCErrors::Item ( long Index );
__declspec(implementation_key(4541)) ODBCErrorPtr ODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(4542)) IUnknownPtr ODBCErrors::_NewEnum ( );
__declspec(implementation_key(4543)) _ApplicationPtr Validation::GetApplication ( );
__declspec(implementation_key(4544)) enum XlCreator Validation::GetCreator ( );
__declspec(implementation_key(4545)) IDispatchPtr Validation::GetParent ( );
__declspec(implementation_key(4546)) HRESULT Validation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4547)) long Validation::GetAlertStyle ( );
__declspec(implementation_key(4548)) VARIANT_BOOL Validation::GetIgnoreBlank ( );
__declspec(implementation_key(4549)) void Validation::PutIgnoreBlank ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4550)) long Validation::GetIMEMode ( );
__declspec(implementation_key(4551)) void Validation::PutIMEMode ( long _arg1 );
__declspec(implementation_key(4552)) VARIANT_BOOL Validation::GetInCellDropdown ( );
__declspec(implementation_key(4553)) void Validation::PutInCellDropdown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4554)) HRESULT Validation::Delete ( );
__declspec(implementation_key(4555)) _bstr_t Validation::GetErrorMessage ( );
__declspec(implementation_key(4556)) void Validation::PutErrorMessage ( _bstr_t _arg1 );
__declspec(implementation_key(4557)) _bstr_t Validation::GetErrorTitle ( );
__declspec(implementation_key(4558)) void Validation::PutErrorTitle ( _bstr_t _arg1 );
__declspec(implementation_key(4559)) _bstr_t Validation::GetInputMessage ( );
__declspec(implementation_key(4560)) void Validation::PutInputMessage ( _bstr_t _arg1 );
__declspec(implementation_key(4561)) _bstr_t Validation::GetInputTitle ( );
__declspec(implementation_key(4562)) void Validation::PutInputTitle ( _bstr_t _arg1 );
__declspec(implementation_key(4563)) _bstr_t Validation::GetFormula1 ( );
__declspec(implementation_key(4564)) _bstr_t Validation::GetFormula2 ( );
__declspec(implementation_key(4565)) HRESULT Validation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4566)) long Validation::GetOperator ( );
__declspec(implementation_key(4567)) VARIANT_BOOL Validation::GetShowError ( );
__declspec(implementation_key(4568)) void Validation::PutShowError ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4569)) VARIANT_BOOL Validation::GetShowInput ( );
__declspec(implementation_key(4570)) void Validation::PutShowInput ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4571)) long Validation::GetType ( );
__declspec(implementation_key(4572)) VARIANT_BOOL Validation::GetValue ( );
__declspec(implementation_key(4573)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(4574)) enum XlCreator Hyperlinks::GetCreator ( );
__declspec(implementation_key(4575)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(4576)) IDispatchPtr Hyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(4577)) long Hyperlinks::GetCount ( );
__declspec(implementation_key(4578)) HyperlinkPtr Hyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4579)) HyperlinkPtr Hyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4580)) IUnknownPtr Hyperlinks::Get_NewEnum ( );
__declspec(implementation_key(4581)) HRESULT Hyperlinks::Delete ( );
__declspec(implementation_key(4582)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(4583)) enum XlCreator Hyperlink::GetCreator ( );
__declspec(implementation_key(4584)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(4585)) _bstr_t Hyperlink::GetName ( );
__declspec(implementation_key(4586)) RangePtr Hyperlink::GetRange ( );
__declspec(implementation_key(4587)) ShapePtr Hyperlink::GetShape ( );
__declspec(implementation_key(4588)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(4589)) void Hyperlink::PutSubAddress ( _bstr_t _arg1 );
__declspec(implementation_key(4590)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(4591)) void Hyperlink::PutAddress ( _bstr_t _arg1 );
__declspec(implementation_key(4592)) long Hyperlink::GetType ( );
__declspec(implementation_key(4593)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(4594)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(4595)) HRESULT Hyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(4596)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(4597)) void Hyperlink::PutEmailSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4598)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(4599)) void Hyperlink::PutScreenTip ( _bstr_t _arg1 );
__declspec(implementation_key(4600)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(4601)) void Hyperlink::PutTextToDisplay ( _bstr_t _arg1 );
__declspec(implementation_key(4602)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(4603)) HRESULT IDocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(4604)) HRESULT IDocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4605)) HRESULT IDocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4606)) HRESULT IDocEvents::Activate ( );
__declspec(implementation_key(4607)) HRESULT IDocEvents::Deactivate ( );
__declspec(implementation_key(4608)) HRESULT IDocEvents::Calculate ( );
__declspec(implementation_key(4609)) HRESULT IDocEvents::Change ( struct Range * Target );
__declspec(implementation_key(4610)) HRESULT IDocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(4611)) HRESULT IWorkbookEvents::Open ( );
__declspec(implementation_key(4612)) HRESULT IWorkbookEvents::Activate ( );
__declspec(implementation_key(4613)) HRESULT IWorkbookEvents::Deactivate ( );
__declspec(implementation_key(4614)) HRESULT IWorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(4615)) HRESULT IWorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4616)) HRESULT IWorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(4617)) HRESULT IWorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(4618)) HRESULT IWorkbookEvents::AddinInstall ( );
__declspec(implementation_key(4619)) HRESULT IWorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(4620)) HRESULT IWorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(4621)) HRESULT IWorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(4622)) HRESULT IWorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(4623)) HRESULT IWorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(4624)) HRESULT IWorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4625)) HRESULT IWorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4626)) HRESULT IWorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(4627)) HRESULT IWorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(4628)) HRESULT IWorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(4629)) HRESULT IWorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(4630)) HRESULT IWorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(4631)) _ApplicationPtr AutoFilter::GetApplication ( );
__declspec(implementation_key(4632)) enum XlCreator AutoFilter::GetCreator ( );
__declspec(implementation_key(4633)) IDispatchPtr AutoFilter::GetParent ( );
__declspec(implementation_key(4634)) RangePtr AutoFilter::GetRange ( );
__declspec(implementation_key(4635)) FiltersPtr AutoFilter::GetFilters ( );
__declspec(implementation_key(4636)) _ApplicationPtr Filters::GetApplication ( );
__declspec(implementation_key(4637)) enum XlCreator Filters::GetCreator ( );
__declspec(implementation_key(4638)) IDispatchPtr Filters::GetParent ( );
__declspec(implementation_key(4639)) long Filters::GetCount ( );
__declspec(implementation_key(4640)) FilterPtr Filters::Get_Default ( long Index );
__declspec(implementation_key(4641)) FilterPtr Filters::GetItem ( long Index );
__declspec(implementation_key(4642)) IUnknownPtr Filters::Get_NewEnum ( );
__declspec(implementation_key(4643)) _ApplicationPtr Filter::GetApplication ( );
__declspec(implementation_key(4644)) enum XlCreator Filter::GetCreator ( );
__declspec(implementation_key(4645)) IDispatchPtr Filter::GetParent ( );
__declspec(implementation_key(4646)) VARIANT_BOOL Filter::GetOn ( );
__declspec(implementation_key(4647)) _variant_t Filter::GetCriteria1 ( );
__declspec(implementation_key(4648)) enum XlAutoFilterOperator Filter::GetOperator ( );
__declspec(implementation_key(4649)) _variant_t Filter::GetCriteria2 ( );
__declspec(implementation_key(4650)) _ApplicationPtr AutoCorrect::GetApplication ( );
__declspec(implementation_key(4651)) enum XlCreator AutoCorrect::GetCreator ( );
__declspec(implementation_key(4652)) IDispatchPtr AutoCorrect::GetParent ( );
__declspec(implementation_key(4653)) _variant_t AutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(4654)) VARIANT_BOOL AutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(4655)) void AutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4656)) _variant_t AutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(4657)) _variant_t AutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(4658)) void AutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(4659)) VARIANT_BOOL AutoCorrect::GetExcelReplaceText ( );
__declspec(implementation_key(4660)) void AutoCorrect::PutExcelReplaceText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4661)) VARIANT_BOOL AutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(4662)) void AutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4663)) VARIANT_BOOL AutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(4664)) void AutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4665)) VARIANT_BOOL AutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(4666)) void AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4667)) _ApplicationPtr Border::GetApplication ( );
__declspec(implementation_key(4668)) enum XlCreator Border::GetCreator ( );
__declspec(implementation_key(4669)) IDispatchPtr Border::GetParent ( );
__declspec(implementation_key(4670)) _variant_t Border::GetColor ( );
__declspec(implementation_key(4671)) void Border::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4672)) _variant_t Border::GetColorIndex ( );
__declspec(implementation_key(4673)) void Border::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4674)) _variant_t Border::GetLineStyle ( );
__declspec(implementation_key(4675)) void Border::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(4676)) _variant_t Border::GetWeight ( );
__declspec(implementation_key(4677)) void Border::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(4678)) _ApplicationPtr Interior::GetApplication ( );
__declspec(implementation_key(4679)) enum XlCreator Interior::GetCreator ( );
__declspec(implementation_key(4680)) IDispatchPtr Interior::GetParent ( );
__declspec(implementation_key(4681)) _variant_t Interior::GetColor ( );
__declspec(implementation_key(4682)) void Interior::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4683)) _variant_t Interior::GetColorIndex ( );
__declspec(implementation_key(4684)) void Interior::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4685)) _variant_t Interior::GetInvertIfNegative ( );
__declspec(implementation_key(4686)) void Interior::PutInvertIfNegative ( const _variant_t & _arg1 );
__declspec(implementation_key(4687)) _variant_t Interior::GetPattern ( );
__declspec(implementation_key(4688)) void Interior::PutPattern ( const _variant_t & _arg1 );
__declspec(implementation_key(4689)) _variant_t Interior::GetPatternColor ( );
__declspec(implementation_key(4690)) void Interior::PutPatternColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4691)) _variant_t Interior::GetPatternColorIndex ( );
__declspec(implementation_key(4692)) void Interior::PutPatternColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4693)) _ApplicationPtr ChartFillFormat::GetApplication ( );
__declspec(implementation_key(4694)) enum XlCreator ChartFillFormat::GetCreator ( );
__declspec(implementation_key(4695)) IDispatchPtr ChartFillFormat::GetParent ( );
__declspec(implementation_key(4696)) HRESULT ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(4697)) HRESULT ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(4698)) HRESULT ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(4699)) HRESULT ChartFillFormat::Solid ( );
__declspec(implementation_key(4700)) HRESULT ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(4701)) HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(4702)) HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(4703)) HRESULT ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(4704)) ChartColorFormatPtr ChartFillFormat::GetBackColor ( );
__declspec(implementation_key(4705)) ChartColorFormatPtr ChartFillFormat::GetForeColor ( );
__declspec(implementation_key(4706)) enum Office::MsoGradientColorType ChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(4707)) float ChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(4708)) enum Office::MsoGradientStyle ChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(4709)) long ChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(4710)) enum Office::MsoPatternType ChartFillFormat::GetPattern ( );
__declspec(implementation_key(4711)) enum Office::MsoPresetGradientType ChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(4712)) enum Office::MsoPresetTexture ChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(4713)) _bstr_t ChartFillFormat::GetTextureName ( );
__declspec(implementation_key(4714)) enum Office::MsoTextureType ChartFillFormat::GetTextureType ( );
__declspec(implementation_key(4715)) enum Office::MsoFillType ChartFillFormat::GetType ( );
__declspec(implementation_key(4716)) enum Office::MsoTriState ChartFillFormat::GetVisible ( );
__declspec(implementation_key(4717)) void ChartFillFormat::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(4718)) _ApplicationPtr ChartColorFormat::GetApplication ( );
__declspec(implementation_key(4719)) enum XlCreator ChartColorFormat::GetCreator ( );
__declspec(implementation_key(4720)) IDispatchPtr ChartColorFormat::GetParent ( );
__declspec(implementation_key(4721)) long ChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(4722)) void ChartColorFormat::PutSchemeColor ( long _arg1 );
__declspec(implementation_key(4723)) long ChartColorFormat::GetExcelRGB ( );
__declspec(implementation_key(4724)) long ChartColorFormat::Get_Default ( );
__declspec(implementation_key(4725)) long ChartColorFormat::GetType ( );
__declspec(implementation_key(4726)) _ApplicationPtr Axis::GetApplication ( );
__declspec(implementation_key(4727)) enum XlCreator Axis::GetCreator ( );
__declspec(implementation_key(4728)) IDispatchPtr Axis::GetParent ( );
__declspec(implementation_key(4729)) VARIANT_BOOL Axis::GetAxisBetweenCategories ( );
__declspec(implementation_key(4730)) void Axis::PutAxisBetweenCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4731)) enum XlAxisGroup Axis::GetAxisGroup ( );
__declspec(implementation_key(4732)) AxisTitlePtr Axis::GetAxisTitle ( );
__declspec(implementation_key(4733)) BorderPtr Axis::GetBorder ( );
__declspec(implementation_key(4734)) _variant_t Axis::GetCategoryNames ( );
__declspec(implementation_key(4735)) void Axis::PutCategoryNames ( const _variant_t & _arg1 );
__declspec(implementation_key(4736)) enum XlAxisCrosses Axis::GetCrosses ( );
__declspec(implementation_key(4737)) void Axis::PutCrosses ( enum XlAxisCrosses _arg1 );
__declspec(implementation_key(4738)) double Axis::GetCrossesAt ( );
__declspec(implementation_key(4739)) void Axis::PutCrossesAt ( double _arg1 );
__declspec(implementation_key(4740)) _variant_t Axis::Delete ( );
__declspec(implementation_key(4741)) VARIANT_BOOL Axis::GetHasMajorGridlines ( );
__declspec(implementation_key(4742)) void Axis::PutHasMajorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4743)) VARIANT_BOOL Axis::GetHasMinorGridlines ( );
__declspec(implementation_key(4744)) void Axis::PutHasMinorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4745)) VARIANT_BOOL Axis::GetHasTitle ( );
__declspec(implementation_key(4746)) void Axis::PutHasTitle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4747)) GridlinesPtr Axis::GetMajorGridlines ( );
__declspec(implementation_key(4748)) enum XlTickMark Axis::GetMajorTickMark ( );
__declspec(implementation_key(4749)) void Axis::PutMajorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(4750)) double Axis::GetMajorUnit ( );
__declspec(implementation_key(4751)) void Axis::PutMajorUnit ( double _arg1 );
__declspec(implementation_key(4752)) VARIANT_BOOL Axis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(4753)) void Axis::PutMajorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4754)) double Axis::GetMaximumScale ( );
__declspec(implementation_key(4755)) void Axis::PutMaximumScale ( double _arg1 );
__declspec(implementation_key(4756)) VARIANT_BOOL Axis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(4757)) void Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4758)) double Axis::GetMinimumScale ( );
__declspec(implementation_key(4759)) void Axis::PutMinimumScale ( double _arg1 );
__declspec(implementation_key(4760)) VARIANT_BOOL Axis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(4761)) void Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4762)) GridlinesPtr Axis::GetMinorGridlines ( );
__declspec(implementation_key(4763)) enum XlTickMark Axis::GetMinorTickMark ( );
__declspec(implementation_key(4764)) void Axis::PutMinorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(4765)) double Axis::GetMinorUnit ( );
__declspec(implementation_key(4766)) void Axis::PutMinorUnit ( double _arg1 );
__declspec(implementation_key(4767)) VARIANT_BOOL Axis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(4768)) void Axis::PutMinorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4769)) VARIANT_BOOL Axis::GetReversePlotOrder ( );
__declspec(implementation_key(4770)) void Axis::PutReversePlotOrder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4771)) enum XlScaleType Axis::GetScaleType ( );
__declspec(implementation_key(4772)) void Axis::PutScaleType ( enum XlScaleType _arg1 );
__declspec(implementation_key(4773)) _variant_t Axis::Select ( );
__declspec(implementation_key(4774)) enum XlTickLabelPosition Axis::GetTickLabelPosition ( );
__declspec(implementation_key(4775)) void Axis::PutTickLabelPosition ( enum XlTickLabelPosition _arg1 );
__declspec(implementation_key(4776)) TickLabelsPtr Axis::GetTickLabels ( );
__declspec(implementation_key(4777)) long Axis::GetTickLabelSpacing ( );
__declspec(implementation_key(4778)) void Axis::PutTickLabelSpacing ( long _arg1 );
__declspec(implementation_key(4779)) long Axis::GetTickMarkSpacing ( );
__declspec(implementation_key(4780)) void Axis::PutTickMarkSpacing ( long _arg1 );
__declspec(implementation_key(4781)) enum XlAxisType Axis::GetType ( );
__declspec(implementation_key(4782)) void Axis::PutType ( enum XlAxisType _arg1 );
__declspec(implementation_key(4783)) enum XlTimeUnit Axis::GetBaseUnit ( );
__declspec(implementation_key(4784)) void Axis::PutBaseUnit ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4785)) VARIANT_BOOL Axis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(4786)) void Axis::PutBaseUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4787)) enum XlTimeUnit Axis::GetMajorUnitScale ( );
__declspec(implementation_key(4788)) void Axis::PutMajorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4789)) enum XlTimeUnit Axis::GetMinorUnitScale ( );
__declspec(implementation_key(4790)) void Axis::PutMinorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4791)) enum XlCategoryType Axis::GetCategoryType ( );
__declspec(implementation_key(4792)) void Axis::PutCategoryType ( enum XlCategoryType _arg1 );
__declspec(implementation_key(4793)) double Axis::GetLeft ( );
__declspec(implementation_key(4794)) double Axis::GetTop ( );
__declspec(implementation_key(4795)) double Axis::GetWidth ( );
__declspec(implementation_key(4796)) double Axis::GetHeight ( );
__declspec(implementation_key(4797)) enum XlDisplayUnit Axis::GetDisplayUnit ( );
__declspec(implementation_key(4798)) void Axis::PutDisplayUnit ( enum XlDisplayUnit _arg1 );
__declspec(implementation_key(4799)) double Axis::GetDisplayUnitCustom ( );
__declspec(implementation_key(4800)) void Axis::PutDisplayUnitCustom ( double _arg1 );
__declspec(implementation_key(4801)) VARIANT_BOOL Axis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(4802)) void Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4803)) DisplayUnitLabelPtr Axis::GetDisplayUnitLabel ( );
__declspec(implementation_key(4804)) _ApplicationPtr ChartTitle::GetApplication ( );
__declspec(implementation_key(4805)) enum XlCreator ChartTitle::GetCreator ( );
__declspec(implementation_key(4806)) IDispatchPtr ChartTitle::GetParent ( );
__declspec(implementation_key(4807)) _bstr_t ChartTitle::GetName ( );
__declspec(implementation_key(4808)) _variant_t ChartTitle::Select ( );
__declspec(implementation_key(4809)) BorderPtr ChartTitle::GetBorder ( );
__declspec(implementation_key(4810)) _variant_t ChartTitle::Delete ( );
__declspec(implementation_key(4811)) InteriorPtr ChartTitle::GetInterior ( );
__declspec(implementation_key(4812)) ChartFillFormatPtr ChartTitle::GetFill ( );
__declspec(implementation_key(4813)) _bstr_t ChartTitle::GetCaption ( );
__declspec(implementation_key(4814)) void ChartTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(4815)) CharactersPtr ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4816)) FontPtr ChartTitle::GetFont ( );
__declspec(implementation_key(4817)) _variant_t ChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(4818)) void ChartTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4819)) double ChartTitle::GetLeft ( );
__declspec(implementation_key(4820)) void ChartTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(4821)) _variant_t ChartTitle::GetOrientation ( );
__declspec(implementation_key(4822)) void ChartTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(4823)) VARIANT_BOOL ChartTitle::GetShadow ( );
__declspec(implementation_key(4824)) void ChartTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4825)) _bstr_t ChartTitle::GetText ( );
__declspec(implementation_key(4826)) void ChartTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(4827)) double ChartTitle::GetTop ( );
__declspec(implementation_key(4828)) void ChartTitle::PutTop ( double _arg1 );
__declspec(implementation_key(4829)) _variant_t ChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(4830)) void ChartTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4831)) long ChartTitle::GetReadingOrder ( );
__declspec(implementation_key(4832)) void ChartTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(4833)) _variant_t ChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(4834)) void ChartTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(4835)) _ApplicationPtr AxisTitle::GetApplication ( );
__declspec(implementation_key(4836)) enum XlCreator AxisTitle::GetCreator ( );
__declspec(implementation_key(4837)) IDispatchPtr AxisTitle::GetParent ( );
__declspec(implementation_key(4838)) _bstr_t AxisTitle::GetName ( );
__declspec(implementation_key(4839)) _variant_t AxisTitle::Select ( );
__declspec(implementation_key(4840)) BorderPtr AxisTitle::GetBorder ( );
__declspec(implementation_key(4841)) _variant_t AxisTitle::Delete ( );
__declspec(implementation_key(4842)) InteriorPtr AxisTitle::GetInterior ( );
__declspec(implementation_key(4843)) ChartFillFormatPtr AxisTitle::GetFill ( );
__declspec(implementation_key(4844)) _bstr_t AxisTitle::GetCaption ( );
__declspec(implementation_key(4845)) void AxisTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(4846)) CharactersPtr AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4847)) FontPtr AxisTitle::GetFont ( );
__declspec(implementation_key(4848)) _variant_t AxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(4849)) void AxisTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4850)) double AxisTitle::GetLeft ( );
__declspec(implementation_key(4851)) void AxisTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(4852)) _variant_t AxisTitle::GetOrientation ( );
__declspec(implementation_key(4853)) void AxisTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(4854)) VARIANT_BOOL AxisTitle::GetShadow ( );
__declspec(implementation_key(4855)) void AxisTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4856)) _bstr_t AxisTitle::GetText ( );
__declspec(implementation_key(4857)) void AxisTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(4858)) double AxisTitle::GetTop ( );
__declspec(implementation_key(4859)) void AxisTitle::PutTop ( double _arg1 );
__declspec(implementation_key(4860)) _variant_t AxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(4861)) void AxisTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4862)) long AxisTitle::GetReadingOrder ( );
__declspec(implementation_key(4863)) void AxisTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(4864)) _variant_t AxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(4865)) void AxisTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(4866)) _ApplicationPtr ChartGroup::GetApplication ( );
__declspec(implementation_key(4867)) enum XlCreator ChartGroup::GetCreator ( );
__declspec(implementation_key(4868)) IDispatchPtr ChartGroup::GetParent ( );
__declspec(implementation_key(4869)) enum XlAxisGroup ChartGroup::GetAxisGroup ( );
__declspec(implementation_key(4870)) void ChartGroup::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(4871)) long ChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(4872)) void ChartGroup::PutDoughnutHoleSize ( long _arg1 );
__declspec(implementation_key(4873)) DownBarsPtr ChartGroup::GetDownBars ( );
__declspec(implementation_key(4874)) DropLinesPtr ChartGroup::GetDropLines ( );
__declspec(implementation_key(4875)) long ChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(4876)) void ChartGroup::PutFirstSliceAngle ( long _arg1 );
__declspec(implementation_key(4877)) long ChartGroup::GetGapWidth ( );
__declspec(implementation_key(4878)) void ChartGroup::PutGapWidth ( long _arg1 );
__declspec(implementation_key(4879)) VARIANT_BOOL ChartGroup::GetHasDropLines ( );
__declspec(implementation_key(4880)) void ChartGroup::PutHasDropLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4881)) VARIANT_BOOL ChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(4882)) void ChartGroup::PutHasHiLoLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4883)) VARIANT_BOOL ChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(4884)) void ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4885)) VARIANT_BOOL ChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(4886)) void ChartGroup::PutHasSeriesLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4887)) VARIANT_BOOL ChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(4888)) void ChartGroup::PutHasUpDownBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4889)) HiLoLinesPtr ChartGroup::GetHiLoLines ( );
__declspec(implementation_key(4890)) long ChartGroup::GetIndex ( );
__declspec(implementation_key(4891)) long ChartGroup::GetOverlap ( );
__declspec(implementation_key(4892)) void ChartGroup::PutOverlap ( long _arg1 );
__declspec(implementation_key(4893)) TickLabelsPtr ChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(4894)) IDispatchPtr ChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(4895)) SeriesLinesPtr ChartGroup::GetSeriesLines ( );
__declspec(implementation_key(4896)) long ChartGroup::GetSubType ( );
__declspec(implementation_key(4897)) void ChartGroup::PutSubType ( long _arg1 );
__declspec(implementation_key(4898)) long ChartGroup::GetType ( );
__declspec(implementation_key(4899)) void ChartGroup::PutType ( long _arg1 );
__declspec(implementation_key(4900)) UpBarsPtr ChartGroup::GetUpBars ( );
__declspec(implementation_key(4901)) VARIANT_BOOL ChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(4902)) void ChartGroup::PutVaryByCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4903)) enum XlSizeRepresents ChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(4904)) void ChartGroup::PutSizeRepresents ( enum XlSizeRepresents _arg1 );
__declspec(implementation_key(4905)) long ChartGroup::GetBubbleScale ( );
__declspec(implementation_key(4906)) void ChartGroup::PutBubbleScale ( long _arg1 );
__declspec(implementation_key(4907)) VARIANT_BOOL ChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(4908)) void ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4909)) enum XlChartSplitType ChartGroup::GetSplitType ( );
__declspec(implementation_key(4910)) void ChartGroup::PutSplitType ( enum XlChartSplitType _arg1 );
__declspec(implementation_key(4911)) _variant_t ChartGroup::GetSplitValue ( );
__declspec(implementation_key(4912)) void ChartGroup::PutSplitValue ( const _variant_t & _arg1 );
__declspec(implementation_key(4913)) long ChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(4914)) void ChartGroup::PutSecondPlotSize ( long _arg1 );
__declspec(implementation_key(4915)) VARIANT_BOOL ChartGroup::GetHas3DShading ( );
__declspec(implementation_key(4916)) void ChartGroup::PutHas3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4917)) _ApplicationPtr ChartGroups::GetApplication ( );
__declspec(implementation_key(4918)) enum XlCreator ChartGroups::GetCreator ( );
__declspec(implementation_key(4919)) IDispatchPtr ChartGroups::GetParent ( );
__declspec(implementation_key(4920)) long ChartGroups::GetCount ( );
__declspec(implementation_key(4921)) ChartGroupPtr ChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(4922)) IUnknownPtr ChartGroups::_NewEnum ( );
__declspec(implementation_key(4923)) _ApplicationPtr Axes::GetApplication ( );
__declspec(implementation_key(4924)) enum XlCreator Axes::GetCreator ( );
__declspec(implementation_key(4925)) IDispatchPtr Axes::GetParent ( );
__declspec(implementation_key(4926)) long Axes::GetCount ( );
__declspec(implementation_key(4927)) AxisPtr Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(4928)) IUnknownPtr Axes::_NewEnum ( );
__declspec(implementation_key(4929)) _ApplicationPtr Points::GetApplication ( );
__declspec(implementation_key(4930)) enum XlCreator Points::GetCreator ( );
__declspec(implementation_key(4931)) IDispatchPtr Points::GetParent ( );
__declspec(implementation_key(4932)) long Points::GetCount ( );
__declspec(implementation_key(4933)) PointPtr Points::Item ( long Index );
__declspec(implementation_key(4934)) IUnknownPtr Points::_NewEnum ( );
__declspec(implementation_key(4935)) _ApplicationPtr Point::GetApplication ( );
__declspec(implementation_key(4936)) enum XlCreator Point::GetCreator ( );
__declspec(implementation_key(4937)) IDispatchPtr Point::GetParent ( );
__declspec(implementation_key(4938)) _variant_t Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText );
__declspec(implementation_key(4939)) BorderPtr Point::GetBorder ( );
__declspec(implementation_key(4940)) _variant_t Point::ClearFormats ( );
__declspec(implementation_key(4941)) _variant_t Point::Copy ( );
__declspec(implementation_key(4942)) DataLabelPtr Point::GetDataLabel ( );
__declspec(implementation_key(4943)) _variant_t Point::Delete ( );
__declspec(implementation_key(4944)) long Point::GetExplosion ( );
__declspec(implementation_key(4945)) void Point::PutExplosion ( long _arg1 );
__declspec(implementation_key(4946)) VARIANT_BOOL Point::GetHasDataLabel ( );
__declspec(implementation_key(4947)) void Point::PutHasDataLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4948)) InteriorPtr Point::GetInterior ( );
__declspec(implementation_key(4949)) VARIANT_BOOL Point::GetInvertIfNegative ( );
__declspec(implementation_key(4950)) void Point::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4951)) long Point::GetMarkerBackgroundColor ( );
__declspec(implementation_key(4952)) void Point::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(4953)) enum XlColorIndex Point::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(4954)) void Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(4955)) long Point::GetMarkerForegroundColor ( );
__declspec(implementation_key(4956)) void Point::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(4957)) enum XlColorIndex Point::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(4958)) void Point::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(4959)) long Point::GetMarkerSize ( );
__declspec(implementation_key(4960)) void Point::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(4961)) enum XlMarkerStyle Point::GetMarkerStyle ( );
__declspec(implementation_key(4962)) void Point::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(4963)) _variant_t Point::Paste ( );
__declspec(implementation_key(4964)) enum XlChartPictureType Point::GetPictureType ( );
__declspec(implementation_key(4965)) void Point::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(4966)) long Point::GetPictureUnit ( );
__declspec(implementation_key(4967)) void Point::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(4968)) _variant_t Point::Select ( );
__declspec(implementation_key(4969)) VARIANT_BOOL Point::GetApplyPictToSides ( );
__declspec(implementation_key(4970)) void Point::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4971)) VARIANT_BOOL Point::GetApplyPictToFront ( );
__declspec(implementation_key(4972)) void Point::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4973)) VARIANT_BOOL Point::GetApplyPictToEnd ( );
__declspec(implementation_key(4974)) void Point::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4975)) VARIANT_BOOL Point::GetShadow ( );
__declspec(implementation_key(4976)) void Point::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4977)) VARIANT_BOOL Point::GetSecondaryPlot ( );
__declspec(implementation_key(4978)) void Point::PutSecondaryPlot ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4979)) ChartFillFormatPtr Point::GetFill ( );
__declspec(implementation_key(4980)) _ApplicationPtr Series::GetApplication ( );
__declspec(implementation_key(4981)) enum XlCreator Series::GetCreator ( );
__declspec(implementation_key(4982)) IDispatchPtr Series::GetParent ( );
__declspec(implementation_key(4983)) _variant_t Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(4984)) enum XlAxisGroup Series::GetAxisGroup ( );
__declspec(implementation_key(4985)) void Series::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(4986)) BorderPtr Series::GetBorder ( );
__declspec(implementation_key(4987)) _variant_t Series::ClearFormats ( );
__declspec(implementation_key(4988)) _variant_t Series::Copy ( );
__declspec(implementation_key(4989)) IDispatchPtr Series::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(4990)) _variant_t Series::Delete ( );
__declspec(implementation_key(4991)) _variant_t Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(4992)) ErrorBarsPtr Series::GetErrorBars ( );
__declspec(implementation_key(4993)) long Series::GetExplosion ( );
__declspec(implementation_key(4994)) void Series::PutExplosion ( long _arg1 );
__declspec(implementation_key(4995)) _bstr_t Series::GetFormula ( );
__declspec(implementation_key(4996)) void Series::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(4997)) _bstr_t Series::GetFormulaLocal ( );
__declspec(implementation_key(4998)) void Series::PutFormulaLocal ( _bstr_t _arg1 );
__declspec(implementation_key(4999)) _bstr_t Series::GetFormulaR1C1 ( );
__declspec(implementation_key(5000)) void Series::PutFormulaR1C1 ( _bstr_t _arg1 );
__declspec(implementation_key(5001)) _bstr_t Series::GetFormulaR1C1Local ( );
__declspec(implementation_key(5002)) void Series::PutFormulaR1C1Local ( _bstr_t _arg1 );
__declspec(implementation_key(5003)) VARIANT_BOOL Series::GetHasDataLabels ( );
__declspec(implementation_key(5004)) void Series::PutHasDataLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5005)) VARIANT_BOOL Series::GetHasErrorBars ( );
__declspec(implementation_key(5006)) void Series::PutHasErrorBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5007)) InteriorPtr Series::GetInterior ( );
__declspec(implementation_key(5008)) ChartFillFormatPtr Series::GetFill ( );
__declspec(implementation_key(5009)) VARIANT_BOOL Series::GetInvertIfNegative ( );
__declspec(implementation_key(5010)) void Series::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5011)) long Series::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5012)) void Series::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(5013)) enum XlColorIndex Series::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5014)) void Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5015)) long Series::GetMarkerForegroundColor ( );
__declspec(implementation_key(5016)) void Series::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(5017)) enum XlColorIndex Series::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5018)) void Series::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5019)) long Series::GetMarkerSize ( );
__declspec(implementation_key(5020)) void Series::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(5021)) enum XlMarkerStyle Series::GetMarkerStyle ( );
__declspec(implementation_key(5022)) void Series::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(5023)) _bstr_t Series::GetName ( );
__declspec(implementation_key(5024)) void Series::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5025)) _variant_t Series::Paste ( );
__declspec(implementation_key(5026)) enum XlChartPictureType Series::GetPictureType ( );
__declspec(implementation_key(5027)) void Series::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(5028)) long Series::GetPictureUnit ( );
__declspec(implementation_key(5029)) void Series::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(5030)) long Series::GetPlotOrder ( );
__declspec(implementation_key(5031)) void Series::PutPlotOrder ( long _arg1 );
__declspec(implementation_key(5032)) IDispatchPtr Series::Points ( const _variant_t & Index );
__declspec(implementation_key(5033)) _variant_t Series::Select ( );
__declspec(implementation_key(5034)) VARIANT_BOOL Series::GetSmooth ( );
__declspec(implementation_key(5035)) void Series::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5036)) IDispatchPtr Series::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(5037)) long Series::GetType ( );
__declspec(implementation_key(5038)) void Series::PutType ( long _arg1 );
__declspec(implementation_key(5039)) enum XlChartType Series::GetChartType ( );
__declspec(implementation_key(5040)) void Series::PutChartType ( enum XlChartType _arg1 );
__declspec(implementation_key(5041)) HRESULT Series::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(5042)) _variant_t Series::GetValues ( );
__declspec(implementation_key(5043)) void Series::PutValues ( const _variant_t & _arg1 );
__declspec(implementation_key(5044)) _variant_t Series::GetXValues ( );
__declspec(implementation_key(5045)) void Series::PutXValues ( const _variant_t & _arg1 );
__declspec(implementation_key(5046)) _variant_t Series::GetBubbleSizes ( );
__declspec(implementation_key(5047)) void Series::PutBubbleSizes ( const _variant_t & _arg1 );
__declspec(implementation_key(5048)) enum XlBarShape Series::GetBarShape ( );
__declspec(implementation_key(5049)) void Series::PutBarShape ( enum XlBarShape _arg1 );
__declspec(implementation_key(5050)) VARIANT_BOOL Series::GetApplyPictToSides ( );
__declspec(implementation_key(5051)) void Series::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5052)) VARIANT_BOOL Series::GetApplyPictToFront ( );
__declspec(implementation_key(5053)) void Series::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5054)) VARIANT_BOOL Series::GetApplyPictToEnd ( );
__declspec(implementation_key(5055)) void Series::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5056)) VARIANT_BOOL Series::GetHas3DEffect ( );
__declspec(implementation_key(5057)) void Series::PutHas3DEffect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5058)) VARIANT_BOOL Series::GetShadow ( );
__declspec(implementation_key(5059)) void Series::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5060)) VARIANT_BOOL Series::GetHasLeaderLines ( );
__declspec(implementation_key(5061)) void Series::PutHasLeaderLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5062)) LeaderLinesPtr Series::GetLeaderLines ( );
__declspec(implementation_key(5063)) _ApplicationPtr SeriesCollection::GetApplication ( );
__declspec(implementation_key(5064)) enum XlCreator SeriesCollection::GetCreator ( );
__declspec(implementation_key(5065)) IDispatchPtr SeriesCollection::GetParent ( );
__declspec(implementation_key(5066)) SeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(5067)) long SeriesCollection::GetCount ( );
__declspec(implementation_key(5068)) _variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(5069)) SeriesPtr SeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(5070)) IUnknownPtr SeriesCollection::_NewEnum ( );
__declspec(implementation_key(5071)) _variant_t SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(5072)) SeriesPtr SeriesCollection::NewSeries ( );
__declspec(implementation_key(5073)) _ApplicationPtr DataLabel::GetApplication ( );
__declspec(implementation_key(5074)) enum XlCreator DataLabel::GetCreator ( );
__declspec(implementation_key(5075)) IDispatchPtr DataLabel::GetParent ( );
__declspec(implementation_key(5076)) _bstr_t DataLabel::GetName ( );
__declspec(implementation_key(5077)) _variant_t DataLabel::Select ( );
__declspec(implementation_key(5078)) BorderPtr DataLabel::GetBorder ( );
__declspec(implementation_key(5079)) _variant_t DataLabel::Delete ( );
__declspec(implementation_key(5080)) InteriorPtr DataLabel::GetInterior ( );
__declspec(implementation_key(5081)) ChartFillFormatPtr DataLabel::GetFill ( );
__declspec(implementation_key(5082)) _bstr_t DataLabel::GetCaption ( );
__declspec(implementation_key(5083)) void DataLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(5084)) CharactersPtr DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5085)) FontPtr DataLabel::GetFont ( );
__declspec(implementation_key(5086)) _variant_t DataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(5087)) void DataLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5088)) double DataLabel::GetLeft ( );
__declspec(implementation_key(5089)) void DataLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(5090)) _variant_t DataLabel::GetOrientation ( );
__declspec(implementation_key(5091)) void DataLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5092)) VARIANT_BOOL DataLabel::GetShadow ( );
__declspec(implementation_key(5093)) void DataLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5094)) _bstr_t DataLabel::GetText ( );
__declspec(implementation_key(5095)) void DataLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5096)) double DataLabel::GetTop ( );
__declspec(implementation_key(5097)) void DataLabel::PutTop ( double _arg1 );
__declspec(implementation_key(5098)) _variant_t DataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(5099)) void DataLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5100)) long DataLabel::GetReadingOrder ( );
__declspec(implementation_key(5101)) void DataLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5102)) _variant_t DataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(5103)) void DataLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5104)) VARIANT_BOOL DataLabel::GetAutoText ( );
__declspec(implementation_key(5105)) void DataLabel::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5106)) _bstr_t DataLabel::GetNumberFormat ( );
__declspec(implementation_key(5107)) void DataLabel::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5108)) VARIANT_BOOL DataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(5109)) void DataLabel::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5110)) _variant_t DataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(5111)) void DataLabel::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5112)) VARIANT_BOOL DataLabel::GetShowLegendKey ( );
__declspec(implementation_key(5113)) void DataLabel::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5114)) _variant_t DataLabel::GetType ( );
__declspec(implementation_key(5115)) void DataLabel::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(5116)) enum XlDataLabelPosition DataLabel::GetPosition ( );
__declspec(implementation_key(5117)) void DataLabel::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(5118)) _ApplicationPtr DataLabels::GetApplication ( );
__declspec(implementation_key(5119)) enum XlCreator DataLabels::GetCreator ( );
__declspec(implementation_key(5120)) IDispatchPtr DataLabels::GetParent ( );
__declspec(implementation_key(5121)) _bstr_t DataLabels::GetName ( );
__declspec(implementation_key(5122)) _variant_t DataLabels::Select ( );
__declspec(implementation_key(5123)) BorderPtr DataLabels::GetBorder ( );
__declspec(implementation_key(5124)) _variant_t DataLabels::Delete ( );
__declspec(implementation_key(5125)) InteriorPtr DataLabels::GetInterior ( );
__declspec(implementation_key(5126)) ChartFillFormatPtr DataLabels::GetFill ( );
__declspec(implementation_key(5127)) FontPtr DataLabels::GetFont ( );
__declspec(implementation_key(5128)) _variant_t DataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(5129)) void DataLabels::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5130)) _variant_t DataLabels::GetOrientation ( );
__declspec(implementation_key(5131)) void DataLabels::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5132)) VARIANT_BOOL DataLabels::GetShadow ( );
__declspec(implementation_key(5133)) void DataLabels::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5134)) _variant_t DataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(5135)) void DataLabels::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5136)) long DataLabels::GetReadingOrder ( );
__declspec(implementation_key(5137)) void DataLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5138)) _variant_t DataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(5139)) void DataLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5140)) VARIANT_BOOL DataLabels::GetAutoText ( );
__declspec(implementation_key(5141)) void DataLabels::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5142)) _bstr_t DataLabels::GetNumberFormat ( );
__declspec(implementation_key(5143)) void DataLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5144)) VARIANT_BOOL DataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(5145)) void DataLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5146)) _variant_t DataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(5147)) void DataLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5148)) VARIANT_BOOL DataLabels::GetShowLegendKey ( );
__declspec(implementation_key(5149)) void DataLabels::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5150)) _variant_t DataLabels::GetType ( );
__declspec(implementation_key(5151)) void DataLabels::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(5152)) enum XlDataLabelPosition DataLabels::GetPosition ( );
__declspec(implementation_key(5153)) void DataLabels::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(5154)) long DataLabels::GetCount ( );
__declspec(implementation_key(5155)) DataLabelPtr DataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(5156)) IUnknownPtr DataLabels::_NewEnum ( );
__declspec(implementation_key(5157)) _ApplicationPtr LegendEntry::GetApplication ( );
__declspec(implementation_key(5158)) enum XlCreator LegendEntry::GetCreator ( );
__declspec(implementation_key(5159)) IDispatchPtr LegendEntry::GetParent ( );
__declspec(implementation_key(5160)) _variant_t LegendEntry::Delete ( );
__declspec(implementation_key(5161)) FontPtr LegendEntry::GetFont ( );
__declspec(implementation_key(5162)) long LegendEntry::GetIndex ( );
__declspec(implementation_key(5163)) LegendKeyPtr LegendEntry::GetLegendKey ( );
__declspec(implementation_key(5164)) _variant_t LegendEntry::Select ( );
__declspec(implementation_key(5165)) _variant_t LegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(5166)) void LegendEntry::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5167)) double LegendEntry::GetLeft ( );
__declspec(implementation_key(5168)) double LegendEntry::GetTop ( );
__declspec(implementation_key(5169)) double LegendEntry::GetWidth ( );
__declspec(implementation_key(5170)) double LegendEntry::GetHeight ( );
__declspec(implementation_key(5171)) _ApplicationPtr LegendEntries::GetApplication ( );
__declspec(implementation_key(5172)) enum XlCreator LegendEntries::GetCreator ( );
__declspec(implementation_key(5173)) IDispatchPtr LegendEntries::GetParent ( );
__declspec(implementation_key(5174)) long LegendEntries::GetCount ( );
__declspec(implementation_key(5175)) LegendEntryPtr LegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(5176)) IUnknownPtr LegendEntries::_NewEnum ( );
__declspec(implementation_key(5177)) _ApplicationPtr LegendKey::GetApplication ( );
__declspec(implementation_key(5178)) enum XlCreator LegendKey::GetCreator ( );
__declspec(implementation_key(5179)) IDispatchPtr LegendKey::GetParent ( );
__declspec(implementation_key(5180)) BorderPtr LegendKey::GetBorder ( );
__declspec(implementation_key(5181)) _variant_t LegendKey::ClearFormats ( );
__declspec(implementation_key(5182)) _variant_t LegendKey::Delete ( );
__declspec(implementation_key(5183)) InteriorPtr LegendKey::GetInterior ( );
__declspec(implementation_key(5184)) ChartFillFormatPtr LegendKey::GetFill ( );
__declspec(implementation_key(5185)) VARIANT_BOOL LegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(5186)) void LegendKey::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5187)) long LegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5188)) void LegendKey::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(5189)) enum XlColorIndex LegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5190)) void LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5191)) long LegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(5192)) void LegendKey::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(5193)) enum XlColorIndex LegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5194)) void LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5195)) long LegendKey::GetMarkerSize ( );
__declspec(implementation_key(5196)) void LegendKey::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(5197)) enum XlMarkerStyle LegendKey::GetMarkerStyle ( );
__declspec(implementation_key(5198)) void LegendKey::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(5199)) long LegendKey::GetPictureType ( );
__declspec(implementation_key(5200)) void LegendKey::PutPictureType ( long _arg1 );
__declspec(implementation_key(5201)) long LegendKey::GetPictureUnit ( );
__declspec(implementation_key(5202)) void LegendKey::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(5203)) _variant_t LegendKey::Select ( );
__declspec(implementation_key(5204)) VARIANT_BOOL LegendKey::GetSmooth ( );
__declspec(implementation_key(5205)) void LegendKey::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5206)) double LegendKey::GetLeft ( );
__declspec(implementation_key(5207)) double LegendKey::GetTop ( );
__declspec(implementation_key(5208)) double LegendKey::GetWidth ( );
__declspec(implementation_key(5209)) double LegendKey::GetHeight ( );
__declspec(implementation_key(5210)) VARIANT_BOOL LegendKey::GetShadow ( );
__declspec(implementation_key(5211)) void LegendKey::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5212)) _ApplicationPtr Trendlines::GetApplication ( );
__declspec(implementation_key(5213)) enum XlCreator Trendlines::GetCreator ( );
__declspec(implementation_key(5214)) IDispatchPtr Trendlines::GetParent ( );
__declspec(implementation_key(5215)) TrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(5216)) long Trendlines::GetCount ( );
__declspec(implementation_key(5217)) TrendlinePtr Trendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(5218)) IUnknownPtr Trendlines::_NewEnum ( );
__declspec(implementation_key(5219)) _ApplicationPtr Trendline::GetApplication ( );
__declspec(implementation_key(5220)) enum XlCreator Trendline::GetCreator ( );
__declspec(implementation_key(5221)) IDispatchPtr Trendline::GetParent ( );
__declspec(implementation_key(5222)) long Trendline::GetBackward ( );
__declspec(implementation_key(5223)) void Trendline::PutBackward ( long _arg1 );
__declspec(implementation_key(5224)) BorderPtr Trendline::GetBorder ( );
__declspec(implementation_key(5225)) _variant_t Trendline::ClearFormats ( );
__declspec(implementation_key(5226)) DataLabelPtr Trendline::GetDataLabel ( );
__declspec(implementation_key(5227)) _variant_t Trendline::Delete ( );
__declspec(implementation_key(5228)) VARIANT_BOOL Trendline::GetDisplayEquation ( );
__declspec(implementation_key(5229)) void Trendline::PutDisplayEquation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5230)) VARIANT_BOOL Trendline::GetDisplayRSquared ( );
__declspec(implementation_key(5231)) void Trendline::PutDisplayRSquared ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5232)) long Trendline::GetForward ( );
__declspec(implementation_key(5233)) void Trendline::PutForward ( long _arg1 );
__declspec(implementation_key(5234)) long Trendline::GetIndex ( );
__declspec(implementation_key(5235)) double Trendline::GetIntercept ( );
__declspec(implementation_key(5236)) void Trendline::PutIntercept ( double _arg1 );
__declspec(implementation_key(5237)) VARIANT_BOOL Trendline::GetInterceptIsAuto ( );
__declspec(implementation_key(5238)) void Trendline::PutInterceptIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5239)) _bstr_t Trendline::GetName ( );
__declspec(implementation_key(5240)) void Trendline::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5241)) VARIANT_BOOL Trendline::GetNameIsAuto ( );
__declspec(implementation_key(5242)) void Trendline::PutNameIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5243)) long Trendline::GetOrder ( );
__declspec(implementation_key(5244)) void Trendline::PutOrder ( long _arg1 );
__declspec(implementation_key(5245)) long Trendline::GetPeriod ( );
__declspec(implementation_key(5246)) void Trendline::PutPeriod ( long _arg1 );
__declspec(implementation_key(5247)) _variant_t Trendline::Select ( );
__declspec(implementation_key(5248)) enum XlTrendlineType Trendline::GetType ( );
__declspec(implementation_key(5249)) void Trendline::PutType ( enum XlTrendlineType _arg1 );
__declspec(implementation_key(5250)) _ApplicationPtr Corners::GetApplication ( );
__declspec(implementation_key(5251)) enum XlCreator Corners::GetCreator ( );
__declspec(implementation_key(5252)) IDispatchPtr Corners::GetParent ( );
__declspec(implementation_key(5253)) _bstr_t Corners::GetName ( );
__declspec(implementation_key(5254)) _variant_t Corners::Select ( );
__declspec(implementation_key(5255)) _ApplicationPtr SeriesLines::GetApplication ( );
__declspec(implementation_key(5256)) enum XlCreator SeriesLines::GetCreator ( );
__declspec(implementation_key(5257)) IDispatchPtr SeriesLines::GetParent ( );
__declspec(implementation_key(5258)) _bstr_t SeriesLines::GetName ( );
__declspec(implementation_key(5259)) _variant_t SeriesLines::Select ( );
__declspec(implementation_key(5260)) BorderPtr SeriesLines::GetBorder ( );
__declspec(implementation_key(5261)) _variant_t SeriesLines::Delete ( );
__declspec(implementation_key(5262)) _ApplicationPtr HiLoLines::GetApplication ( );
__declspec(implementation_key(5263)) enum XlCreator HiLoLines::GetCreator ( );
__declspec(implementation_key(5264)) IDispatchPtr HiLoLines::GetParent ( );
__declspec(implementation_key(5265)) _bstr_t HiLoLines::GetName ( );
__declspec(implementation_key(5266)) _variant_t HiLoLines::Select ( );
__declspec(implementation_key(5267)) BorderPtr HiLoLines::GetBorder ( );
__declspec(implementation_key(5268)) _variant_t HiLoLines::Delete ( );
__declspec(implementation_key(5269)) _ApplicationPtr Gridlines::GetApplication ( );
__declspec(implementation_key(5270)) enum XlCreator Gridlines::GetCreator ( );
__declspec(implementation_key(5271)) IDispatchPtr Gridlines::GetParent ( );
__declspec(implementation_key(5272)) _bstr_t Gridlines::GetName ( );
__declspec(implementation_key(5273)) _variant_t Gridlines::Select ( );
__declspec(implementation_key(5274)) BorderPtr Gridlines::GetBorder ( );
__declspec(implementation_key(5275)) _variant_t Gridlines::Delete ( );
__declspec(implementation_key(5276)) _ApplicationPtr DropLines::GetApplication ( );
__declspec(implementation_key(5277)) enum XlCreator DropLines::GetCreator ( );
__declspec(implementation_key(5278)) IDispatchPtr DropLines::GetParent ( );
__declspec(implementation_key(5279)) _bstr_t DropLines::GetName ( );
__declspec(implementation_key(5280)) _variant_t DropLines::Select ( );
__declspec(implementation_key(5281)) BorderPtr DropLines::GetBorder ( );
__declspec(implementation_key(5282)) _variant_t DropLines::Delete ( );
__declspec(implementation_key(5283)) _ApplicationPtr LeaderLines::GetApplication ( );
__declspec(implementation_key(5284)) enum XlCreator LeaderLines::GetCreator ( );
__declspec(implementation_key(5285)) IDispatchPtr LeaderLines::GetParent ( );
__declspec(implementation_key(5286)) BorderPtr LeaderLines::GetBorder ( );
__declspec(implementation_key(5287)) HRESULT LeaderLines::Delete ( );
__declspec(implementation_key(5288)) HRESULT LeaderLines::Select ( );
__declspec(implementation_key(5289)) _ApplicationPtr UpBars::GetApplication ( );
__declspec(implementation_key(5290)) enum XlCreator UpBars::GetCreator ( );
__declspec(implementation_key(5291)) IDispatchPtr UpBars::GetParent ( );
__declspec(implementation_key(5292)) _bstr_t UpBars::GetName ( );
__declspec(implementation_key(5293)) _variant_t UpBars::Select ( );
__declspec(implementation_key(5294)) BorderPtr UpBars::GetBorder ( );
__declspec(implementation_key(5295)) _variant_t UpBars::Delete ( );
__declspec(implementation_key(5296)) InteriorPtr UpBars::GetInterior ( );
__declspec(implementation_key(5297)) ChartFillFormatPtr UpBars::GetFill ( );
__declspec(implementation_key(5298)) _ApplicationPtr DownBars::GetApplication ( );
__declspec(implementation_key(5299)) enum XlCreator DownBars::GetCreator ( );
__declspec(implementation_key(5300)) IDispatchPtr DownBars::GetParent ( );
__declspec(implementation_key(5301)) _bstr_t DownBars::GetName ( );
__declspec(implementation_key(5302)) _variant_t DownBars::Select ( );
__declspec(implementation_key(5303)) BorderPtr DownBars::GetBorder ( );
__declspec(implementation_key(5304)) _variant_t DownBars::Delete ( );
__declspec(implementation_key(5305)) InteriorPtr DownBars::GetInterior ( );
__declspec(implementation_key(5306)) ChartFillFormatPtr DownBars::GetFill ( );
__declspec(implementation_key(5307)) _ApplicationPtr Floor::GetApplication ( );
__declspec(implementation_key(5308)) enum XlCreator Floor::GetCreator ( );
__declspec(implementation_key(5309)) IDispatchPtr Floor::GetParent ( );
__declspec(implementation_key(5310)) _bstr_t Floor::GetName ( );
__declspec(implementation_key(5311)) _variant_t Floor::Select ( );
__declspec(implementation_key(5312)) BorderPtr Floor::GetBorder ( );
__declspec(implementation_key(5313)) _variant_t Floor::ClearFormats ( );
__declspec(implementation_key(5314)) InteriorPtr Floor::GetInterior ( );
__declspec(implementation_key(5315)) ChartFillFormatPtr Floor::GetFill ( );
__declspec(implementation_key(5316)) _variant_t Floor::GetPictureType ( );
__declspec(implementation_key(5317)) void Floor::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(5318)) HRESULT Floor::Paste ( );
__declspec(implementation_key(5319)) _ApplicationPtr Walls::GetApplication ( );
__declspec(implementation_key(5320)) enum XlCreator Walls::GetCreator ( );
__declspec(implementation_key(5321)) IDispatchPtr Walls::GetParent ( );
__declspec(implementation_key(5322)) _bstr_t Walls::GetName ( );
__declspec(implementation_key(5323)) _variant_t Walls::Select ( );
__declspec(implementation_key(5324)) BorderPtr Walls::GetBorder ( );
__declspec(implementation_key(5325)) _variant_t Walls::ClearFormats ( );
__declspec(implementation_key(5326)) InteriorPtr Walls::GetInterior ( );
__declspec(implementation_key(5327)) ChartFillFormatPtr Walls::GetFill ( );
__declspec(implementation_key(5328)) _variant_t Walls::GetPictureType ( );
__declspec(implementation_key(5329)) void Walls::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(5330)) HRESULT Walls::Paste ( );
__declspec(implementation_key(5331)) _variant_t Walls::GetPictureUnit ( );
__declspec(implementation_key(5332)) void Walls::PutPictureUnit ( const _variant_t & _arg1 );
__declspec(implementation_key(5333)) _ApplicationPtr TickLabels::GetApplication ( );
__declspec(implementation_key(5334)) enum XlCreator TickLabels::GetCreator ( );
__declspec(implementation_key(5335)) IDispatchPtr TickLabels::GetParent ( );
__declspec(implementation_key(5336)) _variant_t TickLabels::Delete ( );
__declspec(implementation_key(5337)) FontPtr TickLabels::GetFont ( );
__declspec(implementation_key(5338)) _bstr_t TickLabels::GetName ( );
__declspec(implementation_key(5339)) _bstr_t TickLabels::GetNumberFormat ( );
__declspec(implementation_key(5340)) void TickLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5341)) VARIANT_BOOL TickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(5342)) void TickLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5343)) _variant_t TickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(5344)) void TickLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5345)) enum XlTickLabelOrientation TickLabels::GetOrientation ( );
__declspec(implementation_key(5346)) void TickLabels::PutOrientation ( enum XlTickLabelOrientation _arg1 );
__declspec(implementation_key(5347)) _variant_t TickLabels::Select ( );
__declspec(implementation_key(5348)) long TickLabels::GetReadingOrder ( );
__declspec(implementation_key(5349)) void TickLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5350)) _variant_t TickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(5351)) void TickLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5352)) long TickLabels::GetDepth ( );
__declspec(implementation_key(5353)) long TickLabels::GetOffset ( );
__declspec(implementation_key(5354)) void TickLabels::PutOffset ( long _arg1 );
__declspec(implementation_key(5355)) long TickLabels::GetAlignment ( );
__declspec(implementation_key(5356)) void TickLabels::PutAlignment ( long _arg1 );
__declspec(implementation_key(5357)) _ApplicationPtr PlotArea::GetApplication ( );
__declspec(implementation_key(5358)) enum XlCreator PlotArea::GetCreator ( );
__declspec(implementation_key(5359)) IDispatchPtr PlotArea::GetParent ( );
__declspec(implementation_key(5360)) _bstr_t PlotArea::GetName ( );
__declspec(implementation_key(5361)) _variant_t PlotArea::Select ( );
__declspec(implementation_key(5362)) BorderPtr PlotArea::GetBorder ( );
__declspec(implementation_key(5363)) _variant_t PlotArea::ClearFormats ( );
__declspec(implementation_key(5364)) double PlotArea::GetHeight ( );
__declspec(implementation_key(5365)) void PlotArea::PutHeight ( double _arg1 );
__declspec(implementation_key(5366)) InteriorPtr PlotArea::GetInterior ( );
__declspec(implementation_key(5367)) ChartFillFormatPtr PlotArea::GetFill ( );
__declspec(implementation_key(5368)) double PlotArea::GetLeft ( );
__declspec(implementation_key(5369)) void PlotArea::PutLeft ( double _arg1 );
__declspec(implementation_key(5370)) double PlotArea::GetTop ( );
__declspec(implementation_key(5371)) void PlotArea::PutTop ( double _arg1 );
__declspec(implementation_key(5372)) double PlotArea::GetWidth ( );
__declspec(implementation_key(5373)) void PlotArea::PutWidth ( double _arg1 );
__declspec(implementation_key(5374)) double PlotArea::GetInsideLeft ( );
__declspec(implementation_key(5375)) double PlotArea::GetInsideTop ( );
__declspec(implementation_key(5376)) double PlotArea::GetInsideWidth ( );
__declspec(implementation_key(5377)) double PlotArea::GetInsideHeight ( );
__declspec(implementation_key(5378)) _ApplicationPtr ChartArea::GetApplication ( );
__declspec(implementation_key(5379)) enum XlCreator ChartArea::GetCreator ( );
__declspec(implementation_key(5380)) IDispatchPtr ChartArea::GetParent ( );
__declspec(implementation_key(5381)) _bstr_t ChartArea::GetName ( );
__declspec(implementation_key(5382)) _variant_t ChartArea::Select ( );
__declspec(implementation_key(5383)) BorderPtr ChartArea::GetBorder ( );
__declspec(implementation_key(5384)) _variant_t ChartArea::Clear ( );
__declspec(implementation_key(5385)) _variant_t ChartArea::ClearContents ( );
__declspec(implementation_key(5386)) _variant_t ChartArea::Copy ( );
__declspec(implementation_key(5387)) FontPtr ChartArea::GetFont ( );
__declspec(implementation_key(5388)) VARIANT_BOOL ChartArea::GetShadow ( );
__declspec(implementation_key(5389)) void ChartArea::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5390)) _variant_t ChartArea::ClearFormats ( );
__declspec(implementation_key(5391)) double ChartArea::GetHeight ( );
__declspec(implementation_key(5392)) void ChartArea::PutHeight ( double _arg1 );
__declspec(implementation_key(5393)) InteriorPtr ChartArea::GetInterior ( );
__declspec(implementation_key(5394)) ChartFillFormatPtr ChartArea::GetFill ( );
__declspec(implementation_key(5395)) double ChartArea::GetLeft ( );
__declspec(implementation_key(5396)) void ChartArea::PutLeft ( double _arg1 );
__declspec(implementation_key(5397)) double ChartArea::GetTop ( );
__declspec(implementation_key(5398)) void ChartArea::PutTop ( double _arg1 );
__declspec(implementation_key(5399)) double ChartArea::GetWidth ( );
__declspec(implementation_key(5400)) void ChartArea::PutWidth ( double _arg1 );
__declspec(implementation_key(5401)) _variant_t ChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(5402)) void ChartArea::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5403)) _ApplicationPtr Legend::GetApplication ( );
__declspec(implementation_key(5404)) enum XlCreator Legend::GetCreator ( );
__declspec(implementation_key(5405)) IDispatchPtr Legend::GetParent ( );
__declspec(implementation_key(5406)) _bstr_t Legend::GetName ( );
__declspec(implementation_key(5407)) _variant_t Legend::Select ( );
__declspec(implementation_key(5408)) BorderPtr Legend::GetBorder ( );
__declspec(implementation_key(5409)) _variant_t Legend::Delete ( );
__declspec(implementation_key(5410)) FontPtr Legend::GetFont ( );
__declspec(implementation_key(5411)) IDispatchPtr Legend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(5412)) enum XlLegendPosition Legend::GetPosition ( );
__declspec(implementation_key(5413)) void Legend::PutPosition ( enum XlLegendPosition _arg1 );
__declspec(implementation_key(5414)) VARIANT_BOOL Legend::GetShadow ( );
__declspec(implementation_key(5415)) void Legend::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5416)) _variant_t Legend::Clear ( );
__declspec(implementation_key(5417)) double Legend::GetHeight ( );
__declspec(implementation_key(5418)) void Legend::PutHeight ( double _arg1 );
__declspec(implementation_key(5419)) InteriorPtr Legend::GetInterior ( );
__declspec(implementation_key(5420)) ChartFillFormatPtr Legend::GetFill ( );
__declspec(implementation_key(5421)) double Legend::GetLeft ( );
__declspec(implementation_key(5422)) void Legend::PutLeft ( double _arg1 );
__declspec(implementation_key(5423)) double Legend::GetTop ( );
__declspec(implementation_key(5424)) void Legend::PutTop ( double _arg1 );
__declspec(implementation_key(5425)) double Legend::GetWidth ( );
__declspec(implementation_key(5426)) void Legend::PutWidth ( double _arg1 );
__declspec(implementation_key(5427)) _variant_t Legend::GetAutoScaleFont ( );
__declspec(implementation_key(5428)) void Legend::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5429)) _ApplicationPtr ErrorBars::GetApplication ( );
__declspec(implementation_key(5430)) enum XlCreator ErrorBars::GetCreator ( );
__declspec(implementation_key(5431)) IDispatchPtr ErrorBars::GetParent ( );
__declspec(implementation_key(5432)) _bstr_t ErrorBars::GetName ( );
__declspec(implementation_key(5433)) _variant_t ErrorBars::Select ( );
__declspec(implementation_key(5434)) BorderPtr ErrorBars::GetBorder ( );
__declspec(implementation_key(5435)) _variant_t ErrorBars::Delete ( );
__declspec(implementation_key(5436)) _variant_t ErrorBars::ClearFormats ( );
__declspec(implementation_key(5437)) enum XlEndStyleCap ErrorBars::GetEndStyle ( );
__declspec(implementation_key(5438)) void ErrorBars::PutEndStyle ( enum XlEndStyleCap _arg1 );
__declspec(implementation_key(5439)) _ApplicationPtr DataTable::GetApplication ( );
__declspec(implementation_key(5440)) enum XlCreator DataTable::GetCreator ( );
__declspec(implementation_key(5441)) IDispatchPtr DataTable::GetParent ( );
__declspec(implementation_key(5442)) VARIANT_BOOL DataTable::GetShowLegendKey ( );
__declspec(implementation_key(5443)) void DataTable::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5444)) VARIANT_BOOL DataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(5445)) void DataTable::PutHasBorderHorizontal ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5446)) VARIANT_BOOL DataTable::GetHasBorderVertical ( );
__declspec(implementation_key(5447)) void DataTable::PutHasBorderVertical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5448)) VARIANT_BOOL DataTable::GetHasBorderOutline ( );
__declspec(implementation_key(5449)) void DataTable::PutHasBorderOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5450)) BorderPtr DataTable::GetBorder ( );
__declspec(implementation_key(5451)) FontPtr DataTable::GetFont ( );
__declspec(implementation_key(5452)) HRESULT DataTable::Select ( );
__declspec(implementation_key(5453)) HRESULT DataTable::Delete ( );
__declspec(implementation_key(5454)) _variant_t DataTable::GetAutoScaleFont ( );
__declspec(implementation_key(5455)) void DataTable::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5456)) _ApplicationPtr Phonetic::GetApplication ( );
__declspec(implementation_key(5457)) enum XlCreator Phonetic::GetCreator ( );
__declspec(implementation_key(5458)) IDispatchPtr Phonetic::GetParent ( );
__declspec(implementation_key(5459)) VARIANT_BOOL Phonetic::GetVisible ( );
__declspec(implementation_key(5460)) void Phonetic::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5461)) long Phonetic::GetCharacterType ( );
__declspec(implementation_key(5462)) void Phonetic::PutCharacterType ( long _arg1 );
__declspec(implementation_key(5463)) long Phonetic::GetAlignment ( );
__declspec(implementation_key(5464)) void Phonetic::PutAlignment ( long _arg1 );
__declspec(implementation_key(5465)) FontPtr Phonetic::GetFont ( );
__declspec(implementation_key(5466)) _bstr_t Phonetic::GetText ( );
__declspec(implementation_key(5467)) void Phonetic::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5468)) _ApplicationPtr Shape::GetApplication ( );
__declspec(implementation_key(5469)) enum XlCreator Shape::GetCreator ( );
__declspec(implementation_key(5470)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(5471)) HRESULT Shape::Apply ( );
__declspec(implementation_key(5472)) HRESULT Shape::Delete ( );
__declspec(implementation_key(5473)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(5474)) HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(5475)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(5476)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(5477)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(5478)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(5479)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(5480)) HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5481)) HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5482)) HRESULT Shape::Select ( const _variant_t & Replace );
__declspec(implementation_key(5483)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(5484)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(5485)) HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(5486)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(5487)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(5488)) enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(5489)) void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(5490)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(5491)) long Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(5492)) enum Office::MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(5493)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(5494)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(5495)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(5496)) float Shape::GetHeight ( );
__declspec(implementation_key(5497)) void Shape::PutHeight ( float _arg1 );
__declspec(implementation_key(5498)) enum Office::MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(5499)) float Shape::GetLeft ( );
__declspec(implementation_key(5500)) void Shape::PutLeft ( float _arg1 );
__declspec(implementation_key(5501)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(5502)) enum Office::MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(5503)) void Shape::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5504)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(5505)) void Shape::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5506)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(5507)) float Shape::GetRotation ( );
__declspec(implementation_key(5508)) void Shape::PutRotation ( float _arg1 );
__declspec(implementation_key(5509)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(5510)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(5511)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(5512)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(5513)) float Shape::GetTop ( );
__declspec(implementation_key(5514)) void Shape::PutTop ( float _arg1 );
__declspec(implementation_key(5515)) enum Office::MsoShapeType Shape::GetType ( );
__declspec(implementation_key(5516)) enum Office::MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(5517)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(5518)) enum Office::MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(5519)) void Shape::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5520)) float Shape::GetWidth ( );
__declspec(implementation_key(5521)) void Shape::PutWidth ( float _arg1 );
__declspec(implementation_key(5522)) long Shape::GetZOrderPosition ( );
__declspec(implementation_key(5523)) HyperlinkPtr Shape::GetHyperlink ( );
__declspec(implementation_key(5524)) enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(5525)) void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(5526)) IDispatchPtr Shape::GetDrawingObject ( );
__declspec(implementation_key(5527)) _bstr_t Shape::GetOnAction ( );
__declspec(implementation_key(5528)) void Shape::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(5529)) VARIANT_BOOL Shape::GetLocked ( );
__declspec(implementation_key(5530)) void Shape::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5531)) RangePtr Shape::GetTopLeftCell ( );
__declspec(implementation_key(5532)) RangePtr Shape::GetBottomRightCell ( );
__declspec(implementation_key(5533)) enum XlPlacement Shape::GetPlacement ( );
__declspec(implementation_key(5534)) void Shape::PutPlacement ( enum XlPlacement _arg1 );
__declspec(implementation_key(5535)) HRESULT Shape::Copy ( );
__declspec(implementation_key(5536)) HRESULT Shape::Cut ( );
__declspec(implementation_key(5537)) HRESULT Shape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(5538)) ControlFormatPtr Shape::GetControlFormat ( );
__declspec(implementation_key(5539)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(5540)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(5541)) enum XlFormControl Shape::GetFormControlType ( );
__declspec(implementation_key(5542)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(5543)) void Shape::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(5544)) Office::ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(5545)) _ApplicationPtr Shapes::GetApplication ( );
__declspec(implementation_key(5546)) enum XlCreator Shapes::GetCreator ( );
__declspec(implementation_key(5547)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(5548)) long Shapes::GetCount ( );
__declspec(implementation_key(5549)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(5550)) ShapePtr Shapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(5551)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(5552)) ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5553)) ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(5554)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(5555)) ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5556)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(5557)) ShapePtr Shapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5558)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(5559)) ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5560)) ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(5561)) ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5562)) FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(5563)) ShapeRangePtr Shapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(5564)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(5565)) ShapePtr Shapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(5566)) ShapePtr Shapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(5567)) _ApplicationPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(5568)) enum XlCreator ShapeRange::GetCreator ( );
__declspec(implementation_key(5569)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(5570)) long ShapeRange::GetCount ( );
__declspec(implementation_key(5571)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(5572)) ShapePtr ShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(5573)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(5574)) HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(5575)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(5576)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(5577)) HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(5578)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(5579)) HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(5580)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(5581)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(5582)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(5583)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(5584)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(5585)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(5586)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(5587)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5588)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5589)) HRESULT ShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(5590)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(5591)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(5592)) HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(5593)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(5594)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(5595)) enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(5596)) void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(5597)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(5598)) long ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(5599)) enum Office::MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(5600)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(5601)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(5602)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(5603)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(5604)) void ShapeRange::PutHeight ( float _arg1 );
__declspec(implementation_key(5605)) enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(5606)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(5607)) void ShapeRange::PutLeft ( float _arg1 );
__declspec(implementation_key(5608)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(5609)) enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(5610)) void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5611)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(5612)) void ShapeRange::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5613)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(5614)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(5615)) void ShapeRange::PutRotation ( float _arg1 );
__declspec(implementation_key(5616)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(5617)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(5618)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(5619)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(5620)) float ShapeRange::GetTop ( );
__declspec(implementation_key(5621)) void ShapeRange::PutTop ( float _arg1 );
__declspec(implementation_key(5622)) enum Office::MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(5623)) enum Office::MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(5624)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(5625)) enum Office::MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(5626)) void ShapeRange::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5627)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(5628)) void ShapeRange::PutWidth ( float _arg1 );
__declspec(implementation_key(5629)) long ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(5630)) enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(5631)) void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(5632)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(5633)) void ShapeRange::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(5634)) _ApplicationPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(5635)) enum XlCreator GroupShapes::GetCreator ( );
__declspec(implementation_key(5636)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(5637)) long GroupShapes::GetCount ( );
__declspec(implementation_key(5638)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(5639)) ShapePtr GroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(5640)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(5641)) _ApplicationPtr TextFrame::GetApplication ( );
__declspec(implementation_key(5642)) enum XlCreator TextFrame::GetCreator ( );
__declspec(implementation_key(5643)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(5644)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(5645)) void TextFrame::PutMarginBottom ( float _arg1 );
__declspec(implementation_key(5646)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(5647)) void TextFrame::PutMarginLeft ( float _arg1 );
__declspec(implementation_key(5648)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(5649)) void TextFrame::PutMarginRight ( float _arg1 );
__declspec(implementation_key(5650)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(5651)) void TextFrame::PutMarginTop ( float _arg1 );
__declspec(implementation_key(5652)) enum Office::MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(5653)) void TextFrame::PutOrientation ( enum Office::MsoTextOrientation _arg1 );
__declspec(implementation_key(5654)) CharactersPtr TextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5655)) enum XlHAlign TextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(5656)) void TextFrame::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(5657)) enum XlVAlign TextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(5658)) void TextFrame::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(5659)) VARIANT_BOOL TextFrame::GetAutoSize ( );
__declspec(implementation_key(5660)) void TextFrame::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5661)) long TextFrame::GetReadingOrder ( );
__declspec(implementation_key(5662)) void TextFrame::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5663)) VARIANT_BOOL TextFrame::GetAutoMargins ( );
__declspec(implementation_key(5664)) void TextFrame::PutAutoMargins ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5665)) _ApplicationPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(5666)) enum XlCreator ConnectorFormat::GetCreator ( );
__declspec(implementation_key(5667)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(5668)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(5669)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(5670)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(5671)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(5672)) enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(5673)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(5674)) long ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(5675)) enum Office::MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(5676)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(5677)) long ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(5678)) enum Office::MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(5679)) void ConnectorFormat::PutType ( enum Office::MsoConnectorType _arg1 );
__declspec(implementation_key(5680)) _ApplicationPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(5681)) enum XlCreator FreeformBuilder::GetCreator ( );
__declspec(implementation_key(5682)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(5683)) HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(5684)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(5685)) _ApplicationPtr ControlFormat::GetApplication ( );
__declspec(implementation_key(5686)) enum XlCreator ControlFormat::GetCreator ( );
__declspec(implementation_key(5687)) IDispatchPtr ControlFormat::GetParent ( );
__declspec(implementation_key(5688)) HRESULT ControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(5689)) HRESULT ControlFormat::RemoveAllItems ( );
__declspec(implementation_key(5690)) HRESULT ControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(5691)) long ControlFormat::GetDropDownLines ( );
__declspec(implementation_key(5692)) void ControlFormat::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(5693)) VARIANT_BOOL ControlFormat::GetEnabled ( );
__declspec(implementation_key(5694)) void ControlFormat::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5695)) long ControlFormat::GetLargeChange ( );
__declspec(implementation_key(5696)) void ControlFormat::PutLargeChange ( long _arg1 );
__declspec(implementation_key(5697)) _bstr_t ControlFormat::GetLinkedCell ( );
__declspec(implementation_key(5698)) void ControlFormat::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(5699)) _variant_t ControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(5700)) long ControlFormat::GetListCount ( );
__declspec(implementation_key(5701)) void ControlFormat::PutListCount ( long _arg1 );
__declspec(implementation_key(5702)) _bstr_t ControlFormat::GetListFillRange ( );
__declspec(implementation_key(5703)) void ControlFormat::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(5704)) long ControlFormat::GetListIndex ( );
__declspec(implementation_key(5705)) void ControlFormat::PutListIndex ( long _arg1 );
__declspec(implementation_key(5706)) VARIANT_BOOL ControlFormat::GetLockedText ( );
__declspec(implementation_key(5707)) void ControlFormat::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5708)) long ControlFormat::GetMax ( );
__declspec(implementation_key(5709)) void ControlFormat::PutMax ( long _arg1 );
__declspec(implementation_key(5710)) long ControlFormat::GetMin ( );
__declspec(implementation_key(5711)) void ControlFormat::PutMin ( long _arg1 );
__declspec(implementation_key(5712)) long ControlFormat::GetMultiSelect ( );
__declspec(implementation_key(5713)) void ControlFormat::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(5714)) VARIANT_BOOL ControlFormat::GetPrintObject ( );
__declspec(implementation_key(5715)) void ControlFormat::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5716)) long ControlFormat::GetSmallChange ( );
__declspec(implementation_key(5717)) void ControlFormat::PutSmallChange ( long _arg1 );
__declspec(implementation_key(5718)) long ControlFormat::Get_Default ( );
__declspec(implementation_key(5719)) void ControlFormat::Put_Default ( long _arg1 );
__declspec(implementation_key(5720)) long ControlFormat::GetValue ( );
__declspec(implementation_key(5721)) void ControlFormat::PutValue ( long _arg1 );
__declspec(implementation_key(5722)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(5723)) enum XlCreator OLEFormat::GetCreator ( );
__declspec(implementation_key(5724)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(5725)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(5726)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(5727)) _bstr_t OLEFormat::GetProgId ( );
__declspec(implementation_key(5728)) HRESULT OLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(5729)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(5730)) enum XlCreator LinkFormat::GetCreator ( );
__declspec(implementation_key(5731)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(5732)) VARIANT_BOOL LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(5733)) void LinkFormat::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5734)) VARIANT_BOOL LinkFormat::GetLocked ( );
__declspec(implementation_key(5735)) void LinkFormat::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5736)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(5737)) _ApplicationPtr PublishObjects::GetApplication ( );
__declspec(implementation_key(5738)) enum XlCreator PublishObjects::GetCreator ( );
__declspec(implementation_key(5739)) IDispatchPtr PublishObjects::GetParent ( );
__declspec(implementation_key(5740)) PublishObjectPtr PublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(5741)) long PublishObjects::GetCount ( );
__declspec(implementation_key(5742)) PublishObjectPtr PublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5743)) PublishObjectPtr PublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5744)) IUnknownPtr PublishObjects::Get_NewEnum ( );
__declspec(implementation_key(5745)) HRESULT PublishObjects::Delete ( );
__declspec(implementation_key(5746)) HRESULT PublishObjects::Publish ( );
__declspec(implementation_key(5747)) _ApplicationPtr OLEDBError::GetApplication ( );
__declspec(implementation_key(5748)) enum XlCreator OLEDBError::GetCreator ( );
__declspec(implementation_key(5749)) IDispatchPtr OLEDBError::GetParent ( );
__declspec(implementation_key(5750)) _bstr_t OLEDBError::GetSqlState ( );
__declspec(implementation_key(5751)) _bstr_t OLEDBError::GetErrorString ( );
__declspec(implementation_key(5752)) long OLEDBError::GetNative ( );
__declspec(implementation_key(5753)) long OLEDBError::GetNumber ( );
__declspec(implementation_key(5754)) long OLEDBError::GetStage ( );
__declspec(implementation_key(5755)) _ApplicationPtr OLEDBErrors::GetApplication ( );
__declspec(implementation_key(5756)) enum XlCreator OLEDBErrors::GetCreator ( );
__declspec(implementation_key(5757)) IDispatchPtr OLEDBErrors::GetParent ( );
__declspec(implementation_key(5758)) long OLEDBErrors::GetCount ( );
__declspec(implementation_key(5759)) OLEDBErrorPtr OLEDBErrors::Item ( long Index );
__declspec(implementation_key(5760)) OLEDBErrorPtr OLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(5761)) IUnknownPtr OLEDBErrors::_NewEnum ( );
__declspec(implementation_key(5762)) _ApplicationPtr Phonetics::GetApplication ( );
__declspec(implementation_key(5763)) enum XlCreator Phonetics::GetCreator ( );
__declspec(implementation_key(5764)) IDispatchPtr Phonetics::GetParent ( );
__declspec(implementation_key(5765)) long Phonetics::GetCount ( );
__declspec(implementation_key(5766)) long Phonetics::GetStart ( );
__declspec(implementation_key(5767)) long Phonetics::GetLength ( );
__declspec(implementation_key(5768)) VARIANT_BOOL Phonetics::GetVisible ( );
__declspec(implementation_key(5769)) void Phonetics::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5770)) long Phonetics::GetCharacterType ( );
__declspec(implementation_key(5771)) void Phonetics::PutCharacterType ( long _arg1 );
__declspec(implementation_key(5772)) long Phonetics::GetAlignment ( );
__declspec(implementation_key(5773)) void Phonetics::PutAlignment ( long _arg1 );
__declspec(implementation_key(5774)) FontPtr Phonetics::GetFont ( );
__declspec(implementation_key(5775)) IDispatchPtr Phonetics::GetItem ( long Index );
__declspec(implementation_key(5776)) HRESULT Phonetics::Delete ( );
__declspec(implementation_key(5777)) HRESULT Phonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(5778)) _bstr_t Phonetics::GetText ( );
__declspec(implementation_key(5779)) void Phonetics::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5780)) IDispatchPtr Phonetics::Get_Default ( long Index );
__declspec(implementation_key(5781)) IUnknownPtr Phonetics::Get_NewEnum ( );
__declspec(implementation_key(5782)) _ApplicationPtr PivotLayout::GetApplication ( );
__declspec(implementation_key(5783)) enum XlCreator PivotLayout::GetCreator ( );
__declspec(implementation_key(5784)) IDispatchPtr PivotLayout::GetParent ( );
__declspec(implementation_key(5785)) IDispatchPtr PivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(5786)) IDispatchPtr PivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(5787)) IDispatchPtr PivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(5788)) IDispatchPtr PivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(5789)) IDispatchPtr PivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(5790)) IDispatchPtr PivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(5791)) IDispatchPtr PivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(5792)) CubeFieldsPtr PivotLayout::GetCubeFields ( );
__declspec(implementation_key(5793)) PivotCachePtr PivotLayout::GetPivotCache ( );
__declspec(implementation_key(5794)) PivotTablePtr PivotLayout::GetPivotTable ( );
__declspec(implementation_key(5795)) _bstr_t PivotLayout::GetInnerDetail ( );
__declspec(implementation_key(5796)) void PivotLayout::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(5797)) HRESULT PivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(5798)) _ApplicationPtr DisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(5799)) enum XlCreator DisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(5800)) IDispatchPtr DisplayUnitLabel::GetParent ( );
__declspec(implementation_key(5801)) _bstr_t DisplayUnitLabel::GetName ( );
__declspec(implementation_key(5802)) _variant_t DisplayUnitLabel::Select ( );
__declspec(implementation_key(5803)) BorderPtr DisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(5804)) _variant_t DisplayUnitLabel::Delete ( );
__declspec(implementation_key(5805)) InteriorPtr DisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(5806)) ChartFillFormatPtr DisplayUnitLabel::GetFill ( );
__declspec(implementation_key(5807)) _bstr_t DisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(5808)) void DisplayUnitLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(5809)) CharactersPtr DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5810)) FontPtr DisplayUnitLabel::GetFont ( );
__declspec(implementation_key(5811)) _variant_t DisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(5812)) void DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5813)) double DisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(5814)) void DisplayUnitLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(5815)) _variant_t DisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(5816)) void DisplayUnitLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5817)) VARIANT_BOOL DisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(5818)) void DisplayUnitLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5819)) _bstr_t DisplayUnitLabel::GetText ( );
__declspec(implementation_key(5820)) void DisplayUnitLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5821)) double DisplayUnitLabel::GetTop ( );
__declspec(implementation_key(5822)) void DisplayUnitLabel::PutTop ( double _arg1 );
__declspec(implementation_key(5823)) _variant_t DisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(5824)) void DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5825)) long DisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(5826)) void DisplayUnitLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5827)) _variant_t DisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(5828)) void DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5829)) HRESULT IDummy::_ActiveSheetOrChart ( );
__declspec(implementation_key(5830)) HRESULT IDummy::ExcelRGB ( );
__declspec(implementation_key(5831)) HRESULT IDummy::ChDir ( );
__declspec(implementation_key(5832)) HRESULT IDummy::DoScript ( );
__declspec(implementation_key(5833)) HRESULT IDummy::DirectObject ( );
__declspec(implementation_key(5834)) HRESULT IDummy::RefreshDocument ( );
__declspec(implementation_key(5835)) _ApplicationPtr IWindows::GetApplication ( );
__declspec(implementation_key(5836)) enum XlCreator IWindows::GetCreator ( );
__declspec(implementation_key(5837)) IDispatchPtr IWindows::GetParent ( );
__declspec(implementation_key(5838)) _variant_t IWindows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(5839)) long IWindows::GetCount ( );
__declspec(implementation_key(5840)) WindowPtr IWindows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5841)) IUnknownPtr IWindows::Get_NewEnum ( );
__declspec(implementation_key(5842)) WindowPtr IWindows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5843)) _ApplicationPtr IWorksheetFunction::GetApplication ( );
__declspec(implementation_key(5844)) enum XlCreator IWorksheetFunction::GetCreator ( );
__declspec(implementation_key(5845)) IDispatchPtr IWorksheetFunction::GetParent ( );
__declspec(implementation_key(5846)) _variant_t IWorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5847)) double IWorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5848)) VARIANT_BOOL IWorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(5849)) VARIANT_BOOL IWorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(5850)) double IWorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5851)) double IWorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5852)) double IWorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5853)) double IWorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5854)) double IWorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5855)) double IWorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5856)) _bstr_t IWorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5857)) _bstr_t IWorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5858)) double IWorksheetFunction::Pi ( );
__declspec(implementation_key(5859)) double IWorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(5860)) double IWorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(5861)) double IWorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(5862)) _variant_t IWorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5863)) _variant_t IWorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5864)) _bstr_t IWorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(5865)) VARIANT_BOOL IWorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5866)) VARIANT_BOOL IWorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5867)) double IWorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5868)) double IWorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5869)) double IWorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5870)) double IWorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5871)) double IWorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5872)) double IWorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5873)) double IWorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5874)) double IWorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5875)) _bstr_t IWorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(5876)) _variant_t IWorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5877)) _variant_t IWorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5878)) _variant_t IWorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5879)) _variant_t IWorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5880)) double IWorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5881)) double IWorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5882)) double IWorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5883)) double IWorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5884)) double IWorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(5885)) double IWorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5886)) double IWorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5887)) double IWorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5888)) double IWorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5889)) double IWorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5890)) _variant_t IWorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(5891)) double IWorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(5892)) double IWorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(5893)) double IWorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(5894)) _variant_t IWorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5895)) _variant_t IWorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5896)) _variant_t IWorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5897)) double IWorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5898)) _bstr_t IWorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(5899)) _bstr_t IWorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(5900)) _bstr_t IWorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(5901)) _bstr_t IWorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5902)) double IWorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5903)) VARIANT_BOOL IWorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(5904)) VARIANT_BOOL IWorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(5905)) VARIANT_BOOL IWorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(5906)) double IWorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5907)) double IWorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(5908)) double IWorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5909)) _bstr_t IWorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(5910)) double IWorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(5911)) _variant_t IWorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(5912)) _variant_t IWorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5913)) double IWorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(5914)) double IWorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(5915)) double IWorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5916)) double IWorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5917)) double IWorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(5918)) double IWorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5919)) VARIANT_BOOL IWorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(5920)) double IWorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5921)) double IWorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5922)) double IWorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5923)) double IWorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5924)) VARIANT_BOOL IWorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(5925)) double IWorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5926)) _bstr_t IWorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(5927)) double IWorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5928)) double IWorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5929)) _bstr_t IWorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(5930)) double IWorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(5931)) double IWorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(5932)) double IWorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5933)) double IWorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5934)) double IWorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(5935)) double IWorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5936)) double IWorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5937)) double IWorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(5938)) double IWorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(5939)) double IWorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(5940)) double IWorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(5941)) double IWorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(5942)) double IWorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(5943)) _variant_t IWorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5944)) double IWorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5945)) _variant_t IWorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5946)) double IWorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5947)) double IWorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5948)) double IWorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(5949)) double IWorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(5950)) double IWorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(5951)) double IWorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(5952)) double IWorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(5953)) double IWorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(5954)) double IWorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5955)) double IWorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5956)) double IWorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(5957)) double IWorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(5958)) double IWorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5959)) double IWorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5960)) double IWorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(5961)) double IWorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(5962)) double IWorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(5963)) double IWorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(5964)) double IWorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5965)) double IWorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(5966)) double IWorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(5967)) double IWorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5968)) double IWorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5969)) double IWorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5970)) double IWorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(5971)) double IWorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(5972)) double IWorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5973)) double IWorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(5974)) double IWorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5975)) double IWorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(5976)) double IWorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(5977)) double IWorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(5978)) double IWorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(5979)) double IWorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(5980)) double IWorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5981)) double IWorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5982)) double IWorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5983)) double IWorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5984)) double IWorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5985)) double IWorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5986)) double IWorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(5987)) double IWorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5988)) double IWorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5989)) double IWorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5990)) double IWorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5991)) double IWorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5992)) double IWorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(5993)) double IWorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(5994)) double IWorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(5995)) double IWorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5996)) double IWorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5997)) double IWorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5998)) double IWorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(5999)) double IWorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6000)) double IWorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6001)) double IWorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6002)) double IWorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6003)) double IWorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6004)) double IWorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6005)) double IWorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6006)) double IWorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6007)) double IWorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6008)) double IWorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6009)) double IWorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(6010)) double IWorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(6011)) double IWorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(6012)) double IWorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(6013)) double IWorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6014)) double IWorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6015)) double IWorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6016)) double IWorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(6017)) double IWorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(6018)) _bstr_t IWorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6019)) _bstr_t IWorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(6020)) _bstr_t IWorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(6021)) _bstr_t IWorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(6022)) _ApplicationPtr Sheets::GetApplication ( );
__declspec(implementation_key(6023)) enum XlCreator Sheets::GetCreator ( );
__declspec(implementation_key(6024)) IDispatchPtr Sheets::GetParent ( );
__declspec(implementation_key(6025)) IDispatchPtr Sheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(6026)) HRESULT Sheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6027)) long Sheets::GetCount ( );
__declspec(implementation_key(6028)) HRESULT Sheets::Delete ( long lcid );
__declspec(implementation_key(6029)) HRESULT Sheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(6030)) IDispatchPtr Sheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6031)) HRESULT Sheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6032)) IUnknownPtr Sheets::Get_NewEnum ( );
__declspec(implementation_key(6033)) HRESULT Sheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(6034)) HRESULT Sheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(6035)) HRESULT Sheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(6036)) HPageBreaksPtr Sheets::GetHPageBreaks ( );
__declspec(implementation_key(6037)) VPageBreaksPtr Sheets::GetVPageBreaks ( );
__declspec(implementation_key(6038)) _variant_t Sheets::GetVisible ( long lcid );
__declspec(implementation_key(6039)) void Sheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(6040)) IDispatchPtr Sheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6041)) HRESULT Sheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(6042)) _ApplicationPtr IHPageBreaks::GetApplication ( );
__declspec(implementation_key(6043)) enum XlCreator IHPageBreaks::GetCreator ( );
__declspec(implementation_key(6044)) IDispatchPtr IHPageBreaks::GetParent ( );
__declspec(implementation_key(6045)) long IHPageBreaks::GetCount ( );
__declspec(implementation_key(6046)) HPageBreakPtr IHPageBreaks::GetItem ( long Index );
__declspec(implementation_key(6047)) HPageBreakPtr IHPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(6048)) IUnknownPtr IHPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(6049)) HPageBreakPtr IHPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(6050)) _ApplicationPtr IVPageBreaks::GetApplication ( );
__declspec(implementation_key(6051)) enum XlCreator IVPageBreaks::GetCreator ( );
__declspec(implementation_key(6052)) IDispatchPtr IVPageBreaks::GetParent ( );
__declspec(implementation_key(6053)) long IVPageBreaks::GetCount ( );
__declspec(implementation_key(6054)) VPageBreakPtr IVPageBreaks::GetItem ( long Index );
__declspec(implementation_key(6055)) VPageBreakPtr IVPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(6056)) IUnknownPtr IVPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(6057)) VPageBreakPtr IVPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(6058)) _ApplicationPtr IRecentFiles::GetApplication ( );
__declspec(implementation_key(6059)) enum XlCreator IRecentFiles::GetCreator ( );
__declspec(implementation_key(6060)) IDispatchPtr IRecentFiles::GetParent ( );
__declspec(implementation_key(6061)) long IRecentFiles::GetMaximum ( );
__declspec(implementation_key(6062)) void IRecentFiles::PutMaximum ( long RHS );
__declspec(implementation_key(6063)) long IRecentFiles::GetCount ( );
__declspec(implementation_key(6064)) RecentFilePtr IRecentFiles::GetItem ( long Index );
__declspec(implementation_key(6065)) RecentFilePtr IRecentFiles::Get_Default ( long Index );
__declspec(implementation_key(6066)) RecentFilePtr IRecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(6067)) IUnknownPtr IRecentFiles::Get_NewEnum ( );
__declspec(implementation_key(6068)) _ApplicationPtr _Worksheet::GetApplication ( );
__declspec(implementation_key(6069)) enum XlCreator _Worksheet::GetCreator ( );
__declspec(implementation_key(6070)) IDispatchPtr _Worksheet::GetParent ( );
__declspec(implementation_key(6071)) HRESULT _Worksheet::Activate ( long lcid );
__declspec(implementation_key(6072)) HRESULT _Worksheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6073)) HRESULT _Worksheet::Delete ( long lcid );
__declspec(implementation_key(6074)) _bstr_t _Worksheet::GetCodeName ( );
__declspec(implementation_key(6075)) _bstr_t _Worksheet::Get_CodeName ( );
__declspec(implementation_key(6076)) void _Worksheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(6077)) long _Worksheet::GetIndex ( long lcid );
__declspec(implementation_key(6078)) HRESULT _Worksheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6079)) _bstr_t _Worksheet::GetName ( );
__declspec(implementation_key(6080)) void _Worksheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(6081)) IDispatchPtr _Worksheet::GetNext ( );
__declspec(implementation_key(6082)) _bstr_t _Worksheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(6083)) void _Worksheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6084)) _bstr_t _Worksheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(6085)) void _Worksheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6086)) _bstr_t _Worksheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(6087)) void _Worksheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6088)) PageSetupPtr _Worksheet::GetPageSetup ( );
__declspec(implementation_key(6089)) IDispatchPtr _Worksheet::GetPrevious ( );
__declspec(implementation_key(6090)) HRESULT _Worksheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(6091)) HRESULT _Worksheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(6092)) HRESULT _Worksheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(6093)) VARIANT_BOOL _Worksheet::GetProtectContents ( long lcid );
__declspec(implementation_key(6094)) VARIANT_BOOL _Worksheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(6095)) VARIANT_BOOL _Worksheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(6096)) VARIANT_BOOL _Worksheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(6097)) HRESULT _Worksheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(6098)) HRESULT _Worksheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(6099)) HRESULT _Worksheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(6100)) enum XlSheetVisibility _Worksheet::GetVisible ( long lcid );
__declspec(implementation_key(6101)) void _Worksheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(6102)) ShapesPtr _Worksheet::GetShapes ( );
__declspec(implementation_key(6103)) VARIANT_BOOL _Worksheet::GetTransitionExpEval ( long lcid );
__declspec(implementation_key(6104)) void _Worksheet::PutTransitionExpEval ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6105)) IDispatchPtr _Worksheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6106)) VARIANT_BOOL _Worksheet::GetAutoFilterMode ( long lcid );
__declspec(implementation_key(6107)) void _Worksheet::PutAutoFilterMode ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6108)) HRESULT _Worksheet::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(6109)) IDispatchPtr _Worksheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6110)) HRESULT _Worksheet::Calculate ( long lcid );
__declspec(implementation_key(6111)) VARIANT_BOOL _Worksheet::GetEnableCalculation ( );
__declspec(implementation_key(6112)) void _Worksheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(6113)) RangePtr _Worksheet::GetCells ( );
__declspec(implementation_key(6114)) IDispatchPtr _Worksheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6115)) IDispatchPtr _Worksheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6116)) HRESULT _Worksheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(6117)) RangePtr _Worksheet::GetCircularReference ( long lcid );
__declspec(implementation_key(6118)) HRESULT _Worksheet::ClearArrows ( long lcid );
__declspec(implementation_key(6119)) RangePtr _Worksheet::GetColumns ( );
__declspec(implementation_key(6120)) enum XlConsolidationFunction _Worksheet::GetConsolidationFunction ( long lcid );
__declspec(implementation_key(6121)) _variant_t _Worksheet::GetConsolidationOptions ( long lcid );
__declspec(implementation_key(6122)) _variant_t _Worksheet::GetConsolidationSources ( long lcid );
__declspec(implementation_key(6123)) VARIANT_BOOL _Worksheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(6124)) void _Worksheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6125)) IDispatchPtr _Worksheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6126)) IDispatchPtr _Worksheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6127)) IDispatchPtr _Worksheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6128)) VARIANT_BOOL _Worksheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(6129)) void _Worksheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6130)) enum XlEnableSelection _Worksheet::GetEnableSelection ( );
__declspec(implementation_key(6131)) void _Worksheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(6132)) VARIANT_BOOL _Worksheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(6133)) void _Worksheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6134)) VARIANT_BOOL _Worksheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(6135)) void _Worksheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6136)) _variant_t _Worksheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(6137)) _variant_t _Worksheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(6138)) VARIANT_BOOL _Worksheet::GetFilterMode ( long lcid );
__declspec(implementation_key(6139)) HRESULT _Worksheet::ResetAllPageBreaks ( );
__declspec(implementation_key(6140)) IDispatchPtr _Worksheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6141)) IDispatchPtr _Worksheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6142)) IDispatchPtr _Worksheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6143)) IDispatchPtr _Worksheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6144)) IDispatchPtr _Worksheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6145)) NamesPtr _Worksheet::GetNames ( );
__declspec(implementation_key(6146)) IDispatchPtr _Worksheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6147)) _bstr_t _Worksheet::GetOnCalculate ( long lcid );
__declspec(implementation_key(6148)) void _Worksheet::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6149)) _bstr_t _Worksheet::GetOnData ( long lcid );
__declspec(implementation_key(6150)) void _Worksheet::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6151)) _bstr_t _Worksheet::GetOnEntry ( long lcid );
__declspec(implementation_key(6152)) void _Worksheet::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6153)) IDispatchPtr _Worksheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6154)) OutlinePtr _Worksheet::GetOutline ( );
__declspec(implementation_key(6155)) IDispatchPtr _Worksheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6156)) HRESULT _Worksheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(6157)) HRESULT _Worksheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(6158)) IDispatchPtr _Worksheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6159)) IDispatchPtr _Worksheet::PivotTables ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6160)) PivotTablePtr _Worksheet::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(6161)) RangePtr _Worksheet::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(6162)) IDispatchPtr _Worksheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6163)) RangePtr _Worksheet::GetRows ( );
__declspec(implementation_key(6164)) IDispatchPtr _Worksheet::Scenarios ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6165)) _bstr_t _Worksheet::GetScrollArea ( );
__declspec(implementation_key(6166)) void _Worksheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(6167)) IDispatchPtr _Worksheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6168)) HRESULT _Worksheet::ShowAllData ( long lcid );
__declspec(implementation_key(6169)) HRESULT _Worksheet::ShowDataForm ( long lcid );
__declspec(implementation_key(6170)) IDispatchPtr _Worksheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6171)) double _Worksheet::GetStandardHeight ( long lcid );
__declspec(implementation_key(6172)) double _Worksheet::GetStandardWidth ( long lcid );
__declspec(implementation_key(6173)) void _Worksheet::PutStandardWidth ( long lcid, double RHS );
__declspec(implementation_key(6174)) IDispatchPtr _Worksheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6175)) VARIANT_BOOL _Worksheet::GetTransitionFormEntry ( long lcid );
__declspec(implementation_key(6176)) void _Worksheet::PutTransitionFormEntry ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6177)) enum XlSheetType _Worksheet::GetType ( long lcid );
__declspec(implementation_key(6178)) RangePtr _Worksheet::GetUsedRange ( long lcid );
__declspec(implementation_key(6179)) HPageBreaksPtr _Worksheet::GetHPageBreaks ( );
__declspec(implementation_key(6180)) VPageBreaksPtr _Worksheet::GetVPageBreaks ( );
__declspec(implementation_key(6181)) QueryTablesPtr _Worksheet::GetQueryTables ( );
__declspec(implementation_key(6182)) VARIANT_BOOL _Worksheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(6183)) void _Worksheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(6184)) CommentsPtr _Worksheet::GetComments ( );
__declspec(implementation_key(6185)) HyperlinksPtr _Worksheet::GetHyperlinks ( );
__declspec(implementation_key(6186)) HRESULT _Worksheet::ClearCircles ( );
__declspec(implementation_key(6187)) HRESULT _Worksheet::CircleInvalid ( );
__declspec(implementation_key(6188)) long _Worksheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(6189)) void _Worksheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(6190)) AutoFilterPtr _Worksheet::GetAutoFilter ( );
__declspec(implementation_key(6191)) VARIANT_BOOL _Worksheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(6192)) void _Worksheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6193)) Office::ScriptsPtr _Worksheet::GetScripts ( );
__declspec(implementation_key(6194)) HRESULT _Worksheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(6195)) HRESULT _Worksheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(6196)) _ApplicationPtr IStyle::GetApplication ( );
__declspec(implementation_key(6197)) enum XlCreator IStyle::GetCreator ( );
__declspec(implementation_key(6198)) IDispatchPtr IStyle::GetParent ( );
__declspec(implementation_key(6199)) VARIANT_BOOL IStyle::GetAddIndent ( );
__declspec(implementation_key(6200)) void IStyle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(6201)) VARIANT_BOOL IStyle::GetBuiltIn ( );
__declspec(implementation_key(6202)) BordersPtr IStyle::GetBorders ( );
__declspec(implementation_key(6203)) _variant_t IStyle::Delete ( );
__declspec(implementation_key(6204)) FontPtr IStyle::GetFont ( );
__declspec(implementation_key(6205)) VARIANT_BOOL IStyle::GetFormulaHidden ( );
__declspec(implementation_key(6206)) void IStyle::PutFormulaHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(6207)) enum XlHAlign IStyle::GetHorizontalAlignment ( );
__declspec(implementation_key(6208)) void IStyle::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(6209)) VARIANT_BOOL IStyle::GetIncludeAlignment ( );
__declspec(implementation_key(6210)) void IStyle::PutIncludeAlignment ( VARIANT_BOOL RHS );
__declspec(implementation_key(6211)) VARIANT_BOOL IStyle::GetIncludeBorder ( );
__declspec(implementation_key(6212)) void IStyle::PutIncludeBorder ( VARIANT_BOOL RHS );
__declspec(implementation_key(6213)) VARIANT_BOOL IStyle::GetIncludeFont ( );
__declspec(implementation_key(6214)) void IStyle::PutIncludeFont ( VARIANT_BOOL RHS );
__declspec(implementation_key(6215)) VARIANT_BOOL IStyle::GetIncludeNumber ( );
__declspec(implementation_key(6216)) void IStyle::PutIncludeNumber ( VARIANT_BOOL RHS );
__declspec(implementation_key(6217)) VARIANT_BOOL IStyle::GetIncludePatterns ( );
__declspec(implementation_key(6218)) void IStyle::PutIncludePatterns ( VARIANT_BOOL RHS );
__declspec(implementation_key(6219)) VARIANT_BOOL IStyle::GetIncludeProtection ( );
__declspec(implementation_key(6220)) void IStyle::PutIncludeProtection ( VARIANT_BOOL RHS );
__declspec(implementation_key(6221)) long IStyle::GetIndentLevel ( );
__declspec(implementation_key(6222)) void IStyle::PutIndentLevel ( long RHS );
__declspec(implementation_key(6223)) InteriorPtr IStyle::GetInterior ( );
__declspec(implementation_key(6224)) VARIANT_BOOL IStyle::GetLocked ( );
__declspec(implementation_key(6225)) void IStyle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6226)) _variant_t IStyle::GetMergeCells ( );
__declspec(implementation_key(6227)) void IStyle::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(6228)) _bstr_t IStyle::GetName ( long lcid );
__declspec(implementation_key(6229)) _bstr_t IStyle::GetNameLocal ( );
__declspec(implementation_key(6230)) _bstr_t IStyle::GetNumberFormat ( );
__declspec(implementation_key(6231)) void IStyle::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(6232)) _bstr_t IStyle::GetNumberFormatLocal ( );
__declspec(implementation_key(6233)) void IStyle::PutNumberFormatLocal ( _bstr_t RHS );
__declspec(implementation_key(6234)) enum XlOrientation IStyle::GetOrientation ( );
__declspec(implementation_key(6235)) void IStyle::PutOrientation ( enum XlOrientation RHS );
__declspec(implementation_key(6236)) VARIANT_BOOL IStyle::GetShrinkToFit ( );
__declspec(implementation_key(6237)) void IStyle::PutShrinkToFit ( VARIANT_BOOL RHS );
__declspec(implementation_key(6238)) _bstr_t IStyle::GetValue ( long lcid );
__declspec(implementation_key(6239)) enum XlVAlign IStyle::GetVerticalAlignment ( );
__declspec(implementation_key(6240)) void IStyle::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(6241)) VARIANT_BOOL IStyle::GetWrapText ( );
__declspec(implementation_key(6242)) void IStyle::PutWrapText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6243)) _bstr_t IStyle::Get_Default ( long lcid );
__declspec(implementation_key(6244)) long IStyle::GetReadingOrder ( );
__declspec(implementation_key(6245)) void IStyle::PutReadingOrder ( long RHS );
__declspec(implementation_key(6246)) _ApplicationPtr IStyles::GetApplication ( );
__declspec(implementation_key(6247)) enum XlCreator IStyles::GetCreator ( );
__declspec(implementation_key(6248)) IDispatchPtr IStyles::GetParent ( );
__declspec(implementation_key(6249)) StylePtr IStyles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(6250)) long IStyles::GetCount ( );
__declspec(implementation_key(6251)) StylePtr IStyles::GetItem ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6252)) _variant_t IStyles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(6253)) IUnknownPtr IStyles::Get_NewEnum ( );
__declspec(implementation_key(6254)) StylePtr IStyles::Get_Default ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6255)) _ApplicationPtr IBorders::GetApplication ( );
__declspec(implementation_key(6256)) enum XlCreator IBorders::GetCreator ( );
__declspec(implementation_key(6257)) IDispatchPtr IBorders::GetParent ( );
__declspec(implementation_key(6258)) _variant_t IBorders::GetColor ( );
__declspec(implementation_key(6259)) void IBorders::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(6260)) _variant_t IBorders::GetColorIndex ( );
__declspec(implementation_key(6261)) void IBorders::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(6262)) long IBorders::GetCount ( );
__declspec(implementation_key(6263)) BorderPtr IBorders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(6264)) _variant_t IBorders::GetLineStyle ( );
__declspec(implementation_key(6265)) void IBorders::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(6266)) IUnknownPtr IBorders::Get_NewEnum ( );
__declspec(implementation_key(6267)) _variant_t IBorders::GetValue ( );
__declspec(implementation_key(6268)) void IBorders::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(6269)) _variant_t IBorders::GetWeight ( );
__declspec(implementation_key(6270)) void IBorders::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(6271)) BorderPtr IBorders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(6272)) _ApplicationPtr IAddIn::GetApplication ( );
__declspec(implementation_key(6273)) enum XlCreator IAddIn::GetCreator ( );
__declspec(implementation_key(6274)) IDispatchPtr IAddIn::GetParent ( );
__declspec(implementation_key(6275)) _bstr_t IAddIn::GetAuthor ( );
__declspec(implementation_key(6276)) _bstr_t IAddIn::GetComments ( );
__declspec(implementation_key(6277)) _bstr_t IAddIn::GetFullName ( );
__declspec(implementation_key(6278)) VARIANT_BOOL IAddIn::GetInstalled ( );
__declspec(implementation_key(6279)) void IAddIn::PutInstalled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6280)) _bstr_t IAddIn::GetKeywords ( );
__declspec(implementation_key(6281)) _bstr_t IAddIn::GetName ( );
__declspec(implementation_key(6282)) _bstr_t IAddIn::GetPath ( );
__declspec(implementation_key(6283)) _bstr_t IAddIn::GetSubject ( );
__declspec(implementation_key(6284)) _bstr_t IAddIn::GetTitle ( );
__declspec(implementation_key(6285)) _ApplicationPtr IAddIns::GetApplication ( );
__declspec(implementation_key(6286)) enum XlCreator IAddIns::GetCreator ( );
__declspec(implementation_key(6287)) IDispatchPtr IAddIns::GetParent ( );
__declspec(implementation_key(6288)) AddInPtr IAddIns::Add ( _bstr_t Filename, const _variant_t & ExcelCopyFile );
__declspec(implementation_key(6289)) long IAddIns::GetCount ( );
__declspec(implementation_key(6290)) AddInPtr IAddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6291)) IUnknownPtr IAddIns::Get_NewEnum ( );
__declspec(implementation_key(6292)) AddInPtr IAddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6293)) _ApplicationPtr IToolbar::GetApplication ( );
__declspec(implementation_key(6294)) enum XlCreator IToolbar::GetCreator ( );
__declspec(implementation_key(6295)) IDispatchPtr IToolbar::GetParent ( );
__declspec(implementation_key(6296)) VARIANT_BOOL IToolbar::GetBuiltIn ( );
__declspec(implementation_key(6297)) HRESULT IToolbar::Delete ( );
__declspec(implementation_key(6298)) long IToolbar::GetHeight ( );
__declspec(implementation_key(6299)) void IToolbar::PutHeight ( long RHS );
__declspec(implementation_key(6300)) long IToolbar::GetLeft ( );
__declspec(implementation_key(6301)) void IToolbar::PutLeft ( long RHS );
__declspec(implementation_key(6302)) _bstr_t IToolbar::GetName ( );
__declspec(implementation_key(6303)) long IToolbar::GetPosition ( );
__declspec(implementation_key(6304)) void IToolbar::PutPosition ( long RHS );
__declspec(implementation_key(6305)) enum XlToolbarProtection IToolbar::GetProtection ( );
__declspec(implementation_key(6306)) void IToolbar::PutProtection ( enum XlToolbarProtection RHS );
__declspec(implementation_key(6307)) HRESULT IToolbar::Reset ( );
__declspec(implementation_key(6308)) ToolbarButtonsPtr IToolbar::GetToolbarButtons ( );
__declspec(implementation_key(6309)) long IToolbar::GetTop ( );
__declspec(implementation_key(6310)) void IToolbar::PutTop ( long RHS );
__declspec(implementation_key(6311)) VARIANT_BOOL IToolbar::GetVisible ( );
__declspec(implementation_key(6312)) void IToolbar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6313)) long IToolbar::GetWidth ( );
__declspec(implementation_key(6314)) void IToolbar::PutWidth ( long RHS );
__declspec(implementation_key(6315)) _ApplicationPtr IToolbars::GetApplication ( );
__declspec(implementation_key(6316)) enum XlCreator IToolbars::GetCreator ( );
__declspec(implementation_key(6317)) IDispatchPtr IToolbars::GetParent ( );
__declspec(implementation_key(6318)) ToolbarPtr IToolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(6319)) long IToolbars::GetCount ( );
__declspec(implementation_key(6320)) ToolbarPtr IToolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6321)) ToolbarPtr IToolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6322)) IUnknownPtr IToolbars::Get_NewEnum ( );
__declspec(implementation_key(6323)) _ApplicationPtr IToolbarButton::GetApplication ( );
__declspec(implementation_key(6324)) enum XlCreator IToolbarButton::GetCreator ( );
__declspec(implementation_key(6325)) IDispatchPtr IToolbarButton::GetParent ( );
__declspec(implementation_key(6326)) VARIANT_BOOL IToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(6327)) VARIANT_BOOL IToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(6328)) void IToolbarButton::PutBuiltInFace ( VARIANT_BOOL RHS );
__declspec(implementation_key(6329)) HRESULT IToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(6330)) HRESULT IToolbarButton::CopyFace ( );
__declspec(implementation_key(6331)) HRESULT IToolbarButton::Delete ( );
__declspec(implementation_key(6332)) HRESULT IToolbarButton::Edit ( );
__declspec(implementation_key(6333)) VARIANT_BOOL IToolbarButton::GetEnabled ( );
__declspec(implementation_key(6334)) void IToolbarButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6335)) long IToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(6336)) void IToolbarButton::PutHelpContextID ( long RHS );
__declspec(implementation_key(6337)) _bstr_t IToolbarButton::GetHelpFile ( );
__declspec(implementation_key(6338)) void IToolbarButton::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(6339)) long IToolbarButton::GetID ( );
__declspec(implementation_key(6340)) VARIANT_BOOL IToolbarButton::GetIsGap ( );
__declspec(implementation_key(6341)) HRESULT IToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(6342)) _bstr_t IToolbarButton::GetName ( );
__declspec(implementation_key(6343)) void IToolbarButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(6344)) _bstr_t IToolbarButton::GetOnAction ( );
__declspec(implementation_key(6345)) void IToolbarButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6346)) HRESULT IToolbarButton::PasteFace ( );
__declspec(implementation_key(6347)) VARIANT_BOOL IToolbarButton::GetPushed ( );
__declspec(implementation_key(6348)) void IToolbarButton::PutPushed ( VARIANT_BOOL RHS );
__declspec(implementation_key(6349)) HRESULT IToolbarButton::Reset ( );
__declspec(implementation_key(6350)) _bstr_t IToolbarButton::GetStatusBar ( );
__declspec(implementation_key(6351)) void IToolbarButton::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(6352)) long IToolbarButton::GetWidth ( );
__declspec(implementation_key(6353)) void IToolbarButton::PutWidth ( long RHS );
__declspec(implementation_key(6354)) _ApplicationPtr IToolbarButtons::GetApplication ( );
__declspec(implementation_key(6355)) enum XlCreator IToolbarButtons::GetCreator ( );
__declspec(implementation_key(6356)) IDispatchPtr IToolbarButtons::GetParent ( );
__declspec(implementation_key(6357)) ToolbarButtonPtr IToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(6358)) long IToolbarButtons::GetCount ( );
__declspec(implementation_key(6359)) ToolbarButtonPtr IToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(6360)) IUnknownPtr IToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(6361)) ToolbarButtonPtr IToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(6362)) _ApplicationPtr IAreas::GetApplication ( );
__declspec(implementation_key(6363)) enum XlCreator IAreas::GetCreator ( );
__declspec(implementation_key(6364)) IDispatchPtr IAreas::GetParent ( );
__declspec(implementation_key(6365)) long IAreas::GetCount ( );
__declspec(implementation_key(6366)) RangePtr IAreas::GetItem ( long Index );
__declspec(implementation_key(6367)) IUnknownPtr IAreas::Get_NewEnum ( );
__declspec(implementation_key(6368)) RangePtr IAreas::Get_Default ( long Index );
__declspec(implementation_key(6369)) _ApplicationPtr IMenuBars::GetApplication ( );
__declspec(implementation_key(6370)) enum XlCreator IMenuBars::GetCreator ( );
__declspec(implementation_key(6371)) IDispatchPtr IMenuBars::GetParent ( );
__declspec(implementation_key(6372)) MenuBarPtr IMenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(6373)) long IMenuBars::GetCount ( );
__declspec(implementation_key(6374)) MenuBarPtr IMenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6375)) MenuBarPtr IMenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6376)) IUnknownPtr IMenuBars::Get_NewEnum ( );
__declspec(implementation_key(6377)) _ApplicationPtr IMenuBar::GetApplication ( );
__declspec(implementation_key(6378)) enum XlCreator IMenuBar::GetCreator ( );
__declspec(implementation_key(6379)) IDispatchPtr IMenuBar::GetParent ( );
__declspec(implementation_key(6380)) HRESULT IMenuBar::Activate ( );
__declspec(implementation_key(6381)) VARIANT_BOOL IMenuBar::GetBuiltIn ( );
__declspec(implementation_key(6382)) _bstr_t IMenuBar::GetCaption ( );
__declspec(implementation_key(6383)) void IMenuBar::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6384)) HRESULT IMenuBar::Delete ( );
__declspec(implementation_key(6385)) long IMenuBar::GetIndex ( );
__declspec(implementation_key(6386)) MenusPtr IMenuBar::GetMenus ( );
__declspec(implementation_key(6387)) HRESULT IMenuBar::Reset ( );
__declspec(implementation_key(6388)) _ApplicationPtr IMenus::GetApplication ( );
__declspec(implementation_key(6389)) enum XlCreator IMenus::GetCreator ( );
__declspec(implementation_key(6390)) IDispatchPtr IMenus::GetParent ( );
__declspec(implementation_key(6391)) MenuPtr IMenus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(6392)) long IMenus::GetCount ( );
__declspec(implementation_key(6393)) MenuPtr IMenus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6394)) MenuPtr IMenus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6395)) IUnknownPtr IMenus::Get_NewEnum ( );
__declspec(implementation_key(6396)) _ApplicationPtr IMenu::GetApplication ( );
__declspec(implementation_key(6397)) enum XlCreator IMenu::GetCreator ( );
__declspec(implementation_key(6398)) IDispatchPtr IMenu::GetParent ( );
__declspec(implementation_key(6399)) _bstr_t IMenu::GetCaption ( );
__declspec(implementation_key(6400)) void IMenu::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6401)) HRESULT IMenu::Delete ( );
__declspec(implementation_key(6402)) VARIANT_BOOL IMenu::GetEnabled ( );
__declspec(implementation_key(6403)) void IMenu::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6404)) long IMenu::GetIndex ( );
__declspec(implementation_key(6405)) MenuItemsPtr IMenu::GetMenuItems ( );
__declspec(implementation_key(6406)) _ApplicationPtr IMenuItems::GetApplication ( );
__declspec(implementation_key(6407)) enum XlCreator IMenuItems::GetCreator ( );
__declspec(implementation_key(6408)) IDispatchPtr IMenuItems::GetParent ( );
__declspec(implementation_key(6409)) MenuItemPtr IMenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(6410)) MenuPtr IMenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(6411)) long IMenuItems::GetCount ( );
__declspec(implementation_key(6412)) IDispatchPtr IMenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6413)) IDispatchPtr IMenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6414)) IUnknownPtr IMenuItems::Get_NewEnum ( );
__declspec(implementation_key(6415)) _ApplicationPtr IMenuItem::GetApplication ( );
__declspec(implementation_key(6416)) enum XlCreator IMenuItem::GetCreator ( );
__declspec(implementation_key(6417)) IDispatchPtr IMenuItem::GetParent ( );
__declspec(implementation_key(6418)) _bstr_t IMenuItem::GetCaption ( );
__declspec(implementation_key(6419)) void IMenuItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6420)) VARIANT_BOOL IMenuItem::GetChecked ( );
__declspec(implementation_key(6421)) void IMenuItem::PutChecked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6422)) HRESULT IMenuItem::Delete ( );
__declspec(implementation_key(6423)) VARIANT_BOOL IMenuItem::GetEnabled ( );
__declspec(implementation_key(6424)) void IMenuItem::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6425)) long IMenuItem::GetHelpContextID ( );
__declspec(implementation_key(6426)) void IMenuItem::PutHelpContextID ( long RHS );
__declspec(implementation_key(6427)) _bstr_t IMenuItem::GetHelpFile ( );
__declspec(implementation_key(6428)) void IMenuItem::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(6429)) long IMenuItem::GetIndex ( );
__declspec(implementation_key(6430)) _bstr_t IMenuItem::GetOnAction ( );
__declspec(implementation_key(6431)) void IMenuItem::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6432)) _bstr_t IMenuItem::GetStatusBar ( );
__declspec(implementation_key(6433)) void IMenuItem::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(6434)) _ApplicationPtr IDrawingObjects::GetApplication ( );
__declspec(implementation_key(6435)) enum XlCreator IDrawingObjects::GetCreator ( );
__declspec(implementation_key(6436)) IDispatchPtr IDrawingObjects::GetParent ( );
__declspec(implementation_key(6437)) _variant_t IDrawingObjects::BringToFront ( );
__declspec(implementation_key(6438)) _variant_t IDrawingObjects::Copy ( );
__declspec(implementation_key(6439)) _variant_t IDrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6440)) _variant_t IDrawingObjects::Cut ( );
__declspec(implementation_key(6441)) _variant_t IDrawingObjects::Delete ( );
__declspec(implementation_key(6442)) IDispatchPtr IDrawingObjects::Duplicate ( );
__declspec(implementation_key(6443)) VARIANT_BOOL IDrawingObjects::GetEnabled ( );
__declspec(implementation_key(6444)) void IDrawingObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6445)) double IDrawingObjects::GetHeight ( );
__declspec(implementation_key(6446)) void IDrawingObjects::PutHeight ( double RHS );
__declspec(implementation_key(6447)) double IDrawingObjects::GetLeft ( );
__declspec(implementation_key(6448)) void IDrawingObjects::PutLeft ( double RHS );
__declspec(implementation_key(6449)) VARIANT_BOOL IDrawingObjects::GetLocked ( );
__declspec(implementation_key(6450)) void IDrawingObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6451)) _bstr_t IDrawingObjects::GetOnAction ( );
__declspec(implementation_key(6452)) void IDrawingObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6453)) _variant_t IDrawingObjects::GetPlacement ( );
__declspec(implementation_key(6454)) void IDrawingObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(6455)) VARIANT_BOOL IDrawingObjects::GetPrintObject ( );
__declspec(implementation_key(6456)) void IDrawingObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6457)) _variant_t IDrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(6458)) _variant_t IDrawingObjects::SendToBack ( );
__declspec(implementation_key(6459)) double IDrawingObjects::GetTop ( );
__declspec(implementation_key(6460)) void IDrawingObjects::PutTop ( double RHS );
__declspec(implementation_key(6461)) VARIANT_BOOL IDrawingObjects::GetVisible ( );
__declspec(implementation_key(6462)) void IDrawingObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6463)) double IDrawingObjects::GetWidth ( );
__declspec(implementation_key(6464)) void IDrawingObjects::PutWidth ( double RHS );
__declspec(implementation_key(6465)) long IDrawingObjects::GetZOrder ( );
__declspec(implementation_key(6466)) ShapeRangePtr IDrawingObjects::GetShapeRange ( );
__declspec(implementation_key(6467)) _variant_t IDrawingObjects::GetAccelerator ( );
__declspec(implementation_key(6468)) void IDrawingObjects::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6469)) VARIANT_BOOL IDrawingObjects::GetAddIndent ( );
__declspec(implementation_key(6470)) void IDrawingObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(6471)) _variant_t IDrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(6472)) _variant_t IDrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(6473)) void IDrawingObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(6474)) _variant_t IDrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(6475)) void IDrawingObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(6476)) _variant_t IDrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(6477)) void IDrawingObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(6478)) VARIANT_BOOL IDrawingObjects::GetAutoSize ( );
__declspec(implementation_key(6479)) void IDrawingObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6480)) BorderPtr IDrawingObjects::GetBorder ( );
__declspec(implementation_key(6481)) VARIANT_BOOL IDrawingObjects::GetCancelButton ( );
__declspec(implementation_key(6482)) void IDrawingObjects::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6483)) _bstr_t IDrawingObjects::GetCaption ( );
__declspec(implementation_key(6484)) void IDrawingObjects::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6485)) CharactersPtr IDrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6486)) _variant_t IDrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(6487)) long IDrawingObjects::Get_Default ( );
__declspec(implementation_key(6488)) void IDrawingObjects::Put_Default ( long RHS );
__declspec(implementation_key(6489)) VARIANT_BOOL IDrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(6490)) void IDrawingObjects::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6491)) VARIANT_BOOL IDrawingObjects::GetDismissButton ( );
__declspec(implementation_key(6492)) void IDrawingObjects::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6493)) VARIANT_BOOL IDrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(6494)) void IDrawingObjects::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(6495)) VARIANT_BOOL IDrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(6496)) void IDrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(6497)) long IDrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(6498)) void IDrawingObjects::PutDropDownLines ( long RHS );
__declspec(implementation_key(6499)) FontPtr IDrawingObjects::GetFont ( );
__declspec(implementation_key(6500)) VARIANT_BOOL IDrawingObjects::GetHelpButton ( );
__declspec(implementation_key(6501)) void IDrawingObjects::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6502)) _variant_t IDrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(6503)) void IDrawingObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6504)) long IDrawingObjects::GetInputType ( );
__declspec(implementation_key(6505)) void IDrawingObjects::PutInputType ( long RHS );
__declspec(implementation_key(6506)) InteriorPtr IDrawingObjects::GetInterior ( );
__declspec(implementation_key(6507)) long IDrawingObjects::GetLargeChange ( );
__declspec(implementation_key(6508)) void IDrawingObjects::PutLargeChange ( long RHS );
__declspec(implementation_key(6509)) _bstr_t IDrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(6510)) void IDrawingObjects::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(6511)) _variant_t IDrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(6512)) _bstr_t IDrawingObjects::GetListFillRange ( );
__declspec(implementation_key(6513)) void IDrawingObjects::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(6514)) long IDrawingObjects::GetListIndex ( );
__declspec(implementation_key(6515)) void IDrawingObjects::PutListIndex ( long RHS );
__declspec(implementation_key(6516)) VARIANT_BOOL IDrawingObjects::GetLockedText ( );
__declspec(implementation_key(6517)) void IDrawingObjects::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6518)) long IDrawingObjects::GetMax ( );
__declspec(implementation_key(6519)) void IDrawingObjects::PutMax ( long RHS );
__declspec(implementation_key(6520)) long IDrawingObjects::GetMin ( );
__declspec(implementation_key(6521)) void IDrawingObjects::PutMin ( long RHS );
__declspec(implementation_key(6522)) VARIANT_BOOL IDrawingObjects::GetMultiLine ( );
__declspec(implementation_key(6523)) void IDrawingObjects::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(6524)) VARIANT_BOOL IDrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(6525)) void IDrawingObjects::PutMultiSelect ( VARIANT_BOOL RHS );
__declspec(implementation_key(6526)) _variant_t IDrawingObjects::GetOrientation ( );
__declspec(implementation_key(6527)) void IDrawingObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6528)) _variant_t IDrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(6529)) void IDrawingObjects::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6530)) _variant_t IDrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(6531)) _variant_t IDrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(6532)) _variant_t IDrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(6533)) VARIANT_BOOL IDrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(6534)) void IDrawingObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(6535)) _variant_t IDrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(6536)) VARIANT_BOOL IDrawingObjects::GetShadow ( );
__declspec(implementation_key(6537)) void IDrawingObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(6538)) long IDrawingObjects::GetSmallChange ( );
__declspec(implementation_key(6539)) void IDrawingObjects::PutSmallChange ( long RHS );
__declspec(implementation_key(6540)) _bstr_t IDrawingObjects::GetText ( );
__declspec(implementation_key(6541)) void IDrawingObjects::PutText ( _bstr_t RHS );
__declspec(implementation_key(6542)) IDispatchPtr IDrawingObjects::Ungroup ( );
__declspec(implementation_key(6543)) long IDrawingObjects::GetValue ( );
__declspec(implementation_key(6544)) void IDrawingObjects::PutValue ( long RHS );
__declspec(implementation_key(6545)) _variant_t IDrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(6546)) void IDrawingObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6547)) _variant_t IDrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(6548)) long IDrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(6549)) void IDrawingObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(6550)) long IDrawingObjects::GetCount ( );
__declspec(implementation_key(6551)) IDispatchPtr IDrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(6552)) GroupObjectPtr IDrawingObjects::Group ( );
__declspec(implementation_key(6553)) _variant_t IDrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(6554)) IUnknownPtr IDrawingObjects::_NewEnum ( );
__declspec(implementation_key(6555)) _ApplicationPtr IPivotCache::GetApplication ( );
__declspec(implementation_key(6556)) enum XlCreator IPivotCache::GetCreator ( );
__declspec(implementation_key(6557)) IDispatchPtr IPivotCache::GetParent ( );
__declspec(implementation_key(6558)) VARIANT_BOOL IPivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(6559)) void IPivotCache::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(6560)) _variant_t IPivotCache::GetConnection ( );
__declspec(implementation_key(6561)) void IPivotCache::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(6562)) VARIANT_BOOL IPivotCache::GetEnableRefresh ( );
__declspec(implementation_key(6563)) void IPivotCache::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(6564)) long IPivotCache::GetIndex ( );
__declspec(implementation_key(6565)) long IPivotCache::GetMemoryUsed ( );
__declspec(implementation_key(6566)) VARIANT_BOOL IPivotCache::GetOptimizeCache ( );
__declspec(implementation_key(6567)) void IPivotCache::PutOptimizeCache ( VARIANT_BOOL RHS );
__declspec(implementation_key(6568)) long IPivotCache::GetRecordCount ( );
__declspec(implementation_key(6569)) HRESULT IPivotCache::Refresh ( );
__declspec(implementation_key(6570)) DATE IPivotCache::GetRefreshDate ( );
__declspec(implementation_key(6571)) _bstr_t IPivotCache::GetRefreshName ( );
__declspec(implementation_key(6572)) VARIANT_BOOL IPivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(6573)) void IPivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(6574)) _variant_t IPivotCache::GetSql ( );
__declspec(implementation_key(6575)) void IPivotCache::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(6576)) VARIANT_BOOL IPivotCache::GetSavePassword ( );
__declspec(implementation_key(6577)) void IPivotCache::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(6578)) _variant_t IPivotCache::GetSourceData ( );
__declspec(implementation_key(6579)) void IPivotCache::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(6580)) _variant_t IPivotCache::GetCommandText ( );
__declspec(implementation_key(6581)) void IPivotCache::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(6582)) enum XlCmdType IPivotCache::GetCommandType ( );
__declspec(implementation_key(6583)) void IPivotCache::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(6584)) enum xlQueryType IPivotCache::GetQueryType ( );
__declspec(implementation_key(6585)) VARIANT_BOOL IPivotCache::GetMaintainConnection ( );
__declspec(implementation_key(6586)) void IPivotCache::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(6587)) long IPivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(6588)) void IPivotCache::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(6589)) IDispatchPtr IPivotCache::GetRecordset ( );
__declspec(implementation_key(6590)) void IPivotCache::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(6591)) HRESULT IPivotCache::ResetTimer ( );
__declspec(implementation_key(6592)) _variant_t IPivotCache::GetLocalConnection ( );
__declspec(implementation_key(6593)) void IPivotCache::PutLocalConnection ( const _variant_t & RHS );
__declspec(implementation_key(6594)) PivotTablePtr IPivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData );
__declspec(implementation_key(6595)) VARIANT_BOOL IPivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(6596)) void IPivotCache::PutUseLocalConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(6597)) _ApplicationPtr IPivotCaches::GetApplication ( );
__declspec(implementation_key(6598)) enum XlCreator IPivotCaches::GetCreator ( );
__declspec(implementation_key(6599)) IDispatchPtr IPivotCaches::GetParent ( );
__declspec(implementation_key(6600)) long IPivotCaches::GetCount ( );
__declspec(implementation_key(6601)) PivotCachePtr IPivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(6602)) PivotCachePtr IPivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6603)) IUnknownPtr IPivotCaches::_NewEnum ( );
__declspec(implementation_key(6604)) PivotCachePtr IPivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(6605)) _ApplicationPtr IPivotFormula::GetApplication ( );
__declspec(implementation_key(6606)) enum XlCreator IPivotFormula::GetCreator ( );
__declspec(implementation_key(6607)) IDispatchPtr IPivotFormula::GetParent ( );
__declspec(implementation_key(6608)) HRESULT IPivotFormula::Delete ( );
__declspec(implementation_key(6609)) _bstr_t IPivotFormula::Get_Default ( );
__declspec(implementation_key(6610)) void IPivotFormula::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(6611)) _bstr_t IPivotFormula::GetFormula ( );
__declspec(implementation_key(6612)) void IPivotFormula::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(6613)) _bstr_t IPivotFormula::GetValue ( );
__declspec(implementation_key(6614)) void IPivotFormula::PutValue ( _bstr_t RHS );
__declspec(implementation_key(6615)) long IPivotFormula::GetIndex ( );
__declspec(implementation_key(6616)) void IPivotFormula::PutIndex ( long RHS );
__declspec(implementation_key(6617)) _ApplicationPtr IPivotFormulas::GetApplication ( );
__declspec(implementation_key(6618)) enum XlCreator IPivotFormulas::GetCreator ( );
__declspec(implementation_key(6619)) IDispatchPtr IPivotFormulas::GetParent ( );
__declspec(implementation_key(6620)) long IPivotFormulas::GetCount ( );
__declspec(implementation_key(6621)) PivotFormulaPtr IPivotFormulas::Add ( _bstr_t Formula );
__declspec(implementation_key(6622)) PivotFormulaPtr IPivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(6623)) PivotFormulaPtr IPivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6624)) IUnknownPtr IPivotFormulas::_NewEnum ( );
__declspec(implementation_key(6625)) _ApplicationPtr IPivotTables::GetApplication ( );
__declspec(implementation_key(6626)) enum XlCreator IPivotTables::GetCreator ( );
__declspec(implementation_key(6627)) IDispatchPtr IPivotTables::GetParent ( );
__declspec(implementation_key(6628)) long IPivotTables::GetCount ( );
__declspec(implementation_key(6629)) PivotTablePtr IPivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(6630)) IUnknownPtr IPivotTables::_NewEnum ( );
__declspec(implementation_key(6631)) PivotTablePtr IPivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData );
__declspec(implementation_key(6632)) _ApplicationPtr IPivotFields::GetApplication ( );
__declspec(implementation_key(6633)) enum XlCreator IPivotFields::GetCreator ( );
__declspec(implementation_key(6634)) PivotTablePtr IPivotFields::GetParent ( );
__declspec(implementation_key(6635)) long IPivotFields::GetCount ( );
__declspec(implementation_key(6636)) IDispatchPtr IPivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(6637)) IUnknownPtr IPivotFields::_NewEnum ( );
__declspec(implementation_key(6638)) _ApplicationPtr ICalculatedFields::GetApplication ( );
__declspec(implementation_key(6639)) enum XlCreator ICalculatedFields::GetCreator ( );
__declspec(implementation_key(6640)) IDispatchPtr ICalculatedFields::GetParent ( );
__declspec(implementation_key(6641)) long ICalculatedFields::GetCount ( );
__declspec(implementation_key(6642)) PivotFieldPtr ICalculatedFields::Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(6643)) PivotFieldPtr ICalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(6644)) PivotFieldPtr ICalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(6645)) IUnknownPtr ICalculatedFields::_NewEnum ( );
__declspec(implementation_key(6646)) _ApplicationPtr IPivotItem::GetApplication ( );
__declspec(implementation_key(6647)) enum XlCreator IPivotItem::GetCreator ( );
__declspec(implementation_key(6648)) PivotFieldPtr IPivotItem::GetParent ( );
__declspec(implementation_key(6649)) _variant_t IPivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(6650)) RangePtr IPivotItem::GetDataRange ( );
__declspec(implementation_key(6651)) _bstr_t IPivotItem::Get_Default ( );
__declspec(implementation_key(6652)) void IPivotItem::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(6653)) RangePtr IPivotItem::GetLabelRange ( );
__declspec(implementation_key(6654)) _bstr_t IPivotItem::GetName ( );
__declspec(implementation_key(6655)) void IPivotItem::PutName ( _bstr_t RHS );
__declspec(implementation_key(6656)) PivotItemPtr IPivotItem::GetParentItem ( );
__declspec(implementation_key(6657)) VARIANT_BOOL IPivotItem::GetParentShowDetail ( );
__declspec(implementation_key(6658)) long IPivotItem::GetPosition ( );
__declspec(implementation_key(6659)) void IPivotItem::PutPosition ( long RHS );
__declspec(implementation_key(6660)) VARIANT_BOOL IPivotItem::GetShowDetail ( );
__declspec(implementation_key(6661)) void IPivotItem::PutShowDetail ( VARIANT_BOOL RHS );
__declspec(implementation_key(6662)) _variant_t IPivotItem::GetSourceName ( );
__declspec(implementation_key(6663)) _bstr_t IPivotItem::GetValue ( );
__declspec(implementation_key(6664)) void IPivotItem::PutValue ( _bstr_t RHS );
__declspec(implementation_key(6665)) VARIANT_BOOL IPivotItem::GetVisible ( );
__declspec(implementation_key(6666)) void IPivotItem::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6667)) HRESULT IPivotItem::Delete ( );
__declspec(implementation_key(6668)) VARIANT_BOOL IPivotItem::GetIsCalculated ( );
__declspec(implementation_key(6669)) long IPivotItem::GetRecordCount ( );
__declspec(implementation_key(6670)) _bstr_t IPivotItem::GetFormula ( );
__declspec(implementation_key(6671)) void IPivotItem::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(6672)) _bstr_t IPivotItem::GetCaption ( );
__declspec(implementation_key(6673)) void IPivotItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6674)) VARIANT_BOOL IPivotItem::GetDrilledDown ( );
__declspec(implementation_key(6675)) void IPivotItem::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(6676)) _ApplicationPtr IPivotItems::GetApplication ( );
__declspec(implementation_key(6677)) enum XlCreator IPivotItems::GetCreator ( );
__declspec(implementation_key(6678)) PivotFieldPtr IPivotItems::GetParent ( );
__declspec(implementation_key(6679)) HRESULT IPivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(6680)) long IPivotItems::GetCount ( );
__declspec(implementation_key(6681)) IDispatchPtr IPivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(6682)) IUnknownPtr IPivotItems::_NewEnum ( );
__declspec(implementation_key(6683)) _ApplicationPtr ICalculatedItems::GetApplication ( );
__declspec(implementation_key(6684)) enum XlCreator ICalculatedItems::GetCreator ( );
__declspec(implementation_key(6685)) IDispatchPtr ICalculatedItems::GetParent ( );
__declspec(implementation_key(6686)) long ICalculatedItems::GetCount ( );
__declspec(implementation_key(6687)) PivotItemPtr ICalculatedItems::Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(6688)) PivotItemPtr ICalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(6689)) PivotItemPtr ICalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(6690)) IUnknownPtr ICalculatedItems::_NewEnum ( );
__declspec(implementation_key(6691)) _ApplicationPtr ICharacters::GetApplication ( );
__declspec(implementation_key(6692)) enum XlCreator ICharacters::GetCreator ( );
__declspec(implementation_key(6693)) IDispatchPtr ICharacters::GetParent ( );
__declspec(implementation_key(6694)) _bstr_t ICharacters::GetCaption ( );
__declspec(implementation_key(6695)) void ICharacters::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6696)) long ICharacters::GetCount ( );
__declspec(implementation_key(6697)) _variant_t ICharacters::Delete ( );
__declspec(implementation_key(6698)) FontPtr ICharacters::GetFont ( );
__declspec(implementation_key(6699)) _variant_t ICharacters::Insert ( _bstr_t String );
__declspec(implementation_key(6700)) _bstr_t ICharacters::GetText ( );
__declspec(implementation_key(6701)) void ICharacters::PutText ( _bstr_t RHS );
__declspec(implementation_key(6702)) _bstr_t ICharacters::GetPhoneticCharacters ( );
__declspec(implementation_key(6703)) void ICharacters::PutPhoneticCharacters ( _bstr_t RHS );
__declspec(implementation_key(6704)) _ApplicationPtr IDialogs::GetApplication ( );
__declspec(implementation_key(6705)) enum XlCreator IDialogs::GetCreator ( );
__declspec(implementation_key(6706)) IDispatchPtr IDialogs::GetParent ( );
__declspec(implementation_key(6707)) long IDialogs::GetCount ( );
__declspec(implementation_key(6708)) DialogPtr IDialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(6709)) DialogPtr IDialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(6710)) IUnknownPtr IDialogs::Get_NewEnum ( );
__declspec(implementation_key(6711)) _ApplicationPtr IDialog::GetApplication ( );
__declspec(implementation_key(6712)) enum XlCreator IDialog::GetCreator ( );
__declspec(implementation_key(6713)) IDispatchPtr IDialog::GetParent ( );
__declspec(implementation_key(6714)) VARIANT_BOOL IDialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6715)) _ApplicationPtr ISoundNote::GetApplication ( );
__declspec(implementation_key(6716)) enum XlCreator ISoundNote::GetCreator ( );
__declspec(implementation_key(6717)) IDispatchPtr ISoundNote::GetParent ( );
__declspec(implementation_key(6718)) _variant_t ISoundNote::Delete ( );
__declspec(implementation_key(6719)) _variant_t ISoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(6720)) _variant_t ISoundNote::Play ( );
__declspec(implementation_key(6721)) _variant_t ISoundNote::Record ( );
__declspec(implementation_key(6722)) _ApplicationPtr IButton::GetApplication ( );
__declspec(implementation_key(6723)) enum XlCreator IButton::GetCreator ( );
__declspec(implementation_key(6724)) IDispatchPtr IButton::GetParent ( );
__declspec(implementation_key(6725)) RangePtr IButton::GetBottomRightCell ( );
__declspec(implementation_key(6726)) _variant_t IButton::BringToFront ( );
__declspec(implementation_key(6727)) _variant_t IButton::Copy ( );
__declspec(implementation_key(6728)) _variant_t IButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6729)) _variant_t IButton::Cut ( );
__declspec(implementation_key(6730)) _variant_t IButton::Delete ( );
__declspec(implementation_key(6731)) IDispatchPtr IButton::Duplicate ( );
__declspec(implementation_key(6732)) VARIANT_BOOL IButton::GetEnabled ( );
__declspec(implementation_key(6733)) void IButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6734)) double IButton::GetHeight ( );
__declspec(implementation_key(6735)) void IButton::PutHeight ( double RHS );
__declspec(implementation_key(6736)) long IButton::GetIndex ( );
__declspec(implementation_key(6737)) double IButton::GetLeft ( );
__declspec(implementation_key(6738)) void IButton::PutLeft ( double RHS );
__declspec(implementation_key(6739)) VARIANT_BOOL IButton::GetLocked ( );
__declspec(implementation_key(6740)) void IButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6741)) _bstr_t IButton::GetName ( );
__declspec(implementation_key(6742)) void IButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(6743)) _bstr_t IButton::GetOnAction ( );
__declspec(implementation_key(6744)) void IButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6745)) _variant_t IButton::GetPlacement ( );
__declspec(implementation_key(6746)) void IButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(6747)) VARIANT_BOOL IButton::GetPrintObject ( );
__declspec(implementation_key(6748)) void IButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6749)) _variant_t IButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(6750)) _variant_t IButton::SendToBack ( );
__declspec(implementation_key(6751)) double IButton::GetTop ( );
__declspec(implementation_key(6752)) void IButton::PutTop ( double RHS );
__declspec(implementation_key(6753)) RangePtr IButton::GetTopLeftCell ( );
__declspec(implementation_key(6754)) VARIANT_BOOL IButton::GetVisible ( );
__declspec(implementation_key(6755)) void IButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6756)) double IButton::GetWidth ( );
__declspec(implementation_key(6757)) void IButton::PutWidth ( double RHS );
__declspec(implementation_key(6758)) long IButton::GetZOrder ( );
__declspec(implementation_key(6759)) ShapeRangePtr IButton::GetShapeRange ( );
__declspec(implementation_key(6760)) VARIANT_BOOL IButton::GetAddIndent ( );
__declspec(implementation_key(6761)) void IButton::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(6762)) _variant_t IButton::GetAutoScaleFont ( );
__declspec(implementation_key(6763)) void IButton::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6764)) VARIANT_BOOL IButton::GetAutoSize ( );
__declspec(implementation_key(6765)) void IButton::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6766)) _bstr_t IButton::GetCaption ( );
__declspec(implementation_key(6767)) void IButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6768)) CharactersPtr IButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6769)) _variant_t IButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(6770)) FontPtr IButton::GetFont ( );
__declspec(implementation_key(6771)) _bstr_t IButton::GetFormula ( );
__declspec(implementation_key(6772)) void IButton::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(6773)) _variant_t IButton::GetHorizontalAlignment ( );
__declspec(implementation_key(6774)) void IButton::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6775)) VARIANT_BOOL IButton::GetLockedText ( );
__declspec(implementation_key(6776)) void IButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6777)) _variant_t IButton::GetOrientation ( );
__declspec(implementation_key(6778)) void IButton::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6779)) _bstr_t IButton::GetText ( );
__declspec(implementation_key(6780)) void IButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(6781)) _variant_t IButton::GetVerticalAlignment ( );
__declspec(implementation_key(6782)) void IButton::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6783)) long IButton::GetReadingOrder ( );
__declspec(implementation_key(6784)) void IButton::PutReadingOrder ( long RHS );
__declspec(implementation_key(6785)) _variant_t IButton::GetAccelerator ( );
__declspec(implementation_key(6786)) void IButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6787)) VARIANT_BOOL IButton::GetCancelButton ( );
__declspec(implementation_key(6788)) void IButton::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6789)) VARIANT_BOOL IButton::GetDefaultButton ( );
__declspec(implementation_key(6790)) void IButton::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6791)) VARIANT_BOOL IButton::GetDismissButton ( );
__declspec(implementation_key(6792)) void IButton::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6793)) VARIANT_BOOL IButton::GetHelpButton ( );
__declspec(implementation_key(6794)) void IButton::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6795)) _variant_t IButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(6796)) void IButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6797)) _ApplicationPtr IButtons::GetApplication ( );
__declspec(implementation_key(6798)) enum XlCreator IButtons::GetCreator ( );
__declspec(implementation_key(6799)) IDispatchPtr IButtons::GetParent ( );
__declspec(implementation_key(6800)) _variant_t IButtons::BringToFront ( );
__declspec(implementation_key(6801)) _variant_t IButtons::Copy ( );
__declspec(implementation_key(6802)) _variant_t IButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6803)) _variant_t IButtons::Cut ( );
__declspec(implementation_key(6804)) _variant_t IButtons::Delete ( );
__declspec(implementation_key(6805)) IDispatchPtr IButtons::Duplicate ( );
__declspec(implementation_key(6806)) VARIANT_BOOL IButtons::GetEnabled ( );
__declspec(implementation_key(6807)) void IButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6808)) double IButtons::GetHeight ( );
__declspec(implementation_key(6809)) void IButtons::PutHeight ( double RHS );
__declspec(implementation_key(6810)) double IButtons::GetLeft ( );
__declspec(implementation_key(6811)) void IButtons::PutLeft ( double RHS );
__declspec(implementation_key(6812)) VARIANT_BOOL IButtons::GetLocked ( );
__declspec(implementation_key(6813)) void IButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6814)) _bstr_t IButtons::GetOnAction ( );
__declspec(implementation_key(6815)) void IButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6816)) _variant_t IButtons::GetPlacement ( );
__declspec(implementation_key(6817)) void IButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(6818)) VARIANT_BOOL IButtons::GetPrintObject ( );
__declspec(implementation_key(6819)) void IButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6820)) _variant_t IButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(6821)) _variant_t IButtons::SendToBack ( );
__declspec(implementation_key(6822)) double IButtons::GetTop ( );
__declspec(implementation_key(6823)) void IButtons::PutTop ( double RHS );
__declspec(implementation_key(6824)) VARIANT_BOOL IButtons::GetVisible ( );
__declspec(implementation_key(6825)) void IButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6826)) double IButtons::GetWidth ( );
__declspec(implementation_key(6827)) void IButtons::PutWidth ( double RHS );
__declspec(implementation_key(6828)) long IButtons::GetZOrder ( );
__declspec(implementation_key(6829)) ShapeRangePtr IButtons::GetShapeRange ( );
__declspec(implementation_key(6830)) VARIANT_BOOL IButtons::GetAddIndent ( );
__declspec(implementation_key(6831)) void IButtons::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(6832)) _variant_t IButtons::GetAutoScaleFont ( );
__declspec(implementation_key(6833)) void IButtons::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(6834)) VARIANT_BOOL IButtons::GetAutoSize ( );
__declspec(implementation_key(6835)) void IButtons::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(6836)) _bstr_t IButtons::GetCaption ( );
__declspec(implementation_key(6837)) void IButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6838)) CharactersPtr IButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6839)) _variant_t IButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(6840)) FontPtr IButtons::GetFont ( );
__declspec(implementation_key(6841)) _bstr_t IButtons::GetFormula ( );
__declspec(implementation_key(6842)) void IButtons::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(6843)) _variant_t IButtons::GetHorizontalAlignment ( );
__declspec(implementation_key(6844)) void IButtons::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6845)) VARIANT_BOOL IButtons::GetLockedText ( );
__declspec(implementation_key(6846)) void IButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6847)) _variant_t IButtons::GetOrientation ( );
__declspec(implementation_key(6848)) void IButtons::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(6849)) _bstr_t IButtons::GetText ( );
__declspec(implementation_key(6850)) void IButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(6851)) _variant_t IButtons::GetVerticalAlignment ( );
__declspec(implementation_key(6852)) void IButtons::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(6853)) long IButtons::GetReadingOrder ( );
__declspec(implementation_key(6854)) void IButtons::PutReadingOrder ( long RHS );
__declspec(implementation_key(6855)) _variant_t IButtons::GetAccelerator ( );
__declspec(implementation_key(6856)) void IButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6857)) VARIANT_BOOL IButtons::GetCancelButton ( );
__declspec(implementation_key(6858)) void IButtons::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6859)) VARIANT_BOOL IButtons::GetDefaultButton ( );
__declspec(implementation_key(6860)) void IButtons::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6861)) VARIANT_BOOL IButtons::GetDismissButton ( );
__declspec(implementation_key(6862)) void IButtons::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6863)) VARIANT_BOOL IButtons::GetHelpButton ( );
__declspec(implementation_key(6864)) void IButtons::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(6865)) _variant_t IButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(6866)) void IButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6867)) ButtonPtr IButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(6868)) long IButtons::GetCount ( );
__declspec(implementation_key(6869)) GroupObjectPtr IButtons::Group ( );
__declspec(implementation_key(6870)) IDispatchPtr IButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(6871)) IUnknownPtr IButtons::_NewEnum ( );
__declspec(implementation_key(6872)) _ApplicationPtr ICheckBox::GetApplication ( );
__declspec(implementation_key(6873)) enum XlCreator ICheckBox::GetCreator ( );
__declspec(implementation_key(6874)) IDispatchPtr ICheckBox::GetParent ( );
__declspec(implementation_key(6875)) RangePtr ICheckBox::GetBottomRightCell ( );
__declspec(implementation_key(6876)) _variant_t ICheckBox::BringToFront ( );
__declspec(implementation_key(6877)) _variant_t ICheckBox::Copy ( );
__declspec(implementation_key(6878)) _variant_t ICheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6879)) _variant_t ICheckBox::Cut ( );
__declspec(implementation_key(6880)) _variant_t ICheckBox::Delete ( );
__declspec(implementation_key(6881)) IDispatchPtr ICheckBox::Duplicate ( );
__declspec(implementation_key(6882)) VARIANT_BOOL ICheckBox::GetEnabled ( );
__declspec(implementation_key(6883)) void ICheckBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6884)) double ICheckBox::GetHeight ( );
__declspec(implementation_key(6885)) void ICheckBox::PutHeight ( double RHS );
__declspec(implementation_key(6886)) long ICheckBox::GetIndex ( );
__declspec(implementation_key(6887)) double ICheckBox::GetLeft ( );
__declspec(implementation_key(6888)) void ICheckBox::PutLeft ( double RHS );
__declspec(implementation_key(6889)) VARIANT_BOOL ICheckBox::GetLocked ( );
__declspec(implementation_key(6890)) void ICheckBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6891)) _bstr_t ICheckBox::GetName ( );
__declspec(implementation_key(6892)) void ICheckBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(6893)) _bstr_t ICheckBox::GetOnAction ( );
__declspec(implementation_key(6894)) void ICheckBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6895)) _variant_t ICheckBox::GetPlacement ( );
__declspec(implementation_key(6896)) void ICheckBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(6897)) VARIANT_BOOL ICheckBox::GetPrintObject ( );
__declspec(implementation_key(6898)) void ICheckBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6899)) _variant_t ICheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(6900)) _variant_t ICheckBox::SendToBack ( );
__declspec(implementation_key(6901)) double ICheckBox::GetTop ( );
__declspec(implementation_key(6902)) void ICheckBox::PutTop ( double RHS );
__declspec(implementation_key(6903)) RangePtr ICheckBox::GetTopLeftCell ( );
__declspec(implementation_key(6904)) VARIANT_BOOL ICheckBox::GetVisible ( );
__declspec(implementation_key(6905)) void ICheckBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6906)) double ICheckBox::GetWidth ( );
__declspec(implementation_key(6907)) void ICheckBox::PutWidth ( double RHS );
__declspec(implementation_key(6908)) long ICheckBox::GetZOrder ( );
__declspec(implementation_key(6909)) ShapeRangePtr ICheckBox::GetShapeRange ( );
__declspec(implementation_key(6910)) _bstr_t ICheckBox::GetCaption ( );
__declspec(implementation_key(6911)) void ICheckBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6912)) CharactersPtr ICheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6913)) _variant_t ICheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(6914)) VARIANT_BOOL ICheckBox::GetLockedText ( );
__declspec(implementation_key(6915)) void ICheckBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6916)) _bstr_t ICheckBox::GetText ( );
__declspec(implementation_key(6917)) void ICheckBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(6918)) _variant_t ICheckBox::GetAccelerator ( );
__declspec(implementation_key(6919)) void ICheckBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6920)) BorderPtr ICheckBox::GetBorder ( );
__declspec(implementation_key(6921)) long ICheckBox::Get_Default ( );
__declspec(implementation_key(6922)) void ICheckBox::Put_Default ( long RHS );
__declspec(implementation_key(6923)) VARIANT_BOOL ICheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(6924)) void ICheckBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(6925)) InteriorPtr ICheckBox::GetInterior ( );
__declspec(implementation_key(6926)) _bstr_t ICheckBox::GetLinkedCell ( );
__declspec(implementation_key(6927)) void ICheckBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(6928)) _variant_t ICheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(6929)) void ICheckBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6930)) _variant_t ICheckBox::GetValue ( );
__declspec(implementation_key(6931)) void ICheckBox::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(6932)) _ApplicationPtr ICheckBoxes::GetApplication ( );
__declspec(implementation_key(6933)) enum XlCreator ICheckBoxes::GetCreator ( );
__declspec(implementation_key(6934)) IDispatchPtr ICheckBoxes::GetParent ( );
__declspec(implementation_key(6935)) _variant_t ICheckBoxes::BringToFront ( );
__declspec(implementation_key(6936)) _variant_t ICheckBoxes::Copy ( );
__declspec(implementation_key(6937)) _variant_t ICheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6938)) _variant_t ICheckBoxes::Cut ( );
__declspec(implementation_key(6939)) _variant_t ICheckBoxes::Delete ( );
__declspec(implementation_key(6940)) IDispatchPtr ICheckBoxes::Duplicate ( );
__declspec(implementation_key(6941)) VARIANT_BOOL ICheckBoxes::GetEnabled ( );
__declspec(implementation_key(6942)) void ICheckBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(6943)) double ICheckBoxes::GetHeight ( );
__declspec(implementation_key(6944)) void ICheckBoxes::PutHeight ( double RHS );
__declspec(implementation_key(6945)) double ICheckBoxes::GetLeft ( );
__declspec(implementation_key(6946)) void ICheckBoxes::PutLeft ( double RHS );
__declspec(implementation_key(6947)) VARIANT_BOOL ICheckBoxes::GetLocked ( );
__declspec(implementation_key(6948)) void ICheckBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(6949)) _bstr_t ICheckBoxes::GetOnAction ( );
__declspec(implementation_key(6950)) void ICheckBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(6951)) _variant_t ICheckBoxes::GetPlacement ( );
__declspec(implementation_key(6952)) void ICheckBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(6953)) VARIANT_BOOL ICheckBoxes::GetPrintObject ( );
__declspec(implementation_key(6954)) void ICheckBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(6955)) _variant_t ICheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(6956)) _variant_t ICheckBoxes::SendToBack ( );
__declspec(implementation_key(6957)) double ICheckBoxes::GetTop ( );
__declspec(implementation_key(6958)) void ICheckBoxes::PutTop ( double RHS );
__declspec(implementation_key(6959)) VARIANT_BOOL ICheckBoxes::GetVisible ( );
__declspec(implementation_key(6960)) void ICheckBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(6961)) double ICheckBoxes::GetWidth ( );
__declspec(implementation_key(6962)) void ICheckBoxes::PutWidth ( double RHS );
__declspec(implementation_key(6963)) long ICheckBoxes::GetZOrder ( );
__declspec(implementation_key(6964)) ShapeRangePtr ICheckBoxes::GetShapeRange ( );
__declspec(implementation_key(6965)) _bstr_t ICheckBoxes::GetCaption ( );
__declspec(implementation_key(6966)) void ICheckBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(6967)) CharactersPtr ICheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6968)) _variant_t ICheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(6969)) VARIANT_BOOL ICheckBoxes::GetLockedText ( );
__declspec(implementation_key(6970)) void ICheckBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(6971)) _bstr_t ICheckBoxes::GetText ( );
__declspec(implementation_key(6972)) void ICheckBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(6973)) _variant_t ICheckBoxes::GetAccelerator ( );
__declspec(implementation_key(6974)) void ICheckBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6975)) BorderPtr ICheckBoxes::GetBorder ( );
__declspec(implementation_key(6976)) long ICheckBoxes::Get_Default ( );
__declspec(implementation_key(6977)) void ICheckBoxes::Put_Default ( long RHS );
__declspec(implementation_key(6978)) VARIANT_BOOL ICheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(6979)) void ICheckBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(6980)) InteriorPtr ICheckBoxes::GetInterior ( );
__declspec(implementation_key(6981)) _bstr_t ICheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(6982)) void ICheckBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(6983)) _variant_t ICheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(6984)) void ICheckBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(6985)) _variant_t ICheckBoxes::GetValue ( );
__declspec(implementation_key(6986)) void ICheckBoxes::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(6987)) CheckBoxPtr ICheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(6988)) long ICheckBoxes::GetCount ( );
__declspec(implementation_key(6989)) GroupObjectPtr ICheckBoxes::Group ( );
__declspec(implementation_key(6990)) IDispatchPtr ICheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(6991)) IUnknownPtr ICheckBoxes::_NewEnum ( );
__declspec(implementation_key(6992)) _ApplicationPtr IOptionButton::GetApplication ( );
__declspec(implementation_key(6993)) enum XlCreator IOptionButton::GetCreator ( );
__declspec(implementation_key(6994)) IDispatchPtr IOptionButton::GetParent ( );
__declspec(implementation_key(6995)) RangePtr IOptionButton::GetBottomRightCell ( );
__declspec(implementation_key(6996)) _variant_t IOptionButton::BringToFront ( );
__declspec(implementation_key(6997)) _variant_t IOptionButton::Copy ( );
__declspec(implementation_key(6998)) _variant_t IOptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(6999)) _variant_t IOptionButton::Cut ( );
__declspec(implementation_key(7000)) _variant_t IOptionButton::Delete ( );
__declspec(implementation_key(7001)) IDispatchPtr IOptionButton::Duplicate ( );
__declspec(implementation_key(7002)) VARIANT_BOOL IOptionButton::GetEnabled ( );
__declspec(implementation_key(7003)) void IOptionButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7004)) double IOptionButton::GetHeight ( );
__declspec(implementation_key(7005)) void IOptionButton::PutHeight ( double RHS );
__declspec(implementation_key(7006)) long IOptionButton::GetIndex ( );
__declspec(implementation_key(7007)) double IOptionButton::GetLeft ( );
__declspec(implementation_key(7008)) void IOptionButton::PutLeft ( double RHS );
__declspec(implementation_key(7009)) VARIANT_BOOL IOptionButton::GetLocked ( );
__declspec(implementation_key(7010)) void IOptionButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7011)) _bstr_t IOptionButton::GetName ( );
__declspec(implementation_key(7012)) void IOptionButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(7013)) _bstr_t IOptionButton::GetOnAction ( );
__declspec(implementation_key(7014)) void IOptionButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7015)) _variant_t IOptionButton::GetPlacement ( );
__declspec(implementation_key(7016)) void IOptionButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7017)) VARIANT_BOOL IOptionButton::GetPrintObject ( );
__declspec(implementation_key(7018)) void IOptionButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7019)) _variant_t IOptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(7020)) _variant_t IOptionButton::SendToBack ( );
__declspec(implementation_key(7021)) double IOptionButton::GetTop ( );
__declspec(implementation_key(7022)) void IOptionButton::PutTop ( double RHS );
__declspec(implementation_key(7023)) RangePtr IOptionButton::GetTopLeftCell ( );
__declspec(implementation_key(7024)) VARIANT_BOOL IOptionButton::GetVisible ( );
__declspec(implementation_key(7025)) void IOptionButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7026)) double IOptionButton::GetWidth ( );
__declspec(implementation_key(7027)) void IOptionButton::PutWidth ( double RHS );
__declspec(implementation_key(7028)) long IOptionButton::GetZOrder ( );
__declspec(implementation_key(7029)) ShapeRangePtr IOptionButton::GetShapeRange ( );
__declspec(implementation_key(7030)) _bstr_t IOptionButton::GetCaption ( );
__declspec(implementation_key(7031)) void IOptionButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7032)) CharactersPtr IOptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7033)) _variant_t IOptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7034)) VARIANT_BOOL IOptionButton::GetLockedText ( );
__declspec(implementation_key(7035)) void IOptionButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7036)) _bstr_t IOptionButton::GetText ( );
__declspec(implementation_key(7037)) void IOptionButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(7038)) _variant_t IOptionButton::GetAccelerator ( );
__declspec(implementation_key(7039)) void IOptionButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7040)) BorderPtr IOptionButton::GetBorder ( );
__declspec(implementation_key(7041)) long IOptionButton::Get_Default ( );
__declspec(implementation_key(7042)) void IOptionButton::Put_Default ( long RHS );
__declspec(implementation_key(7043)) VARIANT_BOOL IOptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(7044)) void IOptionButton::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7045)) InteriorPtr IOptionButton::GetInterior ( );
__declspec(implementation_key(7046)) _bstr_t IOptionButton::GetLinkedCell ( );
__declspec(implementation_key(7047)) void IOptionButton::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7048)) _variant_t IOptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(7049)) void IOptionButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7050)) _variant_t IOptionButton::GetValue ( );
__declspec(implementation_key(7051)) void IOptionButton::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7052)) GroupBoxPtr IOptionButton::GetGroupBox ( );
__declspec(implementation_key(7053)) _ApplicationPtr IOptionButtons::GetApplication ( );
__declspec(implementation_key(7054)) enum XlCreator IOptionButtons::GetCreator ( );
__declspec(implementation_key(7055)) IDispatchPtr IOptionButtons::GetParent ( );
__declspec(implementation_key(7056)) _variant_t IOptionButtons::BringToFront ( );
__declspec(implementation_key(7057)) _variant_t IOptionButtons::Copy ( );
__declspec(implementation_key(7058)) _variant_t IOptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7059)) _variant_t IOptionButtons::Cut ( );
__declspec(implementation_key(7060)) _variant_t IOptionButtons::Delete ( );
__declspec(implementation_key(7061)) IDispatchPtr IOptionButtons::Duplicate ( );
__declspec(implementation_key(7062)) VARIANT_BOOL IOptionButtons::GetEnabled ( );
__declspec(implementation_key(7063)) void IOptionButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7064)) double IOptionButtons::GetHeight ( );
__declspec(implementation_key(7065)) void IOptionButtons::PutHeight ( double RHS );
__declspec(implementation_key(7066)) double IOptionButtons::GetLeft ( );
__declspec(implementation_key(7067)) void IOptionButtons::PutLeft ( double RHS );
__declspec(implementation_key(7068)) VARIANT_BOOL IOptionButtons::GetLocked ( );
__declspec(implementation_key(7069)) void IOptionButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7070)) _bstr_t IOptionButtons::GetOnAction ( );
__declspec(implementation_key(7071)) void IOptionButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7072)) _variant_t IOptionButtons::GetPlacement ( );
__declspec(implementation_key(7073)) void IOptionButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7074)) VARIANT_BOOL IOptionButtons::GetPrintObject ( );
__declspec(implementation_key(7075)) void IOptionButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7076)) _variant_t IOptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(7077)) _variant_t IOptionButtons::SendToBack ( );
__declspec(implementation_key(7078)) double IOptionButtons::GetTop ( );
__declspec(implementation_key(7079)) void IOptionButtons::PutTop ( double RHS );
__declspec(implementation_key(7080)) VARIANT_BOOL IOptionButtons::GetVisible ( );
__declspec(implementation_key(7081)) void IOptionButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7082)) double IOptionButtons::GetWidth ( );
__declspec(implementation_key(7083)) void IOptionButtons::PutWidth ( double RHS );
__declspec(implementation_key(7084)) long IOptionButtons::GetZOrder ( );
__declspec(implementation_key(7085)) ShapeRangePtr IOptionButtons::GetShapeRange ( );
__declspec(implementation_key(7086)) _bstr_t IOptionButtons::GetCaption ( );
__declspec(implementation_key(7087)) void IOptionButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7088)) CharactersPtr IOptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7089)) _variant_t IOptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7090)) VARIANT_BOOL IOptionButtons::GetLockedText ( );
__declspec(implementation_key(7091)) void IOptionButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7092)) _bstr_t IOptionButtons::GetText ( );
__declspec(implementation_key(7093)) void IOptionButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(7094)) _variant_t IOptionButtons::GetAccelerator ( );
__declspec(implementation_key(7095)) void IOptionButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7096)) BorderPtr IOptionButtons::GetBorder ( );
__declspec(implementation_key(7097)) long IOptionButtons::Get_Default ( );
__declspec(implementation_key(7098)) void IOptionButtons::Put_Default ( long RHS );
__declspec(implementation_key(7099)) VARIANT_BOOL IOptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(7100)) void IOptionButtons::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7101)) InteriorPtr IOptionButtons::GetInterior ( );
__declspec(implementation_key(7102)) _bstr_t IOptionButtons::GetLinkedCell ( );
__declspec(implementation_key(7103)) void IOptionButtons::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7104)) _variant_t IOptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(7105)) void IOptionButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7106)) _variant_t IOptionButtons::GetValue ( );
__declspec(implementation_key(7107)) void IOptionButtons::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7108)) GroupBoxPtr IOptionButtons::GetGroupBox ( );
__declspec(implementation_key(7109)) OptionButtonPtr IOptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7110)) long IOptionButtons::GetCount ( );
__declspec(implementation_key(7111)) GroupObjectPtr IOptionButtons::Group ( );
__declspec(implementation_key(7112)) IDispatchPtr IOptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(7113)) IUnknownPtr IOptionButtons::_NewEnum ( );
__declspec(implementation_key(7114)) _ApplicationPtr IEditBox::GetApplication ( );
__declspec(implementation_key(7115)) enum XlCreator IEditBox::GetCreator ( );
__declspec(implementation_key(7116)) IDispatchPtr IEditBox::GetParent ( );
__declspec(implementation_key(7117)) RangePtr IEditBox::GetBottomRightCell ( );
__declspec(implementation_key(7118)) _variant_t IEditBox::BringToFront ( );
__declspec(implementation_key(7119)) _variant_t IEditBox::Copy ( );
__declspec(implementation_key(7120)) _variant_t IEditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7121)) _variant_t IEditBox::Cut ( );
__declspec(implementation_key(7122)) _variant_t IEditBox::Delete ( );
__declspec(implementation_key(7123)) IDispatchPtr IEditBox::Duplicate ( );
__declspec(implementation_key(7124)) VARIANT_BOOL IEditBox::GetEnabled ( );
__declspec(implementation_key(7125)) void IEditBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7126)) double IEditBox::GetHeight ( );
__declspec(implementation_key(7127)) void IEditBox::PutHeight ( double RHS );
__declspec(implementation_key(7128)) long IEditBox::GetIndex ( );
__declspec(implementation_key(7129)) double IEditBox::GetLeft ( );
__declspec(implementation_key(7130)) void IEditBox::PutLeft ( double RHS );
__declspec(implementation_key(7131)) VARIANT_BOOL IEditBox::GetLocked ( );
__declspec(implementation_key(7132)) void IEditBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7133)) _bstr_t IEditBox::GetName ( );
__declspec(implementation_key(7134)) void IEditBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(7135)) _bstr_t IEditBox::GetOnAction ( );
__declspec(implementation_key(7136)) void IEditBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7137)) _variant_t IEditBox::GetPlacement ( );
__declspec(implementation_key(7138)) void IEditBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7139)) VARIANT_BOOL IEditBox::GetPrintObject ( );
__declspec(implementation_key(7140)) void IEditBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7141)) _variant_t IEditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(7142)) _variant_t IEditBox::SendToBack ( );
__declspec(implementation_key(7143)) double IEditBox::GetTop ( );
__declspec(implementation_key(7144)) void IEditBox::PutTop ( double RHS );
__declspec(implementation_key(7145)) RangePtr IEditBox::GetTopLeftCell ( );
__declspec(implementation_key(7146)) VARIANT_BOOL IEditBox::GetVisible ( );
__declspec(implementation_key(7147)) void IEditBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7148)) double IEditBox::GetWidth ( );
__declspec(implementation_key(7149)) void IEditBox::PutWidth ( double RHS );
__declspec(implementation_key(7150)) long IEditBox::GetZOrder ( );
__declspec(implementation_key(7151)) ShapeRangePtr IEditBox::GetShapeRange ( );
__declspec(implementation_key(7152)) _bstr_t IEditBox::GetCaption ( );
__declspec(implementation_key(7153)) void IEditBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7154)) CharactersPtr IEditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7155)) _variant_t IEditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7156)) VARIANT_BOOL IEditBox::GetLockedText ( );
__declspec(implementation_key(7157)) void IEditBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7158)) _bstr_t IEditBox::GetText ( );
__declspec(implementation_key(7159)) void IEditBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(7160)) VARIANT_BOOL IEditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(7161)) void IEditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(7162)) long IEditBox::GetInputType ( );
__declspec(implementation_key(7163)) void IEditBox::PutInputType ( long RHS );
__declspec(implementation_key(7164)) _bstr_t IEditBox::GetLinkedObject ( );
__declspec(implementation_key(7165)) VARIANT_BOOL IEditBox::GetMultiLine ( );
__declspec(implementation_key(7166)) void IEditBox::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(7167)) VARIANT_BOOL IEditBox::GetPasswordEdit ( );
__declspec(implementation_key(7168)) void IEditBox::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(7169)) _ApplicationPtr IEditBoxes::GetApplication ( );
__declspec(implementation_key(7170)) enum XlCreator IEditBoxes::GetCreator ( );
__declspec(implementation_key(7171)) IDispatchPtr IEditBoxes::GetParent ( );
__declspec(implementation_key(7172)) _variant_t IEditBoxes::BringToFront ( );
__declspec(implementation_key(7173)) _variant_t IEditBoxes::Copy ( );
__declspec(implementation_key(7174)) _variant_t IEditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7175)) _variant_t IEditBoxes::Cut ( );
__declspec(implementation_key(7176)) _variant_t IEditBoxes::Delete ( );
__declspec(implementation_key(7177)) IDispatchPtr IEditBoxes::Duplicate ( );
__declspec(implementation_key(7178)) VARIANT_BOOL IEditBoxes::GetEnabled ( );
__declspec(implementation_key(7179)) void IEditBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7180)) double IEditBoxes::GetHeight ( );
__declspec(implementation_key(7181)) void IEditBoxes::PutHeight ( double RHS );
__declspec(implementation_key(7182)) double IEditBoxes::GetLeft ( );
__declspec(implementation_key(7183)) void IEditBoxes::PutLeft ( double RHS );
__declspec(implementation_key(7184)) VARIANT_BOOL IEditBoxes::GetLocked ( );
__declspec(implementation_key(7185)) void IEditBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7186)) _bstr_t IEditBoxes::GetOnAction ( );
__declspec(implementation_key(7187)) void IEditBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7188)) _variant_t IEditBoxes::GetPlacement ( );
__declspec(implementation_key(7189)) void IEditBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7190)) VARIANT_BOOL IEditBoxes::GetPrintObject ( );
__declspec(implementation_key(7191)) void IEditBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7192)) _variant_t IEditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(7193)) _variant_t IEditBoxes::SendToBack ( );
__declspec(implementation_key(7194)) double IEditBoxes::GetTop ( );
__declspec(implementation_key(7195)) void IEditBoxes::PutTop ( double RHS );
__declspec(implementation_key(7196)) VARIANT_BOOL IEditBoxes::GetVisible ( );
__declspec(implementation_key(7197)) void IEditBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7198)) double IEditBoxes::GetWidth ( );
__declspec(implementation_key(7199)) void IEditBoxes::PutWidth ( double RHS );
__declspec(implementation_key(7200)) long IEditBoxes::GetZOrder ( );
__declspec(implementation_key(7201)) ShapeRangePtr IEditBoxes::GetShapeRange ( );
__declspec(implementation_key(7202)) _bstr_t IEditBoxes::GetCaption ( );
__declspec(implementation_key(7203)) void IEditBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7204)) CharactersPtr IEditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7205)) _variant_t IEditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7206)) VARIANT_BOOL IEditBoxes::GetLockedText ( );
__declspec(implementation_key(7207)) void IEditBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7208)) _bstr_t IEditBoxes::GetText ( );
__declspec(implementation_key(7209)) void IEditBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(7210)) VARIANT_BOOL IEditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(7211)) void IEditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(7212)) long IEditBoxes::GetInputType ( );
__declspec(implementation_key(7213)) void IEditBoxes::PutInputType ( long RHS );
__declspec(implementation_key(7214)) VARIANT_BOOL IEditBoxes::GetMultiLine ( );
__declspec(implementation_key(7215)) void IEditBoxes::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(7216)) VARIANT_BOOL IEditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(7217)) void IEditBoxes::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(7218)) EditBoxPtr IEditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7219)) long IEditBoxes::GetCount ( );
__declspec(implementation_key(7220)) GroupObjectPtr IEditBoxes::Group ( );
__declspec(implementation_key(7221)) _variant_t IEditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(7222)) IUnknownPtr IEditBoxes::_NewEnum ( );
__declspec(implementation_key(7223)) _ApplicationPtr IScrollBar::GetApplication ( );
__declspec(implementation_key(7224)) enum XlCreator IScrollBar::GetCreator ( );
__declspec(implementation_key(7225)) IDispatchPtr IScrollBar::GetParent ( );
__declspec(implementation_key(7226)) RangePtr IScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(7227)) _variant_t IScrollBar::BringToFront ( );
__declspec(implementation_key(7228)) _variant_t IScrollBar::Copy ( );
__declspec(implementation_key(7229)) _variant_t IScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7230)) _variant_t IScrollBar::Cut ( );
__declspec(implementation_key(7231)) _variant_t IScrollBar::Delete ( );
__declspec(implementation_key(7232)) IDispatchPtr IScrollBar::Duplicate ( );
__declspec(implementation_key(7233)) VARIANT_BOOL IScrollBar::GetEnabled ( );
__declspec(implementation_key(7234)) void IScrollBar::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7235)) double IScrollBar::GetHeight ( );
__declspec(implementation_key(7236)) void IScrollBar::PutHeight ( double RHS );
__declspec(implementation_key(7237)) long IScrollBar::GetIndex ( );
__declspec(implementation_key(7238)) double IScrollBar::GetLeft ( );
__declspec(implementation_key(7239)) void IScrollBar::PutLeft ( double RHS );
__declspec(implementation_key(7240)) VARIANT_BOOL IScrollBar::GetLocked ( );
__declspec(implementation_key(7241)) void IScrollBar::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7242)) _bstr_t IScrollBar::GetName ( );
__declspec(implementation_key(7243)) void IScrollBar::PutName ( _bstr_t RHS );
__declspec(implementation_key(7244)) _bstr_t IScrollBar::GetOnAction ( );
__declspec(implementation_key(7245)) void IScrollBar::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7246)) _variant_t IScrollBar::GetPlacement ( );
__declspec(implementation_key(7247)) void IScrollBar::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7248)) VARIANT_BOOL IScrollBar::GetPrintObject ( );
__declspec(implementation_key(7249)) void IScrollBar::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7250)) _variant_t IScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(7251)) _variant_t IScrollBar::SendToBack ( );
__declspec(implementation_key(7252)) double IScrollBar::GetTop ( );
__declspec(implementation_key(7253)) void IScrollBar::PutTop ( double RHS );
__declspec(implementation_key(7254)) RangePtr IScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(7255)) VARIANT_BOOL IScrollBar::GetVisible ( );
__declspec(implementation_key(7256)) void IScrollBar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7257)) double IScrollBar::GetWidth ( );
__declspec(implementation_key(7258)) void IScrollBar::PutWidth ( double RHS );
__declspec(implementation_key(7259)) long IScrollBar::GetZOrder ( );
__declspec(implementation_key(7260)) ShapeRangePtr IScrollBar::GetShapeRange ( );
__declspec(implementation_key(7261)) long IScrollBar::Get_Default ( );
__declspec(implementation_key(7262)) void IScrollBar::Put_Default ( long RHS );
__declspec(implementation_key(7263)) VARIANT_BOOL IScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(7264)) void IScrollBar::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7265)) _bstr_t IScrollBar::GetLinkedCell ( );
__declspec(implementation_key(7266)) void IScrollBar::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7267)) long IScrollBar::GetMax ( );
__declspec(implementation_key(7268)) void IScrollBar::PutMax ( long RHS );
__declspec(implementation_key(7269)) long IScrollBar::GetMin ( );
__declspec(implementation_key(7270)) void IScrollBar::PutMin ( long RHS );
__declspec(implementation_key(7271)) long IScrollBar::GetSmallChange ( );
__declspec(implementation_key(7272)) void IScrollBar::PutSmallChange ( long RHS );
__declspec(implementation_key(7273)) long IScrollBar::GetValue ( );
__declspec(implementation_key(7274)) void IScrollBar::PutValue ( long RHS );
__declspec(implementation_key(7275)) long IScrollBar::GetLargeChange ( );
__declspec(implementation_key(7276)) void IScrollBar::PutLargeChange ( long RHS );
__declspec(implementation_key(7277)) _ApplicationPtr IScrollBars::GetApplication ( );
__declspec(implementation_key(7278)) enum XlCreator IScrollBars::GetCreator ( );
__declspec(implementation_key(7279)) IDispatchPtr IScrollBars::GetParent ( );
__declspec(implementation_key(7280)) _variant_t IScrollBars::BringToFront ( );
__declspec(implementation_key(7281)) _variant_t IScrollBars::Copy ( );
__declspec(implementation_key(7282)) _variant_t IScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7283)) _variant_t IScrollBars::Cut ( );
__declspec(implementation_key(7284)) _variant_t IScrollBars::Delete ( );
__declspec(implementation_key(7285)) IDispatchPtr IScrollBars::Duplicate ( );
__declspec(implementation_key(7286)) VARIANT_BOOL IScrollBars::GetEnabled ( );
__declspec(implementation_key(7287)) void IScrollBars::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7288)) double IScrollBars::GetHeight ( );
__declspec(implementation_key(7289)) void IScrollBars::PutHeight ( double RHS );
__declspec(implementation_key(7290)) double IScrollBars::GetLeft ( );
__declspec(implementation_key(7291)) void IScrollBars::PutLeft ( double RHS );
__declspec(implementation_key(7292)) VARIANT_BOOL IScrollBars::GetLocked ( );
__declspec(implementation_key(7293)) void IScrollBars::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7294)) _bstr_t IScrollBars::GetOnAction ( );
__declspec(implementation_key(7295)) void IScrollBars::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7296)) _variant_t IScrollBars::GetPlacement ( );
__declspec(implementation_key(7297)) void IScrollBars::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7298)) VARIANT_BOOL IScrollBars::GetPrintObject ( );
__declspec(implementation_key(7299)) void IScrollBars::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7300)) _variant_t IScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(7301)) _variant_t IScrollBars::SendToBack ( );
__declspec(implementation_key(7302)) double IScrollBars::GetTop ( );
__declspec(implementation_key(7303)) void IScrollBars::PutTop ( double RHS );
__declspec(implementation_key(7304)) VARIANT_BOOL IScrollBars::GetVisible ( );
__declspec(implementation_key(7305)) void IScrollBars::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7306)) double IScrollBars::GetWidth ( );
__declspec(implementation_key(7307)) void IScrollBars::PutWidth ( double RHS );
__declspec(implementation_key(7308)) long IScrollBars::GetZOrder ( );
__declspec(implementation_key(7309)) ShapeRangePtr IScrollBars::GetShapeRange ( );
__declspec(implementation_key(7310)) long IScrollBars::Get_Default ( );
__declspec(implementation_key(7311)) void IScrollBars::Put_Default ( long RHS );
__declspec(implementation_key(7312)) VARIANT_BOOL IScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(7313)) void IScrollBars::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7314)) _bstr_t IScrollBars::GetLinkedCell ( );
__declspec(implementation_key(7315)) void IScrollBars::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7316)) long IScrollBars::GetMax ( );
__declspec(implementation_key(7317)) void IScrollBars::PutMax ( long RHS );
__declspec(implementation_key(7318)) long IScrollBars::GetMin ( );
__declspec(implementation_key(7319)) void IScrollBars::PutMin ( long RHS );
__declspec(implementation_key(7320)) long IScrollBars::GetSmallChange ( );
__declspec(implementation_key(7321)) void IScrollBars::PutSmallChange ( long RHS );
__declspec(implementation_key(7322)) long IScrollBars::GetValue ( );
__declspec(implementation_key(7323)) void IScrollBars::PutValue ( long RHS );
__declspec(implementation_key(7324)) long IScrollBars::GetLargeChange ( );
__declspec(implementation_key(7325)) void IScrollBars::PutLargeChange ( long RHS );
__declspec(implementation_key(7326)) ScrollBarPtr IScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7327)) long IScrollBars::GetCount ( );
__declspec(implementation_key(7328)) GroupObjectPtr IScrollBars::Group ( );
__declspec(implementation_key(7329)) IDispatchPtr IScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(7330)) IUnknownPtr IScrollBars::_NewEnum ( );
__declspec(implementation_key(7331)) _ApplicationPtr IListBox::GetApplication ( );
__declspec(implementation_key(7332)) enum XlCreator IListBox::GetCreator ( );
__declspec(implementation_key(7333)) IDispatchPtr IListBox::GetParent ( );
__declspec(implementation_key(7334)) RangePtr IListBox::GetBottomRightCell ( );
__declspec(implementation_key(7335)) _variant_t IListBox::BringToFront ( );
__declspec(implementation_key(7336)) _variant_t IListBox::Copy ( );
__declspec(implementation_key(7337)) _variant_t IListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7338)) _variant_t IListBox::Cut ( );
__declspec(implementation_key(7339)) _variant_t IListBox::Delete ( );
__declspec(implementation_key(7340)) IDispatchPtr IListBox::Duplicate ( );
__declspec(implementation_key(7341)) VARIANT_BOOL IListBox::GetEnabled ( );
__declspec(implementation_key(7342)) void IListBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7343)) double IListBox::GetHeight ( );
__declspec(implementation_key(7344)) void IListBox::PutHeight ( double RHS );
__declspec(implementation_key(7345)) long IListBox::GetIndex ( );
__declspec(implementation_key(7346)) double IListBox::GetLeft ( );
__declspec(implementation_key(7347)) void IListBox::PutLeft ( double RHS );
__declspec(implementation_key(7348)) VARIANT_BOOL IListBox::GetLocked ( );
__declspec(implementation_key(7349)) void IListBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7350)) _bstr_t IListBox::GetName ( );
__declspec(implementation_key(7351)) void IListBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(7352)) _bstr_t IListBox::GetOnAction ( );
__declspec(implementation_key(7353)) void IListBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7354)) _variant_t IListBox::GetPlacement ( );
__declspec(implementation_key(7355)) void IListBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7356)) VARIANT_BOOL IListBox::GetPrintObject ( );
__declspec(implementation_key(7357)) void IListBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7358)) _variant_t IListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(7359)) _variant_t IListBox::SendToBack ( );
__declspec(implementation_key(7360)) double IListBox::GetTop ( );
__declspec(implementation_key(7361)) void IListBox::PutTop ( double RHS );
__declspec(implementation_key(7362)) RangePtr IListBox::GetTopLeftCell ( );
__declspec(implementation_key(7363)) VARIANT_BOOL IListBox::GetVisible ( );
__declspec(implementation_key(7364)) void IListBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7365)) double IListBox::GetWidth ( );
__declspec(implementation_key(7366)) void IListBox::PutWidth ( double RHS );
__declspec(implementation_key(7367)) long IListBox::GetZOrder ( );
__declspec(implementation_key(7368)) ShapeRangePtr IListBox::GetShapeRange ( );
__declspec(implementation_key(7369)) _variant_t IListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(7370)) VARIANT_BOOL IListBox::GetDisplay3DShading ( );
__declspec(implementation_key(7371)) void IListBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7372)) long IListBox::Get_Default ( );
__declspec(implementation_key(7373)) void IListBox::Put_Default ( long RHS );
__declspec(implementation_key(7374)) _bstr_t IListBox::GetLinkedCell ( );
__declspec(implementation_key(7375)) void IListBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7376)) _variant_t IListBox::GetLinkedObject ( );
__declspec(implementation_key(7377)) _variant_t IListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(7378)) void IListBox::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7379)) long IListBox::GetListCount ( );
__declspec(implementation_key(7380)) _bstr_t IListBox::GetListFillRange ( );
__declspec(implementation_key(7381)) void IListBox::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(7382)) long IListBox::GetListIndex ( );
__declspec(implementation_key(7383)) void IListBox::PutListIndex ( long RHS );
__declspec(implementation_key(7384)) long IListBox::GetMultiSelect ( );
__declspec(implementation_key(7385)) void IListBox::PutMultiSelect ( long RHS );
__declspec(implementation_key(7386)) _variant_t IListBox::RemoveAllItems ( );
__declspec(implementation_key(7387)) _variant_t IListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(7388)) _variant_t IListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(7389)) void IListBox::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7390)) long IListBox::GetValue ( );
__declspec(implementation_key(7391)) void IListBox::PutValue ( long RHS );
__declspec(implementation_key(7392)) _ApplicationPtr IListBoxes::GetApplication ( );
__declspec(implementation_key(7393)) enum XlCreator IListBoxes::GetCreator ( );
__declspec(implementation_key(7394)) IDispatchPtr IListBoxes::GetParent ( );
__declspec(implementation_key(7395)) _variant_t IListBoxes::BringToFront ( );
__declspec(implementation_key(7396)) _variant_t IListBoxes::Copy ( );
__declspec(implementation_key(7397)) _variant_t IListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7398)) _variant_t IListBoxes::Cut ( );
__declspec(implementation_key(7399)) _variant_t IListBoxes::Delete ( );
__declspec(implementation_key(7400)) IDispatchPtr IListBoxes::Duplicate ( );
__declspec(implementation_key(7401)) VARIANT_BOOL IListBoxes::GetEnabled ( );
__declspec(implementation_key(7402)) void IListBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7403)) double IListBoxes::GetHeight ( );
__declspec(implementation_key(7404)) void IListBoxes::PutHeight ( double RHS );
__declspec(implementation_key(7405)) double IListBoxes::GetLeft ( );
__declspec(implementation_key(7406)) void IListBoxes::PutLeft ( double RHS );
__declspec(implementation_key(7407)) VARIANT_BOOL IListBoxes::GetLocked ( );
__declspec(implementation_key(7408)) void IListBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7409)) _bstr_t IListBoxes::GetOnAction ( );
__declspec(implementation_key(7410)) void IListBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7411)) _variant_t IListBoxes::GetPlacement ( );
__declspec(implementation_key(7412)) void IListBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7413)) VARIANT_BOOL IListBoxes::GetPrintObject ( );
__declspec(implementation_key(7414)) void IListBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7415)) _variant_t IListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(7416)) _variant_t IListBoxes::SendToBack ( );
__declspec(implementation_key(7417)) double IListBoxes::GetTop ( );
__declspec(implementation_key(7418)) void IListBoxes::PutTop ( double RHS );
__declspec(implementation_key(7419)) VARIANT_BOOL IListBoxes::GetVisible ( );
__declspec(implementation_key(7420)) void IListBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7421)) double IListBoxes::GetWidth ( );
__declspec(implementation_key(7422)) void IListBoxes::PutWidth ( double RHS );
__declspec(implementation_key(7423)) long IListBoxes::GetZOrder ( );
__declspec(implementation_key(7424)) ShapeRangePtr IListBoxes::GetShapeRange ( );
__declspec(implementation_key(7425)) _variant_t IListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(7426)) VARIANT_BOOL IListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(7427)) void IListBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7428)) long IListBoxes::Get_Default ( );
__declspec(implementation_key(7429)) void IListBoxes::Put_Default ( long RHS );
__declspec(implementation_key(7430)) _bstr_t IListBoxes::GetLinkedCell ( );
__declspec(implementation_key(7431)) void IListBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7432)) _variant_t IListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(7433)) void IListBoxes::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7434)) _bstr_t IListBoxes::GetListFillRange ( );
__declspec(implementation_key(7435)) void IListBoxes::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(7436)) long IListBoxes::GetListIndex ( );
__declspec(implementation_key(7437)) void IListBoxes::PutListIndex ( long RHS );
__declspec(implementation_key(7438)) long IListBoxes::GetMultiSelect ( );
__declspec(implementation_key(7439)) void IListBoxes::PutMultiSelect ( long RHS );
__declspec(implementation_key(7440)) _variant_t IListBoxes::RemoveAllItems ( );
__declspec(implementation_key(7441)) _variant_t IListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(7442)) _variant_t IListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(7443)) void IListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7444)) long IListBoxes::GetValue ( );
__declspec(implementation_key(7445)) void IListBoxes::PutValue ( long RHS );
__declspec(implementation_key(7446)) ListBoxPtr IListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7447)) long IListBoxes::GetCount ( );
__declspec(implementation_key(7448)) GroupObjectPtr IListBoxes::Group ( );
__declspec(implementation_key(7449)) IDispatchPtr IListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(7450)) IUnknownPtr IListBoxes::_NewEnum ( );
__declspec(implementation_key(7451)) _ApplicationPtr IGroupBox::GetApplication ( );
__declspec(implementation_key(7452)) enum XlCreator IGroupBox::GetCreator ( );
__declspec(implementation_key(7453)) IDispatchPtr IGroupBox::GetParent ( );
__declspec(implementation_key(7454)) RangePtr IGroupBox::GetBottomRightCell ( );
__declspec(implementation_key(7455)) _variant_t IGroupBox::BringToFront ( );
__declspec(implementation_key(7456)) _variant_t IGroupBox::Copy ( );
__declspec(implementation_key(7457)) _variant_t IGroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7458)) _variant_t IGroupBox::Cut ( );
__declspec(implementation_key(7459)) _variant_t IGroupBox::Delete ( );
__declspec(implementation_key(7460)) IDispatchPtr IGroupBox::Duplicate ( );
__declspec(implementation_key(7461)) VARIANT_BOOL IGroupBox::GetEnabled ( );
__declspec(implementation_key(7462)) void IGroupBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7463)) double IGroupBox::GetHeight ( );
__declspec(implementation_key(7464)) void IGroupBox::PutHeight ( double RHS );
__declspec(implementation_key(7465)) long IGroupBox::GetIndex ( );
__declspec(implementation_key(7466)) double IGroupBox::GetLeft ( );
__declspec(implementation_key(7467)) void IGroupBox::PutLeft ( double RHS );
__declspec(implementation_key(7468)) VARIANT_BOOL IGroupBox::GetLocked ( );
__declspec(implementation_key(7469)) void IGroupBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7470)) _bstr_t IGroupBox::GetName ( );
__declspec(implementation_key(7471)) void IGroupBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(7472)) _bstr_t IGroupBox::GetOnAction ( );
__declspec(implementation_key(7473)) void IGroupBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7474)) _variant_t IGroupBox::GetPlacement ( );
__declspec(implementation_key(7475)) void IGroupBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7476)) VARIANT_BOOL IGroupBox::GetPrintObject ( );
__declspec(implementation_key(7477)) void IGroupBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7478)) _variant_t IGroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(7479)) _variant_t IGroupBox::SendToBack ( );
__declspec(implementation_key(7480)) double IGroupBox::GetTop ( );
__declspec(implementation_key(7481)) void IGroupBox::PutTop ( double RHS );
__declspec(implementation_key(7482)) RangePtr IGroupBox::GetTopLeftCell ( );
__declspec(implementation_key(7483)) VARIANT_BOOL IGroupBox::GetVisible ( );
__declspec(implementation_key(7484)) void IGroupBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7485)) double IGroupBox::GetWidth ( );
__declspec(implementation_key(7486)) void IGroupBox::PutWidth ( double RHS );
__declspec(implementation_key(7487)) long IGroupBox::GetZOrder ( );
__declspec(implementation_key(7488)) ShapeRangePtr IGroupBox::GetShapeRange ( );
__declspec(implementation_key(7489)) _bstr_t IGroupBox::GetCaption ( );
__declspec(implementation_key(7490)) void IGroupBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7491)) CharactersPtr IGroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7492)) _variant_t IGroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7493)) VARIANT_BOOL IGroupBox::GetLockedText ( );
__declspec(implementation_key(7494)) void IGroupBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7495)) _bstr_t IGroupBox::GetText ( );
__declspec(implementation_key(7496)) void IGroupBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(7497)) _variant_t IGroupBox::GetAccelerator ( );
__declspec(implementation_key(7498)) void IGroupBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7499)) VARIANT_BOOL IGroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(7500)) void IGroupBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7501)) _variant_t IGroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(7502)) void IGroupBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7503)) _ApplicationPtr IGroupBoxes::GetApplication ( );
__declspec(implementation_key(7504)) enum XlCreator IGroupBoxes::GetCreator ( );
__declspec(implementation_key(7505)) IDispatchPtr IGroupBoxes::GetParent ( );
__declspec(implementation_key(7506)) _variant_t IGroupBoxes::BringToFront ( );
__declspec(implementation_key(7507)) _variant_t IGroupBoxes::Copy ( );
__declspec(implementation_key(7508)) _variant_t IGroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7509)) _variant_t IGroupBoxes::Cut ( );
__declspec(implementation_key(7510)) _variant_t IGroupBoxes::Delete ( );
__declspec(implementation_key(7511)) IDispatchPtr IGroupBoxes::Duplicate ( );
__declspec(implementation_key(7512)) VARIANT_BOOL IGroupBoxes::GetEnabled ( );
__declspec(implementation_key(7513)) void IGroupBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7514)) double IGroupBoxes::GetHeight ( );
__declspec(implementation_key(7515)) void IGroupBoxes::PutHeight ( double RHS );
__declspec(implementation_key(7516)) double IGroupBoxes::GetLeft ( );
__declspec(implementation_key(7517)) void IGroupBoxes::PutLeft ( double RHS );
__declspec(implementation_key(7518)) VARIANT_BOOL IGroupBoxes::GetLocked ( );
__declspec(implementation_key(7519)) void IGroupBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7520)) _bstr_t IGroupBoxes::GetOnAction ( );
__declspec(implementation_key(7521)) void IGroupBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7522)) _variant_t IGroupBoxes::GetPlacement ( );
__declspec(implementation_key(7523)) void IGroupBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7524)) VARIANT_BOOL IGroupBoxes::GetPrintObject ( );
__declspec(implementation_key(7525)) void IGroupBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7526)) _variant_t IGroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(7527)) _variant_t IGroupBoxes::SendToBack ( );
__declspec(implementation_key(7528)) double IGroupBoxes::GetTop ( );
__declspec(implementation_key(7529)) void IGroupBoxes::PutTop ( double RHS );
__declspec(implementation_key(7530)) VARIANT_BOOL IGroupBoxes::GetVisible ( );
__declspec(implementation_key(7531)) void IGroupBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7532)) double IGroupBoxes::GetWidth ( );
__declspec(implementation_key(7533)) void IGroupBoxes::PutWidth ( double RHS );
__declspec(implementation_key(7534)) long IGroupBoxes::GetZOrder ( );
__declspec(implementation_key(7535)) ShapeRangePtr IGroupBoxes::GetShapeRange ( );
__declspec(implementation_key(7536)) _bstr_t IGroupBoxes::GetCaption ( );
__declspec(implementation_key(7537)) void IGroupBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7538)) CharactersPtr IGroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7539)) _variant_t IGroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7540)) VARIANT_BOOL IGroupBoxes::GetLockedText ( );
__declspec(implementation_key(7541)) void IGroupBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7542)) _bstr_t IGroupBoxes::GetText ( );
__declspec(implementation_key(7543)) void IGroupBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(7544)) _variant_t IGroupBoxes::GetAccelerator ( );
__declspec(implementation_key(7545)) void IGroupBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7546)) VARIANT_BOOL IGroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(7547)) void IGroupBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7548)) _variant_t IGroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(7549)) void IGroupBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7550)) GroupBoxPtr IGroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7551)) long IGroupBoxes::GetCount ( );
__declspec(implementation_key(7552)) GroupObjectPtr IGroupBoxes::Group ( );
__declspec(implementation_key(7553)) IDispatchPtr IGroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(7554)) IUnknownPtr IGroupBoxes::_NewEnum ( );
__declspec(implementation_key(7555)) _ApplicationPtr IDropDown::GetApplication ( );
__declspec(implementation_key(7556)) enum XlCreator IDropDown::GetCreator ( );
__declspec(implementation_key(7557)) IDispatchPtr IDropDown::GetParent ( );
__declspec(implementation_key(7558)) RangePtr IDropDown::GetBottomRightCell ( );
__declspec(implementation_key(7559)) _variant_t IDropDown::BringToFront ( );
__declspec(implementation_key(7560)) _variant_t IDropDown::Copy ( );
__declspec(implementation_key(7561)) _variant_t IDropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7562)) _variant_t IDropDown::Cut ( );
__declspec(implementation_key(7563)) _variant_t IDropDown::Delete ( );
__declspec(implementation_key(7564)) IDispatchPtr IDropDown::Duplicate ( );
__declspec(implementation_key(7565)) VARIANT_BOOL IDropDown::GetEnabled ( );
__declspec(implementation_key(7566)) void IDropDown::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7567)) double IDropDown::GetHeight ( );
__declspec(implementation_key(7568)) void IDropDown::PutHeight ( double RHS );
__declspec(implementation_key(7569)) long IDropDown::GetIndex ( );
__declspec(implementation_key(7570)) double IDropDown::GetLeft ( );
__declspec(implementation_key(7571)) void IDropDown::PutLeft ( double RHS );
__declspec(implementation_key(7572)) VARIANT_BOOL IDropDown::GetLocked ( );
__declspec(implementation_key(7573)) void IDropDown::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7574)) _bstr_t IDropDown::GetName ( );
__declspec(implementation_key(7575)) void IDropDown::PutName ( _bstr_t RHS );
__declspec(implementation_key(7576)) _bstr_t IDropDown::GetOnAction ( );
__declspec(implementation_key(7577)) void IDropDown::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7578)) _variant_t IDropDown::GetPlacement ( );
__declspec(implementation_key(7579)) void IDropDown::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7580)) VARIANT_BOOL IDropDown::GetPrintObject ( );
__declspec(implementation_key(7581)) void IDropDown::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7582)) _variant_t IDropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(7583)) _variant_t IDropDown::SendToBack ( );
__declspec(implementation_key(7584)) double IDropDown::GetTop ( );
__declspec(implementation_key(7585)) void IDropDown::PutTop ( double RHS );
__declspec(implementation_key(7586)) RangePtr IDropDown::GetTopLeftCell ( );
__declspec(implementation_key(7587)) VARIANT_BOOL IDropDown::GetVisible ( );
__declspec(implementation_key(7588)) void IDropDown::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7589)) double IDropDown::GetWidth ( );
__declspec(implementation_key(7590)) void IDropDown::PutWidth ( double RHS );
__declspec(implementation_key(7591)) long IDropDown::GetZOrder ( );
__declspec(implementation_key(7592)) ShapeRangePtr IDropDown::GetShapeRange ( );
__declspec(implementation_key(7593)) _variant_t IDropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(7594)) VARIANT_BOOL IDropDown::GetDisplay3DShading ( );
__declspec(implementation_key(7595)) void IDropDown::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7596)) long IDropDown::Get_Default ( );
__declspec(implementation_key(7597)) void IDropDown::Put_Default ( long RHS );
__declspec(implementation_key(7598)) _bstr_t IDropDown::GetLinkedCell ( );
__declspec(implementation_key(7599)) void IDropDown::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7600)) _variant_t IDropDown::GetLinkedObject ( );
__declspec(implementation_key(7601)) _variant_t IDropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(7602)) void IDropDown::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7603)) long IDropDown::GetListCount ( );
__declspec(implementation_key(7604)) _bstr_t IDropDown::GetListFillRange ( );
__declspec(implementation_key(7605)) void IDropDown::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(7606)) long IDropDown::GetListIndex ( );
__declspec(implementation_key(7607)) void IDropDown::PutListIndex ( long RHS );
__declspec(implementation_key(7608)) _variant_t IDropDown::RemoveAllItems ( );
__declspec(implementation_key(7609)) _variant_t IDropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(7610)) _variant_t IDropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(7611)) void IDropDown::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7612)) long IDropDown::GetValue ( );
__declspec(implementation_key(7613)) void IDropDown::PutValue ( long RHS );
__declspec(implementation_key(7614)) _bstr_t IDropDown::GetCaption ( );
__declspec(implementation_key(7615)) void IDropDown::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7616)) CharactersPtr IDropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7617)) long IDropDown::GetDropDownLines ( );
__declspec(implementation_key(7618)) void IDropDown::PutDropDownLines ( long RHS );
__declspec(implementation_key(7619)) _bstr_t IDropDown::GetText ( );
__declspec(implementation_key(7620)) void IDropDown::PutText ( _bstr_t RHS );
__declspec(implementation_key(7621)) _ApplicationPtr IDropDowns::GetApplication ( );
__declspec(implementation_key(7622)) enum XlCreator IDropDowns::GetCreator ( );
__declspec(implementation_key(7623)) IDispatchPtr IDropDowns::GetParent ( );
__declspec(implementation_key(7624)) _variant_t IDropDowns::BringToFront ( );
__declspec(implementation_key(7625)) _variant_t IDropDowns::Copy ( );
__declspec(implementation_key(7626)) _variant_t IDropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7627)) _variant_t IDropDowns::Cut ( );
__declspec(implementation_key(7628)) _variant_t IDropDowns::Delete ( );
__declspec(implementation_key(7629)) IDispatchPtr IDropDowns::Duplicate ( );
__declspec(implementation_key(7630)) VARIANT_BOOL IDropDowns::GetEnabled ( );
__declspec(implementation_key(7631)) void IDropDowns::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7632)) double IDropDowns::GetHeight ( );
__declspec(implementation_key(7633)) void IDropDowns::PutHeight ( double RHS );
__declspec(implementation_key(7634)) double IDropDowns::GetLeft ( );
__declspec(implementation_key(7635)) void IDropDowns::PutLeft ( double RHS );
__declspec(implementation_key(7636)) VARIANT_BOOL IDropDowns::GetLocked ( );
__declspec(implementation_key(7637)) void IDropDowns::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7638)) _bstr_t IDropDowns::GetOnAction ( );
__declspec(implementation_key(7639)) void IDropDowns::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7640)) _variant_t IDropDowns::GetPlacement ( );
__declspec(implementation_key(7641)) void IDropDowns::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7642)) VARIANT_BOOL IDropDowns::GetPrintObject ( );
__declspec(implementation_key(7643)) void IDropDowns::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7644)) _variant_t IDropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(7645)) _variant_t IDropDowns::SendToBack ( );
__declspec(implementation_key(7646)) double IDropDowns::GetTop ( );
__declspec(implementation_key(7647)) void IDropDowns::PutTop ( double RHS );
__declspec(implementation_key(7648)) VARIANT_BOOL IDropDowns::GetVisible ( );
__declspec(implementation_key(7649)) void IDropDowns::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7650)) double IDropDowns::GetWidth ( );
__declspec(implementation_key(7651)) void IDropDowns::PutWidth ( double RHS );
__declspec(implementation_key(7652)) long IDropDowns::GetZOrder ( );
__declspec(implementation_key(7653)) ShapeRangePtr IDropDowns::GetShapeRange ( );
__declspec(implementation_key(7654)) _variant_t IDropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(7655)) VARIANT_BOOL IDropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(7656)) void IDropDowns::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7657)) long IDropDowns::Get_Default ( );
__declspec(implementation_key(7658)) void IDropDowns::Put_Default ( long RHS );
__declspec(implementation_key(7659)) _bstr_t IDropDowns::GetLinkedCell ( );
__declspec(implementation_key(7660)) void IDropDowns::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7661)) _variant_t IDropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(7662)) void IDropDowns::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7663)) _bstr_t IDropDowns::GetListFillRange ( );
__declspec(implementation_key(7664)) void IDropDowns::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(7665)) long IDropDowns::GetListIndex ( );
__declspec(implementation_key(7666)) void IDropDowns::PutListIndex ( long RHS );
__declspec(implementation_key(7667)) _variant_t IDropDowns::RemoveAllItems ( );
__declspec(implementation_key(7668)) _variant_t IDropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(7669)) _variant_t IDropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(7670)) void IDropDowns::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(7671)) long IDropDowns::GetValue ( );
__declspec(implementation_key(7672)) void IDropDowns::PutValue ( long RHS );
__declspec(implementation_key(7673)) _bstr_t IDropDowns::GetCaption ( );
__declspec(implementation_key(7674)) void IDropDowns::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7675)) CharactersPtr IDropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7676)) long IDropDowns::GetDropDownLines ( );
__declspec(implementation_key(7677)) void IDropDowns::PutDropDownLines ( long RHS );
__declspec(implementation_key(7678)) _bstr_t IDropDowns::GetText ( );
__declspec(implementation_key(7679)) void IDropDowns::PutText ( _bstr_t RHS );
__declspec(implementation_key(7680)) DropDownPtr IDropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(7681)) long IDropDowns::GetCount ( );
__declspec(implementation_key(7682)) GroupObjectPtr IDropDowns::Group ( );
__declspec(implementation_key(7683)) IDispatchPtr IDropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(7684)) IUnknownPtr IDropDowns::_NewEnum ( );
__declspec(implementation_key(7685)) _ApplicationPtr ISpinner::GetApplication ( );
__declspec(implementation_key(7686)) enum XlCreator ISpinner::GetCreator ( );
__declspec(implementation_key(7687)) IDispatchPtr ISpinner::GetParent ( );
__declspec(implementation_key(7688)) RangePtr ISpinner::GetBottomRightCell ( );
__declspec(implementation_key(7689)) _variant_t ISpinner::BringToFront ( );
__declspec(implementation_key(7690)) _variant_t ISpinner::Copy ( );
__declspec(implementation_key(7691)) _variant_t ISpinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7692)) _variant_t ISpinner::Cut ( );
__declspec(implementation_key(7693)) _variant_t ISpinner::Delete ( );
__declspec(implementation_key(7694)) IDispatchPtr ISpinner::Duplicate ( );
__declspec(implementation_key(7695)) VARIANT_BOOL ISpinner::GetEnabled ( );
__declspec(implementation_key(7696)) void ISpinner::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7697)) double ISpinner::GetHeight ( );
__declspec(implementation_key(7698)) void ISpinner::PutHeight ( double RHS );
__declspec(implementation_key(7699)) long ISpinner::GetIndex ( );
__declspec(implementation_key(7700)) double ISpinner::GetLeft ( );
__declspec(implementation_key(7701)) void ISpinner::PutLeft ( double RHS );
__declspec(implementation_key(7702)) VARIANT_BOOL ISpinner::GetLocked ( );
__declspec(implementation_key(7703)) void ISpinner::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7704)) _bstr_t ISpinner::GetName ( );
__declspec(implementation_key(7705)) void ISpinner::PutName ( _bstr_t RHS );
__declspec(implementation_key(7706)) _bstr_t ISpinner::GetOnAction ( );
__declspec(implementation_key(7707)) void ISpinner::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7708)) _variant_t ISpinner::GetPlacement ( );
__declspec(implementation_key(7709)) void ISpinner::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7710)) VARIANT_BOOL ISpinner::GetPrintObject ( );
__declspec(implementation_key(7711)) void ISpinner::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7712)) _variant_t ISpinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(7713)) _variant_t ISpinner::SendToBack ( );
__declspec(implementation_key(7714)) double ISpinner::GetTop ( );
__declspec(implementation_key(7715)) void ISpinner::PutTop ( double RHS );
__declspec(implementation_key(7716)) RangePtr ISpinner::GetTopLeftCell ( );
__declspec(implementation_key(7717)) VARIANT_BOOL ISpinner::GetVisible ( );
__declspec(implementation_key(7718)) void ISpinner::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7719)) double ISpinner::GetWidth ( );
__declspec(implementation_key(7720)) void ISpinner::PutWidth ( double RHS );
__declspec(implementation_key(7721)) long ISpinner::GetZOrder ( );
__declspec(implementation_key(7722)) ShapeRangePtr ISpinner::GetShapeRange ( );
__declspec(implementation_key(7723)) long ISpinner::Get_Default ( );
__declspec(implementation_key(7724)) void ISpinner::Put_Default ( long RHS );
__declspec(implementation_key(7725)) VARIANT_BOOL ISpinner::GetDisplay3DShading ( );
__declspec(implementation_key(7726)) void ISpinner::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7727)) _bstr_t ISpinner::GetLinkedCell ( );
__declspec(implementation_key(7728)) void ISpinner::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7729)) long ISpinner::GetMax ( );
__declspec(implementation_key(7730)) void ISpinner::PutMax ( long RHS );
__declspec(implementation_key(7731)) long ISpinner::GetMin ( );
__declspec(implementation_key(7732)) void ISpinner::PutMin ( long RHS );
__declspec(implementation_key(7733)) long ISpinner::GetSmallChange ( );
__declspec(implementation_key(7734)) void ISpinner::PutSmallChange ( long RHS );
__declspec(implementation_key(7735)) long ISpinner::GetValue ( );
__declspec(implementation_key(7736)) void ISpinner::PutValue ( long RHS );
__declspec(implementation_key(7737)) _ApplicationPtr ISpinners::GetApplication ( );
__declspec(implementation_key(7738)) enum XlCreator ISpinners::GetCreator ( );
__declspec(implementation_key(7739)) IDispatchPtr ISpinners::GetParent ( );
__declspec(implementation_key(7740)) _variant_t ISpinners::BringToFront ( );
__declspec(implementation_key(7741)) _variant_t ISpinners::Copy ( );
__declspec(implementation_key(7742)) _variant_t ISpinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7743)) _variant_t ISpinners::Cut ( );
__declspec(implementation_key(7744)) _variant_t ISpinners::Delete ( );
__declspec(implementation_key(7745)) IDispatchPtr ISpinners::Duplicate ( );
__declspec(implementation_key(7746)) VARIANT_BOOL ISpinners::GetEnabled ( );
__declspec(implementation_key(7747)) void ISpinners::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7748)) double ISpinners::GetHeight ( );
__declspec(implementation_key(7749)) void ISpinners::PutHeight ( double RHS );
__declspec(implementation_key(7750)) double ISpinners::GetLeft ( );
__declspec(implementation_key(7751)) void ISpinners::PutLeft ( double RHS );
__declspec(implementation_key(7752)) VARIANT_BOOL ISpinners::GetLocked ( );
__declspec(implementation_key(7753)) void ISpinners::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7754)) _bstr_t ISpinners::GetOnAction ( );
__declspec(implementation_key(7755)) void ISpinners::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7756)) _variant_t ISpinners::GetPlacement ( );
__declspec(implementation_key(7757)) void ISpinners::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7758)) VARIANT_BOOL ISpinners::GetPrintObject ( );
__declspec(implementation_key(7759)) void ISpinners::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7760)) _variant_t ISpinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(7761)) _variant_t ISpinners::SendToBack ( );
__declspec(implementation_key(7762)) double ISpinners::GetTop ( );
__declspec(implementation_key(7763)) void ISpinners::PutTop ( double RHS );
__declspec(implementation_key(7764)) VARIANT_BOOL ISpinners::GetVisible ( );
__declspec(implementation_key(7765)) void ISpinners::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7766)) double ISpinners::GetWidth ( );
__declspec(implementation_key(7767)) void ISpinners::PutWidth ( double RHS );
__declspec(implementation_key(7768)) long ISpinners::GetZOrder ( );
__declspec(implementation_key(7769)) ShapeRangePtr ISpinners::GetShapeRange ( );
__declspec(implementation_key(7770)) long ISpinners::Get_Default ( );
__declspec(implementation_key(7771)) void ISpinners::Put_Default ( long RHS );
__declspec(implementation_key(7772)) VARIANT_BOOL ISpinners::GetDisplay3DShading ( );
__declspec(implementation_key(7773)) void ISpinners::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7774)) _bstr_t ISpinners::GetLinkedCell ( );
__declspec(implementation_key(7775)) void ISpinners::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7776)) long ISpinners::GetMax ( );
__declspec(implementation_key(7777)) void ISpinners::PutMax ( long RHS );
__declspec(implementation_key(7778)) long ISpinners::GetMin ( );
__declspec(implementation_key(7779)) void ISpinners::PutMin ( long RHS );
__declspec(implementation_key(7780)) long ISpinners::GetSmallChange ( );
__declspec(implementation_key(7781)) void ISpinners::PutSmallChange ( long RHS );
__declspec(implementation_key(7782)) long ISpinners::GetValue ( );
__declspec(implementation_key(7783)) void ISpinners::PutValue ( long RHS );
__declspec(implementation_key(7784)) SpinnerPtr ISpinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7785)) long ISpinners::GetCount ( );
__declspec(implementation_key(7786)) GroupObjectPtr ISpinners::Group ( );
__declspec(implementation_key(7787)) IDispatchPtr ISpinners::Item ( const _variant_t & Index );
__declspec(implementation_key(7788)) IUnknownPtr ISpinners::_NewEnum ( );
__declspec(implementation_key(7789)) _ApplicationPtr IDialogFrame::GetApplication ( );
__declspec(implementation_key(7790)) enum XlCreator IDialogFrame::GetCreator ( );
__declspec(implementation_key(7791)) IDispatchPtr IDialogFrame::GetParent ( );
__declspec(implementation_key(7792)) _variant_t IDialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7793)) double IDialogFrame::GetHeight ( );
__declspec(implementation_key(7794)) void IDialogFrame::PutHeight ( double RHS );
__declspec(implementation_key(7795)) double IDialogFrame::GetLeft ( );
__declspec(implementation_key(7796)) void IDialogFrame::PutLeft ( double RHS );
__declspec(implementation_key(7797)) VARIANT_BOOL IDialogFrame::GetLocked ( );
__declspec(implementation_key(7798)) void IDialogFrame::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7799)) _bstr_t IDialogFrame::GetName ( );
__declspec(implementation_key(7800)) void IDialogFrame::PutName ( _bstr_t RHS );
__declspec(implementation_key(7801)) _bstr_t IDialogFrame::GetOnAction ( );
__declspec(implementation_key(7802)) void IDialogFrame::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7803)) _variant_t IDialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(7804)) double IDialogFrame::GetTop ( );
__declspec(implementation_key(7805)) void IDialogFrame::PutTop ( double RHS );
__declspec(implementation_key(7806)) double IDialogFrame::GetWidth ( );
__declspec(implementation_key(7807)) void IDialogFrame::PutWidth ( double RHS );
__declspec(implementation_key(7808)) ShapeRangePtr IDialogFrame::GetShapeRange ( );
__declspec(implementation_key(7809)) _bstr_t IDialogFrame::GetCaption ( );
__declspec(implementation_key(7810)) void IDialogFrame::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7811)) CharactersPtr IDialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7812)) _variant_t IDialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7813)) VARIANT_BOOL IDialogFrame::GetLockedText ( );
__declspec(implementation_key(7814)) void IDialogFrame::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7815)) _bstr_t IDialogFrame::GetText ( );
__declspec(implementation_key(7816)) void IDialogFrame::PutText ( _bstr_t RHS );
__declspec(implementation_key(7817)) _ApplicationPtr ILabel::GetApplication ( );
__declspec(implementation_key(7818)) enum XlCreator ILabel::GetCreator ( );
__declspec(implementation_key(7819)) IDispatchPtr ILabel::GetParent ( );
__declspec(implementation_key(7820)) RangePtr ILabel::GetBottomRightCell ( );
__declspec(implementation_key(7821)) _variant_t ILabel::BringToFront ( );
__declspec(implementation_key(7822)) _variant_t ILabel::Copy ( );
__declspec(implementation_key(7823)) _variant_t ILabel::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7824)) _variant_t ILabel::Cut ( );
__declspec(implementation_key(7825)) _variant_t ILabel::Delete ( );
__declspec(implementation_key(7826)) IDispatchPtr ILabel::Duplicate ( );
__declspec(implementation_key(7827)) VARIANT_BOOL ILabel::GetEnabled ( );
__declspec(implementation_key(7828)) void ILabel::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7829)) double ILabel::GetHeight ( );
__declspec(implementation_key(7830)) void ILabel::PutHeight ( double RHS );
__declspec(implementation_key(7831)) long ILabel::GetIndex ( );
__declspec(implementation_key(7832)) double ILabel::GetLeft ( );
__declspec(implementation_key(7833)) void ILabel::PutLeft ( double RHS );
__declspec(implementation_key(7834)) VARIANT_BOOL ILabel::GetLocked ( );
__declspec(implementation_key(7835)) void ILabel::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7836)) _bstr_t ILabel::GetName ( );
__declspec(implementation_key(7837)) void ILabel::PutName ( _bstr_t RHS );
__declspec(implementation_key(7838)) _bstr_t ILabel::GetOnAction ( );
__declspec(implementation_key(7839)) void ILabel::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7840)) _variant_t ILabel::GetPlacement ( );
__declspec(implementation_key(7841)) void ILabel::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7842)) VARIANT_BOOL ILabel::GetPrintObject ( );
__declspec(implementation_key(7843)) void ILabel::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7844)) _variant_t ILabel::Select ( const _variant_t & Replace );
__declspec(implementation_key(7845)) _variant_t ILabel::SendToBack ( );
__declspec(implementation_key(7846)) double ILabel::GetTop ( );
__declspec(implementation_key(7847)) void ILabel::PutTop ( double RHS );
__declspec(implementation_key(7848)) RangePtr ILabel::GetTopLeftCell ( );
__declspec(implementation_key(7849)) VARIANT_BOOL ILabel::GetVisible ( );
__declspec(implementation_key(7850)) void ILabel::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7851)) double ILabel::GetWidth ( );
__declspec(implementation_key(7852)) void ILabel::PutWidth ( double RHS );
__declspec(implementation_key(7853)) long ILabel::GetZOrder ( );
__declspec(implementation_key(7854)) ShapeRangePtr ILabel::GetShapeRange ( );
__declspec(implementation_key(7855)) _bstr_t ILabel::GetCaption ( );
__declspec(implementation_key(7856)) void ILabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7857)) CharactersPtr ILabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7858)) _variant_t ILabel::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7859)) VARIANT_BOOL ILabel::GetLockedText ( );
__declspec(implementation_key(7860)) void ILabel::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7861)) _bstr_t ILabel::GetText ( );
__declspec(implementation_key(7862)) void ILabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(7863)) _variant_t ILabel::GetAccelerator ( );
__declspec(implementation_key(7864)) void ILabel::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7865)) _variant_t ILabel::GetPhoneticAccelerator ( );
__declspec(implementation_key(7866)) void ILabel::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7867)) _ApplicationPtr ILabels::GetApplication ( );
__declspec(implementation_key(7868)) enum XlCreator ILabels::GetCreator ( );
__declspec(implementation_key(7869)) IDispatchPtr ILabels::GetParent ( );
__declspec(implementation_key(7870)) _variant_t ILabels::BringToFront ( );
__declspec(implementation_key(7871)) _variant_t ILabels::Copy ( );
__declspec(implementation_key(7872)) _variant_t ILabels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7873)) _variant_t ILabels::Cut ( );
__declspec(implementation_key(7874)) _variant_t ILabels::Delete ( );
__declspec(implementation_key(7875)) IDispatchPtr ILabels::Duplicate ( );
__declspec(implementation_key(7876)) VARIANT_BOOL ILabels::GetEnabled ( );
__declspec(implementation_key(7877)) void ILabels::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7878)) double ILabels::GetHeight ( );
__declspec(implementation_key(7879)) void ILabels::PutHeight ( double RHS );
__declspec(implementation_key(7880)) double ILabels::GetLeft ( );
__declspec(implementation_key(7881)) void ILabels::PutLeft ( double RHS );
__declspec(implementation_key(7882)) VARIANT_BOOL ILabels::GetLocked ( );
__declspec(implementation_key(7883)) void ILabels::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7884)) _bstr_t ILabels::GetOnAction ( );
__declspec(implementation_key(7885)) void ILabels::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7886)) _variant_t ILabels::GetPlacement ( );
__declspec(implementation_key(7887)) void ILabels::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7888)) VARIANT_BOOL ILabels::GetPrintObject ( );
__declspec(implementation_key(7889)) void ILabels::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7890)) _variant_t ILabels::Select ( const _variant_t & Replace );
__declspec(implementation_key(7891)) _variant_t ILabels::SendToBack ( );
__declspec(implementation_key(7892)) double ILabels::GetTop ( );
__declspec(implementation_key(7893)) void ILabels::PutTop ( double RHS );
__declspec(implementation_key(7894)) VARIANT_BOOL ILabels::GetVisible ( );
__declspec(implementation_key(7895)) void ILabels::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7896)) double ILabels::GetWidth ( );
__declspec(implementation_key(7897)) void ILabels::PutWidth ( double RHS );
__declspec(implementation_key(7898)) long ILabels::GetZOrder ( );
__declspec(implementation_key(7899)) ShapeRangePtr ILabels::GetShapeRange ( );
__declspec(implementation_key(7900)) _bstr_t ILabels::GetCaption ( );
__declspec(implementation_key(7901)) void ILabels::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7902)) CharactersPtr ILabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7903)) _variant_t ILabels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7904)) VARIANT_BOOL ILabels::GetLockedText ( );
__declspec(implementation_key(7905)) void ILabels::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7906)) _bstr_t ILabels::GetText ( );
__declspec(implementation_key(7907)) void ILabels::PutText ( _bstr_t RHS );
__declspec(implementation_key(7908)) _variant_t ILabels::GetAccelerator ( );
__declspec(implementation_key(7909)) void ILabels::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7910)) _variant_t ILabels::GetPhoneticAccelerator ( );
__declspec(implementation_key(7911)) void ILabels::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7912)) LabelPtr ILabels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7913)) long ILabels::GetCount ( );
__declspec(implementation_key(7914)) GroupObjectPtr ILabels::Group ( );
__declspec(implementation_key(7915)) IDispatchPtr ILabels::Item ( const _variant_t & Index );
__declspec(implementation_key(7916)) IUnknownPtr ILabels::_NewEnum ( );
__declspec(implementation_key(7917)) _ApplicationPtr IPanes::GetApplication ( );
__declspec(implementation_key(7918)) enum XlCreator IPanes::GetCreator ( );
__declspec(implementation_key(7919)) IDispatchPtr IPanes::GetParent ( );
__declspec(implementation_key(7920)) long IPanes::GetCount ( );
__declspec(implementation_key(7921)) PanePtr IPanes::GetItem ( long Index );
__declspec(implementation_key(7922)) PanePtr IPanes::Get_Default ( long Index );
__declspec(implementation_key(7923)) _ApplicationPtr IPane::GetApplication ( );
__declspec(implementation_key(7924)) enum XlCreator IPane::GetCreator ( );
__declspec(implementation_key(7925)) IDispatchPtr IPane::GetParent ( );
__declspec(implementation_key(7926)) VARIANT_BOOL IPane::Activate ( );
__declspec(implementation_key(7927)) long IPane::GetIndex ( );
__declspec(implementation_key(7928)) _variant_t IPane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(7929)) long IPane::GetScrollColumn ( );
__declspec(implementation_key(7930)) void IPane::PutScrollColumn ( long RHS );
__declspec(implementation_key(7931)) long IPane::GetScrollRow ( );
__declspec(implementation_key(7932)) void IPane::PutScrollRow ( long RHS );
__declspec(implementation_key(7933)) _variant_t IPane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(7934)) RangePtr IPane::GetVisibleRange ( );
__declspec(implementation_key(7935)) HRESULT IPane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(7936)) _ApplicationPtr IScenarios::GetApplication ( );
__declspec(implementation_key(7937)) enum XlCreator IScenarios::GetCreator ( );
__declspec(implementation_key(7938)) IDispatchPtr IScenarios::GetParent ( );
__declspec(implementation_key(7939)) ScenarioPtr IScenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(7940)) long IScenarios::GetCount ( );
__declspec(implementation_key(7941)) _variant_t IScenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(7942)) ScenarioPtr IScenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(7943)) _variant_t IScenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(7944)) IUnknownPtr IScenarios::_NewEnum ( );
__declspec(implementation_key(7945)) _ApplicationPtr IScenario::GetApplication ( );
__declspec(implementation_key(7946)) enum XlCreator IScenario::GetCreator ( );
__declspec(implementation_key(7947)) IDispatchPtr IScenario::GetParent ( );
__declspec(implementation_key(7948)) _variant_t IScenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(7949)) RangePtr IScenario::GetChangingCells ( );
__declspec(implementation_key(7950)) _bstr_t IScenario::GetComment ( );
__declspec(implementation_key(7951)) void IScenario::PutComment ( _bstr_t RHS );
__declspec(implementation_key(7952)) _variant_t IScenario::Delete ( );
__declspec(implementation_key(7953)) VARIANT_BOOL IScenario::GetHidden ( );
__declspec(implementation_key(7954)) void IScenario::PutHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(7955)) long IScenario::GetIndex ( );
__declspec(implementation_key(7956)) VARIANT_BOOL IScenario::GetLocked ( );
__declspec(implementation_key(7957)) void IScenario::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7958)) _bstr_t IScenario::GetName ( );
__declspec(implementation_key(7959)) void IScenario::PutName ( _bstr_t RHS );
__declspec(implementation_key(7960)) _variant_t IScenario::Show ( );
__declspec(implementation_key(7961)) _variant_t IScenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(7962)) _ApplicationPtr IGroupObject::GetApplication ( );
__declspec(implementation_key(7963)) enum XlCreator IGroupObject::GetCreator ( );
__declspec(implementation_key(7964)) IDispatchPtr IGroupObject::GetParent ( );
__declspec(implementation_key(7965)) RangePtr IGroupObject::GetBottomRightCell ( );
__declspec(implementation_key(7966)) _variant_t IGroupObject::BringToFront ( );
__declspec(implementation_key(7967)) _variant_t IGroupObject::Copy ( );
__declspec(implementation_key(7968)) _variant_t IGroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7969)) _variant_t IGroupObject::Cut ( );
__declspec(implementation_key(7970)) _variant_t IGroupObject::Delete ( );
__declspec(implementation_key(7971)) IDispatchPtr IGroupObject::Duplicate ( );
__declspec(implementation_key(7972)) VARIANT_BOOL IGroupObject::GetEnabled ( );
__declspec(implementation_key(7973)) void IGroupObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7974)) double IGroupObject::GetHeight ( );
__declspec(implementation_key(7975)) void IGroupObject::PutHeight ( double RHS );
__declspec(implementation_key(7976)) long IGroupObject::GetIndex ( );
__declspec(implementation_key(7977)) double IGroupObject::GetLeft ( );
__declspec(implementation_key(7978)) void IGroupObject::PutLeft ( double RHS );
__declspec(implementation_key(7979)) VARIANT_BOOL IGroupObject::GetLocked ( );
__declspec(implementation_key(7980)) void IGroupObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7981)) _bstr_t IGroupObject::GetName ( );
__declspec(implementation_key(7982)) void IGroupObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(7983)) _bstr_t IGroupObject::GetOnAction ( );
__declspec(implementation_key(7984)) void IGroupObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7985)) _variant_t IGroupObject::GetPlacement ( );
__declspec(implementation_key(7986)) void IGroupObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7987)) VARIANT_BOOL IGroupObject::GetPrintObject ( );
__declspec(implementation_key(7988)) void IGroupObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7989)) _variant_t IGroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(7990)) _variant_t IGroupObject::SendToBack ( );
__declspec(implementation_key(7991)) double IGroupObject::GetTop ( );
__declspec(implementation_key(7992)) void IGroupObject::PutTop ( double RHS );
__declspec(implementation_key(7993)) RangePtr IGroupObject::GetTopLeftCell ( );
__declspec(implementation_key(7994)) VARIANT_BOOL IGroupObject::GetVisible ( );
__declspec(implementation_key(7995)) void IGroupObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7996)) double IGroupObject::GetWidth ( );
__declspec(implementation_key(7997)) void IGroupObject::PutWidth ( double RHS );
__declspec(implementation_key(7998)) long IGroupObject::GetZOrder ( );
__declspec(implementation_key(7999)) ShapeRangePtr IGroupObject::GetShapeRange ( );
__declspec(implementation_key(8000)) VARIANT_BOOL IGroupObject::GetAddIndent ( );
__declspec(implementation_key(8001)) void IGroupObject::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8002)) _variant_t IGroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(8003)) void IGroupObject::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8004)) _variant_t IGroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(8005)) void IGroupObject::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8006)) _variant_t IGroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(8007)) void IGroupObject::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8008)) VARIANT_BOOL IGroupObject::GetAutoSize ( );
__declspec(implementation_key(8009)) void IGroupObject::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8010)) BorderPtr IGroupObject::GetBorder ( );
__declspec(implementation_key(8011)) _variant_t IGroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8012)) long IGroupObject::Get_Default ( );
__declspec(implementation_key(8013)) void IGroupObject::Put_Default ( long RHS );
__declspec(implementation_key(8014)) FontPtr IGroupObject::GetFont ( );
__declspec(implementation_key(8015)) _variant_t IGroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(8016)) void IGroupObject::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8017)) InteriorPtr IGroupObject::GetInterior ( );
__declspec(implementation_key(8018)) _variant_t IGroupObject::GetOrientation ( );
__declspec(implementation_key(8019)) void IGroupObject::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8020)) VARIANT_BOOL IGroupObject::GetRoundedCorners ( );
__declspec(implementation_key(8021)) void IGroupObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8022)) VARIANT_BOOL IGroupObject::GetShadow ( );
__declspec(implementation_key(8023)) void IGroupObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8024)) IDispatchPtr IGroupObject::Ungroup ( );
__declspec(implementation_key(8025)) _variant_t IGroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(8026)) void IGroupObject::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8027)) long IGroupObject::GetReadingOrder ( );
__declspec(implementation_key(8028)) void IGroupObject::PutReadingOrder ( long RHS );
__declspec(implementation_key(8029)) _ApplicationPtr IGroupObjects::GetApplication ( );
__declspec(implementation_key(8030)) enum XlCreator IGroupObjects::GetCreator ( );
__declspec(implementation_key(8031)) IDispatchPtr IGroupObjects::GetParent ( );
__declspec(implementation_key(8032)) _variant_t IGroupObjects::BringToFront ( );
__declspec(implementation_key(8033)) _variant_t IGroupObjects::Copy ( );
__declspec(implementation_key(8034)) _variant_t IGroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8035)) _variant_t IGroupObjects::Cut ( );
__declspec(implementation_key(8036)) _variant_t IGroupObjects::Delete ( );
__declspec(implementation_key(8037)) IDispatchPtr IGroupObjects::Duplicate ( );
__declspec(implementation_key(8038)) VARIANT_BOOL IGroupObjects::GetEnabled ( );
__declspec(implementation_key(8039)) void IGroupObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8040)) double IGroupObjects::GetHeight ( );
__declspec(implementation_key(8041)) void IGroupObjects::PutHeight ( double RHS );
__declspec(implementation_key(8042)) double IGroupObjects::GetLeft ( );
__declspec(implementation_key(8043)) void IGroupObjects::PutLeft ( double RHS );
__declspec(implementation_key(8044)) VARIANT_BOOL IGroupObjects::GetLocked ( );
__declspec(implementation_key(8045)) void IGroupObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8046)) _bstr_t IGroupObjects::GetOnAction ( );
__declspec(implementation_key(8047)) void IGroupObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8048)) _variant_t IGroupObjects::GetPlacement ( );
__declspec(implementation_key(8049)) void IGroupObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8050)) VARIANT_BOOL IGroupObjects::GetPrintObject ( );
__declspec(implementation_key(8051)) void IGroupObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8052)) _variant_t IGroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(8053)) _variant_t IGroupObjects::SendToBack ( );
__declspec(implementation_key(8054)) double IGroupObjects::GetTop ( );
__declspec(implementation_key(8055)) void IGroupObjects::PutTop ( double RHS );
__declspec(implementation_key(8056)) VARIANT_BOOL IGroupObjects::GetVisible ( );
__declspec(implementation_key(8057)) void IGroupObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8058)) double IGroupObjects::GetWidth ( );
__declspec(implementation_key(8059)) void IGroupObjects::PutWidth ( double RHS );
__declspec(implementation_key(8060)) long IGroupObjects::GetZOrder ( );
__declspec(implementation_key(8061)) ShapeRangePtr IGroupObjects::GetShapeRange ( );
__declspec(implementation_key(8062)) VARIANT_BOOL IGroupObjects::GetAddIndent ( );
__declspec(implementation_key(8063)) void IGroupObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8064)) _variant_t IGroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(8065)) void IGroupObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8066)) _variant_t IGroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(8067)) void IGroupObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8068)) _variant_t IGroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(8069)) void IGroupObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8070)) VARIANT_BOOL IGroupObjects::GetAutoSize ( );
__declspec(implementation_key(8071)) void IGroupObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8072)) BorderPtr IGroupObjects::GetBorder ( );
__declspec(implementation_key(8073)) _variant_t IGroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8074)) long IGroupObjects::Get_Default ( );
__declspec(implementation_key(8075)) void IGroupObjects::Put_Default ( long RHS );
__declspec(implementation_key(8076)) FontPtr IGroupObjects::GetFont ( );
__declspec(implementation_key(8077)) _variant_t IGroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(8078)) void IGroupObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8079)) InteriorPtr IGroupObjects::GetInterior ( );
__declspec(implementation_key(8080)) _variant_t IGroupObjects::GetOrientation ( );
__declspec(implementation_key(8081)) void IGroupObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8082)) VARIANT_BOOL IGroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(8083)) void IGroupObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8084)) VARIANT_BOOL IGroupObjects::GetShadow ( );
__declspec(implementation_key(8085)) void IGroupObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8086)) IDispatchPtr IGroupObjects::Ungroup ( );
__declspec(implementation_key(8087)) _variant_t IGroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(8088)) void IGroupObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8089)) long IGroupObjects::GetReadingOrder ( );
__declspec(implementation_key(8090)) void IGroupObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(8091)) long IGroupObjects::GetCount ( );
__declspec(implementation_key(8092)) GroupObjectPtr IGroupObjects::Group ( );
__declspec(implementation_key(8093)) IDispatchPtr IGroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(8094)) IUnknownPtr IGroupObjects::_NewEnum ( );
__declspec(implementation_key(8095)) _ApplicationPtr ILine::GetApplication ( );
__declspec(implementation_key(8096)) enum XlCreator ILine::GetCreator ( );
__declspec(implementation_key(8097)) IDispatchPtr ILine::GetParent ( );
__declspec(implementation_key(8098)) RangePtr ILine::GetBottomRightCell ( );
__declspec(implementation_key(8099)) _variant_t ILine::BringToFront ( );
__declspec(implementation_key(8100)) _variant_t ILine::Copy ( );
__declspec(implementation_key(8101)) _variant_t ILine::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8102)) _variant_t ILine::Cut ( );
__declspec(implementation_key(8103)) _variant_t ILine::Delete ( );
__declspec(implementation_key(8104)) IDispatchPtr ILine::Duplicate ( );
__declspec(implementation_key(8105)) VARIANT_BOOL ILine::GetEnabled ( );
__declspec(implementation_key(8106)) void ILine::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8107)) double ILine::GetHeight ( );
__declspec(implementation_key(8108)) void ILine::PutHeight ( double RHS );
__declspec(implementation_key(8109)) long ILine::GetIndex ( );
__declspec(implementation_key(8110)) double ILine::GetLeft ( );
__declspec(implementation_key(8111)) void ILine::PutLeft ( double RHS );
__declspec(implementation_key(8112)) VARIANT_BOOL ILine::GetLocked ( );
__declspec(implementation_key(8113)) void ILine::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8114)) _bstr_t ILine::GetName ( );
__declspec(implementation_key(8115)) void ILine::PutName ( _bstr_t RHS );
__declspec(implementation_key(8116)) _bstr_t ILine::GetOnAction ( );
__declspec(implementation_key(8117)) void ILine::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8118)) _variant_t ILine::GetPlacement ( );
__declspec(implementation_key(8119)) void ILine::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8120)) VARIANT_BOOL ILine::GetPrintObject ( );
__declspec(implementation_key(8121)) void ILine::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8122)) _variant_t ILine::Select ( const _variant_t & Replace );
__declspec(implementation_key(8123)) _variant_t ILine::SendToBack ( );
__declspec(implementation_key(8124)) double ILine::GetTop ( );
__declspec(implementation_key(8125)) void ILine::PutTop ( double RHS );
__declspec(implementation_key(8126)) RangePtr ILine::GetTopLeftCell ( );
__declspec(implementation_key(8127)) VARIANT_BOOL ILine::GetVisible ( );
__declspec(implementation_key(8128)) void ILine::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8129)) double ILine::GetWidth ( );
__declspec(implementation_key(8130)) void ILine::PutWidth ( double RHS );
__declspec(implementation_key(8131)) long ILine::GetZOrder ( );
__declspec(implementation_key(8132)) ShapeRangePtr ILine::GetShapeRange ( );
__declspec(implementation_key(8133)) _variant_t ILine::GetArrowHeadLength ( );
__declspec(implementation_key(8134)) void ILine::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8135)) _variant_t ILine::GetArrowHeadStyle ( );
__declspec(implementation_key(8136)) void ILine::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8137)) _variant_t ILine::GetArrowHeadWidth ( );
__declspec(implementation_key(8138)) void ILine::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8139)) BorderPtr ILine::GetBorder ( );
__declspec(implementation_key(8140)) _ApplicationPtr ILines::GetApplication ( );
__declspec(implementation_key(8141)) enum XlCreator ILines::GetCreator ( );
__declspec(implementation_key(8142)) IDispatchPtr ILines::GetParent ( );
__declspec(implementation_key(8143)) _variant_t ILines::BringToFront ( );
__declspec(implementation_key(8144)) _variant_t ILines::Copy ( );
__declspec(implementation_key(8145)) _variant_t ILines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8146)) _variant_t ILines::Cut ( );
__declspec(implementation_key(8147)) _variant_t ILines::Delete ( );
__declspec(implementation_key(8148)) IDispatchPtr ILines::Duplicate ( );
__declspec(implementation_key(8149)) VARIANT_BOOL ILines::GetEnabled ( );
__declspec(implementation_key(8150)) void ILines::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8151)) double ILines::GetHeight ( );
__declspec(implementation_key(8152)) void ILines::PutHeight ( double RHS );
__declspec(implementation_key(8153)) double ILines::GetLeft ( );
__declspec(implementation_key(8154)) void ILines::PutLeft ( double RHS );
__declspec(implementation_key(8155)) VARIANT_BOOL ILines::GetLocked ( );
__declspec(implementation_key(8156)) void ILines::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8157)) _bstr_t ILines::GetOnAction ( );
__declspec(implementation_key(8158)) void ILines::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8159)) _variant_t ILines::GetPlacement ( );
__declspec(implementation_key(8160)) void ILines::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8161)) VARIANT_BOOL ILines::GetPrintObject ( );
__declspec(implementation_key(8162)) void ILines::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8163)) _variant_t ILines::Select ( const _variant_t & Replace );
__declspec(implementation_key(8164)) _variant_t ILines::SendToBack ( );
__declspec(implementation_key(8165)) double ILines::GetTop ( );
__declspec(implementation_key(8166)) void ILines::PutTop ( double RHS );
__declspec(implementation_key(8167)) VARIANT_BOOL ILines::GetVisible ( );
__declspec(implementation_key(8168)) void ILines::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8169)) double ILines::GetWidth ( );
__declspec(implementation_key(8170)) void ILines::PutWidth ( double RHS );
__declspec(implementation_key(8171)) long ILines::GetZOrder ( );
__declspec(implementation_key(8172)) ShapeRangePtr ILines::GetShapeRange ( );
__declspec(implementation_key(8173)) _variant_t ILines::GetArrowHeadLength ( );
__declspec(implementation_key(8174)) void ILines::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8175)) _variant_t ILines::GetArrowHeadStyle ( );
__declspec(implementation_key(8176)) void ILines::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8177)) _variant_t ILines::GetArrowHeadWidth ( );
__declspec(implementation_key(8178)) void ILines::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8179)) BorderPtr ILines::GetBorder ( );
__declspec(implementation_key(8180)) LinePtr ILines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(8181)) long ILines::GetCount ( );
__declspec(implementation_key(8182)) GroupObjectPtr ILines::Group ( );
__declspec(implementation_key(8183)) IDispatchPtr ILines::Item ( const _variant_t & Index );
__declspec(implementation_key(8184)) IUnknownPtr ILines::_NewEnum ( );
__declspec(implementation_key(8185)) _ApplicationPtr IRectangle::GetApplication ( );
__declspec(implementation_key(8186)) enum XlCreator IRectangle::GetCreator ( );
__declspec(implementation_key(8187)) IDispatchPtr IRectangle::GetParent ( );
__declspec(implementation_key(8188)) RangePtr IRectangle::GetBottomRightCell ( );
__declspec(implementation_key(8189)) _variant_t IRectangle::BringToFront ( );
__declspec(implementation_key(8190)) _variant_t IRectangle::Copy ( );
__declspec(implementation_key(8191)) _variant_t IRectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8192)) _variant_t IRectangle::Cut ( );
__declspec(implementation_key(8193)) _variant_t IRectangle::Delete ( );
__declspec(implementation_key(8194)) IDispatchPtr IRectangle::Duplicate ( );
__declspec(implementation_key(8195)) VARIANT_BOOL IRectangle::GetEnabled ( );
__declspec(implementation_key(8196)) void IRectangle::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8197)) double IRectangle::GetHeight ( );
__declspec(implementation_key(8198)) void IRectangle::PutHeight ( double RHS );
__declspec(implementation_key(8199)) long IRectangle::GetIndex ( );
__declspec(implementation_key(8200)) double IRectangle::GetLeft ( );
__declspec(implementation_key(8201)) void IRectangle::PutLeft ( double RHS );
__declspec(implementation_key(8202)) VARIANT_BOOL IRectangle::GetLocked ( );
__declspec(implementation_key(8203)) void IRectangle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8204)) _bstr_t IRectangle::GetName ( );
__declspec(implementation_key(8205)) void IRectangle::PutName ( _bstr_t RHS );
__declspec(implementation_key(8206)) _bstr_t IRectangle::GetOnAction ( );
__declspec(implementation_key(8207)) void IRectangle::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8208)) _variant_t IRectangle::GetPlacement ( );
__declspec(implementation_key(8209)) void IRectangle::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8210)) VARIANT_BOOL IRectangle::GetPrintObject ( );
__declspec(implementation_key(8211)) void IRectangle::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8212)) _variant_t IRectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(8213)) _variant_t IRectangle::SendToBack ( );
__declspec(implementation_key(8214)) double IRectangle::GetTop ( );
__declspec(implementation_key(8215)) void IRectangle::PutTop ( double RHS );
__declspec(implementation_key(8216)) RangePtr IRectangle::GetTopLeftCell ( );
__declspec(implementation_key(8217)) VARIANT_BOOL IRectangle::GetVisible ( );
__declspec(implementation_key(8218)) void IRectangle::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8219)) double IRectangle::GetWidth ( );
__declspec(implementation_key(8220)) void IRectangle::PutWidth ( double RHS );
__declspec(implementation_key(8221)) long IRectangle::GetZOrder ( );
__declspec(implementation_key(8222)) ShapeRangePtr IRectangle::GetShapeRange ( );
__declspec(implementation_key(8223)) VARIANT_BOOL IRectangle::GetAddIndent ( );
__declspec(implementation_key(8224)) void IRectangle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8225)) _variant_t IRectangle::GetAutoScaleFont ( );
__declspec(implementation_key(8226)) void IRectangle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8227)) VARIANT_BOOL IRectangle::GetAutoSize ( );
__declspec(implementation_key(8228)) void IRectangle::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8229)) _bstr_t IRectangle::GetCaption ( );
__declspec(implementation_key(8230)) void IRectangle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8231)) CharactersPtr IRectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8232)) _variant_t IRectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8233)) FontPtr IRectangle::GetFont ( );
__declspec(implementation_key(8234)) _bstr_t IRectangle::GetFormula ( );
__declspec(implementation_key(8235)) void IRectangle::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8236)) _variant_t IRectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(8237)) void IRectangle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8238)) VARIANT_BOOL IRectangle::GetLockedText ( );
__declspec(implementation_key(8239)) void IRectangle::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8240)) _variant_t IRectangle::GetOrientation ( );
__declspec(implementation_key(8241)) void IRectangle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8242)) _bstr_t IRectangle::GetText ( );
__declspec(implementation_key(8243)) void IRectangle::PutText ( _bstr_t RHS );
__declspec(implementation_key(8244)) _variant_t IRectangle::GetVerticalAlignment ( );
__declspec(implementation_key(8245)) void IRectangle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8246)) long IRectangle::GetReadingOrder ( );
__declspec(implementation_key(8247)) void IRectangle::PutReadingOrder ( long RHS );
__declspec(implementation_key(8248)) BorderPtr IRectangle::GetBorder ( );
__declspec(implementation_key(8249)) InteriorPtr IRectangle::GetInterior ( );
__declspec(implementation_key(8250)) VARIANT_BOOL IRectangle::GetShadow ( );
__declspec(implementation_key(8251)) void IRectangle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8252)) VARIANT_BOOL IRectangle::GetRoundedCorners ( );
__declspec(implementation_key(8253)) void IRectangle::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8254)) _ApplicationPtr IRectangles::GetApplication ( );
__declspec(implementation_key(8255)) enum XlCreator IRectangles::GetCreator ( );
__declspec(implementation_key(8256)) IDispatchPtr IRectangles::GetParent ( );
__declspec(implementation_key(8257)) _variant_t IRectangles::BringToFront ( );
__declspec(implementation_key(8258)) _variant_t IRectangles::Copy ( );
__declspec(implementation_key(8259)) _variant_t IRectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8260)) _variant_t IRectangles::Cut ( );
__declspec(implementation_key(8261)) _variant_t IRectangles::Delete ( );
__declspec(implementation_key(8262)) IDispatchPtr IRectangles::Duplicate ( );
__declspec(implementation_key(8263)) VARIANT_BOOL IRectangles::GetEnabled ( );
__declspec(implementation_key(8264)) void IRectangles::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8265)) double IRectangles::GetHeight ( );
__declspec(implementation_key(8266)) void IRectangles::PutHeight ( double RHS );
__declspec(implementation_key(8267)) double IRectangles::GetLeft ( );
__declspec(implementation_key(8268)) void IRectangles::PutLeft ( double RHS );
__declspec(implementation_key(8269)) VARIANT_BOOL IRectangles::GetLocked ( );
__declspec(implementation_key(8270)) void IRectangles::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8271)) _bstr_t IRectangles::GetOnAction ( );
__declspec(implementation_key(8272)) void IRectangles::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8273)) _variant_t IRectangles::GetPlacement ( );
__declspec(implementation_key(8274)) void IRectangles::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8275)) VARIANT_BOOL IRectangles::GetPrintObject ( );
__declspec(implementation_key(8276)) void IRectangles::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8277)) _variant_t IRectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(8278)) _variant_t IRectangles::SendToBack ( );
__declspec(implementation_key(8279)) double IRectangles::GetTop ( );
__declspec(implementation_key(8280)) void IRectangles::PutTop ( double RHS );
__declspec(implementation_key(8281)) VARIANT_BOOL IRectangles::GetVisible ( );
__declspec(implementation_key(8282)) void IRectangles::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8283)) double IRectangles::GetWidth ( );
__declspec(implementation_key(8284)) void IRectangles::PutWidth ( double RHS );
__declspec(implementation_key(8285)) long IRectangles::GetZOrder ( );
__declspec(implementation_key(8286)) ShapeRangePtr IRectangles::GetShapeRange ( );
__declspec(implementation_key(8287)) VARIANT_BOOL IRectangles::GetAddIndent ( );
__declspec(implementation_key(8288)) void IRectangles::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8289)) _variant_t IRectangles::GetAutoScaleFont ( );
__declspec(implementation_key(8290)) void IRectangles::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8291)) VARIANT_BOOL IRectangles::GetAutoSize ( );
__declspec(implementation_key(8292)) void IRectangles::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8293)) _bstr_t IRectangles::GetCaption ( );
__declspec(implementation_key(8294)) void IRectangles::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8295)) CharactersPtr IRectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8296)) _variant_t IRectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8297)) FontPtr IRectangles::GetFont ( );
__declspec(implementation_key(8298)) _bstr_t IRectangles::GetFormula ( );
__declspec(implementation_key(8299)) void IRectangles::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8300)) _variant_t IRectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(8301)) void IRectangles::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8302)) VARIANT_BOOL IRectangles::GetLockedText ( );
__declspec(implementation_key(8303)) void IRectangles::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8304)) _variant_t IRectangles::GetOrientation ( );
__declspec(implementation_key(8305)) void IRectangles::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8306)) _bstr_t IRectangles::GetText ( );
__declspec(implementation_key(8307)) void IRectangles::PutText ( _bstr_t RHS );
__declspec(implementation_key(8308)) _variant_t IRectangles::GetVerticalAlignment ( );
__declspec(implementation_key(8309)) void IRectangles::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8310)) long IRectangles::GetReadingOrder ( );
__declspec(implementation_key(8311)) void IRectangles::PutReadingOrder ( long RHS );
__declspec(implementation_key(8312)) BorderPtr IRectangles::GetBorder ( );
__declspec(implementation_key(8313)) InteriorPtr IRectangles::GetInterior ( );
__declspec(implementation_key(8314)) VARIANT_BOOL IRectangles::GetShadow ( );
__declspec(implementation_key(8315)) void IRectangles::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8316)) VARIANT_BOOL IRectangles::GetRoundedCorners ( );
__declspec(implementation_key(8317)) void IRectangles::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8318)) RectanglePtr IRectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8319)) long IRectangles::GetCount ( );
__declspec(implementation_key(8320)) GroupObjectPtr IRectangles::Group ( );
__declspec(implementation_key(8321)) IDispatchPtr IRectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(8322)) IUnknownPtr IRectangles::_NewEnum ( );
__declspec(implementation_key(8323)) _ApplicationPtr IOval::GetApplication ( );
__declspec(implementation_key(8324)) enum XlCreator IOval::GetCreator ( );
__declspec(implementation_key(8325)) IDispatchPtr IOval::GetParent ( );
__declspec(implementation_key(8326)) RangePtr IOval::GetBottomRightCell ( );
__declspec(implementation_key(8327)) _variant_t IOval::BringToFront ( );
__declspec(implementation_key(8328)) _variant_t IOval::Copy ( );
__declspec(implementation_key(8329)) _variant_t IOval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8330)) _variant_t IOval::Cut ( );
__declspec(implementation_key(8331)) _variant_t IOval::Delete ( );
__declspec(implementation_key(8332)) IDispatchPtr IOval::Duplicate ( );
__declspec(implementation_key(8333)) VARIANT_BOOL IOval::GetEnabled ( );
__declspec(implementation_key(8334)) void IOval::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8335)) double IOval::GetHeight ( );
__declspec(implementation_key(8336)) void IOval::PutHeight ( double RHS );
__declspec(implementation_key(8337)) long IOval::GetIndex ( );
__declspec(implementation_key(8338)) double IOval::GetLeft ( );
__declspec(implementation_key(8339)) void IOval::PutLeft ( double RHS );
__declspec(implementation_key(8340)) VARIANT_BOOL IOval::GetLocked ( );
__declspec(implementation_key(8341)) void IOval::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8342)) _bstr_t IOval::GetName ( );
__declspec(implementation_key(8343)) void IOval::PutName ( _bstr_t RHS );
__declspec(implementation_key(8344)) _bstr_t IOval::GetOnAction ( );
__declspec(implementation_key(8345)) void IOval::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8346)) _variant_t IOval::GetPlacement ( );
__declspec(implementation_key(8347)) void IOval::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8348)) VARIANT_BOOL IOval::GetPrintObject ( );
__declspec(implementation_key(8349)) void IOval::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8350)) _variant_t IOval::Select ( const _variant_t & Replace );
__declspec(implementation_key(8351)) _variant_t IOval::SendToBack ( );
__declspec(implementation_key(8352)) double IOval::GetTop ( );
__declspec(implementation_key(8353)) void IOval::PutTop ( double RHS );
__declspec(implementation_key(8354)) RangePtr IOval::GetTopLeftCell ( );
__declspec(implementation_key(8355)) VARIANT_BOOL IOval::GetVisible ( );
__declspec(implementation_key(8356)) void IOval::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8357)) double IOval::GetWidth ( );
__declspec(implementation_key(8358)) void IOval::PutWidth ( double RHS );
__declspec(implementation_key(8359)) long IOval::GetZOrder ( );
__declspec(implementation_key(8360)) ShapeRangePtr IOval::GetShapeRange ( );
__declspec(implementation_key(8361)) VARIANT_BOOL IOval::GetAddIndent ( );
__declspec(implementation_key(8362)) void IOval::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8363)) _variant_t IOval::GetAutoScaleFont ( );
__declspec(implementation_key(8364)) void IOval::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8365)) VARIANT_BOOL IOval::GetAutoSize ( );
__declspec(implementation_key(8366)) void IOval::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8367)) _bstr_t IOval::GetCaption ( );
__declspec(implementation_key(8368)) void IOval::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8369)) CharactersPtr IOval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8370)) _variant_t IOval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8371)) FontPtr IOval::GetFont ( );
__declspec(implementation_key(8372)) _bstr_t IOval::GetFormula ( );
__declspec(implementation_key(8373)) void IOval::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8374)) _variant_t IOval::GetHorizontalAlignment ( );
__declspec(implementation_key(8375)) void IOval::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8376)) VARIANT_BOOL IOval::GetLockedText ( );
__declspec(implementation_key(8377)) void IOval::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8378)) _variant_t IOval::GetOrientation ( );
__declspec(implementation_key(8379)) void IOval::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8380)) _bstr_t IOval::GetText ( );
__declspec(implementation_key(8381)) void IOval::PutText ( _bstr_t RHS );
__declspec(implementation_key(8382)) _variant_t IOval::GetVerticalAlignment ( );
__declspec(implementation_key(8383)) void IOval::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8384)) long IOval::GetReadingOrder ( );
__declspec(implementation_key(8385)) void IOval::PutReadingOrder ( long RHS );
__declspec(implementation_key(8386)) BorderPtr IOval::GetBorder ( );
__declspec(implementation_key(8387)) InteriorPtr IOval::GetInterior ( );
__declspec(implementation_key(8388)) VARIANT_BOOL IOval::GetShadow ( );
__declspec(implementation_key(8389)) void IOval::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8390)) _ApplicationPtr IOvals::GetApplication ( );
__declspec(implementation_key(8391)) enum XlCreator IOvals::GetCreator ( );
__declspec(implementation_key(8392)) IDispatchPtr IOvals::GetParent ( );
__declspec(implementation_key(8393)) _variant_t IOvals::BringToFront ( );
__declspec(implementation_key(8394)) _variant_t IOvals::Copy ( );
__declspec(implementation_key(8395)) _variant_t IOvals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8396)) _variant_t IOvals::Cut ( );
__declspec(implementation_key(8397)) _variant_t IOvals::Delete ( );
__declspec(implementation_key(8398)) IDispatchPtr IOvals::Duplicate ( );
__declspec(implementation_key(8399)) VARIANT_BOOL IOvals::GetEnabled ( );
__declspec(implementation_key(8400)) void IOvals::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8401)) double IOvals::GetHeight ( );
__declspec(implementation_key(8402)) void IOvals::PutHeight ( double RHS );
__declspec(implementation_key(8403)) double IOvals::GetLeft ( );
__declspec(implementation_key(8404)) void IOvals::PutLeft ( double RHS );
__declspec(implementation_key(8405)) VARIANT_BOOL IOvals::GetLocked ( );
__declspec(implementation_key(8406)) void IOvals::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8407)) _bstr_t IOvals::GetOnAction ( );
__declspec(implementation_key(8408)) void IOvals::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8409)) _variant_t IOvals::GetPlacement ( );
__declspec(implementation_key(8410)) void IOvals::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8411)) VARIANT_BOOL IOvals::GetPrintObject ( );
__declspec(implementation_key(8412)) void IOvals::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8413)) _variant_t IOvals::Select ( const _variant_t & Replace );
__declspec(implementation_key(8414)) _variant_t IOvals::SendToBack ( );
__declspec(implementation_key(8415)) double IOvals::GetTop ( );
__declspec(implementation_key(8416)) void IOvals::PutTop ( double RHS );
__declspec(implementation_key(8417)) VARIANT_BOOL IOvals::GetVisible ( );
__declspec(implementation_key(8418)) void IOvals::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8419)) double IOvals::GetWidth ( );
__declspec(implementation_key(8420)) void IOvals::PutWidth ( double RHS );
__declspec(implementation_key(8421)) long IOvals::GetZOrder ( );
__declspec(implementation_key(8422)) ShapeRangePtr IOvals::GetShapeRange ( );
__declspec(implementation_key(8423)) VARIANT_BOOL IOvals::GetAddIndent ( );
__declspec(implementation_key(8424)) void IOvals::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8425)) _variant_t IOvals::GetAutoScaleFont ( );
__declspec(implementation_key(8426)) void IOvals::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8427)) VARIANT_BOOL IOvals::GetAutoSize ( );
__declspec(implementation_key(8428)) void IOvals::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8429)) _bstr_t IOvals::GetCaption ( );
__declspec(implementation_key(8430)) void IOvals::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8431)) CharactersPtr IOvals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8432)) _variant_t IOvals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8433)) FontPtr IOvals::GetFont ( );
__declspec(implementation_key(8434)) _bstr_t IOvals::GetFormula ( );
__declspec(implementation_key(8435)) void IOvals::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8436)) _variant_t IOvals::GetHorizontalAlignment ( );
__declspec(implementation_key(8437)) void IOvals::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8438)) VARIANT_BOOL IOvals::GetLockedText ( );
__declspec(implementation_key(8439)) void IOvals::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8440)) _variant_t IOvals::GetOrientation ( );
__declspec(implementation_key(8441)) void IOvals::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8442)) _bstr_t IOvals::GetText ( );
__declspec(implementation_key(8443)) void IOvals::PutText ( _bstr_t RHS );
__declspec(implementation_key(8444)) _variant_t IOvals::GetVerticalAlignment ( );
__declspec(implementation_key(8445)) void IOvals::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8446)) long IOvals::GetReadingOrder ( );
__declspec(implementation_key(8447)) void IOvals::PutReadingOrder ( long RHS );
__declspec(implementation_key(8448)) BorderPtr IOvals::GetBorder ( );
__declspec(implementation_key(8449)) InteriorPtr IOvals::GetInterior ( );
__declspec(implementation_key(8450)) VARIANT_BOOL IOvals::GetShadow ( );
__declspec(implementation_key(8451)) void IOvals::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8452)) OvalPtr IOvals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8453)) long IOvals::GetCount ( );
__declspec(implementation_key(8454)) GroupObjectPtr IOvals::Group ( );
__declspec(implementation_key(8455)) IDispatchPtr IOvals::Item ( const _variant_t & Index );
__declspec(implementation_key(8456)) IUnknownPtr IOvals::_NewEnum ( );
__declspec(implementation_key(8457)) _ApplicationPtr IArc::GetApplication ( );
__declspec(implementation_key(8458)) enum XlCreator IArc::GetCreator ( );
__declspec(implementation_key(8459)) IDispatchPtr IArc::GetParent ( );
__declspec(implementation_key(8460)) RangePtr IArc::GetBottomRightCell ( );
__declspec(implementation_key(8461)) _variant_t IArc::BringToFront ( );
__declspec(implementation_key(8462)) _variant_t IArc::Copy ( );
__declspec(implementation_key(8463)) _variant_t IArc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8464)) _variant_t IArc::Cut ( );
__declspec(implementation_key(8465)) _variant_t IArc::Delete ( );
__declspec(implementation_key(8466)) IDispatchPtr IArc::Duplicate ( );
__declspec(implementation_key(8467)) VARIANT_BOOL IArc::GetEnabled ( );
__declspec(implementation_key(8468)) void IArc::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8469)) double IArc::GetHeight ( );
__declspec(implementation_key(8470)) void IArc::PutHeight ( double RHS );
__declspec(implementation_key(8471)) long IArc::GetIndex ( );
__declspec(implementation_key(8472)) double IArc::GetLeft ( );
__declspec(implementation_key(8473)) void IArc::PutLeft ( double RHS );
__declspec(implementation_key(8474)) VARIANT_BOOL IArc::GetLocked ( );
__declspec(implementation_key(8475)) void IArc::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8476)) _bstr_t IArc::GetName ( );
__declspec(implementation_key(8477)) void IArc::PutName ( _bstr_t RHS );
__declspec(implementation_key(8478)) _bstr_t IArc::GetOnAction ( );
__declspec(implementation_key(8479)) void IArc::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8480)) _variant_t IArc::GetPlacement ( );
__declspec(implementation_key(8481)) void IArc::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8482)) VARIANT_BOOL IArc::GetPrintObject ( );
__declspec(implementation_key(8483)) void IArc::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8484)) _variant_t IArc::Select ( const _variant_t & Replace );
__declspec(implementation_key(8485)) _variant_t IArc::SendToBack ( );
__declspec(implementation_key(8486)) double IArc::GetTop ( );
__declspec(implementation_key(8487)) void IArc::PutTop ( double RHS );
__declspec(implementation_key(8488)) RangePtr IArc::GetTopLeftCell ( );
__declspec(implementation_key(8489)) VARIANT_BOOL IArc::GetVisible ( );
__declspec(implementation_key(8490)) void IArc::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8491)) double IArc::GetWidth ( );
__declspec(implementation_key(8492)) void IArc::PutWidth ( double RHS );
__declspec(implementation_key(8493)) long IArc::GetZOrder ( );
__declspec(implementation_key(8494)) ShapeRangePtr IArc::GetShapeRange ( );
__declspec(implementation_key(8495)) VARIANT_BOOL IArc::GetAddIndent ( );
__declspec(implementation_key(8496)) void IArc::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8497)) _variant_t IArc::GetAutoScaleFont ( );
__declspec(implementation_key(8498)) void IArc::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8499)) VARIANT_BOOL IArc::GetAutoSize ( );
__declspec(implementation_key(8500)) void IArc::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8501)) _bstr_t IArc::GetCaption ( );
__declspec(implementation_key(8502)) void IArc::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8503)) CharactersPtr IArc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8504)) _variant_t IArc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8505)) FontPtr IArc::GetFont ( );
__declspec(implementation_key(8506)) _bstr_t IArc::GetFormula ( );
__declspec(implementation_key(8507)) void IArc::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8508)) _variant_t IArc::GetHorizontalAlignment ( );
__declspec(implementation_key(8509)) void IArc::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8510)) VARIANT_BOOL IArc::GetLockedText ( );
__declspec(implementation_key(8511)) void IArc::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8512)) _variant_t IArc::GetOrientation ( );
__declspec(implementation_key(8513)) void IArc::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8514)) _bstr_t IArc::GetText ( );
__declspec(implementation_key(8515)) void IArc::PutText ( _bstr_t RHS );
__declspec(implementation_key(8516)) _variant_t IArc::GetVerticalAlignment ( );
__declspec(implementation_key(8517)) void IArc::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8518)) long IArc::GetReadingOrder ( );
__declspec(implementation_key(8519)) void IArc::PutReadingOrder ( long RHS );
__declspec(implementation_key(8520)) BorderPtr IArc::GetBorder ( );
__declspec(implementation_key(8521)) InteriorPtr IArc::GetInterior ( );
__declspec(implementation_key(8522)) _ApplicationPtr IArcs::GetApplication ( );
__declspec(implementation_key(8523)) enum XlCreator IArcs::GetCreator ( );
__declspec(implementation_key(8524)) IDispatchPtr IArcs::GetParent ( );
__declspec(implementation_key(8525)) _variant_t IArcs::BringToFront ( );
__declspec(implementation_key(8526)) _variant_t IArcs::Copy ( );
__declspec(implementation_key(8527)) _variant_t IArcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8528)) _variant_t IArcs::Cut ( );
__declspec(implementation_key(8529)) _variant_t IArcs::Delete ( );
__declspec(implementation_key(8530)) IDispatchPtr IArcs::Duplicate ( );
__declspec(implementation_key(8531)) VARIANT_BOOL IArcs::GetEnabled ( );
__declspec(implementation_key(8532)) void IArcs::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8533)) double IArcs::GetHeight ( );
__declspec(implementation_key(8534)) void IArcs::PutHeight ( double RHS );
__declspec(implementation_key(8535)) double IArcs::GetLeft ( );
__declspec(implementation_key(8536)) void IArcs::PutLeft ( double RHS );
__declspec(implementation_key(8537)) VARIANT_BOOL IArcs::GetLocked ( );
__declspec(implementation_key(8538)) void IArcs::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8539)) _bstr_t IArcs::GetOnAction ( );
__declspec(implementation_key(8540)) void IArcs::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8541)) _variant_t IArcs::GetPlacement ( );
__declspec(implementation_key(8542)) void IArcs::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8543)) VARIANT_BOOL IArcs::GetPrintObject ( );
__declspec(implementation_key(8544)) void IArcs::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8545)) _variant_t IArcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(8546)) _variant_t IArcs::SendToBack ( );
__declspec(implementation_key(8547)) double IArcs::GetTop ( );
__declspec(implementation_key(8548)) void IArcs::PutTop ( double RHS );
__declspec(implementation_key(8549)) VARIANT_BOOL IArcs::GetVisible ( );
__declspec(implementation_key(8550)) void IArcs::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8551)) double IArcs::GetWidth ( );
__declspec(implementation_key(8552)) void IArcs::PutWidth ( double RHS );
__declspec(implementation_key(8553)) long IArcs::GetZOrder ( );
__declspec(implementation_key(8554)) ShapeRangePtr IArcs::GetShapeRange ( );
__declspec(implementation_key(8555)) VARIANT_BOOL IArcs::GetAddIndent ( );
__declspec(implementation_key(8556)) void IArcs::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8557)) _variant_t IArcs::GetAutoScaleFont ( );
__declspec(implementation_key(8558)) void IArcs::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8559)) VARIANT_BOOL IArcs::GetAutoSize ( );
__declspec(implementation_key(8560)) void IArcs::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8561)) _bstr_t IArcs::GetCaption ( );
__declspec(implementation_key(8562)) void IArcs::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8563)) CharactersPtr IArcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8564)) _variant_t IArcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8565)) FontPtr IArcs::GetFont ( );
__declspec(implementation_key(8566)) _bstr_t IArcs::GetFormula ( );
__declspec(implementation_key(8567)) void IArcs::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8568)) _variant_t IArcs::GetHorizontalAlignment ( );
__declspec(implementation_key(8569)) void IArcs::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8570)) VARIANT_BOOL IArcs::GetLockedText ( );
__declspec(implementation_key(8571)) void IArcs::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8572)) _variant_t IArcs::GetOrientation ( );
__declspec(implementation_key(8573)) void IArcs::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8574)) _bstr_t IArcs::GetText ( );
__declspec(implementation_key(8575)) void IArcs::PutText ( _bstr_t RHS );
__declspec(implementation_key(8576)) _variant_t IArcs::GetVerticalAlignment ( );
__declspec(implementation_key(8577)) void IArcs::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8578)) long IArcs::GetReadingOrder ( );
__declspec(implementation_key(8579)) void IArcs::PutReadingOrder ( long RHS );
__declspec(implementation_key(8580)) BorderPtr IArcs::GetBorder ( );
__declspec(implementation_key(8581)) InteriorPtr IArcs::GetInterior ( );
__declspec(implementation_key(8582)) ArcPtr IArcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(8583)) long IArcs::GetCount ( );
__declspec(implementation_key(8584)) GroupObjectPtr IArcs::Group ( );
__declspec(implementation_key(8585)) IDispatchPtr IArcs::Item ( const _variant_t & Index );
__declspec(implementation_key(8586)) IUnknownPtr IArcs::_NewEnum ( );
__declspec(implementation_key(8587)) _ApplicationPtr _IOLEObject::GetApplication ( );
__declspec(implementation_key(8588)) enum XlCreator _IOLEObject::GetCreator ( );
__declspec(implementation_key(8589)) IDispatchPtr _IOLEObject::GetParent ( );
__declspec(implementation_key(8590)) RangePtr _IOLEObject::GetBottomRightCell ( );
__declspec(implementation_key(8591)) _variant_t _IOLEObject::BringToFront ( );
__declspec(implementation_key(8592)) _variant_t _IOLEObject::Copy ( );
__declspec(implementation_key(8593)) _variant_t _IOLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8594)) _variant_t _IOLEObject::Cut ( );
__declspec(implementation_key(8595)) _variant_t _IOLEObject::Delete ( );
__declspec(implementation_key(8596)) IDispatchPtr _IOLEObject::Duplicate ( );
__declspec(implementation_key(8597)) VARIANT_BOOL _IOLEObject::GetEnabled ( );
__declspec(implementation_key(8598)) void _IOLEObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8599)) double _IOLEObject::GetHeight ( );
__declspec(implementation_key(8600)) void _IOLEObject::PutHeight ( double RHS );
__declspec(implementation_key(8601)) long _IOLEObject::GetIndex ( );
__declspec(implementation_key(8602)) double _IOLEObject::GetLeft ( );
__declspec(implementation_key(8603)) void _IOLEObject::PutLeft ( double RHS );
__declspec(implementation_key(8604)) VARIANT_BOOL _IOLEObject::GetLocked ( );
__declspec(implementation_key(8605)) void _IOLEObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8606)) _bstr_t _IOLEObject::GetName ( );
__declspec(implementation_key(8607)) void _IOLEObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(8608)) _bstr_t _IOLEObject::GetOnAction ( );
__declspec(implementation_key(8609)) void _IOLEObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8610)) _variant_t _IOLEObject::GetPlacement ( );
__declspec(implementation_key(8611)) void _IOLEObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8612)) VARIANT_BOOL _IOLEObject::GetPrintObject ( );
__declspec(implementation_key(8613)) void _IOLEObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8614)) _variant_t _IOLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(8615)) _variant_t _IOLEObject::SendToBack ( );
__declspec(implementation_key(8616)) double _IOLEObject::GetTop ( );
__declspec(implementation_key(8617)) void _IOLEObject::PutTop ( double RHS );
__declspec(implementation_key(8618)) RangePtr _IOLEObject::GetTopLeftCell ( );
__declspec(implementation_key(8619)) VARIANT_BOOL _IOLEObject::GetVisible ( );
__declspec(implementation_key(8620)) void _IOLEObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8621)) double _IOLEObject::GetWidth ( );
__declspec(implementation_key(8622)) void _IOLEObject::PutWidth ( double RHS );
__declspec(implementation_key(8623)) long _IOLEObject::GetZOrder ( );
__declspec(implementation_key(8624)) ShapeRangePtr _IOLEObject::GetShapeRange ( );
__declspec(implementation_key(8625)) BorderPtr _IOLEObject::GetBorder ( );
__declspec(implementation_key(8626)) InteriorPtr _IOLEObject::GetInterior ( );
__declspec(implementation_key(8627)) VARIANT_BOOL _IOLEObject::GetShadow ( );
__declspec(implementation_key(8628)) void _IOLEObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8629)) _variant_t _IOLEObject::Activate ( );
__declspec(implementation_key(8630)) VARIANT_BOOL _IOLEObject::GetAutoLoad ( );
__declspec(implementation_key(8631)) void _IOLEObject::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(8632)) VARIANT_BOOL _IOLEObject::GetAutoUpdate ( );
__declspec(implementation_key(8633)) void _IOLEObject::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(8634)) IDispatchPtr _IOLEObject::GetObject ( );
__declspec(implementation_key(8635)) _variant_t _IOLEObject::GetOLEType ( );
__declspec(implementation_key(8636)) _bstr_t _IOLEObject::GetSourceName ( );
__declspec(implementation_key(8637)) void _IOLEObject::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(8638)) _variant_t _IOLEObject::Update ( );
__declspec(implementation_key(8639)) _variant_t _IOLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(8640)) _bstr_t _IOLEObject::GetLinkedCell ( );
__declspec(implementation_key(8641)) void _IOLEObject::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8642)) _bstr_t _IOLEObject::GetListFillRange ( );
__declspec(implementation_key(8643)) void _IOLEObject::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(8644)) _bstr_t _IOLEObject::GetProgId ( );
__declspec(implementation_key(8645)) _bstr_t _IOLEObject::GetAltHTML ( );
__declspec(implementation_key(8646)) void _IOLEObject::PutAltHTML ( _bstr_t RHS );
__declspec(implementation_key(8647)) _ApplicationPtr ITextBox::GetApplication ( );
__declspec(implementation_key(8648)) enum XlCreator ITextBox::GetCreator ( );
__declspec(implementation_key(8649)) IDispatchPtr ITextBox::GetParent ( );
__declspec(implementation_key(8650)) RangePtr ITextBox::GetBottomRightCell ( );
__declspec(implementation_key(8651)) _variant_t ITextBox::BringToFront ( );
__declspec(implementation_key(8652)) _variant_t ITextBox::Copy ( );
__declspec(implementation_key(8653)) _variant_t ITextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8654)) _variant_t ITextBox::Cut ( );
__declspec(implementation_key(8655)) _variant_t ITextBox::Delete ( );
__declspec(implementation_key(8656)) IDispatchPtr ITextBox::Duplicate ( );
__declspec(implementation_key(8657)) VARIANT_BOOL ITextBox::GetEnabled ( );
__declspec(implementation_key(8658)) void ITextBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8659)) double ITextBox::GetHeight ( );
__declspec(implementation_key(8660)) void ITextBox::PutHeight ( double RHS );
__declspec(implementation_key(8661)) long ITextBox::GetIndex ( );
__declspec(implementation_key(8662)) double ITextBox::GetLeft ( );
__declspec(implementation_key(8663)) void ITextBox::PutLeft ( double RHS );
__declspec(implementation_key(8664)) VARIANT_BOOL ITextBox::GetLocked ( );
__declspec(implementation_key(8665)) void ITextBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8666)) _bstr_t ITextBox::GetName ( );
__declspec(implementation_key(8667)) void ITextBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(8668)) _bstr_t ITextBox::GetOnAction ( );
__declspec(implementation_key(8669)) void ITextBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8670)) _variant_t ITextBox::GetPlacement ( );
__declspec(implementation_key(8671)) void ITextBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8672)) VARIANT_BOOL ITextBox::GetPrintObject ( );
__declspec(implementation_key(8673)) void ITextBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8674)) _variant_t ITextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(8675)) _variant_t ITextBox::SendToBack ( );
__declspec(implementation_key(8676)) double ITextBox::GetTop ( );
__declspec(implementation_key(8677)) void ITextBox::PutTop ( double RHS );
__declspec(implementation_key(8678)) RangePtr ITextBox::GetTopLeftCell ( );
__declspec(implementation_key(8679)) VARIANT_BOOL ITextBox::GetVisible ( );
__declspec(implementation_key(8680)) void ITextBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8681)) double ITextBox::GetWidth ( );
__declspec(implementation_key(8682)) void ITextBox::PutWidth ( double RHS );
__declspec(implementation_key(8683)) long ITextBox::GetZOrder ( );
__declspec(implementation_key(8684)) ShapeRangePtr ITextBox::GetShapeRange ( );
__declspec(implementation_key(8685)) VARIANT_BOOL ITextBox::GetAddIndent ( );
__declspec(implementation_key(8686)) void ITextBox::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8687)) _variant_t ITextBox::GetAutoScaleFont ( );
__declspec(implementation_key(8688)) void ITextBox::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8689)) VARIANT_BOOL ITextBox::GetAutoSize ( );
__declspec(implementation_key(8690)) void ITextBox::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8691)) _bstr_t ITextBox::GetCaption ( );
__declspec(implementation_key(8692)) void ITextBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8693)) CharactersPtr ITextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8694)) _variant_t ITextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8695)) FontPtr ITextBox::GetFont ( );
__declspec(implementation_key(8696)) _bstr_t ITextBox::GetFormula ( );
__declspec(implementation_key(8697)) void ITextBox::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8698)) _variant_t ITextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(8699)) void ITextBox::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8700)) VARIANT_BOOL ITextBox::GetLockedText ( );
__declspec(implementation_key(8701)) void ITextBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8702)) _variant_t ITextBox::GetOrientation ( );
__declspec(implementation_key(8703)) void ITextBox::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8704)) _bstr_t ITextBox::GetText ( );
__declspec(implementation_key(8705)) void ITextBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(8706)) _variant_t ITextBox::GetVerticalAlignment ( );
__declspec(implementation_key(8707)) void ITextBox::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8708)) long ITextBox::GetReadingOrder ( );
__declspec(implementation_key(8709)) void ITextBox::PutReadingOrder ( long RHS );
__declspec(implementation_key(8710)) BorderPtr ITextBox::GetBorder ( );
__declspec(implementation_key(8711)) InteriorPtr ITextBox::GetInterior ( );
__declspec(implementation_key(8712)) VARIANT_BOOL ITextBox::GetRoundedCorners ( );
__declspec(implementation_key(8713)) void ITextBox::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8714)) VARIANT_BOOL ITextBox::GetShadow ( );
__declspec(implementation_key(8715)) void ITextBox::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8716)) _ApplicationPtr ITextBoxes::GetApplication ( );
__declspec(implementation_key(8717)) enum XlCreator ITextBoxes::GetCreator ( );
__declspec(implementation_key(8718)) IDispatchPtr ITextBoxes::GetParent ( );
__declspec(implementation_key(8719)) _variant_t ITextBoxes::BringToFront ( );
__declspec(implementation_key(8720)) _variant_t ITextBoxes::Copy ( );
__declspec(implementation_key(8721)) _variant_t ITextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8722)) _variant_t ITextBoxes::Cut ( );
__declspec(implementation_key(8723)) _variant_t ITextBoxes::Delete ( );
__declspec(implementation_key(8724)) IDispatchPtr ITextBoxes::Duplicate ( );
__declspec(implementation_key(8725)) VARIANT_BOOL ITextBoxes::GetEnabled ( );
__declspec(implementation_key(8726)) void ITextBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8727)) double ITextBoxes::GetHeight ( );
__declspec(implementation_key(8728)) void ITextBoxes::PutHeight ( double RHS );
__declspec(implementation_key(8729)) double ITextBoxes::GetLeft ( );
__declspec(implementation_key(8730)) void ITextBoxes::PutLeft ( double RHS );
__declspec(implementation_key(8731)) VARIANT_BOOL ITextBoxes::GetLocked ( );
__declspec(implementation_key(8732)) void ITextBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8733)) _bstr_t ITextBoxes::GetOnAction ( );
__declspec(implementation_key(8734)) void ITextBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8735)) _variant_t ITextBoxes::GetPlacement ( );
__declspec(implementation_key(8736)) void ITextBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8737)) VARIANT_BOOL ITextBoxes::GetPrintObject ( );
__declspec(implementation_key(8738)) void ITextBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8739)) _variant_t ITextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(8740)) _variant_t ITextBoxes::SendToBack ( );
__declspec(implementation_key(8741)) double ITextBoxes::GetTop ( );
__declspec(implementation_key(8742)) void ITextBoxes::PutTop ( double RHS );
__declspec(implementation_key(8743)) VARIANT_BOOL ITextBoxes::GetVisible ( );
__declspec(implementation_key(8744)) void ITextBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8745)) double ITextBoxes::GetWidth ( );
__declspec(implementation_key(8746)) void ITextBoxes::PutWidth ( double RHS );
__declspec(implementation_key(8747)) long ITextBoxes::GetZOrder ( );
__declspec(implementation_key(8748)) ShapeRangePtr ITextBoxes::GetShapeRange ( );
__declspec(implementation_key(8749)) VARIANT_BOOL ITextBoxes::GetAddIndent ( );
__declspec(implementation_key(8750)) void ITextBoxes::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8751)) _variant_t ITextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(8752)) void ITextBoxes::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8753)) VARIANT_BOOL ITextBoxes::GetAutoSize ( );
__declspec(implementation_key(8754)) void ITextBoxes::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8755)) _bstr_t ITextBoxes::GetCaption ( );
__declspec(implementation_key(8756)) void ITextBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8757)) CharactersPtr ITextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8758)) _variant_t ITextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8759)) FontPtr ITextBoxes::GetFont ( );
__declspec(implementation_key(8760)) _bstr_t ITextBoxes::GetFormula ( );
__declspec(implementation_key(8761)) void ITextBoxes::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8762)) _variant_t ITextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(8763)) void ITextBoxes::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8764)) VARIANT_BOOL ITextBoxes::GetLockedText ( );
__declspec(implementation_key(8765)) void ITextBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8766)) _variant_t ITextBoxes::GetOrientation ( );
__declspec(implementation_key(8767)) void ITextBoxes::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8768)) _bstr_t ITextBoxes::GetText ( );
__declspec(implementation_key(8769)) void ITextBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(8770)) _variant_t ITextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(8771)) void ITextBoxes::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8772)) long ITextBoxes::GetReadingOrder ( );
__declspec(implementation_key(8773)) void ITextBoxes::PutReadingOrder ( long RHS );
__declspec(implementation_key(8774)) BorderPtr ITextBoxes::GetBorder ( );
__declspec(implementation_key(8775)) InteriorPtr ITextBoxes::GetInterior ( );
__declspec(implementation_key(8776)) VARIANT_BOOL ITextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(8777)) void ITextBoxes::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8778)) VARIANT_BOOL ITextBoxes::GetShadow ( );
__declspec(implementation_key(8779)) void ITextBoxes::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8780)) TextBoxPtr ITextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8781)) long ITextBoxes::GetCount ( );
__declspec(implementation_key(8782)) GroupObjectPtr ITextBoxes::Group ( );
__declspec(implementation_key(8783)) IDispatchPtr ITextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(8784)) IUnknownPtr ITextBoxes::_NewEnum ( );
__declspec(implementation_key(8785)) _ApplicationPtr IPictures::GetApplication ( );
__declspec(implementation_key(8786)) enum XlCreator IPictures::GetCreator ( );
__declspec(implementation_key(8787)) IDispatchPtr IPictures::GetParent ( );
__declspec(implementation_key(8788)) _variant_t IPictures::BringToFront ( );
__declspec(implementation_key(8789)) _variant_t IPictures::Copy ( );
__declspec(implementation_key(8790)) _variant_t IPictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8791)) _variant_t IPictures::Cut ( );
__declspec(implementation_key(8792)) _variant_t IPictures::Delete ( );
__declspec(implementation_key(8793)) IDispatchPtr IPictures::Duplicate ( );
__declspec(implementation_key(8794)) VARIANT_BOOL IPictures::GetEnabled ( );
__declspec(implementation_key(8795)) void IPictures::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8796)) double IPictures::GetHeight ( );
__declspec(implementation_key(8797)) void IPictures::PutHeight ( double RHS );
__declspec(implementation_key(8798)) double IPictures::GetLeft ( );
__declspec(implementation_key(8799)) void IPictures::PutLeft ( double RHS );
__declspec(implementation_key(8800)) VARIANT_BOOL IPictures::GetLocked ( );
__declspec(implementation_key(8801)) void IPictures::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8802)) _bstr_t IPictures::GetOnAction ( );
__declspec(implementation_key(8803)) void IPictures::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8804)) _variant_t IPictures::GetPlacement ( );
__declspec(implementation_key(8805)) void IPictures::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8806)) VARIANT_BOOL IPictures::GetPrintObject ( );
__declspec(implementation_key(8807)) void IPictures::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8808)) _variant_t IPictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(8809)) _variant_t IPictures::SendToBack ( );
__declspec(implementation_key(8810)) double IPictures::GetTop ( );
__declspec(implementation_key(8811)) void IPictures::PutTop ( double RHS );
__declspec(implementation_key(8812)) VARIANT_BOOL IPictures::GetVisible ( );
__declspec(implementation_key(8813)) void IPictures::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8814)) double IPictures::GetWidth ( );
__declspec(implementation_key(8815)) void IPictures::PutWidth ( double RHS );
__declspec(implementation_key(8816)) long IPictures::GetZOrder ( );
__declspec(implementation_key(8817)) ShapeRangePtr IPictures::GetShapeRange ( );
__declspec(implementation_key(8818)) BorderPtr IPictures::GetBorder ( );
__declspec(implementation_key(8819)) InteriorPtr IPictures::GetInterior ( );
__declspec(implementation_key(8820)) VARIANT_BOOL IPictures::GetShadow ( );
__declspec(implementation_key(8821)) void IPictures::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8822)) _bstr_t IPictures::GetFormula ( );
__declspec(implementation_key(8823)) void IPictures::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8824)) PicturePtr IPictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8825)) long IPictures::GetCount ( );
__declspec(implementation_key(8826)) GroupObjectPtr IPictures::Group ( );
__declspec(implementation_key(8827)) PicturePtr IPictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(8828)) IDispatchPtr IPictures::Item ( const _variant_t & Index );
__declspec(implementation_key(8829)) IUnknownPtr IPictures::_NewEnum ( );
__declspec(implementation_key(8830)) PicturePtr IPictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(8831)) _ApplicationPtr IDrawing::GetApplication ( );
__declspec(implementation_key(8832)) enum XlCreator IDrawing::GetCreator ( );
__declspec(implementation_key(8833)) IDispatchPtr IDrawing::GetParent ( );
__declspec(implementation_key(8834)) RangePtr IDrawing::GetBottomRightCell ( );
__declspec(implementation_key(8835)) _variant_t IDrawing::BringToFront ( );
__declspec(implementation_key(8836)) _variant_t IDrawing::Copy ( );
__declspec(implementation_key(8837)) _variant_t IDrawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8838)) _variant_t IDrawing::Cut ( );
__declspec(implementation_key(8839)) _variant_t IDrawing::Delete ( );
__declspec(implementation_key(8840)) IDispatchPtr IDrawing::Duplicate ( );
__declspec(implementation_key(8841)) VARIANT_BOOL IDrawing::GetEnabled ( );
__declspec(implementation_key(8842)) void IDrawing::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8843)) double IDrawing::GetHeight ( );
__declspec(implementation_key(8844)) void IDrawing::PutHeight ( double RHS );
__declspec(implementation_key(8845)) long IDrawing::GetIndex ( );
__declspec(implementation_key(8846)) double IDrawing::GetLeft ( );
__declspec(implementation_key(8847)) void IDrawing::PutLeft ( double RHS );
__declspec(implementation_key(8848)) VARIANT_BOOL IDrawing::GetLocked ( );
__declspec(implementation_key(8849)) void IDrawing::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8850)) _bstr_t IDrawing::GetName ( );
__declspec(implementation_key(8851)) void IDrawing::PutName ( _bstr_t RHS );
__declspec(implementation_key(8852)) _bstr_t IDrawing::GetOnAction ( );
__declspec(implementation_key(8853)) void IDrawing::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8854)) _variant_t IDrawing::GetPlacement ( );
__declspec(implementation_key(8855)) void IDrawing::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8856)) VARIANT_BOOL IDrawing::GetPrintObject ( );
__declspec(implementation_key(8857)) void IDrawing::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8858)) _variant_t IDrawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(8859)) _variant_t IDrawing::SendToBack ( );
__declspec(implementation_key(8860)) double IDrawing::GetTop ( );
__declspec(implementation_key(8861)) void IDrawing::PutTop ( double RHS );
__declspec(implementation_key(8862)) RangePtr IDrawing::GetTopLeftCell ( );
__declspec(implementation_key(8863)) VARIANT_BOOL IDrawing::GetVisible ( );
__declspec(implementation_key(8864)) void IDrawing::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8865)) double IDrawing::GetWidth ( );
__declspec(implementation_key(8866)) void IDrawing::PutWidth ( double RHS );
__declspec(implementation_key(8867)) long IDrawing::GetZOrder ( );
__declspec(implementation_key(8868)) ShapeRangePtr IDrawing::GetShapeRange ( );
__declspec(implementation_key(8869)) VARIANT_BOOL IDrawing::GetAddIndent ( );
__declspec(implementation_key(8870)) void IDrawing::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8871)) _variant_t IDrawing::GetAutoScaleFont ( );
__declspec(implementation_key(8872)) void IDrawing::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8873)) VARIANT_BOOL IDrawing::GetAutoSize ( );
__declspec(implementation_key(8874)) void IDrawing::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8875)) _bstr_t IDrawing::GetCaption ( );
__declspec(implementation_key(8876)) void IDrawing::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8877)) CharactersPtr IDrawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8878)) _variant_t IDrawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8879)) FontPtr IDrawing::GetFont ( );
__declspec(implementation_key(8880)) _bstr_t IDrawing::GetFormula ( );
__declspec(implementation_key(8881)) void IDrawing::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8882)) _variant_t IDrawing::GetHorizontalAlignment ( );
__declspec(implementation_key(8883)) void IDrawing::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8884)) VARIANT_BOOL IDrawing::GetLockedText ( );
__declspec(implementation_key(8885)) void IDrawing::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8886)) _variant_t IDrawing::GetOrientation ( );
__declspec(implementation_key(8887)) void IDrawing::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8888)) _bstr_t IDrawing::GetText ( );
__declspec(implementation_key(8889)) void IDrawing::PutText ( _bstr_t RHS );
__declspec(implementation_key(8890)) _variant_t IDrawing::GetVerticalAlignment ( );
__declspec(implementation_key(8891)) void IDrawing::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8892)) long IDrawing::GetReadingOrder ( );
__declspec(implementation_key(8893)) void IDrawing::PutReadingOrder ( long RHS );
__declspec(implementation_key(8894)) BorderPtr IDrawing::GetBorder ( );
__declspec(implementation_key(8895)) InteriorPtr IDrawing::GetInterior ( );
__declspec(implementation_key(8896)) VARIANT_BOOL IDrawing::GetShadow ( );
__declspec(implementation_key(8897)) void IDrawing::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8898)) _variant_t IDrawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(8899)) _variant_t IDrawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(8900)) _variant_t IDrawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(8901)) _ApplicationPtr IDrawings::GetApplication ( );
__declspec(implementation_key(8902)) enum XlCreator IDrawings::GetCreator ( );
__declspec(implementation_key(8903)) IDispatchPtr IDrawings::GetParent ( );
__declspec(implementation_key(8904)) _variant_t IDrawings::BringToFront ( );
__declspec(implementation_key(8905)) _variant_t IDrawings::Copy ( );
__declspec(implementation_key(8906)) _variant_t IDrawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8907)) _variant_t IDrawings::Cut ( );
__declspec(implementation_key(8908)) _variant_t IDrawings::Delete ( );
__declspec(implementation_key(8909)) IDispatchPtr IDrawings::Duplicate ( );
__declspec(implementation_key(8910)) VARIANT_BOOL IDrawings::GetEnabled ( );
__declspec(implementation_key(8911)) void IDrawings::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8912)) double IDrawings::GetHeight ( );
__declspec(implementation_key(8913)) void IDrawings::PutHeight ( double RHS );
__declspec(implementation_key(8914)) double IDrawings::GetLeft ( );
__declspec(implementation_key(8915)) void IDrawings::PutLeft ( double RHS );
__declspec(implementation_key(8916)) VARIANT_BOOL IDrawings::GetLocked ( );
__declspec(implementation_key(8917)) void IDrawings::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8918)) _bstr_t IDrawings::GetOnAction ( );
__declspec(implementation_key(8919)) void IDrawings::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8920)) _variant_t IDrawings::GetPlacement ( );
__declspec(implementation_key(8921)) void IDrawings::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8922)) VARIANT_BOOL IDrawings::GetPrintObject ( );
__declspec(implementation_key(8923)) void IDrawings::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8924)) _variant_t IDrawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(8925)) _variant_t IDrawings::SendToBack ( );
__declspec(implementation_key(8926)) double IDrawings::GetTop ( );
__declspec(implementation_key(8927)) void IDrawings::PutTop ( double RHS );
__declspec(implementation_key(8928)) VARIANT_BOOL IDrawings::GetVisible ( );
__declspec(implementation_key(8929)) void IDrawings::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8930)) double IDrawings::GetWidth ( );
__declspec(implementation_key(8931)) void IDrawings::PutWidth ( double RHS );
__declspec(implementation_key(8932)) long IDrawings::GetZOrder ( );
__declspec(implementation_key(8933)) ShapeRangePtr IDrawings::GetShapeRange ( );
__declspec(implementation_key(8934)) VARIANT_BOOL IDrawings::GetAddIndent ( );
__declspec(implementation_key(8935)) void IDrawings::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8936)) _variant_t IDrawings::GetAutoScaleFont ( );
__declspec(implementation_key(8937)) void IDrawings::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(8938)) VARIANT_BOOL IDrawings::GetAutoSize ( );
__declspec(implementation_key(8939)) void IDrawings::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8940)) _bstr_t IDrawings::GetCaption ( );
__declspec(implementation_key(8941)) void IDrawings::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8942)) CharactersPtr IDrawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8943)) _variant_t IDrawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8944)) FontPtr IDrawings::GetFont ( );
__declspec(implementation_key(8945)) _bstr_t IDrawings::GetFormula ( );
__declspec(implementation_key(8946)) void IDrawings::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(8947)) _variant_t IDrawings::GetHorizontalAlignment ( );
__declspec(implementation_key(8948)) void IDrawings::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8949)) VARIANT_BOOL IDrawings::GetLockedText ( );
__declspec(implementation_key(8950)) void IDrawings::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8951)) _variant_t IDrawings::GetOrientation ( );
__declspec(implementation_key(8952)) void IDrawings::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8953)) _bstr_t IDrawings::GetText ( );
__declspec(implementation_key(8954)) void IDrawings::PutText ( _bstr_t RHS );
__declspec(implementation_key(8955)) _variant_t IDrawings::GetVerticalAlignment ( );
__declspec(implementation_key(8956)) void IDrawings::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8957)) long IDrawings::GetReadingOrder ( );
__declspec(implementation_key(8958)) void IDrawings::PutReadingOrder ( long RHS );
__declspec(implementation_key(8959)) BorderPtr IDrawings::GetBorder ( );
__declspec(implementation_key(8960)) InteriorPtr IDrawings::GetInterior ( );
__declspec(implementation_key(8961)) VARIANT_BOOL IDrawings::GetShadow ( );
__declspec(implementation_key(8962)) void IDrawings::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8963)) _variant_t IDrawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(8964)) DrawingPtr IDrawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(8965)) long IDrawings::GetCount ( );
__declspec(implementation_key(8966)) GroupObjectPtr IDrawings::Group ( );
__declspec(implementation_key(8967)) IDispatchPtr IDrawings::Item ( const _variant_t & Index );
__declspec(implementation_key(8968)) IUnknownPtr IDrawings::_NewEnum ( );
__declspec(implementation_key(8969)) _ApplicationPtr IRoutingSlip::GetApplication ( );
__declspec(implementation_key(8970)) enum XlCreator IRoutingSlip::GetCreator ( );
__declspec(implementation_key(8971)) IDispatchPtr IRoutingSlip::GetParent ( );
__declspec(implementation_key(8972)) enum XlRoutingSlipDelivery IRoutingSlip::GetDelivery ( );
__declspec(implementation_key(8973)) void IRoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery RHS );
__declspec(implementation_key(8974)) _variant_t IRoutingSlip::GetMessage ( );
__declspec(implementation_key(8975)) void IRoutingSlip::PutMessage ( const _variant_t & RHS );
__declspec(implementation_key(8976)) _variant_t IRoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(8977)) void IRoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8978)) _variant_t IRoutingSlip::Reset ( );
__declspec(implementation_key(8979)) VARIANT_BOOL IRoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(8980)) void IRoutingSlip::PutReturnWhenDone ( VARIANT_BOOL RHS );
__declspec(implementation_key(8981)) enum XlRoutingSlipStatus IRoutingSlip::GetStatus ( );
__declspec(implementation_key(8982)) _variant_t IRoutingSlip::GetSubject ( );
__declspec(implementation_key(8983)) void IRoutingSlip::PutSubject ( const _variant_t & RHS );
__declspec(implementation_key(8984)) VARIANT_BOOL IRoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(8985)) void IRoutingSlip::PutTrackStatus ( VARIANT_BOOL RHS );
__declspec(implementation_key(8986)) _ApplicationPtr IOutline::GetApplication ( );
__declspec(implementation_key(8987)) enum XlCreator IOutline::GetCreator ( );
__declspec(implementation_key(8988)) IDispatchPtr IOutline::GetParent ( );
__declspec(implementation_key(8989)) VARIANT_BOOL IOutline::GetAutomaticStyles ( );
__declspec(implementation_key(8990)) void IOutline::PutAutomaticStyles ( VARIANT_BOOL RHS );
__declspec(implementation_key(8991)) _variant_t IOutline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(8992)) enum XlSummaryColumn IOutline::GetSummaryColumn ( );
__declspec(implementation_key(8993)) void IOutline::PutSummaryColumn ( enum XlSummaryColumn RHS );
__declspec(implementation_key(8994)) enum XlSummaryRow IOutline::GetSummaryRow ( );
__declspec(implementation_key(8995)) void IOutline::PutSummaryRow ( enum XlSummaryRow RHS );
__declspec(implementation_key(8996)) _ApplicationPtr IModule::GetApplication ( );
__declspec(implementation_key(8997)) enum XlCreator IModule::GetCreator ( );
__declspec(implementation_key(8998)) IDispatchPtr IModule::GetParent ( );
__declspec(implementation_key(8999)) HRESULT IModule::Activate ( long lcid );
__declspec(implementation_key(9000)) HRESULT IModule::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9001)) HRESULT IModule::Delete ( long lcid );
__declspec(implementation_key(9002)) _bstr_t IModule::GetCodeName ( );
__declspec(implementation_key(9003)) _bstr_t IModule::Get_CodeName ( );
__declspec(implementation_key(9004)) void IModule::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(9005)) long IModule::GetIndex ( long lcid );
__declspec(implementation_key(9006)) HRESULT IModule::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9007)) _bstr_t IModule::GetName ( );
__declspec(implementation_key(9008)) void IModule::PutName ( _bstr_t RHS );
__declspec(implementation_key(9009)) IDispatchPtr IModule::GetNext ( );
__declspec(implementation_key(9010)) _bstr_t IModule::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(9011)) void IModule::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9012)) _bstr_t IModule::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(9013)) void IModule::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9014)) _bstr_t IModule::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(9015)) void IModule::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9016)) PageSetupPtr IModule::GetPageSetup ( );
__declspec(implementation_key(9017)) IDispatchPtr IModule::GetPrevious ( );
__declspec(implementation_key(9018)) HRESULT IModule::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9019)) HRESULT IModule::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(9020)) VARIANT_BOOL IModule::GetProtectContents ( long lcid );
__declspec(implementation_key(9021)) VARIANT_BOOL IModule::GetProtectionMode ( long lcid );
__declspec(implementation_key(9022)) HRESULT IModule::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(9023)) HRESULT IModule::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9024)) HRESULT IModule::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(9025)) enum XlSheetVisibility IModule::GetVisible ( long lcid );
__declspec(implementation_key(9026)) void IModule::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(9027)) ShapesPtr IModule::GetShapes ( );
__declspec(implementation_key(9028)) _variant_t IModule::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(9029)) _ApplicationPtr IModules::GetApplication ( );
__declspec(implementation_key(9030)) enum XlCreator IModules::GetCreator ( );
__declspec(implementation_key(9031)) IDispatchPtr IModules::GetParent ( );
__declspec(implementation_key(9032)) ModulePtr IModules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(9033)) HRESULT IModules::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9034)) long IModules::GetCount ( );
__declspec(implementation_key(9035)) HRESULT IModules::Delete ( long lcid );
__declspec(implementation_key(9036)) IDispatchPtr IModules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(9037)) HRESULT IModules::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9038)) IUnknownPtr IModules::Get_NewEnum ( );
__declspec(implementation_key(9039)) HRESULT IModules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9040)) HRESULT IModules::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9041)) HPageBreaksPtr IModules::GetHPageBreaks ( );
__declspec(implementation_key(9042)) VPageBreaksPtr IModules::GetVPageBreaks ( );
__declspec(implementation_key(9043)) _variant_t IModules::GetVisible ( long lcid );
__declspec(implementation_key(9044)) void IModules::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(9045)) IDispatchPtr IModules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9046)) HRESULT IModules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9047)) _ApplicationPtr IDialogSheet::GetApplication ( );
__declspec(implementation_key(9048)) enum XlCreator IDialogSheet::GetCreator ( );
__declspec(implementation_key(9049)) IDispatchPtr IDialogSheet::GetParent ( );
__declspec(implementation_key(9050)) HRESULT IDialogSheet::Activate ( long lcid );
__declspec(implementation_key(9051)) HRESULT IDialogSheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9052)) HRESULT IDialogSheet::Delete ( long lcid );
__declspec(implementation_key(9053)) _bstr_t IDialogSheet::GetCodeName ( );
__declspec(implementation_key(9054)) _bstr_t IDialogSheet::Get_CodeName ( );
__declspec(implementation_key(9055)) void IDialogSheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(9056)) long IDialogSheet::GetIndex ( long lcid );
__declspec(implementation_key(9057)) HRESULT IDialogSheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9058)) _bstr_t IDialogSheet::GetName ( );
__declspec(implementation_key(9059)) void IDialogSheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(9060)) IDispatchPtr IDialogSheet::GetNext ( );
__declspec(implementation_key(9061)) _bstr_t IDialogSheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(9062)) void IDialogSheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9063)) _bstr_t IDialogSheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(9064)) void IDialogSheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9065)) _bstr_t IDialogSheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(9066)) void IDialogSheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9067)) PageSetupPtr IDialogSheet::GetPageSetup ( );
__declspec(implementation_key(9068)) IDispatchPtr IDialogSheet::GetPrevious ( );
__declspec(implementation_key(9069)) HRESULT IDialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9070)) HRESULT IDialogSheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(9071)) HRESULT IDialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(9072)) VARIANT_BOOL IDialogSheet::GetProtectContents ( long lcid );
__declspec(implementation_key(9073)) VARIANT_BOOL IDialogSheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(9074)) VARIANT_BOOL IDialogSheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(9075)) VARIANT_BOOL IDialogSheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(9076)) HRESULT IDialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(9077)) HRESULT IDialogSheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9078)) HRESULT IDialogSheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(9079)) enum XlSheetVisibility IDialogSheet::GetVisible ( long lcid );
__declspec(implementation_key(9080)) void IDialogSheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(9081)) ShapesPtr IDialogSheet::GetShapes ( );
__declspec(implementation_key(9082)) IDispatchPtr IDialogSheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9083)) IDispatchPtr IDialogSheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9084)) VARIANT_BOOL IDialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(9085)) void IDialogSheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(9086)) IDispatchPtr IDialogSheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9087)) IDispatchPtr IDialogSheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9088)) HRESULT IDialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(9089)) VARIANT_BOOL IDialogSheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(9090)) void IDialogSheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9091)) IDispatchPtr IDialogSheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9092)) IDispatchPtr IDialogSheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9093)) IDispatchPtr IDialogSheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9094)) VARIANT_BOOL IDialogSheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(9095)) void IDialogSheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9096)) enum XlEnableSelection IDialogSheet::GetEnableSelection ( );
__declspec(implementation_key(9097)) void IDialogSheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(9098)) VARIANT_BOOL IDialogSheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(9099)) void IDialogSheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9100)) VARIANT_BOOL IDialogSheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(9101)) void IDialogSheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9102)) _variant_t IDialogSheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(9103)) _variant_t IDialogSheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(9104)) HRESULT IDialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(9105)) IDispatchPtr IDialogSheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9106)) IDispatchPtr IDialogSheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9107)) IDispatchPtr IDialogSheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9108)) IDispatchPtr IDialogSheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9109)) IDispatchPtr IDialogSheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9110)) NamesPtr IDialogSheet::GetNames ( );
__declspec(implementation_key(9111)) IDispatchPtr IDialogSheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9112)) IDispatchPtr IDialogSheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9113)) IDispatchPtr IDialogSheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9114)) HRESULT IDialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(9115)) HRESULT IDialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(9116)) IDispatchPtr IDialogSheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9117)) IDispatchPtr IDialogSheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9118)) _bstr_t IDialogSheet::GetScrollArea ( );
__declspec(implementation_key(9119)) void IDialogSheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(9120)) IDispatchPtr IDialogSheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9121)) IDispatchPtr IDialogSheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9122)) IDispatchPtr IDialogSheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9123)) HPageBreaksPtr IDialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(9124)) VPageBreaksPtr IDialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(9125)) QueryTablesPtr IDialogSheet::GetQueryTables ( );
__declspec(implementation_key(9126)) VARIANT_BOOL IDialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(9127)) void IDialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(9128)) CommentsPtr IDialogSheet::GetComments ( );
__declspec(implementation_key(9129)) HyperlinksPtr IDialogSheet::GetHyperlinks ( );
__declspec(implementation_key(9130)) HRESULT IDialogSheet::ClearCircles ( );
__declspec(implementation_key(9131)) HRESULT IDialogSheet::CircleInvalid ( );
__declspec(implementation_key(9132)) long IDialogSheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(9133)) void IDialogSheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(9134)) AutoFilterPtr IDialogSheet::GetAutoFilter ( );
__declspec(implementation_key(9135)) VARIANT_BOOL IDialogSheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(9136)) void IDialogSheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9137)) Office::ScriptsPtr IDialogSheet::GetScripts ( );
__declspec(implementation_key(9138)) HRESULT IDialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9139)) HRESULT IDialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(9140)) _variant_t IDialogSheet::GetDefaultButton ( );
__declspec(implementation_key(9141)) void IDialogSheet::PutDefaultButton ( const _variant_t & RHS );
__declspec(implementation_key(9142)) DialogFramePtr IDialogSheet::GetDialogFrame ( );
__declspec(implementation_key(9143)) IDispatchPtr IDialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(9144)) _variant_t IDialogSheet::GetFocus ( );
__declspec(implementation_key(9145)) void IDialogSheet::PutFocus ( const _variant_t & RHS );
__declspec(implementation_key(9146)) VARIANT_BOOL IDialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(9147)) VARIANT_BOOL IDialogSheet::Show ( );
__declspec(implementation_key(9148)) _ApplicationPtr IDialogSheets::GetApplication ( );
__declspec(implementation_key(9149)) enum XlCreator IDialogSheets::GetCreator ( );
__declspec(implementation_key(9150)) IDispatchPtr IDialogSheets::GetParent ( );
__declspec(implementation_key(9151)) DialogSheetPtr IDialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(9152)) HRESULT IDialogSheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9153)) long IDialogSheets::GetCount ( );
__declspec(implementation_key(9154)) HRESULT IDialogSheets::Delete ( long lcid );
__declspec(implementation_key(9155)) IDispatchPtr IDialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(9156)) HRESULT IDialogSheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9157)) IUnknownPtr IDialogSheets::Get_NewEnum ( );
__declspec(implementation_key(9158)) HRESULT IDialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9159)) HRESULT IDialogSheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(9160)) HRESULT IDialogSheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9161)) HPageBreaksPtr IDialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(9162)) VPageBreaksPtr IDialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(9163)) _variant_t IDialogSheets::GetVisible ( long lcid );
__declspec(implementation_key(9164)) void IDialogSheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(9165)) IDispatchPtr IDialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9166)) HRESULT IDialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9167)) _ApplicationPtr IWorksheets::GetApplication ( );
__declspec(implementation_key(9168)) enum XlCreator IWorksheets::GetCreator ( );
__declspec(implementation_key(9169)) IDispatchPtr IWorksheets::GetParent ( );
__declspec(implementation_key(9170)) IDispatchPtr IWorksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(9171)) HRESULT IWorksheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9172)) long IWorksheets::GetCount ( );
__declspec(implementation_key(9173)) HRESULT IWorksheets::Delete ( long lcid );
__declspec(implementation_key(9174)) HRESULT IWorksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(9175)) IDispatchPtr IWorksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(9176)) HRESULT IWorksheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9177)) IUnknownPtr IWorksheets::Get_NewEnum ( );
__declspec(implementation_key(9178)) HRESULT IWorksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9179)) HRESULT IWorksheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(9180)) HRESULT IWorksheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9181)) HPageBreaksPtr IWorksheets::GetHPageBreaks ( );
__declspec(implementation_key(9182)) VPageBreaksPtr IWorksheets::GetVPageBreaks ( );
__declspec(implementation_key(9183)) _variant_t IWorksheets::GetVisible ( long lcid );
__declspec(implementation_key(9184)) void IWorksheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(9185)) IDispatchPtr IWorksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9186)) HRESULT IWorksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9187)) _ApplicationPtr IPageSetup::GetApplication ( );
__declspec(implementation_key(9188)) enum XlCreator IPageSetup::GetCreator ( );
__declspec(implementation_key(9189)) IDispatchPtr IPageSetup::GetParent ( );
__declspec(implementation_key(9190)) VARIANT_BOOL IPageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(9191)) void IPageSetup::PutBlackAndWhite ( VARIANT_BOOL RHS );
__declspec(implementation_key(9192)) double IPageSetup::GetBottomMargin ( );
__declspec(implementation_key(9193)) void IPageSetup::PutBottomMargin ( double RHS );
__declspec(implementation_key(9194)) _bstr_t IPageSetup::GetCenterFooter ( );
__declspec(implementation_key(9195)) void IPageSetup::PutCenterFooter ( _bstr_t RHS );
__declspec(implementation_key(9196)) _bstr_t IPageSetup::GetCenterHeader ( );
__declspec(implementation_key(9197)) void IPageSetup::PutCenterHeader ( _bstr_t RHS );
__declspec(implementation_key(9198)) VARIANT_BOOL IPageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(9199)) void IPageSetup::PutCenterHorizontally ( VARIANT_BOOL RHS );
__declspec(implementation_key(9200)) VARIANT_BOOL IPageSetup::GetCenterVertically ( );
__declspec(implementation_key(9201)) void IPageSetup::PutCenterVertically ( VARIANT_BOOL RHS );
__declspec(implementation_key(9202)) enum XlObjectSize IPageSetup::GetChartSize ( );
__declspec(implementation_key(9203)) void IPageSetup::PutChartSize ( enum XlObjectSize RHS );
__declspec(implementation_key(9204)) VARIANT_BOOL IPageSetup::GetDraft ( );
__declspec(implementation_key(9205)) void IPageSetup::PutDraft ( VARIANT_BOOL RHS );
__declspec(implementation_key(9206)) long IPageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(9207)) void IPageSetup::PutFirstPageNumber ( long RHS );
__declspec(implementation_key(9208)) _variant_t IPageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(9209)) void IPageSetup::PutFitToPagesTall ( const _variant_t & RHS );
__declspec(implementation_key(9210)) _variant_t IPageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(9211)) void IPageSetup::PutFitToPagesWide ( const _variant_t & RHS );
__declspec(implementation_key(9212)) double IPageSetup::GetFooterMargin ( );
__declspec(implementation_key(9213)) void IPageSetup::PutFooterMargin ( double RHS );
__declspec(implementation_key(9214)) double IPageSetup::GetHeaderMargin ( );
__declspec(implementation_key(9215)) void IPageSetup::PutHeaderMargin ( double RHS );
__declspec(implementation_key(9216)) _bstr_t IPageSetup::GetLeftFooter ( );
__declspec(implementation_key(9217)) void IPageSetup::PutLeftFooter ( _bstr_t RHS );
__declspec(implementation_key(9218)) _bstr_t IPageSetup::GetLeftHeader ( );
__declspec(implementation_key(9219)) void IPageSetup::PutLeftHeader ( _bstr_t RHS );
__declspec(implementation_key(9220)) double IPageSetup::GetLeftMargin ( );
__declspec(implementation_key(9221)) void IPageSetup::PutLeftMargin ( double RHS );
__declspec(implementation_key(9222)) enum XlOrder IPageSetup::GetOrder ( );
__declspec(implementation_key(9223)) void IPageSetup::PutOrder ( enum XlOrder RHS );
__declspec(implementation_key(9224)) enum XlPageOrientation IPageSetup::GetOrientation ( );
__declspec(implementation_key(9225)) void IPageSetup::PutOrientation ( enum XlPageOrientation RHS );
__declspec(implementation_key(9226)) enum XlPaperSize IPageSetup::GetPaperSize ( );
__declspec(implementation_key(9227)) void IPageSetup::PutPaperSize ( enum XlPaperSize RHS );
__declspec(implementation_key(9228)) _bstr_t IPageSetup::GetPrintArea ( );
__declspec(implementation_key(9229)) void IPageSetup::PutPrintArea ( _bstr_t RHS );
__declspec(implementation_key(9230)) VARIANT_BOOL IPageSetup::GetPrintGridlines ( );
__declspec(implementation_key(9231)) void IPageSetup::PutPrintGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9232)) VARIANT_BOOL IPageSetup::GetPrintHeadings ( );
__declspec(implementation_key(9233)) void IPageSetup::PutPrintHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(9234)) VARIANT_BOOL IPageSetup::GetPrintNotes ( );
__declspec(implementation_key(9235)) void IPageSetup::PutPrintNotes ( VARIANT_BOOL RHS );
__declspec(implementation_key(9236)) _variant_t IPageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(9237)) void IPageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(9238)) _bstr_t IPageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(9239)) void IPageSetup::PutPrintTitleColumns ( _bstr_t RHS );
__declspec(implementation_key(9240)) _bstr_t IPageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(9241)) void IPageSetup::PutPrintTitleRows ( _bstr_t RHS );
__declspec(implementation_key(9242)) _bstr_t IPageSetup::GetRightFooter ( );
__declspec(implementation_key(9243)) void IPageSetup::PutRightFooter ( _bstr_t RHS );
__declspec(implementation_key(9244)) _bstr_t IPageSetup::GetRightHeader ( );
__declspec(implementation_key(9245)) void IPageSetup::PutRightHeader ( _bstr_t RHS );
__declspec(implementation_key(9246)) double IPageSetup::GetRightMargin ( );
__declspec(implementation_key(9247)) void IPageSetup::PutRightMargin ( double RHS );
__declspec(implementation_key(9248)) double IPageSetup::GetTopMargin ( );
__declspec(implementation_key(9249)) void IPageSetup::PutTopMargin ( double RHS );
__declspec(implementation_key(9250)) _variant_t IPageSetup::GetZoom ( );
__declspec(implementation_key(9251)) void IPageSetup::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(9252)) enum XlPrintLocation IPageSetup::GetPrintComments ( );
__declspec(implementation_key(9253)) void IPageSetup::PutPrintComments ( enum XlPrintLocation RHS );
__declspec(implementation_key(9254)) _ApplicationPtr INames::GetApplication ( );
__declspec(implementation_key(9255)) enum XlCreator INames::GetCreator ( );
__declspec(implementation_key(9256)) IDispatchPtr INames::GetParent ( );
__declspec(implementation_key(9257)) NamePtr INames::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(9258)) NamePtr INames::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(9259)) NamePtr INames::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(9260)) long INames::GetCount ( );
__declspec(implementation_key(9261)) IUnknownPtr INames::Get_NewEnum ( );
__declspec(implementation_key(9262)) _ApplicationPtr IName::GetApplication ( );
__declspec(implementation_key(9263)) enum XlCreator IName::GetCreator ( );
__declspec(implementation_key(9264)) IDispatchPtr IName::GetParent ( );
__declspec(implementation_key(9265)) _bstr_t IName::Get_Default ( );
__declspec(implementation_key(9266)) long IName::GetIndex ( );
__declspec(implementation_key(9267)) _bstr_t IName::GetCategory ( long lcidIn );
__declspec(implementation_key(9268)) void IName::PutCategory ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(9269)) _bstr_t IName::GetCategoryLocal ( );
__declspec(implementation_key(9270)) void IName::PutCategoryLocal ( _bstr_t RHS );
__declspec(implementation_key(9271)) HRESULT IName::Delete ( );
__declspec(implementation_key(9272)) enum XlXLMMacroType IName::GetMacroType ( );
__declspec(implementation_key(9273)) void IName::PutMacroType ( enum XlXLMMacroType RHS );
__declspec(implementation_key(9274)) _bstr_t IName::GetName ( long lcidIn );
__declspec(implementation_key(9275)) void IName::PutName ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(9276)) _variant_t IName::GetRefersTo ( long lcidIn );
__declspec(implementation_key(9277)) void IName::PutRefersTo ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(9278)) _bstr_t IName::GetShortcutKey ( );
__declspec(implementation_key(9279)) void IName::PutShortcutKey ( _bstr_t RHS );
__declspec(implementation_key(9280)) _bstr_t IName::GetValue ( );
__declspec(implementation_key(9281)) void IName::PutValue ( _bstr_t RHS );
__declspec(implementation_key(9282)) VARIANT_BOOL IName::GetVisible ( );
__declspec(implementation_key(9283)) void IName::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9284)) _bstr_t IName::GetNameLocal ( );
__declspec(implementation_key(9285)) void IName::PutNameLocal ( _bstr_t RHS );
__declspec(implementation_key(9286)) _variant_t IName::GetRefersToLocal ( );
__declspec(implementation_key(9287)) void IName::PutRefersToLocal ( const _variant_t & RHS );
__declspec(implementation_key(9288)) _variant_t IName::GetRefersToR1C1 ( long lcidIn );
__declspec(implementation_key(9289)) void IName::PutRefersToR1C1 ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(9290)) _variant_t IName::GetRefersToR1C1Local ( );
__declspec(implementation_key(9291)) void IName::PutRefersToR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(9292)) RangePtr IName::GetRefersToRange ( );
__declspec(implementation_key(9293)) _ApplicationPtr IChartObjects::GetApplication ( );
__declspec(implementation_key(9294)) enum XlCreator IChartObjects::GetCreator ( );
__declspec(implementation_key(9295)) IDispatchPtr IChartObjects::GetParent ( );
__declspec(implementation_key(9296)) _variant_t IChartObjects::BringToFront ( );
__declspec(implementation_key(9297)) _variant_t IChartObjects::Copy ( );
__declspec(implementation_key(9298)) _variant_t IChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9299)) _variant_t IChartObjects::Cut ( );
__declspec(implementation_key(9300)) _variant_t IChartObjects::Delete ( );
__declspec(implementation_key(9301)) IDispatchPtr IChartObjects::Duplicate ( );
__declspec(implementation_key(9302)) VARIANT_BOOL IChartObjects::GetEnabled ( );
__declspec(implementation_key(9303)) void IChartObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9304)) double IChartObjects::GetHeight ( );
__declspec(implementation_key(9305)) void IChartObjects::PutHeight ( double RHS );
__declspec(implementation_key(9306)) double IChartObjects::GetLeft ( );
__declspec(implementation_key(9307)) void IChartObjects::PutLeft ( double RHS );
__declspec(implementation_key(9308)) VARIANT_BOOL IChartObjects::GetLocked ( );
__declspec(implementation_key(9309)) void IChartObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9310)) _bstr_t IChartObjects::GetOnAction ( );
__declspec(implementation_key(9311)) void IChartObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9312)) _variant_t IChartObjects::GetPlacement ( );
__declspec(implementation_key(9313)) void IChartObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9314)) VARIANT_BOOL IChartObjects::GetPrintObject ( );
__declspec(implementation_key(9315)) void IChartObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9316)) _variant_t IChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(9317)) _variant_t IChartObjects::SendToBack ( );
__declspec(implementation_key(9318)) double IChartObjects::GetTop ( );
__declspec(implementation_key(9319)) void IChartObjects::PutTop ( double RHS );
__declspec(implementation_key(9320)) VARIANT_BOOL IChartObjects::GetVisible ( );
__declspec(implementation_key(9321)) void IChartObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9322)) double IChartObjects::GetWidth ( );
__declspec(implementation_key(9323)) void IChartObjects::PutWidth ( double RHS );
__declspec(implementation_key(9324)) ShapeRangePtr IChartObjects::GetShapeRange ( );
__declspec(implementation_key(9325)) VARIANT_BOOL IChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(9326)) void IChartObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(9327)) BorderPtr IChartObjects::GetBorder ( );
__declspec(implementation_key(9328)) InteriorPtr IChartObjects::GetInterior ( );
__declspec(implementation_key(9329)) VARIANT_BOOL IChartObjects::GetShadow ( );
__declspec(implementation_key(9330)) void IChartObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9331)) ChartObjectPtr IChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9332)) long IChartObjects::GetCount ( );
__declspec(implementation_key(9333)) GroupObjectPtr IChartObjects::Group ( );
__declspec(implementation_key(9334)) IDispatchPtr IChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(9335)) IUnknownPtr IChartObjects::_NewEnum ( );
__declspec(implementation_key(9336)) _ApplicationPtr IMailer::GetApplication ( );
__declspec(implementation_key(9337)) enum XlCreator IMailer::GetCreator ( );
__declspec(implementation_key(9338)) IDispatchPtr IMailer::GetParent ( );
__declspec(implementation_key(9339)) _variant_t IMailer::GetBCCRecipients ( );
__declspec(implementation_key(9340)) void IMailer::PutBCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(9341)) _variant_t IMailer::GetCCRecipients ( );
__declspec(implementation_key(9342)) void IMailer::PutCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(9343)) _variant_t IMailer::GetEnclosures ( );
__declspec(implementation_key(9344)) void IMailer::PutEnclosures ( const _variant_t & RHS );
__declspec(implementation_key(9345)) VARIANT_BOOL IMailer::GetReceived ( );
__declspec(implementation_key(9346)) DATE IMailer::GetSendDateTime ( );
__declspec(implementation_key(9347)) _bstr_t IMailer::GetSender ( );
__declspec(implementation_key(9348)) _bstr_t IMailer::GetSubject ( );
__declspec(implementation_key(9349)) void IMailer::PutSubject ( _bstr_t RHS );
__declspec(implementation_key(9350)) _variant_t IMailer::GetToRecipients ( );
__declspec(implementation_key(9351)) void IMailer::PutToRecipients ( const _variant_t & RHS );
__declspec(implementation_key(9352)) _variant_t IMailer::GetWhichAddress ( );
__declspec(implementation_key(9353)) void IMailer::PutWhichAddress ( const _variant_t & RHS );
__declspec(implementation_key(9354)) _ApplicationPtr ICustomViews::GetApplication ( );
__declspec(implementation_key(9355)) enum XlCreator ICustomViews::GetCreator ( );
__declspec(implementation_key(9356)) IDispatchPtr ICustomViews::GetParent ( );
__declspec(implementation_key(9357)) long ICustomViews::GetCount ( );
__declspec(implementation_key(9358)) CustomViewPtr ICustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(9359)) CustomViewPtr ICustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(9360)) CustomViewPtr ICustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(9361)) IUnknownPtr ICustomViews::Get_NewEnum ( );
__declspec(implementation_key(9362)) _ApplicationPtr ICustomView::GetApplication ( );
__declspec(implementation_key(9363)) enum XlCreator ICustomView::GetCreator ( );
__declspec(implementation_key(9364)) IDispatchPtr ICustomView::GetParent ( );
__declspec(implementation_key(9365)) _bstr_t ICustomView::GetName ( );
__declspec(implementation_key(9366)) VARIANT_BOOL ICustomView::GetPrintSettings ( );
__declspec(implementation_key(9367)) VARIANT_BOOL ICustomView::GetRowColSettings ( );
__declspec(implementation_key(9368)) HRESULT ICustomView::Show ( );
__declspec(implementation_key(9369)) HRESULT ICustomView::Delete ( );
__declspec(implementation_key(9370)) _ApplicationPtr IFormatConditions::GetApplication ( );
__declspec(implementation_key(9371)) enum XlCreator IFormatConditions::GetCreator ( );
__declspec(implementation_key(9372)) IDispatchPtr IFormatConditions::GetParent ( );
__declspec(implementation_key(9373)) long IFormatConditions::GetCount ( );
__declspec(implementation_key(9374)) FormatConditionPtr IFormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(9375)) FormatConditionPtr IFormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(9376)) FormatConditionPtr IFormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9377)) IUnknownPtr IFormatConditions::Get_NewEnum ( );
__declspec(implementation_key(9378)) HRESULT IFormatConditions::Delete ( );
__declspec(implementation_key(9379)) _ApplicationPtr IFormatCondition::GetApplication ( );
__declspec(implementation_key(9380)) enum XlCreator IFormatCondition::GetCreator ( );
__declspec(implementation_key(9381)) IDispatchPtr IFormatCondition::GetParent ( );
__declspec(implementation_key(9382)) HRESULT IFormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(9383)) long IFormatCondition::GetType ( );
__declspec(implementation_key(9384)) long IFormatCondition::GetOperator ( );
__declspec(implementation_key(9385)) _bstr_t IFormatCondition::GetFormula1 ( );
__declspec(implementation_key(9386)) _bstr_t IFormatCondition::GetFormula2 ( );
__declspec(implementation_key(9387)) InteriorPtr IFormatCondition::GetInterior ( );
__declspec(implementation_key(9388)) BordersPtr IFormatCondition::GetBorders ( );
__declspec(implementation_key(9389)) FontPtr IFormatCondition::GetFont ( );
__declspec(implementation_key(9390)) HRESULT IFormatCondition::Delete ( );
__declspec(implementation_key(9391)) _ApplicationPtr IComments::GetApplication ( );
__declspec(implementation_key(9392)) enum XlCreator IComments::GetCreator ( );
__declspec(implementation_key(9393)) IDispatchPtr IComments::GetParent ( );
__declspec(implementation_key(9394)) long IComments::GetCount ( );
__declspec(implementation_key(9395)) CommentPtr IComments::Item ( long Index );
__declspec(implementation_key(9396)) CommentPtr IComments::Get_Default ( long Index );
__declspec(implementation_key(9397)) IUnknownPtr IComments::Get_NewEnum ( );
__declspec(implementation_key(9398)) _ApplicationPtr IComment::GetApplication ( );
__declspec(implementation_key(9399)) enum XlCreator IComment::GetCreator ( );
__declspec(implementation_key(9400)) IDispatchPtr IComment::GetParent ( );
__declspec(implementation_key(9401)) _bstr_t IComment::GetAuthor ( );
__declspec(implementation_key(9402)) ShapePtr IComment::GetShape ( );
__declspec(implementation_key(9403)) VARIANT_BOOL IComment::GetVisible ( );
__declspec(implementation_key(9404)) void IComment::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9405)) _bstr_t IComment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(9406)) HRESULT IComment::Delete ( );
__declspec(implementation_key(9407)) CommentPtr IComment::Next ( );
__declspec(implementation_key(9408)) CommentPtr IComment::Previous ( );
__declspec(implementation_key(9409)) _ApplicationPtr _IQueryTable::GetApplication ( );
__declspec(implementation_key(9410)) enum XlCreator _IQueryTable::GetCreator ( );
__declspec(implementation_key(9411)) IDispatchPtr _IQueryTable::GetParent ( );
__declspec(implementation_key(9412)) _bstr_t _IQueryTable::GetName ( );
__declspec(implementation_key(9413)) void _IQueryTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(9414)) VARIANT_BOOL _IQueryTable::GetFieldNames ( );
__declspec(implementation_key(9415)) void _IQueryTable::PutFieldNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(9416)) VARIANT_BOOL _IQueryTable::GetRowNumbers ( );
__declspec(implementation_key(9417)) void _IQueryTable::PutRowNumbers ( VARIANT_BOOL RHS );
__declspec(implementation_key(9418)) VARIANT_BOOL _IQueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(9419)) void _IQueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(9420)) VARIANT_BOOL _IQueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(9421)) void _IQueryTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(9422)) VARIANT_BOOL _IQueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(9423)) void _IQueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(9424)) VARIANT_BOOL _IQueryTable::GetRefreshing ( );
__declspec(implementation_key(9425)) VARIANT_BOOL _IQueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(9426)) VARIANT_BOOL _IQueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(9427)) void _IQueryTable::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(9428)) HRESULT _IQueryTable::CancelRefresh ( );
__declspec(implementation_key(9429)) enum XlCellInsertionMode _IQueryTable::GetRefreshStyle ( );
__declspec(implementation_key(9430)) void _IQueryTable::PutRefreshStyle ( enum XlCellInsertionMode RHS );
__declspec(implementation_key(9431)) VARIANT_BOOL _IQueryTable::GetEnableRefresh ( );
__declspec(implementation_key(9432)) void _IQueryTable::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(9433)) VARIANT_BOOL _IQueryTable::GetSavePassword ( );
__declspec(implementation_key(9434)) void _IQueryTable::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(9435)) RangePtr _IQueryTable::GetDestination ( );
__declspec(implementation_key(9436)) _variant_t _IQueryTable::GetConnection ( );
__declspec(implementation_key(9437)) void _IQueryTable::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(9438)) _variant_t _IQueryTable::GetSql ( );
__declspec(implementation_key(9439)) void _IQueryTable::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(9440)) _bstr_t _IQueryTable::GetPostText ( );
__declspec(implementation_key(9441)) void _IQueryTable::PutPostText ( _bstr_t RHS );
__declspec(implementation_key(9442)) RangePtr _IQueryTable::GetResultRange ( );
__declspec(implementation_key(9443)) HRESULT _IQueryTable::Delete ( );
__declspec(implementation_key(9444)) VARIANT_BOOL _IQueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(9445)) ParametersPtr _IQueryTable::GetParameters ( );
__declspec(implementation_key(9446)) IDispatchPtr _IQueryTable::GetRecordset ( );
__declspec(implementation_key(9447)) void _IQueryTable::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(9448)) VARIANT_BOOL _IQueryTable::GetSaveData ( );
__declspec(implementation_key(9449)) void _IQueryTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(9450)) VARIANT_BOOL _IQueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(9451)) void _IQueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL RHS );
__declspec(implementation_key(9452)) VARIANT_BOOL _IQueryTable::GetEnableEditing ( );
__declspec(implementation_key(9453)) void _IQueryTable::PutEnableEditing ( VARIANT_BOOL RHS );
__declspec(implementation_key(9454)) enum XlPlatform _IQueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(9455)) void _IQueryTable::PutTextFilePlatform ( enum XlPlatform RHS );
__declspec(implementation_key(9456)) long _IQueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(9457)) void _IQueryTable::PutTextFileStartRow ( long RHS );
__declspec(implementation_key(9458)) enum XlTextParsingType _IQueryTable::GetTextFileParseType ( );
__declspec(implementation_key(9459)) void _IQueryTable::PutTextFileParseType ( enum XlTextParsingType RHS );
__declspec(implementation_key(9460)) enum XlTextQualifier _IQueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(9461)) void _IQueryTable::PutTextFileTextQualifier ( enum XlTextQualifier RHS );
__declspec(implementation_key(9462)) VARIANT_BOOL _IQueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(9463)) void _IQueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(9464)) VARIANT_BOOL _IQueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(9465)) void _IQueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(9466)) VARIANT_BOOL _IQueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(9467)) void _IQueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(9468)) VARIANT_BOOL _IQueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(9469)) void _IQueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(9470)) VARIANT_BOOL _IQueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(9471)) void _IQueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(9472)) _bstr_t _IQueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(9473)) void _IQueryTable::PutTextFileOtherDelimiter ( _bstr_t RHS );
__declspec(implementation_key(9474)) _variant_t _IQueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(9475)) void _IQueryTable::PutTextFileColumnDataTypes ( const _variant_t & RHS );
__declspec(implementation_key(9476)) _variant_t _IQueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(9477)) void _IQueryTable::PutTextFileFixedColumnWidths ( const _variant_t & RHS );
__declspec(implementation_key(9478)) VARIANT_BOOL _IQueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(9479)) void _IQueryTable::PutPreserveColumnInfo ( VARIANT_BOOL RHS );
__declspec(implementation_key(9480)) VARIANT_BOOL _IQueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(9481)) void _IQueryTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(9482)) VARIANT_BOOL _IQueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(9483)) void _IQueryTable::PutAdjustColumnWidth ( VARIANT_BOOL RHS );
__declspec(implementation_key(9484)) _variant_t _IQueryTable::GetCommandText ( );
__declspec(implementation_key(9485)) void _IQueryTable::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(9486)) enum XlCmdType _IQueryTable::GetCommandType ( );
__declspec(implementation_key(9487)) void _IQueryTable::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(9488)) VARIANT_BOOL _IQueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(9489)) void _IQueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(9490)) enum xlQueryType _IQueryTable::GetQueryType ( );
__declspec(implementation_key(9491)) VARIANT_BOOL _IQueryTable::GetMaintainConnection ( );
__declspec(implementation_key(9492)) void _IQueryTable::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(9493)) _bstr_t _IQueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(9494)) void _IQueryTable::PutTextFileDecimalSeparator ( _bstr_t RHS );
__declspec(implementation_key(9495)) _bstr_t _IQueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(9496)) void _IQueryTable::PutTextFileThousandsSeparator ( _bstr_t RHS );
__declspec(implementation_key(9497)) long _IQueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(9498)) void _IQueryTable::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(9499)) HRESULT _IQueryTable::ResetTimer ( );
__declspec(implementation_key(9500)) enum xlWebSelectionType _IQueryTable::GetWebSelectionType ( );
__declspec(implementation_key(9501)) void _IQueryTable::PutWebSelectionType ( enum xlWebSelectionType RHS );
__declspec(implementation_key(9502)) enum xlWebFormatting _IQueryTable::GetWebFormatting ( );
__declspec(implementation_key(9503)) void _IQueryTable::PutWebFormatting ( enum xlWebFormatting RHS );
__declspec(implementation_key(9504)) _bstr_t _IQueryTable::GetWebTables ( );
__declspec(implementation_key(9505)) void _IQueryTable::PutWebTables ( _bstr_t RHS );
__declspec(implementation_key(9506)) VARIANT_BOOL _IQueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(9507)) void _IQueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL RHS );
__declspec(implementation_key(9508)) VARIANT_BOOL _IQueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(9509)) void _IQueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL RHS );
__declspec(implementation_key(9510)) VARIANT_BOOL _IQueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(9511)) void _IQueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL RHS );
__declspec(implementation_key(9512)) VARIANT_BOOL _IQueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(9513)) void _IQueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL RHS );
__declspec(implementation_key(9514)) _ApplicationPtr IQueryTables::GetApplication ( );
__declspec(implementation_key(9515)) enum XlCreator IQueryTables::GetCreator ( );
__declspec(implementation_key(9516)) IDispatchPtr IQueryTables::GetParent ( );
__declspec(implementation_key(9517)) long IQueryTables::GetCount ( );
__declspec(implementation_key(9518)) _QueryTablePtr IQueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(9519)) _QueryTablePtr IQueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(9520)) _QueryTablePtr IQueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9521)) IUnknownPtr IQueryTables::_NewEnum ( );
__declspec(implementation_key(9522)) _ApplicationPtr IParameter::GetApplication ( );
__declspec(implementation_key(9523)) enum XlCreator IParameter::GetCreator ( );
__declspec(implementation_key(9524)) IDispatchPtr IParameter::GetParent ( );
__declspec(implementation_key(9525)) enum XlParameterDataType IParameter::GetDataType ( );
__declspec(implementation_key(9526)) void IParameter::PutDataType ( enum XlParameterDataType RHS );
__declspec(implementation_key(9527)) enum XlParameterType IParameter::GetType ( );
__declspec(implementation_key(9528)) _bstr_t IParameter::GetPromptString ( );
__declspec(implementation_key(9529)) _variant_t IParameter::GetValue ( );
__declspec(implementation_key(9530)) RangePtr IParameter::GetSourceRange ( );
__declspec(implementation_key(9531)) _bstr_t IParameter::GetName ( );
__declspec(implementation_key(9532)) void IParameter::PutName ( _bstr_t RHS );
__declspec(implementation_key(9533)) HRESULT IParameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(9534)) VARIANT_BOOL IParameter::GetRefreshOnChange ( );
__declspec(implementation_key(9535)) void IParameter::PutRefreshOnChange ( VARIANT_BOOL RHS );
__declspec(implementation_key(9536)) _ApplicationPtr IParameters::GetApplication ( );
__declspec(implementation_key(9537)) enum XlCreator IParameters::GetCreator ( );
__declspec(implementation_key(9538)) IDispatchPtr IParameters::GetParent ( );
__declspec(implementation_key(9539)) ParameterPtr IParameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(9540)) long IParameters::GetCount ( );
__declspec(implementation_key(9541)) ParameterPtr IParameters::Item ( const _variant_t & Index );
__declspec(implementation_key(9542)) ParameterPtr IParameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9543)) HRESULT IParameters::Delete ( );
__declspec(implementation_key(9544)) IUnknownPtr IParameters::_NewEnum ( );
__declspec(implementation_key(9545)) _ApplicationPtr IODBCError::GetApplication ( );
__declspec(implementation_key(9546)) enum XlCreator IODBCError::GetCreator ( );
__declspec(implementation_key(9547)) IDispatchPtr IODBCError::GetParent ( );
__declspec(implementation_key(9548)) _bstr_t IODBCError::GetSqlState ( );
__declspec(implementation_key(9549)) _bstr_t IODBCError::GetErrorString ( );
__declspec(implementation_key(9550)) _ApplicationPtr IODBCErrors::GetApplication ( );
__declspec(implementation_key(9551)) enum XlCreator IODBCErrors::GetCreator ( );
__declspec(implementation_key(9552)) IDispatchPtr IODBCErrors::GetParent ( );
__declspec(implementation_key(9553)) long IODBCErrors::GetCount ( );
__declspec(implementation_key(9554)) ODBCErrorPtr IODBCErrors::Item ( long Index );
__declspec(implementation_key(9555)) ODBCErrorPtr IODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(9556)) IUnknownPtr IODBCErrors::_NewEnum ( );
__declspec(implementation_key(9557)) _ApplicationPtr IValidation::GetApplication ( );
__declspec(implementation_key(9558)) enum XlCreator IValidation::GetCreator ( );
__declspec(implementation_key(9559)) IDispatchPtr IValidation::GetParent ( );
__declspec(implementation_key(9560)) HRESULT IValidation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(9561)) long IValidation::GetAlertStyle ( );
__declspec(implementation_key(9562)) VARIANT_BOOL IValidation::GetIgnoreBlank ( );
__declspec(implementation_key(9563)) void IValidation::PutIgnoreBlank ( VARIANT_BOOL RHS );
__declspec(implementation_key(9564)) long IValidation::GetIMEMode ( );
__declspec(implementation_key(9565)) void IValidation::PutIMEMode ( long RHS );
__declspec(implementation_key(9566)) VARIANT_BOOL IValidation::GetInCellDropdown ( );
__declspec(implementation_key(9567)) void IValidation::PutInCellDropdown ( VARIANT_BOOL RHS );
__declspec(implementation_key(9568)) HRESULT IValidation::Delete ( );
__declspec(implementation_key(9569)) _bstr_t IValidation::GetErrorMessage ( );
__declspec(implementation_key(9570)) void IValidation::PutErrorMessage ( _bstr_t RHS );
__declspec(implementation_key(9571)) _bstr_t IValidation::GetErrorTitle ( );
__declspec(implementation_key(9572)) void IValidation::PutErrorTitle ( _bstr_t RHS );
__declspec(implementation_key(9573)) _bstr_t IValidation::GetInputMessage ( );
__declspec(implementation_key(9574)) void IValidation::PutInputMessage ( _bstr_t RHS );
__declspec(implementation_key(9575)) _bstr_t IValidation::GetInputTitle ( );
__declspec(implementation_key(9576)) void IValidation::PutInputTitle ( _bstr_t RHS );
__declspec(implementation_key(9577)) _bstr_t IValidation::GetFormula1 ( );
__declspec(implementation_key(9578)) _bstr_t IValidation::GetFormula2 ( );
__declspec(implementation_key(9579)) HRESULT IValidation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(9580)) long IValidation::GetOperator ( );
__declspec(implementation_key(9581)) VARIANT_BOOL IValidation::GetShowError ( );
__declspec(implementation_key(9582)) void IValidation::PutShowError ( VARIANT_BOOL RHS );
__declspec(implementation_key(9583)) VARIANT_BOOL IValidation::GetShowInput ( );
__declspec(implementation_key(9584)) void IValidation::PutShowInput ( VARIANT_BOOL RHS );
__declspec(implementation_key(9585)) long IValidation::GetType ( );
__declspec(implementation_key(9586)) VARIANT_BOOL IValidation::GetValue ( );
__declspec(implementation_key(9587)) _ApplicationPtr IHyperlinks::GetApplication ( );
__declspec(implementation_key(9588)) enum XlCreator IHyperlinks::GetCreator ( );
__declspec(implementation_key(9589)) IDispatchPtr IHyperlinks::GetParent ( );
__declspec(implementation_key(9590)) IDispatchPtr IHyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(9591)) long IHyperlinks::GetCount ( );
__declspec(implementation_key(9592)) HyperlinkPtr IHyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(9593)) HyperlinkPtr IHyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9594)) IUnknownPtr IHyperlinks::Get_NewEnum ( );
__declspec(implementation_key(9595)) HRESULT IHyperlinks::Delete ( );
__declspec(implementation_key(9596)) _ApplicationPtr IHyperlink::GetApplication ( );
__declspec(implementation_key(9597)) enum XlCreator IHyperlink::GetCreator ( );
__declspec(implementation_key(9598)) IDispatchPtr IHyperlink::GetParent ( );
__declspec(implementation_key(9599)) _bstr_t IHyperlink::GetName ( );
__declspec(implementation_key(9600)) RangePtr IHyperlink::GetRange ( );
__declspec(implementation_key(9601)) ShapePtr IHyperlink::GetShape ( );
__declspec(implementation_key(9602)) _bstr_t IHyperlink::GetSubAddress ( );
__declspec(implementation_key(9603)) void IHyperlink::PutSubAddress ( _bstr_t RHS );
__declspec(implementation_key(9604)) _bstr_t IHyperlink::GetAddress ( );
__declspec(implementation_key(9605)) void IHyperlink::PutAddress ( _bstr_t RHS );
__declspec(implementation_key(9606)) long IHyperlink::GetType ( );
__declspec(implementation_key(9607)) HRESULT IHyperlink::AddToFavorites ( );
__declspec(implementation_key(9608)) HRESULT IHyperlink::Delete ( );
__declspec(implementation_key(9609)) HRESULT IHyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(9610)) _bstr_t IHyperlink::GetEmailSubject ( );
__declspec(implementation_key(9611)) void IHyperlink::PutEmailSubject ( _bstr_t RHS );
__declspec(implementation_key(9612)) _bstr_t IHyperlink::GetScreenTip ( );
__declspec(implementation_key(9613)) void IHyperlink::PutScreenTip ( _bstr_t RHS );
__declspec(implementation_key(9614)) _bstr_t IHyperlink::GetTextToDisplay ( );
__declspec(implementation_key(9615)) void IHyperlink::PutTextToDisplay ( _bstr_t RHS );
__declspec(implementation_key(9616)) HRESULT IHyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(9617)) _ApplicationPtr IAutoFilter::GetApplication ( );
__declspec(implementation_key(9618)) enum XlCreator IAutoFilter::GetCreator ( );
__declspec(implementation_key(9619)) IDispatchPtr IAutoFilter::GetParent ( );
__declspec(implementation_key(9620)) RangePtr IAutoFilter::GetRange ( );
__declspec(implementation_key(9621)) FiltersPtr IAutoFilter::GetFilters ( );
__declspec(implementation_key(9622)) _ApplicationPtr IFilters::GetApplication ( );
__declspec(implementation_key(9623)) enum XlCreator IFilters::GetCreator ( );
__declspec(implementation_key(9624)) IDispatchPtr IFilters::GetParent ( );
__declspec(implementation_key(9625)) long IFilters::GetCount ( );
__declspec(implementation_key(9626)) FilterPtr IFilters::Get_Default ( long Index );
__declspec(implementation_key(9627)) FilterPtr IFilters::GetItem ( long Index );
__declspec(implementation_key(9628)) IUnknownPtr IFilters::Get_NewEnum ( );
__declspec(implementation_key(9629)) _ApplicationPtr IFilter::GetApplication ( );
__declspec(implementation_key(9630)) enum XlCreator IFilter::GetCreator ( );
__declspec(implementation_key(9631)) IDispatchPtr IFilter::GetParent ( );
__declspec(implementation_key(9632)) VARIANT_BOOL IFilter::GetOn ( );
__declspec(implementation_key(9633)) _variant_t IFilter::GetCriteria1 ( );
__declspec(implementation_key(9634)) enum XlAutoFilterOperator IFilter::GetOperator ( );
__declspec(implementation_key(9635)) _variant_t IFilter::GetCriteria2 ( );
__declspec(implementation_key(9636)) _ApplicationPtr IAutoCorrect::GetApplication ( );
__declspec(implementation_key(9637)) enum XlCreator IAutoCorrect::GetCreator ( );
__declspec(implementation_key(9638)) IDispatchPtr IAutoCorrect::GetParent ( );
__declspec(implementation_key(9639)) _variant_t IAutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(9640)) VARIANT_BOOL IAutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(9641)) void IAutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL RHS );
__declspec(implementation_key(9642)) _variant_t IAutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(9643)) _variant_t IAutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(9644)) void IAutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(9645)) VARIANT_BOOL IAutoCorrect::GetExcelReplaceText ( );
__declspec(implementation_key(9646)) void IAutoCorrect::PutExcelReplaceText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9647)) VARIANT_BOOL IAutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(9648)) void IAutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL RHS );
__declspec(implementation_key(9649)) VARIANT_BOOL IAutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(9650)) void IAutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL RHS );
__declspec(implementation_key(9651)) VARIANT_BOOL IAutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(9652)) void IAutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL RHS );
__declspec(implementation_key(9653)) _ApplicationPtr IBorder::GetApplication ( );
__declspec(implementation_key(9654)) enum XlCreator IBorder::GetCreator ( );
__declspec(implementation_key(9655)) IDispatchPtr IBorder::GetParent ( );
__declspec(implementation_key(9656)) _variant_t IBorder::GetColor ( );
__declspec(implementation_key(9657)) void IBorder::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(9658)) _variant_t IBorder::GetColorIndex ( );
__declspec(implementation_key(9659)) void IBorder::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(9660)) _variant_t IBorder::GetLineStyle ( );
__declspec(implementation_key(9661)) void IBorder::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(9662)) _variant_t IBorder::GetWeight ( );
__declspec(implementation_key(9663)) void IBorder::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(9664)) _ApplicationPtr IInterior::GetApplication ( );
__declspec(implementation_key(9665)) enum XlCreator IInterior::GetCreator ( );
__declspec(implementation_key(9666)) IDispatchPtr IInterior::GetParent ( );
__declspec(implementation_key(9667)) _variant_t IInterior::GetColor ( );
__declspec(implementation_key(9668)) void IInterior::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(9669)) _variant_t IInterior::GetColorIndex ( );
__declspec(implementation_key(9670)) void IInterior::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(9671)) _variant_t IInterior::GetInvertIfNegative ( );
__declspec(implementation_key(9672)) void IInterior::PutInvertIfNegative ( const _variant_t & RHS );
__declspec(implementation_key(9673)) _variant_t IInterior::GetPattern ( );
__declspec(implementation_key(9674)) void IInterior::PutPattern ( const _variant_t & RHS );
__declspec(implementation_key(9675)) _variant_t IInterior::GetPatternColor ( );
__declspec(implementation_key(9676)) void IInterior::PutPatternColor ( const _variant_t & RHS );
__declspec(implementation_key(9677)) _variant_t IInterior::GetPatternColorIndex ( );
__declspec(implementation_key(9678)) void IInterior::PutPatternColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(9679)) _ApplicationPtr IChartFillFormat::GetApplication ( );
__declspec(implementation_key(9680)) enum XlCreator IChartFillFormat::GetCreator ( );
__declspec(implementation_key(9681)) IDispatchPtr IChartFillFormat::GetParent ( );
__declspec(implementation_key(9682)) HRESULT IChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(9683)) HRESULT IChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(9684)) HRESULT IChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(9685)) HRESULT IChartFillFormat::Solid ( );
__declspec(implementation_key(9686)) HRESULT IChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(9687)) HRESULT IChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(9688)) HRESULT IChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(9689)) HRESULT IChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(9690)) ChartColorFormatPtr IChartFillFormat::GetBackColor ( );
__declspec(implementation_key(9691)) ChartColorFormatPtr IChartFillFormat::GetForeColor ( );
__declspec(implementation_key(9692)) enum Office::MsoGradientColorType IChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(9693)) float IChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(9694)) enum Office::MsoGradientStyle IChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(9695)) long IChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(9696)) enum Office::MsoPatternType IChartFillFormat::GetPattern ( );
__declspec(implementation_key(9697)) enum Office::MsoPresetGradientType IChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(9698)) enum Office::MsoPresetTexture IChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(9699)) _bstr_t IChartFillFormat::GetTextureName ( );
__declspec(implementation_key(9700)) enum Office::MsoTextureType IChartFillFormat::GetTextureType ( );
__declspec(implementation_key(9701)) enum Office::MsoFillType IChartFillFormat::GetType ( );
__declspec(implementation_key(9702)) enum Office::MsoTriState IChartFillFormat::GetVisible ( );
__declspec(implementation_key(9703)) void IChartFillFormat::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(9704)) _ApplicationPtr IChartColorFormat::GetApplication ( );
__declspec(implementation_key(9705)) enum XlCreator IChartColorFormat::GetCreator ( );
__declspec(implementation_key(9706)) IDispatchPtr IChartColorFormat::GetParent ( );
__declspec(implementation_key(9707)) long IChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(9708)) void IChartColorFormat::PutSchemeColor ( long RHS );
__declspec(implementation_key(9709)) long IChartColorFormat::GetExcelRGB ( );
__declspec(implementation_key(9710)) long IChartColorFormat::Get_Default ( );
__declspec(implementation_key(9711)) long IChartColorFormat::GetType ( );
__declspec(implementation_key(9712)) _ApplicationPtr IAxis::GetApplication ( );
__declspec(implementation_key(9713)) enum XlCreator IAxis::GetCreator ( );
__declspec(implementation_key(9714)) IDispatchPtr IAxis::GetParent ( );
__declspec(implementation_key(9715)) VARIANT_BOOL IAxis::GetAxisBetweenCategories ( );
__declspec(implementation_key(9716)) void IAxis::PutAxisBetweenCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(9717)) enum XlAxisGroup IAxis::GetAxisGroup ( );
__declspec(implementation_key(9718)) AxisTitlePtr IAxis::GetAxisTitle ( );
__declspec(implementation_key(9719)) BorderPtr IAxis::GetBorder ( );
__declspec(implementation_key(9720)) _variant_t IAxis::GetCategoryNames ( );
__declspec(implementation_key(9721)) void IAxis::PutCategoryNames ( const _variant_t & RHS );
__declspec(implementation_key(9722)) enum XlAxisCrosses IAxis::GetCrosses ( );
__declspec(implementation_key(9723)) void IAxis::PutCrosses ( enum XlAxisCrosses RHS );
__declspec(implementation_key(9724)) double IAxis::GetCrossesAt ( );
__declspec(implementation_key(9725)) void IAxis::PutCrossesAt ( double RHS );
__declspec(implementation_key(9726)) _variant_t IAxis::Delete ( );
__declspec(implementation_key(9727)) VARIANT_BOOL IAxis::GetHasMajorGridlines ( );
__declspec(implementation_key(9728)) void IAxis::PutHasMajorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9729)) VARIANT_BOOL IAxis::GetHasMinorGridlines ( );
__declspec(implementation_key(9730)) void IAxis::PutHasMinorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9731)) VARIANT_BOOL IAxis::GetHasTitle ( );
__declspec(implementation_key(9732)) void IAxis::PutHasTitle ( VARIANT_BOOL RHS );
__declspec(implementation_key(9733)) GridlinesPtr IAxis::GetMajorGridlines ( );
__declspec(implementation_key(9734)) enum XlTickMark IAxis::GetMajorTickMark ( );
__declspec(implementation_key(9735)) void IAxis::PutMajorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(9736)) double IAxis::GetMajorUnit ( );
__declspec(implementation_key(9737)) void IAxis::PutMajorUnit ( double RHS );
__declspec(implementation_key(9738)) VARIANT_BOOL IAxis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(9739)) void IAxis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(9740)) double IAxis::GetMaximumScale ( );
__declspec(implementation_key(9741)) void IAxis::PutMaximumScale ( double RHS );
__declspec(implementation_key(9742)) VARIANT_BOOL IAxis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(9743)) void IAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(9744)) double IAxis::GetMinimumScale ( );
__declspec(implementation_key(9745)) void IAxis::PutMinimumScale ( double RHS );
__declspec(implementation_key(9746)) VARIANT_BOOL IAxis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(9747)) void IAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(9748)) GridlinesPtr IAxis::GetMinorGridlines ( );
__declspec(implementation_key(9749)) enum XlTickMark IAxis::GetMinorTickMark ( );
__declspec(implementation_key(9750)) void IAxis::PutMinorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(9751)) double IAxis::GetMinorUnit ( );
__declspec(implementation_key(9752)) void IAxis::PutMinorUnit ( double RHS );
__declspec(implementation_key(9753)) VARIANT_BOOL IAxis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(9754)) void IAxis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(9755)) VARIANT_BOOL IAxis::GetReversePlotOrder ( );
__declspec(implementation_key(9756)) void IAxis::PutReversePlotOrder ( VARIANT_BOOL RHS );
__declspec(implementation_key(9757)) enum XlScaleType IAxis::GetScaleType ( );
__declspec(implementation_key(9758)) void IAxis::PutScaleType ( enum XlScaleType RHS );
__declspec(implementation_key(9759)) _variant_t IAxis::Select ( );
__declspec(implementation_key(9760)) enum XlTickLabelPosition IAxis::GetTickLabelPosition ( );
__declspec(implementation_key(9761)) void IAxis::PutTickLabelPosition ( enum XlTickLabelPosition RHS );
__declspec(implementation_key(9762)) TickLabelsPtr IAxis::GetTickLabels ( );
__declspec(implementation_key(9763)) long IAxis::GetTickLabelSpacing ( );
__declspec(implementation_key(9764)) void IAxis::PutTickLabelSpacing ( long RHS );
__declspec(implementation_key(9765)) long IAxis::GetTickMarkSpacing ( );
__declspec(implementation_key(9766)) void IAxis::PutTickMarkSpacing ( long RHS );
__declspec(implementation_key(9767)) enum XlAxisType IAxis::GetType ( );
__declspec(implementation_key(9768)) void IAxis::PutType ( enum XlAxisType RHS );
__declspec(implementation_key(9769)) enum XlTimeUnit IAxis::GetBaseUnit ( );
__declspec(implementation_key(9770)) void IAxis::PutBaseUnit ( enum XlTimeUnit RHS );
__declspec(implementation_key(9771)) VARIANT_BOOL IAxis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(9772)) void IAxis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(9773)) enum XlTimeUnit IAxis::GetMajorUnitScale ( );
__declspec(implementation_key(9774)) void IAxis::PutMajorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(9775)) enum XlTimeUnit IAxis::GetMinorUnitScale ( );
__declspec(implementation_key(9776)) void IAxis::PutMinorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(9777)) enum XlCategoryType IAxis::GetCategoryType ( );
__declspec(implementation_key(9778)) void IAxis::PutCategoryType ( enum XlCategoryType RHS );
__declspec(implementation_key(9779)) double IAxis::GetLeft ( );
__declspec(implementation_key(9780)) double IAxis::GetTop ( );
__declspec(implementation_key(9781)) double IAxis::GetWidth ( );
__declspec(implementation_key(9782)) double IAxis::GetHeight ( );
__declspec(implementation_key(9783)) enum XlDisplayUnit IAxis::GetDisplayUnit ( );
__declspec(implementation_key(9784)) void IAxis::PutDisplayUnit ( enum XlDisplayUnit RHS );
__declspec(implementation_key(9785)) double IAxis::GetDisplayUnitCustom ( );
__declspec(implementation_key(9786)) void IAxis::PutDisplayUnitCustom ( double RHS );
__declspec(implementation_key(9787)) VARIANT_BOOL IAxis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(9788)) void IAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(9789)) DisplayUnitLabelPtr IAxis::GetDisplayUnitLabel ( );
__declspec(implementation_key(9790)) _ApplicationPtr IChartTitle::GetApplication ( );
__declspec(implementation_key(9791)) enum XlCreator IChartTitle::GetCreator ( );
__declspec(implementation_key(9792)) IDispatchPtr IChartTitle::GetParent ( );
__declspec(implementation_key(9793)) _bstr_t IChartTitle::GetName ( );
__declspec(implementation_key(9794)) _variant_t IChartTitle::Select ( );
__declspec(implementation_key(9795)) BorderPtr IChartTitle::GetBorder ( );
__declspec(implementation_key(9796)) _variant_t IChartTitle::Delete ( );
__declspec(implementation_key(9797)) InteriorPtr IChartTitle::GetInterior ( );
__declspec(implementation_key(9798)) ChartFillFormatPtr IChartTitle::GetFill ( );
__declspec(implementation_key(9799)) _bstr_t IChartTitle::GetCaption ( );
__declspec(implementation_key(9800)) void IChartTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9801)) CharactersPtr IChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9802)) FontPtr IChartTitle::GetFont ( );
__declspec(implementation_key(9803)) _variant_t IChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(9804)) void IChartTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9805)) double IChartTitle::GetLeft ( );
__declspec(implementation_key(9806)) void IChartTitle::PutLeft ( double RHS );
__declspec(implementation_key(9807)) _variant_t IChartTitle::GetOrientation ( );
__declspec(implementation_key(9808)) void IChartTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9809)) VARIANT_BOOL IChartTitle::GetShadow ( );
__declspec(implementation_key(9810)) void IChartTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9811)) _bstr_t IChartTitle::GetText ( );
__declspec(implementation_key(9812)) void IChartTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(9813)) double IChartTitle::GetTop ( );
__declspec(implementation_key(9814)) void IChartTitle::PutTop ( double RHS );
__declspec(implementation_key(9815)) _variant_t IChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(9816)) void IChartTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9817)) long IChartTitle::GetReadingOrder ( );
__declspec(implementation_key(9818)) void IChartTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(9819)) _variant_t IChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(9820)) void IChartTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9821)) _ApplicationPtr IAxisTitle::GetApplication ( );
__declspec(implementation_key(9822)) enum XlCreator IAxisTitle::GetCreator ( );
__declspec(implementation_key(9823)) IDispatchPtr IAxisTitle::GetParent ( );
__declspec(implementation_key(9824)) _bstr_t IAxisTitle::GetName ( );
__declspec(implementation_key(9825)) _variant_t IAxisTitle::Select ( );
__declspec(implementation_key(9826)) BorderPtr IAxisTitle::GetBorder ( );
__declspec(implementation_key(9827)) _variant_t IAxisTitle::Delete ( );
__declspec(implementation_key(9828)) InteriorPtr IAxisTitle::GetInterior ( );
__declspec(implementation_key(9829)) ChartFillFormatPtr IAxisTitle::GetFill ( );
__declspec(implementation_key(9830)) _bstr_t IAxisTitle::GetCaption ( );
__declspec(implementation_key(9831)) void IAxisTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9832)) CharactersPtr IAxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9833)) FontPtr IAxisTitle::GetFont ( );
__declspec(implementation_key(9834)) _variant_t IAxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(9835)) void IAxisTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9836)) double IAxisTitle::GetLeft ( );
__declspec(implementation_key(9837)) void IAxisTitle::PutLeft ( double RHS );
__declspec(implementation_key(9838)) _variant_t IAxisTitle::GetOrientation ( );
__declspec(implementation_key(9839)) void IAxisTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9840)) VARIANT_BOOL IAxisTitle::GetShadow ( );
__declspec(implementation_key(9841)) void IAxisTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9842)) _bstr_t IAxisTitle::GetText ( );
__declspec(implementation_key(9843)) void IAxisTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(9844)) double IAxisTitle::GetTop ( );
__declspec(implementation_key(9845)) void IAxisTitle::PutTop ( double RHS );
__declspec(implementation_key(9846)) _variant_t IAxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(9847)) void IAxisTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9848)) long IAxisTitle::GetReadingOrder ( );
__declspec(implementation_key(9849)) void IAxisTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(9850)) _variant_t IAxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(9851)) void IAxisTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9852)) _ApplicationPtr IChartGroup::GetApplication ( );
__declspec(implementation_key(9853)) enum XlCreator IChartGroup::GetCreator ( );
__declspec(implementation_key(9854)) IDispatchPtr IChartGroup::GetParent ( );
__declspec(implementation_key(9855)) enum XlAxisGroup IChartGroup::GetAxisGroup ( );
__declspec(implementation_key(9856)) void IChartGroup::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(9857)) long IChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(9858)) void IChartGroup::PutDoughnutHoleSize ( long RHS );
__declspec(implementation_key(9859)) DownBarsPtr IChartGroup::GetDownBars ( );
__declspec(implementation_key(9860)) DropLinesPtr IChartGroup::GetDropLines ( );
__declspec(implementation_key(9861)) long IChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(9862)) void IChartGroup::PutFirstSliceAngle ( long RHS );
__declspec(implementation_key(9863)) long IChartGroup::GetGapWidth ( );
__declspec(implementation_key(9864)) void IChartGroup::PutGapWidth ( long RHS );
__declspec(implementation_key(9865)) VARIANT_BOOL IChartGroup::GetHasDropLines ( );
__declspec(implementation_key(9866)) void IChartGroup::PutHasDropLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9867)) VARIANT_BOOL IChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(9868)) void IChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9869)) VARIANT_BOOL IChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(9870)) void IChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(9871)) VARIANT_BOOL IChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(9872)) void IChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(9873)) VARIANT_BOOL IChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(9874)) void IChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(9875)) HiLoLinesPtr IChartGroup::GetHiLoLines ( );
__declspec(implementation_key(9876)) long IChartGroup::GetIndex ( );
__declspec(implementation_key(9877)) long IChartGroup::GetOverlap ( );
__declspec(implementation_key(9878)) void IChartGroup::PutOverlap ( long RHS );
__declspec(implementation_key(9879)) TickLabelsPtr IChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(9880)) IDispatchPtr IChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(9881)) SeriesLinesPtr IChartGroup::GetSeriesLines ( );
__declspec(implementation_key(9882)) long IChartGroup::GetSubType ( );
__declspec(implementation_key(9883)) void IChartGroup::PutSubType ( long RHS );
__declspec(implementation_key(9884)) long IChartGroup::GetType ( );
__declspec(implementation_key(9885)) void IChartGroup::PutType ( long RHS );
__declspec(implementation_key(9886)) UpBarsPtr IChartGroup::GetUpBars ( );
__declspec(implementation_key(9887)) VARIANT_BOOL IChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(9888)) void IChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(9889)) enum XlSizeRepresents IChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(9890)) void IChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS );
__declspec(implementation_key(9891)) long IChartGroup::GetBubbleScale ( );
__declspec(implementation_key(9892)) void IChartGroup::PutBubbleScale ( long RHS );
__declspec(implementation_key(9893)) VARIANT_BOOL IChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(9894)) void IChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS );
__declspec(implementation_key(9895)) enum XlChartSplitType IChartGroup::GetSplitType ( );
__declspec(implementation_key(9896)) void IChartGroup::PutSplitType ( enum XlChartSplitType RHS );
__declspec(implementation_key(9897)) _variant_t IChartGroup::GetSplitValue ( );
__declspec(implementation_key(9898)) void IChartGroup::PutSplitValue ( const _variant_t & RHS );
__declspec(implementation_key(9899)) long IChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(9900)) void IChartGroup::PutSecondPlotSize ( long RHS );
__declspec(implementation_key(9901)) VARIANT_BOOL IChartGroup::GetHas3DShading ( );
__declspec(implementation_key(9902)) void IChartGroup::PutHas3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(9903)) _ApplicationPtr IChartGroups::GetApplication ( );
__declspec(implementation_key(9904)) enum XlCreator IChartGroups::GetCreator ( );
__declspec(implementation_key(9905)) IDispatchPtr IChartGroups::GetParent ( );
__declspec(implementation_key(9906)) long IChartGroups::GetCount ( );
__declspec(implementation_key(9907)) ChartGroupPtr IChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(9908)) IUnknownPtr IChartGroups::_NewEnum ( );
__declspec(implementation_key(9909)) _ApplicationPtr IAxes::GetApplication ( );
__declspec(implementation_key(9910)) enum XlCreator IAxes::GetCreator ( );
__declspec(implementation_key(9911)) IDispatchPtr IAxes::GetParent ( );
__declspec(implementation_key(9912)) long IAxes::GetCount ( );
__declspec(implementation_key(9913)) AxisPtr IAxes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(9914)) IUnknownPtr IAxes::_NewEnum ( );
__declspec(implementation_key(9915)) _ApplicationPtr IPoints::GetApplication ( );
__declspec(implementation_key(9916)) enum XlCreator IPoints::GetCreator ( );
__declspec(implementation_key(9917)) IDispatchPtr IPoints::GetParent ( );
__declspec(implementation_key(9918)) long IPoints::GetCount ( );
__declspec(implementation_key(9919)) PointPtr IPoints::Item ( long Index );
__declspec(implementation_key(9920)) IUnknownPtr IPoints::_NewEnum ( );
__declspec(implementation_key(9921)) _ApplicationPtr IPoint::GetApplication ( );
__declspec(implementation_key(9922)) enum XlCreator IPoint::GetCreator ( );
__declspec(implementation_key(9923)) IDispatchPtr IPoint::GetParent ( );
__declspec(implementation_key(9924)) _variant_t IPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText );
__declspec(implementation_key(9925)) BorderPtr IPoint::GetBorder ( );
__declspec(implementation_key(9926)) _variant_t IPoint::ClearFormats ( );
__declspec(implementation_key(9927)) _variant_t IPoint::Copy ( );
__declspec(implementation_key(9928)) DataLabelPtr IPoint::GetDataLabel ( );
__declspec(implementation_key(9929)) _variant_t IPoint::Delete ( );
__declspec(implementation_key(9930)) long IPoint::GetExplosion ( );
__declspec(implementation_key(9931)) void IPoint::PutExplosion ( long RHS );
__declspec(implementation_key(9932)) VARIANT_BOOL IPoint::GetHasDataLabel ( );
__declspec(implementation_key(9933)) void IPoint::PutHasDataLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(9934)) InteriorPtr IPoint::GetInterior ( );
__declspec(implementation_key(9935)) VARIANT_BOOL IPoint::GetInvertIfNegative ( );
__declspec(implementation_key(9936)) void IPoint::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(9937)) long IPoint::GetMarkerBackgroundColor ( );
__declspec(implementation_key(9938)) void IPoint::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(9939)) enum XlColorIndex IPoint::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(9940)) void IPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(9941)) long IPoint::GetMarkerForegroundColor ( );
__declspec(implementation_key(9942)) void IPoint::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(9943)) enum XlColorIndex IPoint::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(9944)) void IPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(9945)) long IPoint::GetMarkerSize ( );
__declspec(implementation_key(9946)) void IPoint::PutMarkerSize ( long RHS );
__declspec(implementation_key(9947)) enum XlMarkerStyle IPoint::GetMarkerStyle ( );
__declspec(implementation_key(9948)) void IPoint::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(9949)) _variant_t IPoint::Paste ( );
__declspec(implementation_key(9950)) enum XlChartPictureType IPoint::GetPictureType ( );
__declspec(implementation_key(9951)) void IPoint::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(9952)) long IPoint::GetPictureUnit ( );
__declspec(implementation_key(9953)) void IPoint::PutPictureUnit ( long RHS );
__declspec(implementation_key(9954)) _variant_t IPoint::Select ( );
__declspec(implementation_key(9955)) VARIANT_BOOL IPoint::GetApplyPictToSides ( );
__declspec(implementation_key(9956)) void IPoint::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(9957)) VARIANT_BOOL IPoint::GetApplyPictToFront ( );
__declspec(implementation_key(9958)) void IPoint::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(9959)) VARIANT_BOOL IPoint::GetApplyPictToEnd ( );
__declspec(implementation_key(9960)) void IPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(9961)) VARIANT_BOOL IPoint::GetShadow ( );
__declspec(implementation_key(9962)) void IPoint::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9963)) VARIANT_BOOL IPoint::GetSecondaryPlot ( );
__declspec(implementation_key(9964)) void IPoint::PutSecondaryPlot ( VARIANT_BOOL RHS );
__declspec(implementation_key(9965)) ChartFillFormatPtr IPoint::GetFill ( );
__declspec(implementation_key(9966)) _ApplicationPtr ISeries::GetApplication ( );
__declspec(implementation_key(9967)) enum XlCreator ISeries::GetCreator ( );
__declspec(implementation_key(9968)) IDispatchPtr ISeries::GetParent ( );
__declspec(implementation_key(9969)) _variant_t ISeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(9970)) enum XlAxisGroup ISeries::GetAxisGroup ( );
__declspec(implementation_key(9971)) void ISeries::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(9972)) BorderPtr ISeries::GetBorder ( );
__declspec(implementation_key(9973)) _variant_t ISeries::ClearFormats ( );
__declspec(implementation_key(9974)) _variant_t ISeries::Copy ( );
__declspec(implementation_key(9975)) IDispatchPtr ISeries::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(9976)) _variant_t ISeries::Delete ( );
__declspec(implementation_key(9977)) _variant_t ISeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(9978)) ErrorBarsPtr ISeries::GetErrorBars ( );
__declspec(implementation_key(9979)) long ISeries::GetExplosion ( );
__declspec(implementation_key(9980)) void ISeries::PutExplosion ( long RHS );
__declspec(implementation_key(9981)) _bstr_t ISeries::GetFormula ( );
__declspec(implementation_key(9982)) void ISeries::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9983)) _bstr_t ISeries::GetFormulaLocal ( );
__declspec(implementation_key(9984)) void ISeries::PutFormulaLocal ( _bstr_t RHS );
__declspec(implementation_key(9985)) _bstr_t ISeries::GetFormulaR1C1 ( );
__declspec(implementation_key(9986)) void ISeries::PutFormulaR1C1 ( _bstr_t RHS );
__declspec(implementation_key(9987)) _bstr_t ISeries::GetFormulaR1C1Local ( );
__declspec(implementation_key(9988)) void ISeries::PutFormulaR1C1Local ( _bstr_t RHS );
__declspec(implementation_key(9989)) VARIANT_BOOL ISeries::GetHasDataLabels ( );
__declspec(implementation_key(9990)) void ISeries::PutHasDataLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(9991)) VARIANT_BOOL ISeries::GetHasErrorBars ( );
__declspec(implementation_key(9992)) void ISeries::PutHasErrorBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(9993)) InteriorPtr ISeries::GetInterior ( );
__declspec(implementation_key(9994)) ChartFillFormatPtr ISeries::GetFill ( );
__declspec(implementation_key(9995)) VARIANT_BOOL ISeries::GetInvertIfNegative ( );
__declspec(implementation_key(9996)) void ISeries::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(9997)) long ISeries::GetMarkerBackgroundColor ( );
__declspec(implementation_key(9998)) void ISeries::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(9999)) enum XlColorIndex ISeries::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(10000)) void ISeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10001)) long ISeries::GetMarkerForegroundColor ( );
__declspec(implementation_key(10002)) void ISeries::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(10003)) enum XlColorIndex ISeries::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(10004)) void ISeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10005)) long ISeries::GetMarkerSize ( );
__declspec(implementation_key(10006)) void ISeries::PutMarkerSize ( long RHS );
__declspec(implementation_key(10007)) enum XlMarkerStyle ISeries::GetMarkerStyle ( );
__declspec(implementation_key(10008)) void ISeries::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(10009)) _bstr_t ISeries::GetName ( );
__declspec(implementation_key(10010)) void ISeries::PutName ( _bstr_t RHS );
__declspec(implementation_key(10011)) _variant_t ISeries::Paste ( );
__declspec(implementation_key(10012)) enum XlChartPictureType ISeries::GetPictureType ( );
__declspec(implementation_key(10013)) void ISeries::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(10014)) long ISeries::GetPictureUnit ( );
__declspec(implementation_key(10015)) void ISeries::PutPictureUnit ( long RHS );
__declspec(implementation_key(10016)) long ISeries::GetPlotOrder ( );
__declspec(implementation_key(10017)) void ISeries::PutPlotOrder ( long RHS );
__declspec(implementation_key(10018)) IDispatchPtr ISeries::Points ( const _variant_t & Index );
__declspec(implementation_key(10019)) _variant_t ISeries::Select ( );
__declspec(implementation_key(10020)) VARIANT_BOOL ISeries::GetSmooth ( );
__declspec(implementation_key(10021)) void ISeries::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(10022)) IDispatchPtr ISeries::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(10023)) long ISeries::GetType ( );
__declspec(implementation_key(10024)) void ISeries::PutType ( long RHS );
__declspec(implementation_key(10025)) enum XlChartType ISeries::GetChartType ( );
__declspec(implementation_key(10026)) void ISeries::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(10027)) HRESULT ISeries::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(10028)) _variant_t ISeries::GetValues ( );
__declspec(implementation_key(10029)) void ISeries::PutValues ( const _variant_t & RHS );
__declspec(implementation_key(10030)) _variant_t ISeries::GetXValues ( );
__declspec(implementation_key(10031)) void ISeries::PutXValues ( const _variant_t & RHS );
__declspec(implementation_key(10032)) _variant_t ISeries::GetBubbleSizes ( );
__declspec(implementation_key(10033)) void ISeries::PutBubbleSizes ( const _variant_t & RHS );
__declspec(implementation_key(10034)) enum XlBarShape ISeries::GetBarShape ( );
__declspec(implementation_key(10035)) void ISeries::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(10036)) VARIANT_BOOL ISeries::GetApplyPictToSides ( );
__declspec(implementation_key(10037)) void ISeries::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(10038)) VARIANT_BOOL ISeries::GetApplyPictToFront ( );
__declspec(implementation_key(10039)) void ISeries::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(10040)) VARIANT_BOOL ISeries::GetApplyPictToEnd ( );
__declspec(implementation_key(10041)) void ISeries::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(10042)) VARIANT_BOOL ISeries::GetHas3DEffect ( );
__declspec(implementation_key(10043)) void ISeries::PutHas3DEffect ( VARIANT_BOOL RHS );
__declspec(implementation_key(10044)) VARIANT_BOOL ISeries::GetShadow ( );
__declspec(implementation_key(10045)) void ISeries::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10046)) VARIANT_BOOL ISeries::GetHasLeaderLines ( );
__declspec(implementation_key(10047)) void ISeries::PutHasLeaderLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10048)) LeaderLinesPtr ISeries::GetLeaderLines ( );
__declspec(implementation_key(10049)) _ApplicationPtr ISeriesCollection::GetApplication ( );
__declspec(implementation_key(10050)) enum XlCreator ISeriesCollection::GetCreator ( );
__declspec(implementation_key(10051)) IDispatchPtr ISeriesCollection::GetParent ( );
__declspec(implementation_key(10052)) SeriesPtr ISeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(10053)) long ISeriesCollection::GetCount ( );
__declspec(implementation_key(10054)) _variant_t ISeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(10055)) SeriesPtr ISeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(10056)) IUnknownPtr ISeriesCollection::_NewEnum ( );
__declspec(implementation_key(10057)) _variant_t ISeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(10058)) SeriesPtr ISeriesCollection::NewSeries ( );
__declspec(implementation_key(10059)) _ApplicationPtr IDataLabel::GetApplication ( );
__declspec(implementation_key(10060)) enum XlCreator IDataLabel::GetCreator ( );
__declspec(implementation_key(10061)) IDispatchPtr IDataLabel::GetParent ( );
__declspec(implementation_key(10062)) _bstr_t IDataLabel::GetName ( );
__declspec(implementation_key(10063)) _variant_t IDataLabel::Select ( );
__declspec(implementation_key(10064)) BorderPtr IDataLabel::GetBorder ( );
__declspec(implementation_key(10065)) _variant_t IDataLabel::Delete ( );
__declspec(implementation_key(10066)) InteriorPtr IDataLabel::GetInterior ( );
__declspec(implementation_key(10067)) ChartFillFormatPtr IDataLabel::GetFill ( );
__declspec(implementation_key(10068)) _bstr_t IDataLabel::GetCaption ( );
__declspec(implementation_key(10069)) void IDataLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(10070)) CharactersPtr IDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10071)) FontPtr IDataLabel::GetFont ( );
__declspec(implementation_key(10072)) _variant_t IDataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(10073)) void IDataLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10074)) double IDataLabel::GetLeft ( );
__declspec(implementation_key(10075)) void IDataLabel::PutLeft ( double RHS );
__declspec(implementation_key(10076)) _variant_t IDataLabel::GetOrientation ( );
__declspec(implementation_key(10077)) void IDataLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(10078)) VARIANT_BOOL IDataLabel::GetShadow ( );
__declspec(implementation_key(10079)) void IDataLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10080)) _bstr_t IDataLabel::GetText ( );
__declspec(implementation_key(10081)) void IDataLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(10082)) double IDataLabel::GetTop ( );
__declspec(implementation_key(10083)) void IDataLabel::PutTop ( double RHS );
__declspec(implementation_key(10084)) _variant_t IDataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(10085)) void IDataLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10086)) long IDataLabel::GetReadingOrder ( );
__declspec(implementation_key(10087)) void IDataLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(10088)) _variant_t IDataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(10089)) void IDataLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10090)) VARIANT_BOOL IDataLabel::GetAutoText ( );
__declspec(implementation_key(10091)) void IDataLabel::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(10092)) _bstr_t IDataLabel::GetNumberFormat ( );
__declspec(implementation_key(10093)) void IDataLabel::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(10094)) VARIANT_BOOL IDataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(10095)) void IDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10096)) _variant_t IDataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(10097)) void IDataLabel::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(10098)) VARIANT_BOOL IDataLabel::GetShowLegendKey ( );
__declspec(implementation_key(10099)) void IDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(10100)) _variant_t IDataLabel::GetType ( );
__declspec(implementation_key(10101)) void IDataLabel::PutType ( const _variant_t & RHS );
__declspec(implementation_key(10102)) enum XlDataLabelPosition IDataLabel::GetPosition ( );
__declspec(implementation_key(10103)) void IDataLabel::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(10104)) _ApplicationPtr IDataLabels::GetApplication ( );
__declspec(implementation_key(10105)) enum XlCreator IDataLabels::GetCreator ( );
__declspec(implementation_key(10106)) IDispatchPtr IDataLabels::GetParent ( );
__declspec(implementation_key(10107)) _bstr_t IDataLabels::GetName ( );
__declspec(implementation_key(10108)) _variant_t IDataLabels::Select ( );
__declspec(implementation_key(10109)) BorderPtr IDataLabels::GetBorder ( );
__declspec(implementation_key(10110)) _variant_t IDataLabels::Delete ( );
__declspec(implementation_key(10111)) InteriorPtr IDataLabels::GetInterior ( );
__declspec(implementation_key(10112)) ChartFillFormatPtr IDataLabels::GetFill ( );
__declspec(implementation_key(10113)) FontPtr IDataLabels::GetFont ( );
__declspec(implementation_key(10114)) _variant_t IDataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(10115)) void IDataLabels::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10116)) _variant_t IDataLabels::GetOrientation ( );
__declspec(implementation_key(10117)) void IDataLabels::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(10118)) VARIANT_BOOL IDataLabels::GetShadow ( );
__declspec(implementation_key(10119)) void IDataLabels::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10120)) _variant_t IDataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(10121)) void IDataLabels::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10122)) long IDataLabels::GetReadingOrder ( );
__declspec(implementation_key(10123)) void IDataLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(10124)) _variant_t IDataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(10125)) void IDataLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10126)) VARIANT_BOOL IDataLabels::GetAutoText ( );
__declspec(implementation_key(10127)) void IDataLabels::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(10128)) _bstr_t IDataLabels::GetNumberFormat ( );
__declspec(implementation_key(10129)) void IDataLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(10130)) VARIANT_BOOL IDataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(10131)) void IDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10132)) _variant_t IDataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(10133)) void IDataLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(10134)) VARIANT_BOOL IDataLabels::GetShowLegendKey ( );
__declspec(implementation_key(10135)) void IDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(10136)) _variant_t IDataLabels::GetType ( );
__declspec(implementation_key(10137)) void IDataLabels::PutType ( const _variant_t & RHS );
__declspec(implementation_key(10138)) enum XlDataLabelPosition IDataLabels::GetPosition ( );
__declspec(implementation_key(10139)) void IDataLabels::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(10140)) long IDataLabels::GetCount ( );
__declspec(implementation_key(10141)) DataLabelPtr IDataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(10142)) IUnknownPtr IDataLabels::_NewEnum ( );
__declspec(implementation_key(10143)) _ApplicationPtr ILegendEntry::GetApplication ( );
__declspec(implementation_key(10144)) enum XlCreator ILegendEntry::GetCreator ( );
__declspec(implementation_key(10145)) IDispatchPtr ILegendEntry::GetParent ( );
__declspec(implementation_key(10146)) _variant_t ILegendEntry::Delete ( );
__declspec(implementation_key(10147)) FontPtr ILegendEntry::GetFont ( );
__declspec(implementation_key(10148)) long ILegendEntry::GetIndex ( );
__declspec(implementation_key(10149)) LegendKeyPtr ILegendEntry::GetLegendKey ( );
__declspec(implementation_key(10150)) _variant_t ILegendEntry::Select ( );
__declspec(implementation_key(10151)) _variant_t ILegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(10152)) void ILegendEntry::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10153)) double ILegendEntry::GetLeft ( );
__declspec(implementation_key(10154)) double ILegendEntry::GetTop ( );
__declspec(implementation_key(10155)) double ILegendEntry::GetWidth ( );
__declspec(implementation_key(10156)) double ILegendEntry::GetHeight ( );
__declspec(implementation_key(10157)) _ApplicationPtr ILegendEntries::GetApplication ( );
__declspec(implementation_key(10158)) enum XlCreator ILegendEntries::GetCreator ( );
__declspec(implementation_key(10159)) IDispatchPtr ILegendEntries::GetParent ( );
__declspec(implementation_key(10160)) long ILegendEntries::GetCount ( );
__declspec(implementation_key(10161)) LegendEntryPtr ILegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(10162)) IUnknownPtr ILegendEntries::_NewEnum ( );
__declspec(implementation_key(10163)) _ApplicationPtr ILegendKey::GetApplication ( );
__declspec(implementation_key(10164)) enum XlCreator ILegendKey::GetCreator ( );
__declspec(implementation_key(10165)) IDispatchPtr ILegendKey::GetParent ( );
__declspec(implementation_key(10166)) BorderPtr ILegendKey::GetBorder ( );
__declspec(implementation_key(10167)) _variant_t ILegendKey::ClearFormats ( );
__declspec(implementation_key(10168)) _variant_t ILegendKey::Delete ( );
__declspec(implementation_key(10169)) InteriorPtr ILegendKey::GetInterior ( );
__declspec(implementation_key(10170)) ChartFillFormatPtr ILegendKey::GetFill ( );
__declspec(implementation_key(10171)) VARIANT_BOOL ILegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(10172)) void ILegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(10173)) long ILegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(10174)) void ILegendKey::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(10175)) enum XlColorIndex ILegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(10176)) void ILegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10177)) long ILegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(10178)) void ILegendKey::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(10179)) enum XlColorIndex ILegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(10180)) void ILegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10181)) long ILegendKey::GetMarkerSize ( );
__declspec(implementation_key(10182)) void ILegendKey::PutMarkerSize ( long RHS );
__declspec(implementation_key(10183)) enum XlMarkerStyle ILegendKey::GetMarkerStyle ( );
__declspec(implementation_key(10184)) void ILegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(10185)) long ILegendKey::GetPictureType ( );
__declspec(implementation_key(10186)) void ILegendKey::PutPictureType ( long RHS );
__declspec(implementation_key(10187)) long ILegendKey::GetPictureUnit ( );
__declspec(implementation_key(10188)) void ILegendKey::PutPictureUnit ( long RHS );
__declspec(implementation_key(10189)) _variant_t ILegendKey::Select ( );
__declspec(implementation_key(10190)) VARIANT_BOOL ILegendKey::GetSmooth ( );
__declspec(implementation_key(10191)) void ILegendKey::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(10192)) double ILegendKey::GetLeft ( );
__declspec(implementation_key(10193)) double ILegendKey::GetTop ( );
__declspec(implementation_key(10194)) double ILegendKey::GetWidth ( );
__declspec(implementation_key(10195)) double ILegendKey::GetHeight ( );
__declspec(implementation_key(10196)) VARIANT_BOOL ILegendKey::GetShadow ( );
__declspec(implementation_key(10197)) void ILegendKey::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10198)) _ApplicationPtr ITrendlines::GetApplication ( );
__declspec(implementation_key(10199)) enum XlCreator ITrendlines::GetCreator ( );
__declspec(implementation_key(10200)) IDispatchPtr ITrendlines::GetParent ( );
__declspec(implementation_key(10201)) TrendlinePtr ITrendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(10202)) long ITrendlines::GetCount ( );
__declspec(implementation_key(10203)) TrendlinePtr ITrendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(10204)) IUnknownPtr ITrendlines::_NewEnum ( );
__declspec(implementation_key(10205)) _ApplicationPtr ITrendline::GetApplication ( );
__declspec(implementation_key(10206)) enum XlCreator ITrendline::GetCreator ( );
__declspec(implementation_key(10207)) IDispatchPtr ITrendline::GetParent ( );
__declspec(implementation_key(10208)) long ITrendline::GetBackward ( );
__declspec(implementation_key(10209)) void ITrendline::PutBackward ( long RHS );
__declspec(implementation_key(10210)) BorderPtr ITrendline::GetBorder ( );
__declspec(implementation_key(10211)) _variant_t ITrendline::ClearFormats ( );
__declspec(implementation_key(10212)) DataLabelPtr ITrendline::GetDataLabel ( );
__declspec(implementation_key(10213)) _variant_t ITrendline::Delete ( );
__declspec(implementation_key(10214)) VARIANT_BOOL ITrendline::GetDisplayEquation ( );
__declspec(implementation_key(10215)) void ITrendline::PutDisplayEquation ( VARIANT_BOOL RHS );
__declspec(implementation_key(10216)) VARIANT_BOOL ITrendline::GetDisplayRSquared ( );
__declspec(implementation_key(10217)) void ITrendline::PutDisplayRSquared ( VARIANT_BOOL RHS );
__declspec(implementation_key(10218)) long ITrendline::GetForward ( );
__declspec(implementation_key(10219)) void ITrendline::PutForward ( long RHS );
__declspec(implementation_key(10220)) long ITrendline::GetIndex ( );
__declspec(implementation_key(10221)) double ITrendline::GetIntercept ( );
__declspec(implementation_key(10222)) void ITrendline::PutIntercept ( double RHS );
__declspec(implementation_key(10223)) VARIANT_BOOL ITrendline::GetInterceptIsAuto ( );
__declspec(implementation_key(10224)) void ITrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10225)) _bstr_t ITrendline::GetName ( );
__declspec(implementation_key(10226)) void ITrendline::PutName ( _bstr_t RHS );
__declspec(implementation_key(10227)) VARIANT_BOOL ITrendline::GetNameIsAuto ( );
__declspec(implementation_key(10228)) void ITrendline::PutNameIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10229)) long ITrendline::GetOrder ( );
__declspec(implementation_key(10230)) void ITrendline::PutOrder ( long RHS );
__declspec(implementation_key(10231)) long ITrendline::GetPeriod ( );
__declspec(implementation_key(10232)) void ITrendline::PutPeriod ( long RHS );
__declspec(implementation_key(10233)) _variant_t ITrendline::Select ( );
__declspec(implementation_key(10234)) enum XlTrendlineType ITrendline::GetType ( );
__declspec(implementation_key(10235)) void ITrendline::PutType ( enum XlTrendlineType RHS );
__declspec(implementation_key(10236)) _ApplicationPtr ICorners::GetApplication ( );
__declspec(implementation_key(10237)) enum XlCreator ICorners::GetCreator ( );
__declspec(implementation_key(10238)) IDispatchPtr ICorners::GetParent ( );
__declspec(implementation_key(10239)) _bstr_t ICorners::GetName ( );
__declspec(implementation_key(10240)) _variant_t ICorners::Select ( );
__declspec(implementation_key(10241)) _ApplicationPtr ISeriesLines::GetApplication ( );
__declspec(implementation_key(10242)) enum XlCreator ISeriesLines::GetCreator ( );
__declspec(implementation_key(10243)) IDispatchPtr ISeriesLines::GetParent ( );
__declspec(implementation_key(10244)) _bstr_t ISeriesLines::GetName ( );
__declspec(implementation_key(10245)) _variant_t ISeriesLines::Select ( );
__declspec(implementation_key(10246)) BorderPtr ISeriesLines::GetBorder ( );
__declspec(implementation_key(10247)) _variant_t ISeriesLines::Delete ( );
__declspec(implementation_key(10248)) _ApplicationPtr IHiLoLines::GetApplication ( );
__declspec(implementation_key(10249)) enum XlCreator IHiLoLines::GetCreator ( );
__declspec(implementation_key(10250)) IDispatchPtr IHiLoLines::GetParent ( );
__declspec(implementation_key(10251)) _bstr_t IHiLoLines::GetName ( );
__declspec(implementation_key(10252)) _variant_t IHiLoLines::Select ( );
__declspec(implementation_key(10253)) BorderPtr IHiLoLines::GetBorder ( );
__declspec(implementation_key(10254)) _variant_t IHiLoLines::Delete ( );
__declspec(implementation_key(10255)) _ApplicationPtr IGridlines::GetApplication ( );
__declspec(implementation_key(10256)) enum XlCreator IGridlines::GetCreator ( );
__declspec(implementation_key(10257)) IDispatchPtr IGridlines::GetParent ( );
__declspec(implementation_key(10258)) _bstr_t IGridlines::GetName ( );
__declspec(implementation_key(10259)) _variant_t IGridlines::Select ( );
__declspec(implementation_key(10260)) BorderPtr IGridlines::GetBorder ( );
__declspec(implementation_key(10261)) _variant_t IGridlines::Delete ( );
__declspec(implementation_key(10262)) _ApplicationPtr IDropLines::GetApplication ( );
__declspec(implementation_key(10263)) enum XlCreator IDropLines::GetCreator ( );
__declspec(implementation_key(10264)) IDispatchPtr IDropLines::GetParent ( );
__declspec(implementation_key(10265)) _bstr_t IDropLines::GetName ( );
__declspec(implementation_key(10266)) _variant_t IDropLines::Select ( );
__declspec(implementation_key(10267)) BorderPtr IDropLines::GetBorder ( );
__declspec(implementation_key(10268)) _variant_t IDropLines::Delete ( );
__declspec(implementation_key(10269)) _ApplicationPtr ILeaderLines::GetApplication ( );
__declspec(implementation_key(10270)) enum XlCreator ILeaderLines::GetCreator ( );
__declspec(implementation_key(10271)) IDispatchPtr ILeaderLines::GetParent ( );
__declspec(implementation_key(10272)) BorderPtr ILeaderLines::GetBorder ( );
__declspec(implementation_key(10273)) HRESULT ILeaderLines::Delete ( );
__declspec(implementation_key(10274)) HRESULT ILeaderLines::Select ( );
__declspec(implementation_key(10275)) _ApplicationPtr IUpBars::GetApplication ( );
__declspec(implementation_key(10276)) enum XlCreator IUpBars::GetCreator ( );
__declspec(implementation_key(10277)) IDispatchPtr IUpBars::GetParent ( );
__declspec(implementation_key(10278)) _bstr_t IUpBars::GetName ( );
__declspec(implementation_key(10279)) _variant_t IUpBars::Select ( );
__declspec(implementation_key(10280)) BorderPtr IUpBars::GetBorder ( );
__declspec(implementation_key(10281)) _variant_t IUpBars::Delete ( );
__declspec(implementation_key(10282)) InteriorPtr IUpBars::GetInterior ( );
__declspec(implementation_key(10283)) ChartFillFormatPtr IUpBars::GetFill ( );
__declspec(implementation_key(10284)) _ApplicationPtr IDownBars::GetApplication ( );
__declspec(implementation_key(10285)) enum XlCreator IDownBars::GetCreator ( );
__declspec(implementation_key(10286)) IDispatchPtr IDownBars::GetParent ( );
__declspec(implementation_key(10287)) _bstr_t IDownBars::GetName ( );
__declspec(implementation_key(10288)) _variant_t IDownBars::Select ( );
__declspec(implementation_key(10289)) BorderPtr IDownBars::GetBorder ( );
__declspec(implementation_key(10290)) _variant_t IDownBars::Delete ( );
__declspec(implementation_key(10291)) InteriorPtr IDownBars::GetInterior ( );
__declspec(implementation_key(10292)) ChartFillFormatPtr IDownBars::GetFill ( );
__declspec(implementation_key(10293)) _ApplicationPtr IFloor::GetApplication ( );
__declspec(implementation_key(10294)) enum XlCreator IFloor::GetCreator ( );
__declspec(implementation_key(10295)) IDispatchPtr IFloor::GetParent ( );
__declspec(implementation_key(10296)) _bstr_t IFloor::GetName ( );
__declspec(implementation_key(10297)) _variant_t IFloor::Select ( );
__declspec(implementation_key(10298)) BorderPtr IFloor::GetBorder ( );
__declspec(implementation_key(10299)) _variant_t IFloor::ClearFormats ( );
__declspec(implementation_key(10300)) InteriorPtr IFloor::GetInterior ( );
__declspec(implementation_key(10301)) ChartFillFormatPtr IFloor::GetFill ( );
__declspec(implementation_key(10302)) _variant_t IFloor::GetPictureType ( );
__declspec(implementation_key(10303)) void IFloor::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(10304)) HRESULT IFloor::Paste ( );
__declspec(implementation_key(10305)) _ApplicationPtr IWalls::GetApplication ( );
__declspec(implementation_key(10306)) enum XlCreator IWalls::GetCreator ( );
__declspec(implementation_key(10307)) IDispatchPtr IWalls::GetParent ( );
__declspec(implementation_key(10308)) _bstr_t IWalls::GetName ( );
__declspec(implementation_key(10309)) _variant_t IWalls::Select ( );
__declspec(implementation_key(10310)) BorderPtr IWalls::GetBorder ( );
__declspec(implementation_key(10311)) _variant_t IWalls::ClearFormats ( );
__declspec(implementation_key(10312)) InteriorPtr IWalls::GetInterior ( );
__declspec(implementation_key(10313)) ChartFillFormatPtr IWalls::GetFill ( );
__declspec(implementation_key(10314)) _variant_t IWalls::GetPictureType ( );
__declspec(implementation_key(10315)) void IWalls::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(10316)) HRESULT IWalls::Paste ( );
__declspec(implementation_key(10317)) _variant_t IWalls::GetPictureUnit ( );
__declspec(implementation_key(10318)) void IWalls::PutPictureUnit ( const _variant_t & RHS );
__declspec(implementation_key(10319)) _ApplicationPtr ITickLabels::GetApplication ( );
__declspec(implementation_key(10320)) enum XlCreator ITickLabels::GetCreator ( );
__declspec(implementation_key(10321)) IDispatchPtr ITickLabels::GetParent ( );
__declspec(implementation_key(10322)) _variant_t ITickLabels::Delete ( );
__declspec(implementation_key(10323)) FontPtr ITickLabels::GetFont ( );
__declspec(implementation_key(10324)) _bstr_t ITickLabels::GetName ( );
__declspec(implementation_key(10325)) _bstr_t ITickLabels::GetNumberFormat ( );
__declspec(implementation_key(10326)) void ITickLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(10327)) VARIANT_BOOL ITickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(10328)) void ITickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10329)) _variant_t ITickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(10330)) void ITickLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(10331)) enum XlTickLabelOrientation ITickLabels::GetOrientation ( );
__declspec(implementation_key(10332)) void ITickLabels::PutOrientation ( enum XlTickLabelOrientation RHS );
__declspec(implementation_key(10333)) _variant_t ITickLabels::Select ( );
__declspec(implementation_key(10334)) long ITickLabels::GetReadingOrder ( );
__declspec(implementation_key(10335)) void ITickLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(10336)) _variant_t ITickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(10337)) void ITickLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10338)) long ITickLabels::GetDepth ( );
__declspec(implementation_key(10339)) long ITickLabels::GetOffset ( );
__declspec(implementation_key(10340)) void ITickLabels::PutOffset ( long RHS );
__declspec(implementation_key(10341)) long ITickLabels::GetAlignment ( );
__declspec(implementation_key(10342)) void ITickLabels::PutAlignment ( long RHS );
__declspec(implementation_key(10343)) _ApplicationPtr IPlotArea::GetApplication ( );
__declspec(implementation_key(10344)) enum XlCreator IPlotArea::GetCreator ( );
__declspec(implementation_key(10345)) IDispatchPtr IPlotArea::GetParent ( );
__declspec(implementation_key(10346)) _bstr_t IPlotArea::GetName ( );
__declspec(implementation_key(10347)) _variant_t IPlotArea::Select ( );
__declspec(implementation_key(10348)) BorderPtr IPlotArea::GetBorder ( );
__declspec(implementation_key(10349)) _variant_t IPlotArea::ClearFormats ( );
__declspec(implementation_key(10350)) double IPlotArea::GetHeight ( );
__declspec(implementation_key(10351)) void IPlotArea::PutHeight ( double RHS );
__declspec(implementation_key(10352)) InteriorPtr IPlotArea::GetInterior ( );
__declspec(implementation_key(10353)) ChartFillFormatPtr IPlotArea::GetFill ( );
__declspec(implementation_key(10354)) double IPlotArea::GetLeft ( );
__declspec(implementation_key(10355)) void IPlotArea::PutLeft ( double RHS );
__declspec(implementation_key(10356)) double IPlotArea::GetTop ( );
__declspec(implementation_key(10357)) void IPlotArea::PutTop ( double RHS );
__declspec(implementation_key(10358)) double IPlotArea::GetWidth ( );
__declspec(implementation_key(10359)) void IPlotArea::PutWidth ( double RHS );
__declspec(implementation_key(10360)) double IPlotArea::GetInsideLeft ( );
__declspec(implementation_key(10361)) double IPlotArea::GetInsideTop ( );
__declspec(implementation_key(10362)) double IPlotArea::GetInsideWidth ( );
__declspec(implementation_key(10363)) double IPlotArea::GetInsideHeight ( );
__declspec(implementation_key(10364)) _ApplicationPtr IChartArea::GetApplication ( );
__declspec(implementation_key(10365)) enum XlCreator IChartArea::GetCreator ( );
__declspec(implementation_key(10366)) IDispatchPtr IChartArea::GetParent ( );
__declspec(implementation_key(10367)) _bstr_t IChartArea::GetName ( );
__declspec(implementation_key(10368)) _variant_t IChartArea::Select ( );
__declspec(implementation_key(10369)) BorderPtr IChartArea::GetBorder ( );
__declspec(implementation_key(10370)) _variant_t IChartArea::Clear ( );
__declspec(implementation_key(10371)) _variant_t IChartArea::ClearContents ( );
__declspec(implementation_key(10372)) _variant_t IChartArea::Copy ( );
__declspec(implementation_key(10373)) FontPtr IChartArea::GetFont ( );
__declspec(implementation_key(10374)) VARIANT_BOOL IChartArea::GetShadow ( );
__declspec(implementation_key(10375)) void IChartArea::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10376)) _variant_t IChartArea::ClearFormats ( );
__declspec(implementation_key(10377)) double IChartArea::GetHeight ( );
__declspec(implementation_key(10378)) void IChartArea::PutHeight ( double RHS );
__declspec(implementation_key(10379)) InteriorPtr IChartArea::GetInterior ( );
__declspec(implementation_key(10380)) ChartFillFormatPtr IChartArea::GetFill ( );
__declspec(implementation_key(10381)) double IChartArea::GetLeft ( );
__declspec(implementation_key(10382)) void IChartArea::PutLeft ( double RHS );
__declspec(implementation_key(10383)) double IChartArea::GetTop ( );
__declspec(implementation_key(10384)) void IChartArea::PutTop ( double RHS );
__declspec(implementation_key(10385)) double IChartArea::GetWidth ( );
__declspec(implementation_key(10386)) void IChartArea::PutWidth ( double RHS );
__declspec(implementation_key(10387)) _variant_t IChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(10388)) void IChartArea::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10389)) _ApplicationPtr ILegend::GetApplication ( );
__declspec(implementation_key(10390)) enum XlCreator ILegend::GetCreator ( );
__declspec(implementation_key(10391)) IDispatchPtr ILegend::GetParent ( );
__declspec(implementation_key(10392)) _bstr_t ILegend::GetName ( );
__declspec(implementation_key(10393)) _variant_t ILegend::Select ( );
__declspec(implementation_key(10394)) BorderPtr ILegend::GetBorder ( );
__declspec(implementation_key(10395)) _variant_t ILegend::Delete ( );
__declspec(implementation_key(10396)) FontPtr ILegend::GetFont ( );
__declspec(implementation_key(10397)) IDispatchPtr ILegend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(10398)) enum XlLegendPosition ILegend::GetPosition ( );
__declspec(implementation_key(10399)) void ILegend::PutPosition ( enum XlLegendPosition RHS );
__declspec(implementation_key(10400)) VARIANT_BOOL ILegend::GetShadow ( );
__declspec(implementation_key(10401)) void ILegend::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10402)) _variant_t ILegend::Clear ( );
__declspec(implementation_key(10403)) double ILegend::GetHeight ( );
__declspec(implementation_key(10404)) void ILegend::PutHeight ( double RHS );
__declspec(implementation_key(10405)) InteriorPtr ILegend::GetInterior ( );
__declspec(implementation_key(10406)) ChartFillFormatPtr ILegend::GetFill ( );
__declspec(implementation_key(10407)) double ILegend::GetLeft ( );
__declspec(implementation_key(10408)) void ILegend::PutLeft ( double RHS );
__declspec(implementation_key(10409)) double ILegend::GetTop ( );
__declspec(implementation_key(10410)) void ILegend::PutTop ( double RHS );
__declspec(implementation_key(10411)) double ILegend::GetWidth ( );
__declspec(implementation_key(10412)) void ILegend::PutWidth ( double RHS );
__declspec(implementation_key(10413)) _variant_t ILegend::GetAutoScaleFont ( );
__declspec(implementation_key(10414)) void ILegend::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10415)) _ApplicationPtr IErrorBars::GetApplication ( );
__declspec(implementation_key(10416)) enum XlCreator IErrorBars::GetCreator ( );
__declspec(implementation_key(10417)) IDispatchPtr IErrorBars::GetParent ( );
__declspec(implementation_key(10418)) _bstr_t IErrorBars::GetName ( );
__declspec(implementation_key(10419)) _variant_t IErrorBars::Select ( );
__declspec(implementation_key(10420)) BorderPtr IErrorBars::GetBorder ( );
__declspec(implementation_key(10421)) _variant_t IErrorBars::Delete ( );
__declspec(implementation_key(10422)) _variant_t IErrorBars::ClearFormats ( );
__declspec(implementation_key(10423)) enum XlEndStyleCap IErrorBars::GetEndStyle ( );
__declspec(implementation_key(10424)) void IErrorBars::PutEndStyle ( enum XlEndStyleCap RHS );
__declspec(implementation_key(10425)) _ApplicationPtr IDataTable::GetApplication ( );
__declspec(implementation_key(10426)) enum XlCreator IDataTable::GetCreator ( );
__declspec(implementation_key(10427)) IDispatchPtr IDataTable::GetParent ( );
__declspec(implementation_key(10428)) VARIANT_BOOL IDataTable::GetShowLegendKey ( );
__declspec(implementation_key(10429)) void IDataTable::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(10430)) VARIANT_BOOL IDataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(10431)) void IDataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS );
__declspec(implementation_key(10432)) VARIANT_BOOL IDataTable::GetHasBorderVertical ( );
__declspec(implementation_key(10433)) void IDataTable::PutHasBorderVertical ( VARIANT_BOOL RHS );
__declspec(implementation_key(10434)) VARIANT_BOOL IDataTable::GetHasBorderOutline ( );
__declspec(implementation_key(10435)) void IDataTable::PutHasBorderOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(10436)) BorderPtr IDataTable::GetBorder ( );
__declspec(implementation_key(10437)) FontPtr IDataTable::GetFont ( );
__declspec(implementation_key(10438)) HRESULT IDataTable::Select ( );
__declspec(implementation_key(10439)) HRESULT IDataTable::Delete ( );
__declspec(implementation_key(10440)) _variant_t IDataTable::GetAutoScaleFont ( );
__declspec(implementation_key(10441)) void IDataTable::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10442)) _ApplicationPtr IPhonetic::GetApplication ( );
__declspec(implementation_key(10443)) enum XlCreator IPhonetic::GetCreator ( );
__declspec(implementation_key(10444)) IDispatchPtr IPhonetic::GetParent ( );
__declspec(implementation_key(10445)) VARIANT_BOOL IPhonetic::GetVisible ( );
__declspec(implementation_key(10446)) void IPhonetic::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(10447)) long IPhonetic::GetCharacterType ( );
__declspec(implementation_key(10448)) void IPhonetic::PutCharacterType ( long RHS );
__declspec(implementation_key(10449)) long IPhonetic::GetAlignment ( );
__declspec(implementation_key(10450)) void IPhonetic::PutAlignment ( long RHS );
__declspec(implementation_key(10451)) FontPtr IPhonetic::GetFont ( );
__declspec(implementation_key(10452)) _bstr_t IPhonetic::GetText ( );
__declspec(implementation_key(10453)) void IPhonetic::PutText ( _bstr_t RHS );
__declspec(implementation_key(10454)) _ApplicationPtr IShape::GetApplication ( );
__declspec(implementation_key(10455)) enum XlCreator IShape::GetCreator ( );
__declspec(implementation_key(10456)) IDispatchPtr IShape::GetParent ( );
__declspec(implementation_key(10457)) HRESULT IShape::Apply ( );
__declspec(implementation_key(10458)) HRESULT IShape::Delete ( );
__declspec(implementation_key(10459)) ShapePtr IShape::Duplicate ( );
__declspec(implementation_key(10460)) HRESULT IShape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(10461)) HRESULT IShape::IncrementLeft ( float Increment );
__declspec(implementation_key(10462)) HRESULT IShape::IncrementRotation ( float Increment );
__declspec(implementation_key(10463)) HRESULT IShape::IncrementTop ( float Increment );
__declspec(implementation_key(10464)) HRESULT IShape::PickUp ( );
__declspec(implementation_key(10465)) HRESULT IShape::RerouteConnections ( );
__declspec(implementation_key(10466)) HRESULT IShape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(10467)) HRESULT IShape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(10468)) HRESULT IShape::Select ( const _variant_t & Replace );
__declspec(implementation_key(10469)) HRESULT IShape::SetShapesDefaultProperties ( );
__declspec(implementation_key(10470)) ShapeRangePtr IShape::Ungroup ( );
__declspec(implementation_key(10471)) HRESULT IShape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(10472)) AdjustmentsPtr IShape::GetAdjustments ( );
__declspec(implementation_key(10473)) TextFramePtr IShape::GetTextFrame ( );
__declspec(implementation_key(10474)) enum Office::MsoAutoShapeType IShape::GetAutoShapeType ( );
__declspec(implementation_key(10475)) void IShape::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(10476)) CalloutFormatPtr IShape::GetCallout ( );
__declspec(implementation_key(10477)) long IShape::GetConnectionSiteCount ( );
__declspec(implementation_key(10478)) enum Office::MsoTriState IShape::GetConnector ( );
__declspec(implementation_key(10479)) ConnectorFormatPtr IShape::GetConnectorFormat ( );
__declspec(implementation_key(10480)) FillFormatPtr IShape::GetFill ( );
__declspec(implementation_key(10481)) GroupShapesPtr IShape::GetGroupItems ( );
__declspec(implementation_key(10482)) float IShape::GetHeight ( );
__declspec(implementation_key(10483)) void IShape::PutHeight ( float RHS );
__declspec(implementation_key(10484)) enum Office::MsoTriState IShape::GetHorizontalFlip ( );
__declspec(implementation_key(10485)) float IShape::GetLeft ( );
__declspec(implementation_key(10486)) void IShape::PutLeft ( float RHS );
__declspec(implementation_key(10487)) LineFormatPtr IShape::GetLine ( );
__declspec(implementation_key(10488)) enum Office::MsoTriState IShape::GetLockAspectRatio ( );
__declspec(implementation_key(10489)) void IShape::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(10490)) _bstr_t IShape::GetName ( );
__declspec(implementation_key(10491)) void IShape::PutName ( _bstr_t RHS );
__declspec(implementation_key(10492)) ShapeNodesPtr IShape::GetNodes ( );
__declspec(implementation_key(10493)) float IShape::GetRotation ( );
__declspec(implementation_key(10494)) void IShape::PutRotation ( float RHS );
__declspec(implementation_key(10495)) PictureFormatPtr IShape::GetPictureFormat ( );
__declspec(implementation_key(10496)) ShadowFormatPtr IShape::GetShadow ( );
__declspec(implementation_key(10497)) TextEffectFormatPtr IShape::GetTextEffect ( );
__declspec(implementation_key(10498)) ThreeDFormatPtr IShape::GetThreeD ( );
__declspec(implementation_key(10499)) float IShape::GetTop ( );
__declspec(implementation_key(10500)) void IShape::PutTop ( float RHS );
__declspec(implementation_key(10501)) enum Office::MsoShapeType IShape::GetType ( );
__declspec(implementation_key(10502)) enum Office::MsoTriState IShape::GetVerticalFlip ( );
__declspec(implementation_key(10503)) _variant_t IShape::GetVertices ( );
__declspec(implementation_key(10504)) enum Office::MsoTriState IShape::GetVisible ( );
__declspec(implementation_key(10505)) void IShape::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(10506)) float IShape::GetWidth ( );
__declspec(implementation_key(10507)) void IShape::PutWidth ( float RHS );
__declspec(implementation_key(10508)) long IShape::GetZOrderPosition ( );
__declspec(implementation_key(10509)) HyperlinkPtr IShape::GetHyperlink ( );
__declspec(implementation_key(10510)) enum Office::MsoBlackWhiteMode IShape::GetBlackWhiteMode ( );
__declspec(implementation_key(10511)) void IShape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(10512)) IDispatchPtr IShape::GetDrawingObject ( );
__declspec(implementation_key(10513)) _bstr_t IShape::GetOnAction ( );
__declspec(implementation_key(10514)) void IShape::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(10515)) VARIANT_BOOL IShape::GetLocked ( );
__declspec(implementation_key(10516)) void IShape::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10517)) RangePtr IShape::GetTopLeftCell ( );
__declspec(implementation_key(10518)) RangePtr IShape::GetBottomRightCell ( );
__declspec(implementation_key(10519)) enum XlPlacement IShape::GetPlacement ( );
__declspec(implementation_key(10520)) void IShape::PutPlacement ( enum XlPlacement RHS );
__declspec(implementation_key(10521)) HRESULT IShape::Copy ( );
__declspec(implementation_key(10522)) HRESULT IShape::Cut ( );
__declspec(implementation_key(10523)) HRESULT IShape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(10524)) ControlFormatPtr IShape::GetControlFormat ( );
__declspec(implementation_key(10525)) LinkFormatPtr IShape::GetLinkFormat ( );
__declspec(implementation_key(10526)) OLEFormatPtr IShape::GetOLEFormat ( );
__declspec(implementation_key(10527)) enum XlFormControl IShape::GetFormControlType ( );
__declspec(implementation_key(10528)) _bstr_t IShape::GetAlternativeText ( );
__declspec(implementation_key(10529)) void IShape::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(10530)) Office::ScriptPtr IShape::GetScript ( );
__declspec(implementation_key(10531)) _ApplicationPtr IShapes::GetApplication ( );
__declspec(implementation_key(10532)) enum XlCreator IShapes::GetCreator ( );
__declspec(implementation_key(10533)) IDispatchPtr IShapes::GetParent ( );
__declspec(implementation_key(10534)) long IShapes::GetCount ( );
__declspec(implementation_key(10535)) ShapePtr IShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(10536)) ShapePtr IShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(10537)) IUnknownPtr IShapes::Get_NewEnum ( );
__declspec(implementation_key(10538)) ShapePtr IShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(10539)) ShapePtr IShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(10540)) ShapePtr IShapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(10541)) ShapePtr IShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(10542)) ShapePtr IShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(10543)) ShapePtr IShapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(10544)) ShapePtr IShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(10545)) ShapePtr IShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(10546)) ShapePtr IShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(10547)) ShapePtr IShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(10548)) FreeformBuilderPtr IShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(10549)) ShapeRangePtr IShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(10550)) HRESULT IShapes::SelectAll ( );
__declspec(implementation_key(10551)) ShapePtr IShapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(10552)) ShapePtr IShapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(10553)) _ApplicationPtr IShapeRange::GetApplication ( );
__declspec(implementation_key(10554)) enum XlCreator IShapeRange::GetCreator ( );
__declspec(implementation_key(10555)) IDispatchPtr IShapeRange::GetParent ( );
__declspec(implementation_key(10556)) long IShapeRange::GetCount ( );
__declspec(implementation_key(10557)) ShapePtr IShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(10558)) ShapePtr IShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(10559)) IUnknownPtr IShapeRange::Get_NewEnum ( );
__declspec(implementation_key(10560)) HRESULT IShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(10561)) HRESULT IShapeRange::Apply ( );
__declspec(implementation_key(10562)) HRESULT IShapeRange::Delete ( );
__declspec(implementation_key(10563)) HRESULT IShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(10564)) ShapeRangePtr IShapeRange::Duplicate ( );
__declspec(implementation_key(10565)) HRESULT IShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(10566)) HRESULT IShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(10567)) HRESULT IShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(10568)) HRESULT IShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(10569)) ShapePtr IShapeRange::Group ( );
__declspec(implementation_key(10570)) HRESULT IShapeRange::PickUp ( );
__declspec(implementation_key(10571)) HRESULT IShapeRange::RerouteConnections ( );
__declspec(implementation_key(10572)) ShapePtr IShapeRange::Regroup ( );
__declspec(implementation_key(10573)) HRESULT IShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(10574)) HRESULT IShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(10575)) HRESULT IShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(10576)) HRESULT IShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(10577)) ShapeRangePtr IShapeRange::Ungroup ( );
__declspec(implementation_key(10578)) HRESULT IShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(10579)) AdjustmentsPtr IShapeRange::GetAdjustments ( );
__declspec(implementation_key(10580)) TextFramePtr IShapeRange::GetTextFrame ( );
__declspec(implementation_key(10581)) enum Office::MsoAutoShapeType IShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(10582)) void IShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(10583)) CalloutFormatPtr IShapeRange::GetCallout ( );
__declspec(implementation_key(10584)) long IShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(10585)) enum Office::MsoTriState IShapeRange::GetConnector ( );
__declspec(implementation_key(10586)) ConnectorFormatPtr IShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(10587)) FillFormatPtr IShapeRange::GetFill ( );
__declspec(implementation_key(10588)) GroupShapesPtr IShapeRange::GetGroupItems ( );
__declspec(implementation_key(10589)) float IShapeRange::GetHeight ( );
__declspec(implementation_key(10590)) void IShapeRange::PutHeight ( float RHS );
__declspec(implementation_key(10591)) enum Office::MsoTriState IShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(10592)) float IShapeRange::GetLeft ( );
__declspec(implementation_key(10593)) void IShapeRange::PutLeft ( float RHS );
__declspec(implementation_key(10594)) LineFormatPtr IShapeRange::GetLine ( );
__declspec(implementation_key(10595)) enum Office::MsoTriState IShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(10596)) void IShapeRange::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(10597)) _bstr_t IShapeRange::GetName ( );
__declspec(implementation_key(10598)) void IShapeRange::PutName ( _bstr_t RHS );
__declspec(implementation_key(10599)) ShapeNodesPtr IShapeRange::GetNodes ( );
__declspec(implementation_key(10600)) float IShapeRange::GetRotation ( );
__declspec(implementation_key(10601)) void IShapeRange::PutRotation ( float RHS );
__declspec(implementation_key(10602)) PictureFormatPtr IShapeRange::GetPictureFormat ( );
__declspec(implementation_key(10603)) ShadowFormatPtr IShapeRange::GetShadow ( );
__declspec(implementation_key(10604)) TextEffectFormatPtr IShapeRange::GetTextEffect ( );
__declspec(implementation_key(10605)) ThreeDFormatPtr IShapeRange::GetThreeD ( );
__declspec(implementation_key(10606)) float IShapeRange::GetTop ( );
__declspec(implementation_key(10607)) void IShapeRange::PutTop ( float RHS );
__declspec(implementation_key(10608)) enum Office::MsoShapeType IShapeRange::GetType ( );
__declspec(implementation_key(10609)) enum Office::MsoTriState IShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(10610)) _variant_t IShapeRange::GetVertices ( );
__declspec(implementation_key(10611)) enum Office::MsoTriState IShapeRange::GetVisible ( );
__declspec(implementation_key(10612)) void IShapeRange::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(10613)) float IShapeRange::GetWidth ( );
__declspec(implementation_key(10614)) void IShapeRange::PutWidth ( float RHS );
__declspec(implementation_key(10615)) long IShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(10616)) enum Office::MsoBlackWhiteMode IShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(10617)) void IShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(10618)) _bstr_t IShapeRange::GetAlternativeText ( );
__declspec(implementation_key(10619)) void IShapeRange::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(10620)) _ApplicationPtr IGroupShapes::GetApplication ( );
__declspec(implementation_key(10621)) enum XlCreator IGroupShapes::GetCreator ( );
__declspec(implementation_key(10622)) IDispatchPtr IGroupShapes::GetParent ( );
__declspec(implementation_key(10623)) long IGroupShapes::GetCount ( );
__declspec(implementation_key(10624)) ShapePtr IGroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(10625)) ShapePtr IGroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(10626)) IUnknownPtr IGroupShapes::Get_NewEnum ( );
__declspec(implementation_key(10627)) _ApplicationPtr ITextFrame::GetApplication ( );
__declspec(implementation_key(10628)) enum XlCreator ITextFrame::GetCreator ( );
__declspec(implementation_key(10629)) IDispatchPtr ITextFrame::GetParent ( );
__declspec(implementation_key(10630)) float ITextFrame::GetMarginBottom ( );
__declspec(implementation_key(10631)) void ITextFrame::PutMarginBottom ( float RHS );
__declspec(implementation_key(10632)) float ITextFrame::GetMarginLeft ( );
__declspec(implementation_key(10633)) void ITextFrame::PutMarginLeft ( float RHS );
__declspec(implementation_key(10634)) float ITextFrame::GetMarginRight ( );
__declspec(implementation_key(10635)) void ITextFrame::PutMarginRight ( float RHS );
__declspec(implementation_key(10636)) float ITextFrame::GetMarginTop ( );
__declspec(implementation_key(10637)) void ITextFrame::PutMarginTop ( float RHS );
__declspec(implementation_key(10638)) enum Office::MsoTextOrientation ITextFrame::GetOrientation ( );
__declspec(implementation_key(10639)) void ITextFrame::PutOrientation ( enum Office::MsoTextOrientation RHS );
__declspec(implementation_key(10640)) CharactersPtr ITextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10641)) enum XlHAlign ITextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(10642)) void ITextFrame::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(10643)) enum XlVAlign ITextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(10644)) void ITextFrame::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(10645)) VARIANT_BOOL ITextFrame::GetAutoSize ( );
__declspec(implementation_key(10646)) void ITextFrame::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(10647)) long ITextFrame::GetReadingOrder ( );
__declspec(implementation_key(10648)) void ITextFrame::PutReadingOrder ( long RHS );
__declspec(implementation_key(10649)) VARIANT_BOOL ITextFrame::GetAutoMargins ( );
__declspec(implementation_key(10650)) void ITextFrame::PutAutoMargins ( VARIANT_BOOL RHS );
__declspec(implementation_key(10651)) _ApplicationPtr IConnectorFormat::GetApplication ( );
__declspec(implementation_key(10652)) enum XlCreator IConnectorFormat::GetCreator ( );
__declspec(implementation_key(10653)) IDispatchPtr IConnectorFormat::GetParent ( );
__declspec(implementation_key(10654)) HRESULT IConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(10655)) HRESULT IConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(10656)) HRESULT IConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(10657)) HRESULT IConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(10658)) enum Office::MsoTriState IConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(10659)) ShapePtr IConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(10660)) long IConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(10661)) enum Office::MsoTriState IConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(10662)) ShapePtr IConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(10663)) long IConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(10664)) enum Office::MsoConnectorType IConnectorFormat::GetType ( );
__declspec(implementation_key(10665)) void IConnectorFormat::PutType ( enum Office::MsoConnectorType RHS );
__declspec(implementation_key(10666)) _ApplicationPtr IFreeformBuilder::GetApplication ( );
__declspec(implementation_key(10667)) enum XlCreator IFreeformBuilder::GetCreator ( );
__declspec(implementation_key(10668)) IDispatchPtr IFreeformBuilder::GetParent ( );
__declspec(implementation_key(10669)) HRESULT IFreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(10670)) ShapePtr IFreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(10671)) _ApplicationPtr IControlFormat::GetApplication ( );
__declspec(implementation_key(10672)) enum XlCreator IControlFormat::GetCreator ( );
__declspec(implementation_key(10673)) IDispatchPtr IControlFormat::GetParent ( );
__declspec(implementation_key(10674)) HRESULT IControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(10675)) HRESULT IControlFormat::RemoveAllItems ( );
__declspec(implementation_key(10676)) HRESULT IControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(10677)) long IControlFormat::GetDropDownLines ( );
__declspec(implementation_key(10678)) void IControlFormat::PutDropDownLines ( long RHS );
__declspec(implementation_key(10679)) VARIANT_BOOL IControlFormat::GetEnabled ( );
__declspec(implementation_key(10680)) void IControlFormat::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(10681)) long IControlFormat::GetLargeChange ( );
__declspec(implementation_key(10682)) void IControlFormat::PutLargeChange ( long RHS );
__declspec(implementation_key(10683)) _bstr_t IControlFormat::GetLinkedCell ( );
__declspec(implementation_key(10684)) void IControlFormat::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(10685)) _variant_t IControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(10686)) long IControlFormat::GetListCount ( );
__declspec(implementation_key(10687)) void IControlFormat::PutListCount ( long RHS );
__declspec(implementation_key(10688)) _bstr_t IControlFormat::GetListFillRange ( );
__declspec(implementation_key(10689)) void IControlFormat::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(10690)) long IControlFormat::GetListIndex ( );
__declspec(implementation_key(10691)) void IControlFormat::PutListIndex ( long RHS );
__declspec(implementation_key(10692)) VARIANT_BOOL IControlFormat::GetLockedText ( );
__declspec(implementation_key(10693)) void IControlFormat::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(10694)) long IControlFormat::GetMax ( );
__declspec(implementation_key(10695)) void IControlFormat::PutMax ( long RHS );
__declspec(implementation_key(10696)) long IControlFormat::GetMin ( );
__declspec(implementation_key(10697)) void IControlFormat::PutMin ( long RHS );
__declspec(implementation_key(10698)) long IControlFormat::GetMultiSelect ( );
__declspec(implementation_key(10699)) void IControlFormat::PutMultiSelect ( long RHS );
__declspec(implementation_key(10700)) VARIANT_BOOL IControlFormat::GetPrintObject ( );
__declspec(implementation_key(10701)) void IControlFormat::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(10702)) long IControlFormat::GetSmallChange ( );
__declspec(implementation_key(10703)) void IControlFormat::PutSmallChange ( long RHS );
__declspec(implementation_key(10704)) long IControlFormat::Get_Default ( );
__declspec(implementation_key(10705)) void IControlFormat::Put_Default ( long RHS );
__declspec(implementation_key(10706)) long IControlFormat::GetValue ( );
__declspec(implementation_key(10707)) void IControlFormat::PutValue ( long RHS );
__declspec(implementation_key(10708)) _ApplicationPtr IOLEFormat::GetApplication ( );
__declspec(implementation_key(10709)) enum XlCreator IOLEFormat::GetCreator ( );
__declspec(implementation_key(10710)) IDispatchPtr IOLEFormat::GetParent ( );
__declspec(implementation_key(10711)) HRESULT IOLEFormat::Activate ( );
__declspec(implementation_key(10712)) IDispatchPtr IOLEFormat::GetObject ( );
__declspec(implementation_key(10713)) _bstr_t IOLEFormat::GetProgId ( );
__declspec(implementation_key(10714)) HRESULT IOLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(10715)) _ApplicationPtr ILinkFormat::GetApplication ( );
__declspec(implementation_key(10716)) enum XlCreator ILinkFormat::GetCreator ( );
__declspec(implementation_key(10717)) IDispatchPtr ILinkFormat::GetParent ( );
__declspec(implementation_key(10718)) VARIANT_BOOL ILinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(10719)) void ILinkFormat::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(10720)) VARIANT_BOOL ILinkFormat::GetLocked ( );
__declspec(implementation_key(10721)) void ILinkFormat::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10722)) HRESULT ILinkFormat::Update ( );
__declspec(implementation_key(10723)) _ApplicationPtr PublishObject::GetApplication ( );
__declspec(implementation_key(10724)) enum XlCreator PublishObject::GetCreator ( );
__declspec(implementation_key(10725)) IDispatchPtr PublishObject::GetParent ( );
__declspec(implementation_key(10726)) HRESULT PublishObject::Delete ( );
__declspec(implementation_key(10727)) HRESULT PublishObject::Publish ( const _variant_t & Create );
__declspec(implementation_key(10728)) _bstr_t PublishObject::GetDivID ( );
__declspec(implementation_key(10729)) _bstr_t PublishObject::GetSheet ( );
__declspec(implementation_key(10730)) enum XlSourceType PublishObject::GetSourceType ( );
__declspec(implementation_key(10731)) _bstr_t PublishObject::GetSource ( );
__declspec(implementation_key(10732)) enum XlHtmlType PublishObject::GetHtmlType ( );
__declspec(implementation_key(10733)) void PublishObject::PutHtmlType ( enum XlHtmlType RHS );
__declspec(implementation_key(10734)) _bstr_t PublishObject::GetTitle ( );
__declspec(implementation_key(10735)) void PublishObject::PutTitle ( _bstr_t RHS );
__declspec(implementation_key(10736)) _bstr_t PublishObject::GetFilename ( );
__declspec(implementation_key(10737)) void PublishObject::PutFilename ( _bstr_t RHS );
__declspec(implementation_key(10738)) _ApplicationPtr IPublishObjects::GetApplication ( );
__declspec(implementation_key(10739)) enum XlCreator IPublishObjects::GetCreator ( );
__declspec(implementation_key(10740)) IDispatchPtr IPublishObjects::GetParent ( );
__declspec(implementation_key(10741)) PublishObjectPtr IPublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(10742)) long IPublishObjects::GetCount ( );
__declspec(implementation_key(10743)) PublishObjectPtr IPublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(10744)) PublishObjectPtr IPublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10745)) IUnknownPtr IPublishObjects::Get_NewEnum ( );
__declspec(implementation_key(10746)) HRESULT IPublishObjects::Delete ( );
__declspec(implementation_key(10747)) HRESULT IPublishObjects::Publish ( );
__declspec(implementation_key(10748)) _ApplicationPtr IOLEDBError::GetApplication ( );
__declspec(implementation_key(10749)) enum XlCreator IOLEDBError::GetCreator ( );
__declspec(implementation_key(10750)) IDispatchPtr IOLEDBError::GetParent ( );
__declspec(implementation_key(10751)) _bstr_t IOLEDBError::GetSqlState ( );
__declspec(implementation_key(10752)) _bstr_t IOLEDBError::GetErrorString ( );
__declspec(implementation_key(10753)) long IOLEDBError::GetNative ( );
__declspec(implementation_key(10754)) long IOLEDBError::GetNumber ( );
__declspec(implementation_key(10755)) long IOLEDBError::GetStage ( );
__declspec(implementation_key(10756)) _ApplicationPtr IOLEDBErrors::GetApplication ( );
__declspec(implementation_key(10757)) enum XlCreator IOLEDBErrors::GetCreator ( );
__declspec(implementation_key(10758)) IDispatchPtr IOLEDBErrors::GetParent ( );
__declspec(implementation_key(10759)) long IOLEDBErrors::GetCount ( );
__declspec(implementation_key(10760)) OLEDBErrorPtr IOLEDBErrors::Item ( long Index );
__declspec(implementation_key(10761)) OLEDBErrorPtr IOLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(10762)) IUnknownPtr IOLEDBErrors::_NewEnum ( );
__declspec(implementation_key(10763)) _ApplicationPtr IPhonetics::GetApplication ( );
__declspec(implementation_key(10764)) enum XlCreator IPhonetics::GetCreator ( );
__declspec(implementation_key(10765)) IDispatchPtr IPhonetics::GetParent ( );
__declspec(implementation_key(10766)) long IPhonetics::GetCount ( );
__declspec(implementation_key(10767)) long IPhonetics::GetStart ( );
__declspec(implementation_key(10768)) long IPhonetics::GetLength ( );
__declspec(implementation_key(10769)) VARIANT_BOOL IPhonetics::GetVisible ( );
__declspec(implementation_key(10770)) void IPhonetics::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(10771)) long IPhonetics::GetCharacterType ( );
__declspec(implementation_key(10772)) void IPhonetics::PutCharacterType ( long RHS );
__declspec(implementation_key(10773)) long IPhonetics::GetAlignment ( );
__declspec(implementation_key(10774)) void IPhonetics::PutAlignment ( long RHS );
__declspec(implementation_key(10775)) FontPtr IPhonetics::GetFont ( );
__declspec(implementation_key(10776)) IDispatchPtr IPhonetics::GetItem ( long Index );
__declspec(implementation_key(10777)) HRESULT IPhonetics::Delete ( );
__declspec(implementation_key(10778)) HRESULT IPhonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(10779)) _bstr_t IPhonetics::GetText ( );
__declspec(implementation_key(10780)) void IPhonetics::PutText ( _bstr_t RHS );
__declspec(implementation_key(10781)) IDispatchPtr IPhonetics::Get_Default ( long Index );
__declspec(implementation_key(10782)) IUnknownPtr IPhonetics::Get_NewEnum ( );
__declspec(implementation_key(10783)) _ApplicationPtr DefaultWebOptions::GetApplication ( );
__declspec(implementation_key(10784)) enum XlCreator DefaultWebOptions::GetCreator ( );
__declspec(implementation_key(10785)) IDispatchPtr DefaultWebOptions::GetParent ( );
__declspec(implementation_key(10786)) VARIANT_BOOL DefaultWebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(10787)) void DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(10788)) VARIANT_BOOL DefaultWebOptions::GetSaveHiddenData ( );
__declspec(implementation_key(10789)) void DefaultWebOptions::PutSaveHiddenData ( VARIANT_BOOL RHS );
__declspec(implementation_key(10790)) VARIANT_BOOL DefaultWebOptions::GetLoadPictures ( );
__declspec(implementation_key(10791)) void DefaultWebOptions::PutLoadPictures ( VARIANT_BOOL RHS );
__declspec(implementation_key(10792)) VARIANT_BOOL DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(10793)) void DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(10794)) VARIANT_BOOL DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(10795)) void DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL RHS );
__declspec(implementation_key(10796)) VARIANT_BOOL DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(10797)) void DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(10798)) VARIANT_BOOL DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(10799)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL RHS );
__declspec(implementation_key(10800)) VARIANT_BOOL DefaultWebOptions::GetDownloadComponents ( );
__declspec(implementation_key(10801)) void DefaultWebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(10802)) VARIANT_BOOL DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(10803)) void DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(10804)) VARIANT_BOOL DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(10805)) void DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(10806)) enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(10807)) void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(10808)) long DefaultWebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(10809)) void DefaultWebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(10810)) _bstr_t DefaultWebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(10811)) void DefaultWebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(10812)) enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(10813)) void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(10814)) VARIANT_BOOL DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(10815)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL RHS );
__declspec(implementation_key(10816)) Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(10817)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(10818)) _ApplicationPtr WebOptions::GetApplication ( );
__declspec(implementation_key(10819)) enum XlCreator WebOptions::GetCreator ( );
__declspec(implementation_key(10820)) IDispatchPtr WebOptions::GetParent ( );
__declspec(implementation_key(10821)) VARIANT_BOOL WebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(10822)) void WebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(10823)) VARIANT_BOOL WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(10824)) void WebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(10825)) VARIANT_BOOL WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(10826)) void WebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(10827)) VARIANT_BOOL WebOptions::GetDownloadComponents ( );
__declspec(implementation_key(10828)) void WebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(10829)) VARIANT_BOOL WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(10830)) void WebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(10831)) VARIANT_BOOL WebOptions::GetAllowPNG ( );
__declspec(implementation_key(10832)) void WebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(10833)) enum Office::MsoScreenSize WebOptions::GetScreenSize ( );
__declspec(implementation_key(10834)) void WebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(10835)) long WebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(10836)) void WebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(10837)) _bstr_t WebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(10838)) void WebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(10839)) enum Office::MsoEncoding WebOptions::GetEncoding ( );
__declspec(implementation_key(10840)) void WebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(10841)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(10842)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(10843)) _ApplicationPtr TreeviewControl::GetApplication ( );
__declspec(implementation_key(10844)) enum XlCreator TreeviewControl::GetCreator ( );
__declspec(implementation_key(10845)) IDispatchPtr TreeviewControl::GetParent ( );
__declspec(implementation_key(10846)) _variant_t TreeviewControl::GetHidden ( );
__declspec(implementation_key(10847)) void TreeviewControl::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(10848)) _variant_t TreeviewControl::GetDrilled ( );
__declspec(implementation_key(10849)) void TreeviewControl::PutDrilled ( const _variant_t & RHS );
__declspec(implementation_key(10850)) _ApplicationPtr CubeField::GetApplication ( );
__declspec(implementation_key(10851)) enum XlCreator CubeField::GetCreator ( );
__declspec(implementation_key(10852)) IDispatchPtr CubeField::GetParent ( );
__declspec(implementation_key(10853)) enum XlCubeFieldType CubeField::GetCubeFieldType ( );
__declspec(implementation_key(10854)) _bstr_t CubeField::GetCaption ( );
__declspec(implementation_key(10855)) _bstr_t CubeField::GetName ( );
__declspec(implementation_key(10856)) _bstr_t CubeField::GetValue ( );
__declspec(implementation_key(10857)) enum XlPivotFieldOrientation CubeField::GetOrientation ( );
__declspec(implementation_key(10858)) void CubeField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(10859)) long CubeField::GetPosition ( );
__declspec(implementation_key(10860)) void CubeField::PutPosition ( long RHS );
__declspec(implementation_key(10861)) TreeviewControlPtr CubeField::GetTreeviewControl ( );
__declspec(implementation_key(10862)) VARIANT_BOOL CubeField::GetDragToColumn ( );
__declspec(implementation_key(10863)) void CubeField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(10864)) VARIANT_BOOL CubeField::GetDragToHide ( );
__declspec(implementation_key(10865)) void CubeField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(10866)) VARIANT_BOOL CubeField::GetDragToPage ( );
__declspec(implementation_key(10867)) void CubeField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(10868)) VARIANT_BOOL CubeField::GetDragToRow ( );
__declspec(implementation_key(10869)) void CubeField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10870)) VARIANT_BOOL CubeField::GetDragToData ( );
__declspec(implementation_key(10871)) void CubeField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(10872)) long CubeField::GetHiddenLevels ( );
__declspec(implementation_key(10873)) void CubeField::PutHiddenLevels ( long RHS );
__declspec(implementation_key(10874)) _ApplicationPtr IPivotField::GetApplication ( );
__declspec(implementation_key(10875)) enum XlCreator IPivotField::GetCreator ( );
__declspec(implementation_key(10876)) IDispatchPtr IPivotField::GetParent ( );
__declspec(implementation_key(10877)) enum XlPivotFieldCalculation IPivotField::GetCalculation ( );
__declspec(implementation_key(10878)) void IPivotField::PutCalculation ( enum XlPivotFieldCalculation RHS );
__declspec(implementation_key(10879)) PivotFieldPtr IPivotField::GetChildField ( );
__declspec(implementation_key(10880)) _variant_t IPivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(10881)) _variant_t IPivotField::GetCurrentPage ( );
__declspec(implementation_key(10882)) void IPivotField::PutCurrentPage ( const _variant_t & RHS );
__declspec(implementation_key(10883)) RangePtr IPivotField::GetDataRange ( );
__declspec(implementation_key(10884)) enum XlPivotFieldDataType IPivotField::GetDataType ( );
__declspec(implementation_key(10885)) _bstr_t IPivotField::Get_Default ( );
__declspec(implementation_key(10886)) void IPivotField::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(10887)) enum XlConsolidationFunction IPivotField::GetFunction ( );
__declspec(implementation_key(10888)) void IPivotField::PutFunction ( enum XlConsolidationFunction RHS );
__declspec(implementation_key(10889)) _variant_t IPivotField::GetGroupLevel ( );
__declspec(implementation_key(10890)) _variant_t IPivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(10891)) RangePtr IPivotField::GetLabelRange ( );
__declspec(implementation_key(10892)) _bstr_t IPivotField::GetName ( );
__declspec(implementation_key(10893)) void IPivotField::PutName ( _bstr_t RHS );
__declspec(implementation_key(10894)) _bstr_t IPivotField::GetNumberFormat ( );
__declspec(implementation_key(10895)) void IPivotField::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(10896)) enum XlPivotFieldOrientation IPivotField::GetOrientation ( );
__declspec(implementation_key(10897)) void IPivotField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(10898)) VARIANT_BOOL IPivotField::GetShowAllItems ( );
__declspec(implementation_key(10899)) void IPivotField::PutShowAllItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(10900)) PivotFieldPtr IPivotField::GetParentField ( );
__declspec(implementation_key(10901)) _variant_t IPivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(10902)) _variant_t IPivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(10903)) _variant_t IPivotField::GetPosition ( );
__declspec(implementation_key(10904)) void IPivotField::PutPosition ( const _variant_t & RHS );
__declspec(implementation_key(10905)) _bstr_t IPivotField::GetSourceName ( );
__declspec(implementation_key(10906)) _variant_t IPivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(10907)) void IPivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(10908)) _variant_t IPivotField::GetBaseField ( );
__declspec(implementation_key(10909)) void IPivotField::PutBaseField ( const _variant_t & RHS );
__declspec(implementation_key(10910)) _variant_t IPivotField::GetBaseItem ( );
__declspec(implementation_key(10911)) void IPivotField::PutBaseItem ( const _variant_t & RHS );
__declspec(implementation_key(10912)) _variant_t IPivotField::GetTotalLevels ( );
__declspec(implementation_key(10913)) _bstr_t IPivotField::GetValue ( );
__declspec(implementation_key(10914)) void IPivotField::PutValue ( _bstr_t RHS );
__declspec(implementation_key(10915)) _variant_t IPivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(10916)) CalculatedItemsPtr IPivotField::CalculatedItems ( );
__declspec(implementation_key(10917)) HRESULT IPivotField::Delete ( );
__declspec(implementation_key(10918)) VARIANT_BOOL IPivotField::GetDragToColumn ( );
__declspec(implementation_key(10919)) void IPivotField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(10920)) VARIANT_BOOL IPivotField::GetDragToHide ( );
__declspec(implementation_key(10921)) void IPivotField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(10922)) VARIANT_BOOL IPivotField::GetDragToPage ( );
__declspec(implementation_key(10923)) void IPivotField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(10924)) VARIANT_BOOL IPivotField::GetDragToRow ( );
__declspec(implementation_key(10925)) void IPivotField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10926)) VARIANT_BOOL IPivotField::GetDragToData ( );
__declspec(implementation_key(10927)) void IPivotField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(10928)) _bstr_t IPivotField::GetFormula ( );
__declspec(implementation_key(10929)) void IPivotField::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(10930)) VARIANT_BOOL IPivotField::GetIsCalculated ( );
__declspec(implementation_key(10931)) long IPivotField::GetMemoryUsed ( );
__declspec(implementation_key(10932)) VARIANT_BOOL IPivotField::GetServerBased ( );
__declspec(implementation_key(10933)) void IPivotField::PutServerBased ( VARIANT_BOOL RHS );
__declspec(implementation_key(10934)) HRESULT IPivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(10935)) HRESULT IPivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(10936)) long IPivotField::GetAutoSortOrder ( );
__declspec(implementation_key(10937)) _bstr_t IPivotField::GetAutoSortField ( );
__declspec(implementation_key(10938)) long IPivotField::GetAutoShowType ( );
__declspec(implementation_key(10939)) long IPivotField::GetAutoShowRange ( );
__declspec(implementation_key(10940)) long IPivotField::GetAutoShowCount ( );
__declspec(implementation_key(10941)) _bstr_t IPivotField::GetAutoShowField ( );
__declspec(implementation_key(10942)) VARIANT_BOOL IPivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(10943)) void IPivotField::PutLayoutBlankLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(10944)) enum xLSubtototalLocationType IPivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(10945)) void IPivotField::PutLayoutSubtotalLocation ( enum xLSubtototalLocationType RHS );
__declspec(implementation_key(10946)) VARIANT_BOOL IPivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(10947)) void IPivotField::PutLayoutPageBreak ( VARIANT_BOOL RHS );
__declspec(implementation_key(10948)) enum XlLayoutFormType IPivotField::GetLayoutForm ( );
__declspec(implementation_key(10949)) void IPivotField::PutLayoutForm ( enum XlLayoutFormType RHS );
__declspec(implementation_key(10950)) _bstr_t IPivotField::GetSubtotalName ( );
__declspec(implementation_key(10951)) void IPivotField::PutSubtotalName ( _bstr_t RHS );
__declspec(implementation_key(10952)) _bstr_t IPivotField::GetCaption ( );
__declspec(implementation_key(10953)) void IPivotField::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(10954)) VARIANT_BOOL IPivotField::GetDrilledDown ( );
__declspec(implementation_key(10955)) void IPivotField::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(10956)) CubeFieldPtr IPivotField::GetCubeField ( );
__declspec(implementation_key(10957)) _bstr_t IPivotField::GetCurrentPageName ( );
__declspec(implementation_key(10958)) void IPivotField::PutCurrentPageName ( _bstr_t RHS );
__declspec(implementation_key(10959)) _ApplicationPtr CubeFields::GetApplication ( );
__declspec(implementation_key(10960)) enum XlCreator CubeFields::GetCreator ( );
__declspec(implementation_key(10961)) IDispatchPtr CubeFields::GetParent ( );
__declspec(implementation_key(10962)) long CubeFields::GetCount ( );
__declspec(implementation_key(10963)) CubeFieldPtr CubeFields::GetItem ( const _variant_t & Index );
__declspec(implementation_key(10964)) CubeFieldPtr CubeFields::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10965)) IUnknownPtr CubeFields::Get_NewEnum ( );
__declspec(implementation_key(10966)) _ApplicationPtr IPivotTable::GetApplication ( );
__declspec(implementation_key(10967)) enum XlCreator IPivotTable::GetCreator ( );
__declspec(implementation_key(10968)) IDispatchPtr IPivotTable::GetParent ( );
__declspec(implementation_key(10969)) _variant_t IPivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(10970)) IDispatchPtr IPivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(10971)) VARIANT_BOOL IPivotTable::GetColumnGrand ( );
__declspec(implementation_key(10972)) void IPivotTable::PutColumnGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(10973)) RangePtr IPivotTable::GetColumnRange ( );
__declspec(implementation_key(10974)) _variant_t IPivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(10975)) RangePtr IPivotTable::GetDataBodyRange ( );
__declspec(implementation_key(10976)) IDispatchPtr IPivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(10977)) RangePtr IPivotTable::GetDataLabelRange ( );
__declspec(implementation_key(10978)) _bstr_t IPivotTable::Get_Default ( );
__declspec(implementation_key(10979)) void IPivotTable::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(10980)) VARIANT_BOOL IPivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(10981)) void IPivotTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(10982)) IDispatchPtr IPivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(10983)) _bstr_t IPivotTable::GetInnerDetail ( );
__declspec(implementation_key(10984)) void IPivotTable::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(10985)) _bstr_t IPivotTable::GetName ( );
__declspec(implementation_key(10986)) void IPivotTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(10987)) IDispatchPtr IPivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(10988)) RangePtr IPivotTable::GetPageRange ( );
__declspec(implementation_key(10989)) RangePtr IPivotTable::GetPageRangeCells ( );
__declspec(implementation_key(10990)) IDispatchPtr IPivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(10991)) DATE IPivotTable::GetRefreshDate ( );
__declspec(implementation_key(10992)) _bstr_t IPivotTable::GetRefreshName ( );
__declspec(implementation_key(10993)) VARIANT_BOOL IPivotTable::RefreshTable ( );
__declspec(implementation_key(10994)) IDispatchPtr IPivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(10995)) VARIANT_BOOL IPivotTable::GetRowGrand ( );
__declspec(implementation_key(10996)) void IPivotTable::PutRowGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(10997)) RangePtr IPivotTable::GetRowRange ( );
__declspec(implementation_key(10998)) VARIANT_BOOL IPivotTable::GetSaveData ( );
__declspec(implementation_key(10999)) void IPivotTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11000)) _variant_t IPivotTable::GetSourceData ( );
__declspec(implementation_key(11001)) void IPivotTable::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(11002)) RangePtr IPivotTable::GetTableRange1 ( );
__declspec(implementation_key(11003)) RangePtr IPivotTable::GetTableRange2 ( );
__declspec(implementation_key(11004)) _bstr_t IPivotTable::GetValue ( );
__declspec(implementation_key(11005)) void IPivotTable::PutValue ( _bstr_t RHS );
__declspec(implementation_key(11006)) IDispatchPtr IPivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(11007)) long IPivotTable::GetCacheIndex ( );
__declspec(implementation_key(11008)) void IPivotTable::PutCacheIndex ( long RHS );
__declspec(implementation_key(11009)) CalculatedFieldsPtr IPivotTable::CalculatedFields ( );
__declspec(implementation_key(11010)) VARIANT_BOOL IPivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(11011)) void IPivotTable::PutDisplayErrorString ( VARIANT_BOOL RHS );
__declspec(implementation_key(11012)) VARIANT_BOOL IPivotTable::GetDisplayNullString ( );
__declspec(implementation_key(11013)) void IPivotTable::PutDisplayNullString ( VARIANT_BOOL RHS );
__declspec(implementation_key(11014)) VARIANT_BOOL IPivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(11015)) void IPivotTable::PutEnableDrilldown ( VARIANT_BOOL RHS );
__declspec(implementation_key(11016)) VARIANT_BOOL IPivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(11017)) void IPivotTable::PutEnableFieldDialog ( VARIANT_BOOL RHS );
__declspec(implementation_key(11018)) VARIANT_BOOL IPivotTable::GetEnableWizard ( );
__declspec(implementation_key(11019)) void IPivotTable::PutEnableWizard ( VARIANT_BOOL RHS );
__declspec(implementation_key(11020)) _bstr_t IPivotTable::GetErrorString ( );
__declspec(implementation_key(11021)) void IPivotTable::PutErrorString ( _bstr_t RHS );
__declspec(implementation_key(11022)) double IPivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(11023)) HRESULT IPivotTable::ListFormulas ( );
__declspec(implementation_key(11024)) VARIANT_BOOL IPivotTable::GetManualUpdate ( );
__declspec(implementation_key(11025)) void IPivotTable::PutManualUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(11026)) VARIANT_BOOL IPivotTable::GetMergeLabels ( );
__declspec(implementation_key(11027)) void IPivotTable::PutMergeLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(11028)) _bstr_t IPivotTable::GetNullString ( );
__declspec(implementation_key(11029)) void IPivotTable::PutNullString ( _bstr_t RHS );
__declspec(implementation_key(11030)) PivotCachePtr IPivotTable::PivotCache ( );
__declspec(implementation_key(11031)) PivotFormulasPtr IPivotTable::GetPivotFormulas ( );
__declspec(implementation_key(11032)) HRESULT IPivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(11033)) VARIANT_BOOL IPivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(11034)) void IPivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(11035)) long IPivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(11036)) void IPivotTable::PutPageFieldOrder ( long RHS );
__declspec(implementation_key(11037)) _bstr_t IPivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(11038)) void IPivotTable::PutPageFieldStyle ( _bstr_t RHS );
__declspec(implementation_key(11039)) long IPivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(11040)) void IPivotTable::PutPageFieldWrapCount ( long RHS );
__declspec(implementation_key(11041)) VARIANT_BOOL IPivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(11042)) void IPivotTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(11043)) HRESULT IPivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(11044)) _bstr_t IPivotTable::GetPivotSelection ( );
__declspec(implementation_key(11045)) void IPivotTable::PutPivotSelection ( _bstr_t RHS );
__declspec(implementation_key(11046)) enum XlPTSelectionMode IPivotTable::GetSelectionMode ( );
__declspec(implementation_key(11047)) void IPivotTable::PutSelectionMode ( enum XlPTSelectionMode RHS );
__declspec(implementation_key(11048)) _bstr_t IPivotTable::GetTableStyle ( );
__declspec(implementation_key(11049)) void IPivotTable::PutTableStyle ( _bstr_t RHS );
__declspec(implementation_key(11050)) _bstr_t IPivotTable::GetTag ( );
__declspec(implementation_key(11051)) void IPivotTable::PutTag ( _bstr_t RHS );
__declspec(implementation_key(11052)) HRESULT IPivotTable::Update ( );
__declspec(implementation_key(11053)) _bstr_t IPivotTable::GetVacatedStyle ( );
__declspec(implementation_key(11054)) void IPivotTable::PutVacatedStyle ( _bstr_t RHS );
__declspec(implementation_key(11055)) HRESULT IPivotTable::Format ( enum xlPivotFormatType Format );
__declspec(implementation_key(11056)) VARIANT_BOOL IPivotTable::GetPrintTitles ( );
__declspec(implementation_key(11057)) void IPivotTable::PutPrintTitles ( VARIANT_BOOL RHS );
__declspec(implementation_key(11058)) CubeFieldsPtr IPivotTable::GetCubeFields ( );
__declspec(implementation_key(11059)) _bstr_t IPivotTable::GetGrandTotalName ( );
__declspec(implementation_key(11060)) void IPivotTable::PutGrandTotalName ( _bstr_t RHS );
__declspec(implementation_key(11061)) VARIANT_BOOL IPivotTable::GetSmallGrid ( );
__declspec(implementation_key(11062)) void IPivotTable::PutSmallGrid ( VARIANT_BOOL RHS );
__declspec(implementation_key(11063)) VARIANT_BOOL IPivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(11064)) void IPivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11065)) VARIANT_BOOL IPivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(11066)) void IPivotTable::PutTotalsAnnotation ( VARIANT_BOOL RHS );
__declspec(implementation_key(11067)) _ApplicationPtr IPivotLayout::GetApplication ( );
__declspec(implementation_key(11068)) enum XlCreator IPivotLayout::GetCreator ( );
__declspec(implementation_key(11069)) IDispatchPtr IPivotLayout::GetParent ( );
__declspec(implementation_key(11070)) IDispatchPtr IPivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(11071)) IDispatchPtr IPivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(11072)) IDispatchPtr IPivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(11073)) IDispatchPtr IPivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(11074)) IDispatchPtr IPivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(11075)) IDispatchPtr IPivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(11076)) IDispatchPtr IPivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(11077)) CubeFieldsPtr IPivotLayout::GetCubeFields ( );
__declspec(implementation_key(11078)) PivotCachePtr IPivotLayout::GetPivotCache ( );
__declspec(implementation_key(11079)) PivotTablePtr IPivotLayout::GetPivotTable ( );
__declspec(implementation_key(11080)) _bstr_t IPivotLayout::GetInnerDetail ( );
__declspec(implementation_key(11081)) void IPivotLayout::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(11082)) HRESULT IPivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(11083)) _ApplicationPtr IDisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(11084)) enum XlCreator IDisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(11085)) IDispatchPtr IDisplayUnitLabel::GetParent ( );
__declspec(implementation_key(11086)) _bstr_t IDisplayUnitLabel::GetName ( );
__declspec(implementation_key(11087)) _variant_t IDisplayUnitLabel::Select ( );
__declspec(implementation_key(11088)) BorderPtr IDisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(11089)) _variant_t IDisplayUnitLabel::Delete ( );
__declspec(implementation_key(11090)) InteriorPtr IDisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(11091)) ChartFillFormatPtr IDisplayUnitLabel::GetFill ( );
__declspec(implementation_key(11092)) _bstr_t IDisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(11093)) void IDisplayUnitLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(11094)) CharactersPtr IDisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11095)) FontPtr IDisplayUnitLabel::GetFont ( );
__declspec(implementation_key(11096)) _variant_t IDisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(11097)) void IDisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11098)) double IDisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(11099)) void IDisplayUnitLabel::PutLeft ( double RHS );
__declspec(implementation_key(11100)) _variant_t IDisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(11101)) void IDisplayUnitLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(11102)) VARIANT_BOOL IDisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(11103)) void IDisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11104)) _bstr_t IDisplayUnitLabel::GetText ( );
__declspec(implementation_key(11105)) void IDisplayUnitLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(11106)) double IDisplayUnitLabel::GetTop ( );
__declspec(implementation_key(11107)) void IDisplayUnitLabel::PutTop ( double RHS );
__declspec(implementation_key(11108)) _variant_t IDisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(11109)) void IDisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11110)) long IDisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(11111)) void IDisplayUnitLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(11112)) _variant_t IDisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(11113)) void IDisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11114)) _ApplicationPtr IWindow::GetApplication ( );
__declspec(implementation_key(11115)) enum XlCreator IWindow::GetCreator ( );
__declspec(implementation_key(11116)) IDispatchPtr IWindow::GetParent ( );
__declspec(implementation_key(11117)) _variant_t IWindow::Activate ( );
__declspec(implementation_key(11118)) _variant_t IWindow::ActivateNext ( );
__declspec(implementation_key(11119)) _variant_t IWindow::ActivatePrevious ( );
__declspec(implementation_key(11120)) RangePtr IWindow::GetActiveCell ( );
__declspec(implementation_key(11121)) _ChartPtr IWindow::GetActiveChart ( );
__declspec(implementation_key(11122)) PanePtr IWindow::GetActivePane ( );
__declspec(implementation_key(11123)) IDispatchPtr IWindow::GetActiveSheet ( );
__declspec(implementation_key(11124)) _variant_t IWindow::GetCaption ( );
__declspec(implementation_key(11125)) void IWindow::PutCaption ( const _variant_t & RHS );
__declspec(implementation_key(11126)) VARIANT_BOOL IWindow::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(11127)) VARIANT_BOOL IWindow::GetDisplayFormulas ( );
__declspec(implementation_key(11128)) void IWindow::PutDisplayFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(11129)) VARIANT_BOOL IWindow::GetDisplayGridlines ( );
__declspec(implementation_key(11130)) void IWindow::PutDisplayGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(11131)) VARIANT_BOOL IWindow::GetDisplayHeadings ( );
__declspec(implementation_key(11132)) void IWindow::PutDisplayHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(11133)) VARIANT_BOOL IWindow::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(11134)) void IWindow::PutDisplayHorizontalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(11135)) VARIANT_BOOL IWindow::GetDisplayOutline ( );
__declspec(implementation_key(11136)) void IWindow::PutDisplayOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(11137)) VARIANT_BOOL IWindow::Get_DisplayRightToLeft ( );
__declspec(implementation_key(11138)) void IWindow::Put_DisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(11139)) VARIANT_BOOL IWindow::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(11140)) void IWindow::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(11141)) VARIANT_BOOL IWindow::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(11142)) void IWindow::PutDisplayWorkbookTabs ( VARIANT_BOOL RHS );
__declspec(implementation_key(11143)) VARIANT_BOOL IWindow::GetDisplayZeros ( );
__declspec(implementation_key(11144)) void IWindow::PutDisplayZeros ( VARIANT_BOOL RHS );
__declspec(implementation_key(11145)) VARIANT_BOOL IWindow::GetEnableResize ( );
__declspec(implementation_key(11146)) void IWindow::PutEnableResize ( VARIANT_BOOL RHS );
__declspec(implementation_key(11147)) VARIANT_BOOL IWindow::GetFreezePanes ( );
__declspec(implementation_key(11148)) void IWindow::PutFreezePanes ( VARIANT_BOOL RHS );
__declspec(implementation_key(11149)) long IWindow::GetGridlineColor ( );
__declspec(implementation_key(11150)) void IWindow::PutGridlineColor ( long RHS );
__declspec(implementation_key(11151)) enum XlColorIndex IWindow::GetGridlineColorIndex ( );
__declspec(implementation_key(11152)) void IWindow::PutGridlineColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(11153)) double IWindow::GetHeight ( );
__declspec(implementation_key(11154)) void IWindow::PutHeight ( double RHS );
__declspec(implementation_key(11155)) long IWindow::GetIndex ( );
__declspec(implementation_key(11156)) _variant_t IWindow::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(11157)) double IWindow::GetLeft ( );
__declspec(implementation_key(11158)) void IWindow::PutLeft ( double RHS );
__declspec(implementation_key(11159)) WindowPtr IWindow::NewWindow ( );
__declspec(implementation_key(11160)) _bstr_t IWindow::GetOnWindow ( );
__declspec(implementation_key(11161)) void IWindow::PutOnWindow ( _bstr_t RHS );
__declspec(implementation_key(11162)) PanesPtr IWindow::GetPanes ( );
__declspec(implementation_key(11163)) _variant_t IWindow::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11164)) _variant_t IWindow::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(11165)) RangePtr IWindow::GetRangeSelection ( );
__declspec(implementation_key(11166)) long IWindow::GetScrollColumn ( );
__declspec(implementation_key(11167)) void IWindow::PutScrollColumn ( long RHS );
__declspec(implementation_key(11168)) long IWindow::GetScrollRow ( );
__declspec(implementation_key(11169)) void IWindow::PutScrollRow ( long RHS );
__declspec(implementation_key(11170)) _variant_t IWindow::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(11171)) SheetsPtr IWindow::GetSelectedSheets ( );
__declspec(implementation_key(11172)) IDispatchPtr IWindow::GetSelection ( );
__declspec(implementation_key(11173)) _variant_t IWindow::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(11174)) VARIANT_BOOL IWindow::GetSplit ( );
__declspec(implementation_key(11175)) void IWindow::PutSplit ( VARIANT_BOOL RHS );
__declspec(implementation_key(11176)) long IWindow::GetSplitColumn ( );
__declspec(implementation_key(11177)) void IWindow::PutSplitColumn ( long RHS );
__declspec(implementation_key(11178)) double IWindow::GetSplitHorizontal ( );
__declspec(implementation_key(11179)) void IWindow::PutSplitHorizontal ( double RHS );
__declspec(implementation_key(11180)) long IWindow::GetSplitRow ( );
__declspec(implementation_key(11181)) void IWindow::PutSplitRow ( long RHS );
__declspec(implementation_key(11182)) double IWindow::GetSplitVertical ( );
__declspec(implementation_key(11183)) void IWindow::PutSplitVertical ( double RHS );
__declspec(implementation_key(11184)) double IWindow::GetTabRatio ( );
__declspec(implementation_key(11185)) void IWindow::PutTabRatio ( double RHS );
__declspec(implementation_key(11186)) double IWindow::GetTop ( );
__declspec(implementation_key(11187)) void IWindow::PutTop ( double RHS );
__declspec(implementation_key(11188)) enum XlWindowType IWindow::GetType ( );
__declspec(implementation_key(11189)) double IWindow::GetUsableHeight ( );
__declspec(implementation_key(11190)) double IWindow::GetUsableWidth ( );
__declspec(implementation_key(11191)) VARIANT_BOOL IWindow::GetVisible ( );
__declspec(implementation_key(11192)) void IWindow::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(11193)) RangePtr IWindow::GetVisibleRange ( );
__declspec(implementation_key(11194)) double IWindow::GetWidth ( );
__declspec(implementation_key(11195)) void IWindow::PutWidth ( double RHS );
__declspec(implementation_key(11196)) long IWindow::GetWindowNumber ( );
__declspec(implementation_key(11197)) enum XlWindowState IWindow::GetWindowState ( );
__declspec(implementation_key(11198)) void IWindow::PutWindowState ( enum XlWindowState RHS );
__declspec(implementation_key(11199)) _variant_t IWindow::GetZoom ( );
__declspec(implementation_key(11200)) void IWindow::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(11201)) enum XlWindowView IWindow::GetView ( );
__declspec(implementation_key(11202)) void IWindow::PutView ( enum XlWindowView RHS );
__declspec(implementation_key(11203)) VARIANT_BOOL IWindow::GetDisplayRightToLeft ( );
__declspec(implementation_key(11204)) void IWindow::PutDisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(11205)) long IWindow::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(11206)) long IWindow::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(11207)) IDispatchPtr IWindow::RangeFromPoint ( long x, long y );
__declspec(implementation_key(11208)) HRESULT IWindow::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(11209)) _ApplicationPtr _Chart::GetApplication ( );
__declspec(implementation_key(11210)) enum XlCreator _Chart::GetCreator ( );
__declspec(implementation_key(11211)) IDispatchPtr _Chart::GetParent ( );
__declspec(implementation_key(11212)) HRESULT _Chart::Activate ( long lcid );
__declspec(implementation_key(11213)) HRESULT _Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(11214)) HRESULT _Chart::Delete ( long lcid );
__declspec(implementation_key(11215)) _bstr_t _Chart::GetCodeName ( );
__declspec(implementation_key(11216)) _bstr_t _Chart::Get_CodeName ( );
__declspec(implementation_key(11217)) void _Chart::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(11218)) long _Chart::GetIndex ( long lcid );
__declspec(implementation_key(11219)) HRESULT _Chart::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(11220)) _bstr_t _Chart::GetName ( );
__declspec(implementation_key(11221)) void _Chart::PutName ( _bstr_t RHS );
__declspec(implementation_key(11222)) IDispatchPtr _Chart::GetNext ( );
__declspec(implementation_key(11223)) _bstr_t _Chart::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(11224)) void _Chart::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11225)) _bstr_t _Chart::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(11226)) void _Chart::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11227)) _bstr_t _Chart::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(11228)) void _Chart::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11229)) PageSetupPtr _Chart::GetPageSetup ( );
__declspec(implementation_key(11230)) IDispatchPtr _Chart::GetPrevious ( );
__declspec(implementation_key(11231)) HRESULT _Chart::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(11232)) HRESULT _Chart::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(11233)) HRESULT _Chart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(11234)) VARIANT_BOOL _Chart::GetProtectContents ( long lcid );
__declspec(implementation_key(11235)) VARIANT_BOOL _Chart::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(11236)) VARIANT_BOOL _Chart::GetProtectionMode ( long lcid );
__declspec(implementation_key(11237)) HRESULT _Chart::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(11238)) HRESULT _Chart::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(11239)) HRESULT _Chart::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(11240)) enum XlSheetVisibility _Chart::GetVisible ( long lcid );
__declspec(implementation_key(11241)) void _Chart::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(11242)) ShapesPtr _Chart::GetShapes ( );
__declspec(implementation_key(11243)) HRESULT _Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid );
__declspec(implementation_key(11244)) IDispatchPtr _Chart::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11245)) ChartGroupPtr _Chart::GetArea3DGroup ( long lcid );
__declspec(implementation_key(11246)) IDispatchPtr _Chart::AreaGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11247)) HRESULT _Chart::AutoFormat ( long Gallery, const _variant_t & Format );
__declspec(implementation_key(11248)) VARIANT_BOOL _Chart::GetAutoScaling ( long lcid );
__declspec(implementation_key(11249)) void _Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11250)) IDispatchPtr _Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid );
__declspec(implementation_key(11251)) HRESULT _Chart::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(11252)) ChartGroupPtr _Chart::GetBar3DGroup ( long lcid );
__declspec(implementation_key(11253)) IDispatchPtr _Chart::BarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11254)) IDispatchPtr _Chart::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11255)) ChartAreaPtr _Chart::GetChartArea ( long lcid );
__declspec(implementation_key(11256)) IDispatchPtr _Chart::ChartGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11257)) IDispatchPtr _Chart::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11258)) ChartTitlePtr _Chart::GetChartTitle ( long lcid );
__declspec(implementation_key(11259)) HRESULT _Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid );
__declspec(implementation_key(11260)) IDispatchPtr _Chart::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11261)) HRESULT _Chart::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(11262)) ChartGroupPtr _Chart::GetColumn3DGroup ( long lcid );
__declspec(implementation_key(11263)) IDispatchPtr _Chart::ColumnGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11264)) HRESULT _Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long lcid );
__declspec(implementation_key(11265)) CornersPtr _Chart::GetCorners ( long lcid );
__declspec(implementation_key(11266)) HRESULT _Chart::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, enum XlPictureAppearance Size, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU, long lcid );
__declspec(implementation_key(11267)) DataTablePtr _Chart::GetDataTable ( );
__declspec(implementation_key(11268)) long _Chart::GetDepthPercent ( long lcid );
__declspec(implementation_key(11269)) void _Chart::PutDepthPercent ( long lcid, long RHS );
__declspec(implementation_key(11270)) HRESULT _Chart::Deselect ( long lcid );
__declspec(implementation_key(11271)) enum XlDisplayBlanksAs _Chart::GetDisplayBlanksAs ( long lcid );
__declspec(implementation_key(11272)) void _Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS );
__declspec(implementation_key(11273)) IDispatchPtr _Chart::DoughnutGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11274)) IDispatchPtr _Chart::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11275)) IDispatchPtr _Chart::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11276)) IDispatchPtr _Chart::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11277)) long _Chart::GetElevation ( long lcid );
__declspec(implementation_key(11278)) void _Chart::PutElevation ( long lcid, long RHS );
__declspec(implementation_key(11279)) _variant_t _Chart::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(11280)) _variant_t _Chart::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(11281)) FloorPtr _Chart::GetFloor ( long lcid );
__declspec(implementation_key(11282)) long _Chart::GetGapDepth ( long lcid );
__declspec(implementation_key(11283)) void _Chart::PutGapDepth ( long lcid, long RHS );
__declspec(implementation_key(11284)) IDispatchPtr _Chart::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11285)) IDispatchPtr _Chart::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11286)) _variant_t _Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(11287)) void _Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS );
__declspec(implementation_key(11288)) VARIANT_BOOL _Chart::GetHasDataTable ( );
__declspec(implementation_key(11289)) void _Chart::PutHasDataTable ( VARIANT_BOOL RHS );
__declspec(implementation_key(11290)) VARIANT_BOOL _Chart::GetHasLegend ( long lcid );
__declspec(implementation_key(11291)) void _Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11292)) VARIANT_BOOL _Chart::GetHasTitle ( long lcid );
__declspec(implementation_key(11293)) void _Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11294)) long _Chart::GetHeightPercent ( long lcid );
__declspec(implementation_key(11295)) void _Chart::PutHeightPercent ( long lcid, long RHS );
__declspec(implementation_key(11296)) HyperlinksPtr _Chart::GetHyperlinks ( );
__declspec(implementation_key(11297)) IDispatchPtr _Chart::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11298)) LegendPtr _Chart::GetLegend ( long lcid );
__declspec(implementation_key(11299)) ChartGroupPtr _Chart::GetLine3DGroup ( long lcid );
__declspec(implementation_key(11300)) IDispatchPtr _Chart::LineGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11301)) IDispatchPtr _Chart::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11302)) IDispatchPtr _Chart::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11303)) _ChartPtr _Chart::Location ( enum XlChartLocation Where, const _variant_t & Name );
__declspec(implementation_key(11304)) IDispatchPtr _Chart::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11305)) IDispatchPtr _Chart::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11306)) IDispatchPtr _Chart::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11307)) HRESULT _Chart::Paste ( const _variant_t & Type, long lcid );
__declspec(implementation_key(11308)) long _Chart::GetPerspective ( long lcid );
__declspec(implementation_key(11309)) void _Chart::PutPerspective ( long lcid, long RHS );
__declspec(implementation_key(11310)) IDispatchPtr _Chart::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11311)) ChartGroupPtr _Chart::GetPie3DGroup ( long lcid );
__declspec(implementation_key(11312)) IDispatchPtr _Chart::PieGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11313)) PlotAreaPtr _Chart::GetPlotArea ( long lcid );
__declspec(implementation_key(11314)) VARIANT_BOOL _Chart::GetPlotVisibleOnly ( long lcid );
__declspec(implementation_key(11315)) void _Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11316)) IDispatchPtr _Chart::RadarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11317)) IDispatchPtr _Chart::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11318)) _variant_t _Chart::GetRightAngleAxes ( long lcid );
__declspec(implementation_key(11319)) void _Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11320)) _variant_t _Chart::GetRotation ( long lcid );
__declspec(implementation_key(11321)) void _Chart::PutRotation ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11322)) IDispatchPtr _Chart::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11323)) IDispatchPtr _Chart::SeriesCollection ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11324)) VARIANT_BOOL _Chart::GetSizeWithWindow ( long lcid );
__declspec(implementation_key(11325)) void _Chart::PutSizeWithWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11326)) VARIANT_BOOL _Chart::GetShowWindow ( );
__declspec(implementation_key(11327)) void _Chart::PutShowWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11328)) IDispatchPtr _Chart::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11329)) long _Chart::GetSubType ( long lcid );
__declspec(implementation_key(11330)) void _Chart::PutSubType ( long lcid, long RHS );
__declspec(implementation_key(11331)) ChartGroupPtr _Chart::GetSurfaceGroup ( long lcid );
__declspec(implementation_key(11332)) IDispatchPtr _Chart::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11333)) long _Chart::GetType ( long lcid );
__declspec(implementation_key(11334)) void _Chart::PutType ( long lcid, long RHS );
__declspec(implementation_key(11335)) enum XlChartType _Chart::GetChartType ( );
__declspec(implementation_key(11336)) void _Chart::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(11337)) HRESULT _Chart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName );
__declspec(implementation_key(11338)) WallsPtr _Chart::GetWalls ( long lcid );
__declspec(implementation_key(11339)) VARIANT_BOOL _Chart::GetWallsAndGridlines2D ( long lcid );
__declspec(implementation_key(11340)) void _Chart::PutWallsAndGridlines2D ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11341)) IDispatchPtr _Chart::XYGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11342)) enum XlBarShape _Chart::GetBarShape ( );
__declspec(implementation_key(11343)) void _Chart::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(11344)) enum XlRowCol _Chart::GetPlotBy ( );
__declspec(implementation_key(11345)) void _Chart::PutPlotBy ( enum XlRowCol RHS );
__declspec(implementation_key(11346)) HRESULT _Chart::CopyChartBuild ( );
__declspec(implementation_key(11347)) VARIANT_BOOL _Chart::GetProtectFormatting ( );
__declspec(implementation_key(11348)) void _Chart::PutProtectFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(11349)) VARIANT_BOOL _Chart::GetProtectData ( );
__declspec(implementation_key(11350)) void _Chart::PutProtectData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11351)) VARIANT_BOOL _Chart::GetProtectGoalSeek ( );
__declspec(implementation_key(11352)) void _Chart::PutProtectGoalSeek ( VARIANT_BOOL RHS );
__declspec(implementation_key(11353)) VARIANT_BOOL _Chart::GetProtectSelection ( );
__declspec(implementation_key(11354)) void _Chart::PutProtectSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(11355)) HRESULT _Chart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 );
__declspec(implementation_key(11356)) HRESULT _Chart::SetSourceData ( struct Range * Source, const _variant_t & PlotBy );
__declspec(implementation_key(11357)) VARIANT_BOOL _Chart::Export ( _bstr_t Filename, const _variant_t & FilterName, const _variant_t & Interactive );
__declspec(implementation_key(11358)) HRESULT _Chart::Refresh ( );
__declspec(implementation_key(11359)) PivotLayoutPtr _Chart::GetPivotLayout ( );
__declspec(implementation_key(11360)) VARIANT_BOOL _Chart::GetHasPivotFields ( );
__declspec(implementation_key(11361)) void _Chart::PutHasPivotFields ( VARIANT_BOOL RHS );
__declspec(implementation_key(11362)) Office::ScriptsPtr _Chart::GetScripts ( );
__declspec(implementation_key(11363)) HRESULT _Chart::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(11364)) _ApplicationPtr _Workbook::GetApplication ( );
__declspec(implementation_key(11365)) enum XlCreator _Workbook::GetCreator ( );
__declspec(implementation_key(11366)) IDispatchPtr _Workbook::GetParent ( );
__declspec(implementation_key(11367)) VARIANT_BOOL _Workbook::GetAcceptLabelsInFormulas ( );
__declspec(implementation_key(11368)) void _Workbook::PutAcceptLabelsInFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(11369)) HRESULT _Workbook::Activate ( long lcid );
__declspec(implementation_key(11370)) _ChartPtr _Workbook::GetActiveChart ( );
__declspec(implementation_key(11371)) IDispatchPtr _Workbook::GetActiveSheet ( );
__declspec(implementation_key(11372)) _bstr_t _Workbook::GetAuthor ( long lcid );
__declspec(implementation_key(11373)) void _Workbook::PutAuthor ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11374)) long _Workbook::GetAutoUpdateFrequency ( );
__declspec(implementation_key(11375)) void _Workbook::PutAutoUpdateFrequency ( long RHS );
__declspec(implementation_key(11376)) VARIANT_BOOL _Workbook::GetAutoUpdateSaveChanges ( );
__declspec(implementation_key(11377)) void _Workbook::PutAutoUpdateSaveChanges ( VARIANT_BOOL RHS );
__declspec(implementation_key(11378)) long _Workbook::GetChangeHistoryDuration ( );
__declspec(implementation_key(11379)) void _Workbook::PutChangeHistoryDuration ( long RHS );
__declspec(implementation_key(11380)) IDispatchPtr _Workbook::GetBuiltinDocumentProperties ( );
__declspec(implementation_key(11381)) HRESULT _Workbook::ChangeFileAccess ( enum XlFileAccess Mode, const _variant_t & WritePassword, const _variant_t & Notify, long lcid );
__declspec(implementation_key(11382)) HRESULT _Workbook::ChangeLink ( _bstr_t Name, _bstr_t NewName, enum XlLinkType Type, long lcid );
__declspec(implementation_key(11383)) SheetsPtr _Workbook::GetCharts ( );
__declspec(implementation_key(11384)) HRESULT _Workbook::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook, long lcid );
__declspec(implementation_key(11385)) _bstr_t _Workbook::GetCodeName ( );
__declspec(implementation_key(11386)) _bstr_t _Workbook::Get_CodeName ( );
__declspec(implementation_key(11387)) void _Workbook::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(11388)) _variant_t _Workbook::GetColors ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11389)) void _Workbook::PutColors ( const _variant_t & Index, long lcid, const _variant_t & RHS );
__declspec(implementation_key(11390)) Office::_CommandBarsPtr _Workbook::GetCommandBars ( );
__declspec(implementation_key(11391)) _bstr_t _Workbook::GetComments ( long lcid );
__declspec(implementation_key(11392)) void _Workbook::PutComments ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11393)) enum XlSaveConflictResolution _Workbook::GetConflictResolution ( );
__declspec(implementation_key(11394)) void _Workbook::PutConflictResolution ( enum XlSaveConflictResolution RHS );
__declspec(implementation_key(11395)) IDispatchPtr _Workbook::GetContainer ( );
__declspec(implementation_key(11396)) VARIANT_BOOL _Workbook::GetCreateBackup ( long lcid );
__declspec(implementation_key(11397)) IDispatchPtr _Workbook::GetCustomDocumentProperties ( );
__declspec(implementation_key(11398)) VARIANT_BOOL _Workbook::GetDate1904 ( long lcid );
__declspec(implementation_key(11399)) void _Workbook::PutDate1904 ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11400)) HRESULT _Workbook::DeleteNumberFormat ( _bstr_t NumberFormat, long lcid );
__declspec(implementation_key(11401)) SheetsPtr _Workbook::GetDialogSheets ( );
__declspec(implementation_key(11402)) enum xlDisplayDrawingObjects _Workbook::GetDisplayDrawingObjects ( long lcid );
__declspec(implementation_key(11403)) void _Workbook::PutDisplayDrawingObjects ( long lcid, enum xlDisplayDrawingObjects RHS );
__declspec(implementation_key(11404)) VARIANT_BOOL _Workbook::ExclusiveAccess ( long lcid );
__declspec(implementation_key(11405)) enum XlFileFormat _Workbook::GetFileFormat ( long lcid );
__declspec(implementation_key(11406)) HRESULT _Workbook::ForwardMailer ( long lcid );
__declspec(implementation_key(11407)) _bstr_t _Workbook::GetFullName ( long lcid );
__declspec(implementation_key(11408)) VARIANT_BOOL _Workbook::GetHasMailer ( long lcid );
__declspec(implementation_key(11409)) void _Workbook::PutHasMailer ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11410)) VARIANT_BOOL _Workbook::GetHasPassword ( long lcid );
__declspec(implementation_key(11411)) VARIANT_BOOL _Workbook::GetHasRoutingSlip ( long lcid );
__declspec(implementation_key(11412)) void _Workbook::PutHasRoutingSlip ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11413)) VARIANT_BOOL _Workbook::GetIsAddin ( );
__declspec(implementation_key(11414)) void _Workbook::PutIsAddin ( VARIANT_BOOL RHS );
__declspec(implementation_key(11415)) _bstr_t _Workbook::GetKeywords ( long lcid );
__declspec(implementation_key(11416)) void _Workbook::PutKeywords ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11417)) _variant_t _Workbook::LinkInfo ( _bstr_t Name, enum XlLinkInfo LinkInfo, const _variant_t & Type, const _variant_t & EditionRef, long lcid );
__declspec(implementation_key(11418)) _variant_t _Workbook::LinkSources ( const _variant_t & Type, long lcid );
__declspec(implementation_key(11419)) MailerPtr _Workbook::GetMailer ( );
__declspec(implementation_key(11420)) HRESULT _Workbook::MergeWorkbook ( const _variant_t & Filename );
__declspec(implementation_key(11421)) SheetsPtr _Workbook::GetModules ( );
__declspec(implementation_key(11422)) VARIANT_BOOL _Workbook::GetMultiUserEditing ( long lcid );
__declspec(implementation_key(11423)) _bstr_t _Workbook::GetName ( );
__declspec(implementation_key(11424)) NamesPtr _Workbook::GetNames ( );
__declspec(implementation_key(11425)) WindowPtr _Workbook::NewWindow ( long lcid );
__declspec(implementation_key(11426)) _bstr_t _Workbook::GetOnSave ( long lcid );
__declspec(implementation_key(11427)) void _Workbook::PutOnSave ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11428)) _bstr_t _Workbook::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(11429)) void _Workbook::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11430)) _bstr_t _Workbook::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(11431)) void _Workbook::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11432)) HRESULT _Workbook::OpenLinks ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Type, long lcid );
__declspec(implementation_key(11433)) _bstr_t _Workbook::GetPath ( long lcid );
__declspec(implementation_key(11434)) VARIANT_BOOL _Workbook::GetPersonalViewListSettings ( );
__declspec(implementation_key(11435)) void _Workbook::PutPersonalViewListSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(11436)) VARIANT_BOOL _Workbook::GetPersonalViewPrintSettings ( );
__declspec(implementation_key(11437)) void _Workbook::PutPersonalViewPrintSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(11438)) PivotCachesPtr _Workbook::PivotCaches ( );
__declspec(implementation_key(11439)) HRESULT _Workbook::Post ( const _variant_t & DestName, long lcid );
__declspec(implementation_key(11440)) VARIANT_BOOL _Workbook::GetPrecisionAsDisplayed ( long lcid );
__declspec(implementation_key(11441)) void _Workbook::PutPrecisionAsDisplayed ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11442)) HRESULT _Workbook::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(11443)) HRESULT _Workbook::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(11444)) HRESULT _Workbook::Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows );
__declspec(implementation_key(11445)) HRESULT _Workbook::ProtectSharing ( const _variant_t & Filename, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & SharingPassword );
__declspec(implementation_key(11446)) VARIANT_BOOL _Workbook::GetProtectStructure ( );
__declspec(implementation_key(11447)) VARIANT_BOOL _Workbook::GetProtectWindows ( );
__declspec(implementation_key(11448)) VARIANT_BOOL _Workbook::GetReadOnly ( long lcid );
__declspec(implementation_key(11449)) VARIANT_BOOL _Workbook::GetReadOnlyRecommended ( long lcid );
__declspec(implementation_key(11450)) HRESULT _Workbook::RefreshAll ( );
__declspec(implementation_key(11451)) HRESULT _Workbook::Reply ( long lcid );
__declspec(implementation_key(11452)) HRESULT _Workbook::ReplyAll ( long lcid );
__declspec(implementation_key(11453)) HRESULT _Workbook::RemoveUser ( long Index );
__declspec(implementation_key(11454)) long _Workbook::GetRevisionNumber ( long lcid );
__declspec(implementation_key(11455)) HRESULT _Workbook::Route ( long lcid );
__declspec(implementation_key(11456)) VARIANT_BOOL _Workbook::GetRouted ( long lcid );
__declspec(implementation_key(11457)) RoutingSlipPtr _Workbook::GetRoutingSlip ( );
__declspec(implementation_key(11458)) HRESULT _Workbook::RunAutoMacros ( enum XlRunAutoMacro Which, long lcid );
__declspec(implementation_key(11459)) HRESULT _Workbook::Save ( long lcid );
__declspec(implementation_key(11460)) HRESULT _Workbook::SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(11461)) HRESULT _Workbook::SaveCopyAs ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(11462)) VARIANT_BOOL _Workbook::GetSaved ( long lcid );
__declspec(implementation_key(11463)) void _Workbook::PutSaved ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11464)) VARIANT_BOOL _Workbook::GetSaveLinkValues ( long lcid );
__declspec(implementation_key(11465)) void _Workbook::PutSaveLinkValues ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11466)) HRESULT _Workbook::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt, long lcid );
__declspec(implementation_key(11467)) HRESULT _Workbook::SendMailer ( const _variant_t & FileFormat, enum XlPriority Priority, long lcid );
__declspec(implementation_key(11468)) HRESULT _Workbook::SetLinkOnData ( _bstr_t Name, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(11469)) SheetsPtr _Workbook::GetSheets ( );
__declspec(implementation_key(11470)) VARIANT_BOOL _Workbook::GetShowConflictHistory ( long lcid );
__declspec(implementation_key(11471)) void _Workbook::PutShowConflictHistory ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11472)) StylesPtr _Workbook::GetStyles ( );
__declspec(implementation_key(11473)) _bstr_t _Workbook::GetSubject ( long lcid );
__declspec(implementation_key(11474)) void _Workbook::PutSubject ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11475)) _bstr_t _Workbook::GetTitle ( long lcid );
__declspec(implementation_key(11476)) void _Workbook::PutTitle ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11477)) HRESULT _Workbook::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(11478)) HRESULT _Workbook::UnprotectSharing ( const _variant_t & SharingPassword );
__declspec(implementation_key(11479)) HRESULT _Workbook::UpdateFromFile ( long lcid );
__declspec(implementation_key(11480)) HRESULT _Workbook::UpdateLink ( const _variant_t & Name, const _variant_t & Type, long lcid );
__declspec(implementation_key(11481)) VARIANT_BOOL _Workbook::GetUpdateRemoteReferences ( long lcid );
__declspec(implementation_key(11482)) void _Workbook::PutUpdateRemoteReferences ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11483)) VARIANT_BOOL _Workbook::GetUserControl ( );
__declspec(implementation_key(11484)) void _Workbook::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(11485)) _variant_t _Workbook::GetUserStatus ( long lcid );
__declspec(implementation_key(11486)) CustomViewsPtr _Workbook::GetCustomViews ( );
__declspec(implementation_key(11487)) WindowsPtr _Workbook::GetWindows ( );
__declspec(implementation_key(11488)) SheetsPtr _Workbook::GetWorksheets ( );
__declspec(implementation_key(11489)) VARIANT_BOOL _Workbook::GetWriteReserved ( long lcid );
__declspec(implementation_key(11490)) _bstr_t _Workbook::GetWriteReservedBy ( long lcid );
__declspec(implementation_key(11491)) SheetsPtr _Workbook::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(11492)) SheetsPtr _Workbook::GetExcel4MacroSheets ( );
__declspec(implementation_key(11493)) VARIANT_BOOL _Workbook::GetTemplateRemoveExtData ( );
__declspec(implementation_key(11494)) void _Workbook::PutTemplateRemoveExtData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11495)) HRESULT _Workbook::HighlightChangesOptions ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(11496)) VARIANT_BOOL _Workbook::GetHighlightChangesOnScreen ( );
__declspec(implementation_key(11497)) void _Workbook::PutHighlightChangesOnScreen ( VARIANT_BOOL RHS );
__declspec(implementation_key(11498)) VARIANT_BOOL _Workbook::GetKeepChangeHistory ( );
__declspec(implementation_key(11499)) void _Workbook::PutKeepChangeHistory ( VARIANT_BOOL RHS );
__declspec(implementation_key(11500)) VARIANT_BOOL _Workbook::GetListChangesOnNewSheet ( );
__declspec(implementation_key(11501)) void _Workbook::PutListChangesOnNewSheet ( VARIANT_BOOL RHS );
__declspec(implementation_key(11502)) HRESULT _Workbook::PurgeChangeHistoryNow ( long Days, const _variant_t & SharingPassword );
__declspec(implementation_key(11503)) HRESULT _Workbook::AcceptAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(11504)) HRESULT _Workbook::RejectAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(11505)) HRESULT _Workbook::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(11506)) HRESULT _Workbook::ResetColors ( );
__declspec(implementation_key(11507)) VBE6::_VBProjectPtr _Workbook::GetVBProject ( );
__declspec(implementation_key(11508)) HRESULT _Workbook::FollowHyperlink ( _bstr_t Address, const _variant_t & SubAddress, const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(11509)) HRESULT _Workbook::AddToFavorites ( );
__declspec(implementation_key(11510)) VARIANT_BOOL _Workbook::GetIsInplace ( );
__declspec(implementation_key(11511)) HRESULT _Workbook::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(11512)) HRESULT _Workbook::WebPagePreview ( );
__declspec(implementation_key(11513)) PublishObjectsPtr _Workbook::GetPublishObjects ( );
__declspec(implementation_key(11514)) WebOptionsPtr _Workbook::GetWebOptions ( );
__declspec(implementation_key(11515)) HRESULT _Workbook::ReloadAs ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(11516)) Office::HTMLProjectPtr _Workbook::GetHTMLProject ( );
__declspec(implementation_key(11517)) VARIANT_BOOL _Workbook::GetEnvelopeVisible ( );
__declspec(implementation_key(11518)) void _Workbook::PutEnvelopeVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(11519)) long _Workbook::GetCalculationVersion ( );
__declspec(implementation_key(11520)) HRESULT _Workbook::Dummy1 ( long unused );
__declspec(implementation_key(11521)) HRESULT _Workbook::sblt ( _bstr_t s );
__declspec(implementation_key(11522)) VARIANT_BOOL _Workbook::GetVBASigned ( );
__declspec(implementation_key(11523)) _ApplicationPtr ICharts::GetApplication ( );
__declspec(implementation_key(11524)) enum XlCreator ICharts::GetCreator ( );
__declspec(implementation_key(11525)) IDispatchPtr ICharts::GetParent ( );
__declspec(implementation_key(11526)) _ChartPtr ICharts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(11527)) HRESULT ICharts::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(11528)) long ICharts::GetCount ( );
__declspec(implementation_key(11529)) HRESULT ICharts::Delete ( long lcid );
__declspec(implementation_key(11530)) IDispatchPtr ICharts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11531)) HRESULT ICharts::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(11532)) IUnknownPtr ICharts::Get_NewEnum ( );
__declspec(implementation_key(11533)) HRESULT ICharts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(11534)) HRESULT ICharts::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(11535)) HRESULT ICharts::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(11536)) HPageBreaksPtr ICharts::GetHPageBreaks ( );
__declspec(implementation_key(11537)) VPageBreaksPtr ICharts::GetVPageBreaks ( );
__declspec(implementation_key(11538)) _variant_t ICharts::GetVisible ( long lcid );
__declspec(implementation_key(11539)) void ICharts::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11540)) IDispatchPtr ICharts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11541)) HRESULT ICharts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(11542)) _ApplicationPtr IChartObject::GetApplication ( );
__declspec(implementation_key(11543)) enum XlCreator IChartObject::GetCreator ( );
__declspec(implementation_key(11544)) IDispatchPtr IChartObject::GetParent ( );
__declspec(implementation_key(11545)) RangePtr IChartObject::GetBottomRightCell ( );
__declspec(implementation_key(11546)) _variant_t IChartObject::BringToFront ( );
__declspec(implementation_key(11547)) _variant_t IChartObject::Copy ( );
__declspec(implementation_key(11548)) _variant_t IChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(11549)) _variant_t IChartObject::Cut ( );
__declspec(implementation_key(11550)) _variant_t IChartObject::Delete ( );
__declspec(implementation_key(11551)) IDispatchPtr IChartObject::Duplicate ( );
__declspec(implementation_key(11552)) VARIANT_BOOL IChartObject::GetEnabled ( );
__declspec(implementation_key(11553)) void IChartObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(11554)) double IChartObject::GetHeight ( );
__declspec(implementation_key(11555)) void IChartObject::PutHeight ( double RHS );
__declspec(implementation_key(11556)) long IChartObject::GetIndex ( );
__declspec(implementation_key(11557)) double IChartObject::GetLeft ( );
__declspec(implementation_key(11558)) void IChartObject::PutLeft ( double RHS );
__declspec(implementation_key(11559)) VARIANT_BOOL IChartObject::GetLocked ( );
__declspec(implementation_key(11560)) void IChartObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(11561)) _bstr_t IChartObject::GetName ( );
__declspec(implementation_key(11562)) void IChartObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(11563)) _bstr_t IChartObject::GetOnAction ( );
__declspec(implementation_key(11564)) void IChartObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(11565)) _variant_t IChartObject::GetPlacement ( );
__declspec(implementation_key(11566)) void IChartObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(11567)) VARIANT_BOOL IChartObject::GetPrintObject ( );
__declspec(implementation_key(11568)) void IChartObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(11569)) _variant_t IChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(11570)) _variant_t IChartObject::SendToBack ( );
__declspec(implementation_key(11571)) double IChartObject::GetTop ( );
__declspec(implementation_key(11572)) void IChartObject::PutTop ( double RHS );
__declspec(implementation_key(11573)) RangePtr IChartObject::GetTopLeftCell ( );
__declspec(implementation_key(11574)) VARIANT_BOOL IChartObject::GetVisible ( );
__declspec(implementation_key(11575)) void IChartObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(11576)) double IChartObject::GetWidth ( );
__declspec(implementation_key(11577)) void IChartObject::PutWidth ( double RHS );
__declspec(implementation_key(11578)) long IChartObject::GetZOrder ( );
__declspec(implementation_key(11579)) ShapeRangePtr IChartObject::GetShapeRange ( );
__declspec(implementation_key(11580)) _variant_t IChartObject::Activate ( );
__declspec(implementation_key(11581)) _ChartPtr IChartObject::GetChart ( );
__declspec(implementation_key(11582)) VARIANT_BOOL IChartObject::GetProtectChartObject ( );
__declspec(implementation_key(11583)) void IChartObject::PutProtectChartObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(11584)) VARIANT_BOOL IChartObject::GetRoundedCorners ( );
__declspec(implementation_key(11585)) void IChartObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(11586)) BorderPtr IChartObject::GetBorder ( );
__declspec(implementation_key(11587)) InteriorPtr IChartObject::GetInterior ( );
__declspec(implementation_key(11588)) VARIANT_BOOL IChartObject::GetShadow ( );
__declspec(implementation_key(11589)) void IChartObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11590)) _ApplicationPtr IRange::GetApplication ( );
__declspec(implementation_key(11591)) enum XlCreator IRange::GetCreator ( );
__declspec(implementation_key(11592)) IDispatchPtr IRange::GetParent ( );
__declspec(implementation_key(11593)) _variant_t IRange::Activate ( );
__declspec(implementation_key(11594)) _variant_t IRange::GetAddIndent ( );
__declspec(implementation_key(11595)) void IRange::PutAddIndent ( const _variant_t & RHS );
__declspec(implementation_key(11596)) _bstr_t IRange::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(11597)) _bstr_t IRange::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(11598)) _variant_t IRange::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(11599)) _variant_t IRange::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(11600)) _variant_t IRange::ApplyOutlineStyles ( );
__declspec(implementation_key(11601)) AreasPtr IRange::GetAreas ( );
__declspec(implementation_key(11602)) _bstr_t IRange::AutoComplete ( _bstr_t String );
__declspec(implementation_key(11603)) _variant_t IRange::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(11604)) _variant_t IRange::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(11605)) _variant_t IRange::AutoFit ( );
__declspec(implementation_key(11606)) _variant_t IRange::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(11607)) _variant_t IRange::AutoOutline ( );
__declspec(implementation_key(11608)) _variant_t IRange::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(11609)) BordersPtr IRange::GetBorders ( );
__declspec(implementation_key(11610)) _variant_t IRange::Calculate ( );
__declspec(implementation_key(11611)) RangePtr IRange::GetCells ( );
__declspec(implementation_key(11612)) CharactersPtr IRange::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11613)) _variant_t IRange::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(11614)) _variant_t IRange::Clear ( );
__declspec(implementation_key(11615)) _variant_t IRange::ClearContents ( );
__declspec(implementation_key(11616)) _variant_t IRange::ClearFormats ( );
__declspec(implementation_key(11617)) _variant_t IRange::ClearNotes ( );
__declspec(implementation_key(11618)) _variant_t IRange::ClearOutline ( );
__declspec(implementation_key(11619)) long IRange::GetColumn ( );
__declspec(implementation_key(11620)) RangePtr IRange::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(11621)) RangePtr IRange::GetColumns ( );
__declspec(implementation_key(11622)) _variant_t IRange::GetColumnWidth ( );
__declspec(implementation_key(11623)) void IRange::PutColumnWidth ( const _variant_t & RHS );
__declspec(implementation_key(11624)) _variant_t IRange::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(11625)) _variant_t IRange::Copy ( const _variant_t & Destination );
__declspec(implementation_key(11626)) long IRange::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(11627)) _variant_t IRange::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(11628)) long IRange::GetCount ( );
__declspec(implementation_key(11629)) _variant_t IRange::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(11630)) _variant_t IRange::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(11631)) RangePtr IRange::GetCurrentArray ( );
__declspec(implementation_key(11632)) RangePtr IRange::GetCurrentRegion ( );
__declspec(implementation_key(11633)) _variant_t IRange::Cut ( const _variant_t & Destination );
__declspec(implementation_key(11634)) _variant_t IRange::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(11635)) _variant_t IRange::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(11636)) void IRange::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(11637)) _variant_t IRange::Delete ( const _variant_t & Shift );
__declspec(implementation_key(11638)) RangePtr IRange::GetDependents ( );
__declspec(implementation_key(11639)) _variant_t IRange::DialogBoxEx ( );
__declspec(implementation_key(11640)) RangePtr IRange::GetDirectDependents ( );
__declspec(implementation_key(11641)) RangePtr IRange::GetDirectPrecedents ( );
__declspec(implementation_key(11642)) _variant_t IRange::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(11643)) RangePtr IRange::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(11644)) RangePtr IRange::GetEntireColumn ( );
__declspec(implementation_key(11645)) RangePtr IRange::GetEntireRow ( );
__declspec(implementation_key(11646)) _variant_t IRange::FillDown ( );
__declspec(implementation_key(11647)) _variant_t IRange::FillLeft ( );
__declspec(implementation_key(11648)) _variant_t IRange::FillRight ( );
__declspec(implementation_key(11649)) _variant_t IRange::FillUp ( );
__declspec(implementation_key(11650)) RangePtr IRange::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte );
__declspec(implementation_key(11651)) RangePtr IRange::FindNext ( const _variant_t & After );
__declspec(implementation_key(11652)) RangePtr IRange::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(11653)) FontPtr IRange::GetFont ( );
__declspec(implementation_key(11654)) _variant_t IRange::GetFormula ( long lcid );
__declspec(implementation_key(11655)) void IRange::PutFormula ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11656)) _variant_t IRange::GetFormulaArray ( );
__declspec(implementation_key(11657)) void IRange::PutFormulaArray ( const _variant_t & RHS );
__declspec(implementation_key(11658)) enum XlFormulaLabel IRange::GetFormulaLabel ( );
__declspec(implementation_key(11659)) void IRange::PutFormulaLabel ( enum XlFormulaLabel RHS );
__declspec(implementation_key(11660)) _variant_t IRange::GetFormulaHidden ( );
__declspec(implementation_key(11661)) void IRange::PutFormulaHidden ( const _variant_t & RHS );
__declspec(implementation_key(11662)) _variant_t IRange::GetFormulaLocal ( );
__declspec(implementation_key(11663)) void IRange::PutFormulaLocal ( const _variant_t & RHS );
__declspec(implementation_key(11664)) _variant_t IRange::GetFormulaR1C1 ( long lcid );
__declspec(implementation_key(11665)) void IRange::PutFormulaR1C1 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11666)) _variant_t IRange::GetFormulaR1C1Local ( );
__declspec(implementation_key(11667)) void IRange::PutFormulaR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(11668)) _variant_t IRange::FunctionWizard ( );
__declspec(implementation_key(11669)) VARIANT_BOOL IRange::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(11670)) _variant_t IRange::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(11671)) _variant_t IRange::GetHasArray ( );
__declspec(implementation_key(11672)) _variant_t IRange::GetHasFormula ( );
__declspec(implementation_key(11673)) _variant_t IRange::GetHeight ( );
__declspec(implementation_key(11674)) _variant_t IRange::GetHidden ( );
__declspec(implementation_key(11675)) void IRange::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(11676)) _variant_t IRange::GetHorizontalAlignment ( );
__declspec(implementation_key(11677)) void IRange::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11678)) _variant_t IRange::GetIndentLevel ( );
__declspec(implementation_key(11679)) void IRange::PutIndentLevel ( const _variant_t & RHS );
__declspec(implementation_key(11680)) HRESULT IRange::InsertIndent ( long InsertAmount );
__declspec(implementation_key(11681)) _variant_t IRange::Insert ( const _variant_t & Shift );
__declspec(implementation_key(11682)) InteriorPtr IRange::GetInterior ( );
__declspec(implementation_key(11683)) _variant_t IRange::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(11684)) void IRange::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(11685)) _variant_t IRange::Justify ( );
__declspec(implementation_key(11686)) _variant_t IRange::GetLeft ( );
__declspec(implementation_key(11687)) long IRange::GetListHeaderRows ( );
__declspec(implementation_key(11688)) _variant_t IRange::ListNames ( );
__declspec(implementation_key(11689)) enum XlLocationInTable IRange::GetLocationInTable ( );
__declspec(implementation_key(11690)) _variant_t IRange::GetLocked ( );
__declspec(implementation_key(11691)) void IRange::PutLocked ( const _variant_t & RHS );
__declspec(implementation_key(11692)) HRESULT IRange::Merge ( const _variant_t & Across );
__declspec(implementation_key(11693)) HRESULT IRange::UnMerge ( );
__declspec(implementation_key(11694)) RangePtr IRange::GetMergeArea ( );
__declspec(implementation_key(11695)) _variant_t IRange::GetMergeCells ( );
__declspec(implementation_key(11696)) void IRange::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(11697)) _variant_t IRange::GetName ( );
__declspec(implementation_key(11698)) void IRange::PutName ( const _variant_t & RHS );
__declspec(implementation_key(11699)) _variant_t IRange::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(11700)) IUnknownPtr IRange::Get_NewEnum ( );
__declspec(implementation_key(11701)) RangePtr IRange::GetNext ( );
__declspec(implementation_key(11702)) _bstr_t IRange::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11703)) _variant_t IRange::GetNumberFormat ( );
__declspec(implementation_key(11704)) void IRange::PutNumberFormat ( const _variant_t & RHS );
__declspec(implementation_key(11705)) _variant_t IRange::GetNumberFormatLocal ( );
__declspec(implementation_key(11706)) void IRange::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(11707)) RangePtr IRange::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(11708)) _variant_t IRange::GetOrientation ( );
__declspec(implementation_key(11709)) void IRange::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(11710)) _variant_t IRange::GetOutlineLevel ( );
__declspec(implementation_key(11711)) void IRange::PutOutlineLevel ( const _variant_t & RHS );
__declspec(implementation_key(11712)) long IRange::GetPageBreak ( );
__declspec(implementation_key(11713)) void IRange::PutPageBreak ( long RHS );
__declspec(implementation_key(11714)) _variant_t IRange::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(11715)) _variant_t IRange::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(11716)) PivotFieldPtr IRange::GetPivotField ( );
__declspec(implementation_key(11717)) PivotItemPtr IRange::GetPivotItem ( );
__declspec(implementation_key(11718)) PivotTablePtr IRange::GetPivotTable ( );
__declspec(implementation_key(11719)) RangePtr IRange::GetPrecedents ( );
__declspec(implementation_key(11720)) _variant_t IRange::GetPrefixCharacter ( );
__declspec(implementation_key(11721)) RangePtr IRange::GetPrevious ( );
__declspec(implementation_key(11722)) _variant_t IRange::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(11723)) _variant_t IRange::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(11724)) _QueryTablePtr IRange::GetQueryTable ( );
__declspec(implementation_key(11725)) RangePtr IRange::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(11726)) _variant_t IRange::RemoveSubtotal ( );
__declspec(implementation_key(11727)) VARIANT_BOOL IRange::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte );
__declspec(implementation_key(11728)) RangePtr IRange::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(11729)) long IRange::GetRow ( );
__declspec(implementation_key(11730)) RangePtr IRange::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(11731)) _variant_t IRange::GetRowHeight ( );
__declspec(implementation_key(11732)) void IRange::PutRowHeight ( const _variant_t & RHS );
__declspec(implementation_key(11733)) RangePtr IRange::GetRows ( );
__declspec(implementation_key(11734)) _variant_t IRange::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(11735)) _variant_t IRange::Select ( );
__declspec(implementation_key(11736)) _variant_t IRange::Show ( );
__declspec(implementation_key(11737)) _variant_t IRange::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(11738)) _variant_t IRange::GetShowDetail ( );
__declspec(implementation_key(11739)) void IRange::PutShowDetail ( const _variant_t & RHS );
__declspec(implementation_key(11740)) _variant_t IRange::ShowErrors ( );
__declspec(implementation_key(11741)) _variant_t IRange::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(11742)) _variant_t IRange::GetShrinkToFit ( );
__declspec(implementation_key(11743)) void IRange::PutShrinkToFit ( const _variant_t & RHS );
__declspec(implementation_key(11744)) _variant_t IRange::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod );
__declspec(implementation_key(11745)) _variant_t IRange::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation );
__declspec(implementation_key(11746)) SoundNotePtr IRange::GetSoundNote ( );
__declspec(implementation_key(11747)) RangePtr IRange::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(11748)) _variant_t IRange::GetStyle ( );
__declspec(implementation_key(11749)) void IRange::PutStyle ( const _variant_t & RHS );
__declspec(implementation_key(11750)) _variant_t IRange::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(11751)) _variant_t IRange::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(11752)) _variant_t IRange::GetSummary ( );
__declspec(implementation_key(11753)) _variant_t IRange::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(11754)) _variant_t IRange::GetText ( );
__declspec(implementation_key(11755)) _variant_t IRange::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator );
__declspec(implementation_key(11756)) _variant_t IRange::GetTop ( );
__declspec(implementation_key(11757)) _variant_t IRange::Ungroup ( );
__declspec(implementation_key(11758)) _variant_t IRange::GetUseStandardHeight ( );
__declspec(implementation_key(11759)) void IRange::PutUseStandardHeight ( const _variant_t & RHS );
__declspec(implementation_key(11760)) _variant_t IRange::GetUseStandardWidth ( );
__declspec(implementation_key(11761)) void IRange::PutUseStandardWidth ( const _variant_t & RHS );
__declspec(implementation_key(11762)) ValidationPtr IRange::GetValidation ( );
__declspec(implementation_key(11763)) _variant_t IRange::GetValue ( long lcid );
__declspec(implementation_key(11764)) void IRange::PutValue ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11765)) _variant_t IRange::GetValue2 ( long lcid );
__declspec(implementation_key(11766)) void IRange::PutValue2 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11767)) _variant_t IRange::GetVerticalAlignment ( );
__declspec(implementation_key(11768)) void IRange::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11769)) _variant_t IRange::GetWidth ( );
__declspec(implementation_key(11770)) _WorksheetPtr IRange::GetWorksheet ( );
__declspec(implementation_key(11771)) _variant_t IRange::GetWrapText ( );
__declspec(implementation_key(11772)) void IRange::PutWrapText ( const _variant_t & RHS );
__declspec(implementation_key(11773)) CommentPtr IRange::AddComment ( const _variant_t & Text );
__declspec(implementation_key(11774)) CommentPtr IRange::GetComment ( );
__declspec(implementation_key(11775)) HRESULT IRange::ClearComments ( );
__declspec(implementation_key(11776)) PhoneticPtr IRange::GetPhonetic ( );
__declspec(implementation_key(11777)) FormatConditionsPtr IRange::GetFormatConditions ( );
__declspec(implementation_key(11778)) long IRange::GetReadingOrder ( );
__declspec(implementation_key(11779)) void IRange::PutReadingOrder ( long RHS );
__declspec(implementation_key(11780)) HyperlinksPtr IRange::GetHyperlinks ( );
__declspec(implementation_key(11781)) PhoneticsPtr IRange::GetPhonetics ( );
__declspec(implementation_key(11782)) HRESULT IRange::SetPhonetic ( );
__declspec(implementation_key(11783)) _bstr_t IRange::GetID ( );
__declspec(implementation_key(11784)) void IRange::PutID ( _bstr_t RHS );
__declspec(implementation_key(11785)) _variant_t IRange::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(11786)) _ApplicationPtr IVPageBreak::GetApplication ( );
__declspec(implementation_key(11787)) enum XlCreator IVPageBreak::GetCreator ( );
__declspec(implementation_key(11788)) _WorksheetPtr IVPageBreak::GetParent ( );
__declspec(implementation_key(11789)) HRESULT IVPageBreak::Delete ( );
__declspec(implementation_key(11790)) HRESULT IVPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(11791)) enum XlPageBreak IVPageBreak::GetType ( );
__declspec(implementation_key(11792)) void IVPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(11793)) enum XlPageBreakExtent IVPageBreak::GetExtent ( );
__declspec(implementation_key(11794)) RangePtr IVPageBreak::GetLocation ( );
__declspec(implementation_key(11795)) void IVPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(11796)) _ApplicationPtr IHPageBreak::GetApplication ( );
__declspec(implementation_key(11797)) enum XlCreator IHPageBreak::GetCreator ( );
__declspec(implementation_key(11798)) _WorksheetPtr IHPageBreak::GetParent ( );
__declspec(implementation_key(11799)) HRESULT IHPageBreak::Delete ( );
__declspec(implementation_key(11800)) HRESULT IHPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(11801)) enum XlPageBreak IHPageBreak::GetType ( );
__declspec(implementation_key(11802)) void IHPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(11803)) enum XlPageBreakExtent IHPageBreak::GetExtent ( );
__declspec(implementation_key(11804)) RangePtr IHPageBreak::GetLocation ( );
__declspec(implementation_key(11805)) void IHPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(11806)) HRESULT IAppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(11807)) HRESULT IAppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(11808)) HRESULT IAppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(11809)) HRESULT IAppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(11810)) HRESULT IAppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(11811)) HRESULT IAppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(11812)) HRESULT IAppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(11813)) HRESULT IAppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(11814)) HRESULT IAppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(11815)) HRESULT IAppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(11816)) HRESULT IAppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(11817)) HRESULT IAppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(11818)) HRESULT IAppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(11819)) HRESULT IAppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(11820)) HRESULT IAppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(11821)) HRESULT IAppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(11822)) HRESULT IAppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(11823)) HRESULT IAppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(11824)) HRESULT IAppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(11825)) HRESULT IAppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(11826)) HRESULT IAppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(11827)) _ApplicationPtr IRecentFile::GetApplication ( );
__declspec(implementation_key(11828)) enum XlCreator IRecentFile::GetCreator ( );
__declspec(implementation_key(11829)) IDispatchPtr IRecentFile::GetParent ( );
__declspec(implementation_key(11830)) _bstr_t IRecentFile::GetName ( );
__declspec(implementation_key(11831)) _bstr_t IRecentFile::GetPath ( );
__declspec(implementation_key(11832)) long IRecentFile::GetIndex ( );
__declspec(implementation_key(11833)) _WorkbookPtr IRecentFile::Open ( );
__declspec(implementation_key(11834)) HRESULT IRecentFile::Delete ( );
__declspec(implementation_key(11835)) _ApplicationPtr Workbooks::GetApplication ( );
__declspec(implementation_key(11836)) enum XlCreator Workbooks::GetCreator ( );
__declspec(implementation_key(11837)) IDispatchPtr Workbooks::GetParent ( );
__declspec(implementation_key(11838)) _WorkbookPtr Workbooks::Add ( const _variant_t & Template, long lcid );
__declspec(implementation_key(11839)) HRESULT Workbooks::Close ( long lcid );
__declspec(implementation_key(11840)) long Workbooks::GetCount ( );
__declspec(implementation_key(11841)) _WorkbookPtr Workbooks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11842)) IUnknownPtr Workbooks::Get_NewEnum ( );
__declspec(implementation_key(11843)) _WorkbookPtr Workbooks::Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, long lcid );
__declspec(implementation_key(11844)) HRESULT Workbooks::_OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(11845)) _WorkbookPtr Workbooks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11846)) HRESULT Workbooks::OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, long lcid );
__declspec(implementation_key(11847)) _ApplicationPtr _Application::GetApplication ( );
__declspec(implementation_key(11848)) enum XlCreator _Application::GetCreator ( );
__declspec(implementation_key(11849)) _ApplicationPtr _Application::GetParent ( );
__declspec(implementation_key(11850)) RangePtr _Application::GetActiveCell ( );
__declspec(implementation_key(11851)) _ChartPtr _Application::GetActiveChart ( );
__declspec(implementation_key(11852)) DialogSheetPtr _Application::GetActiveDialog ( );
__declspec(implementation_key(11853)) MenuBarPtr _Application::GetActiveMenuBar ( );
__declspec(implementation_key(11854)) _bstr_t _Application::GetActivePrinter ( long lcid );
__declspec(implementation_key(11855)) void _Application::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11856)) IDispatchPtr _Application::GetActiveSheet ( );
__declspec(implementation_key(11857)) WindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(11858)) _WorkbookPtr _Application::GetActiveWorkbook ( );
__declspec(implementation_key(11859)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(11860)) Office::AssistantPtr _Application::GetAssistant ( );
__declspec(implementation_key(11861)) HRESULT _Application::Calculate ( long lcid );
__declspec(implementation_key(11862)) RangePtr _Application::GetCells ( );
__declspec(implementation_key(11863)) SheetsPtr _Application::GetCharts ( );
__declspec(implementation_key(11864)) RangePtr _Application::GetColumns ( );
__declspec(implementation_key(11865)) Office::_CommandBarsPtr _Application::GetCommandBars ( );
__declspec(implementation_key(11866)) long _Application::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(11867)) HRESULT _Application::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(11868)) long _Application::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(11869)) HRESULT _Application::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(11870)) _variant_t _Application::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(11871)) HRESULT _Application::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(11872)) SheetsPtr _Application::GetDialogSheets ( );
__declspec(implementation_key(11873)) _variant_t _Application::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(11874)) _variant_t _Application::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(11875)) _variant_t _Application::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(11876)) RangePtr _Application::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(11877)) MenuBarsPtr _Application::GetMenuBars ( );
__declspec(implementation_key(11878)) ModulesPtr _Application::GetModules ( );
__declspec(implementation_key(11879)) NamesPtr _Application::GetNames ( );
__declspec(implementation_key(11880)) RangePtr _Application::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(11881)) RangePtr _Application::GetRows ( );
__declspec(implementation_key(11882)) _variant_t _Application::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(11883)) _variant_t _Application::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(11884)) IDispatchPtr _Application::GetSelection ( long lcid );
__declspec(implementation_key(11885)) HRESULT _Application::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(11886)) SheetsPtr _Application::GetSheets ( );
__declspec(implementation_key(11887)) MenuPtr _Application::GetShortcutMenus ( long Index );
__declspec(implementation_key(11888)) _WorkbookPtr _Application::GetThisWorkbook ( long lcid );
__declspec(implementation_key(11889)) ToolbarsPtr _Application::GetToolbars ( );
__declspec(implementation_key(11890)) RangePtr _Application::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(11891)) WindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(11892)) WorkbooksPtr _Application::GetWorkbooks ( );
__declspec(implementation_key(11893)) WorksheetFunctionPtr _Application::GetWorksheetFunction ( );
__declspec(implementation_key(11894)) SheetsPtr _Application::GetWorksheets ( );
__declspec(implementation_key(11895)) SheetsPtr _Application::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(11896)) SheetsPtr _Application::GetExcel4MacroSheets ( );
__declspec(implementation_key(11897)) HRESULT _Application::ActivateMicrosoftApp ( enum XlMSApplication Index, long lcid );
__declspec(implementation_key(11898)) HRESULT _Application::AddChartAutoFormat ( const _variant_t & Chart, _bstr_t Name, const _variant_t & Description, long lcid );
__declspec(implementation_key(11899)) HRESULT _Application::AddCustomList ( const _variant_t & ListArray, const _variant_t & ByRow, long lcid );
__declspec(implementation_key(11900)) VARIANT_BOOL _Application::GetAlertBeforeOverwriting ( long lcid );
__declspec(implementation_key(11901)) void _Application::PutAlertBeforeOverwriting ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11902)) _bstr_t _Application::GetAltStartupPath ( long lcid );
__declspec(implementation_key(11903)) void _Application::PutAltStartupPath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11904)) VARIANT_BOOL _Application::GetAskToUpdateLinks ( long lcid );
__declspec(implementation_key(11905)) void _Application::PutAskToUpdateLinks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11906)) VARIANT_BOOL _Application::GetEnableAnimations ( long lcid );
__declspec(implementation_key(11907)) void _Application::PutEnableAnimations ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11908)) AutoCorrectPtr _Application::GetAutoCorrect ( );
__declspec(implementation_key(11909)) long _Application::GetBuild ( long lcid );
__declspec(implementation_key(11910)) VARIANT_BOOL _Application::GetCalculateBeforeSave ( long lcid );
__declspec(implementation_key(11911)) void _Application::PutCalculateBeforeSave ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11912)) enum XlCalculation _Application::GetCalculation ( long lcid );
__declspec(implementation_key(11913)) void _Application::PutCalculation ( long lcid, enum XlCalculation RHS );
__declspec(implementation_key(11914)) _variant_t _Application::GetCaller ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11915)) VARIANT_BOOL _Application::GetCanPlaySounds ( long lcid );
__declspec(implementation_key(11916)) VARIANT_BOOL _Application::GetCanRecordSounds ( long lcid );
__declspec(implementation_key(11917)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(11918)) void _Application::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(11919)) VARIANT_BOOL _Application::GetCellDragAndDrop ( long lcid );
__declspec(implementation_key(11920)) void _Application::PutCellDragAndDrop ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11921)) double _Application::CentimetersToPoints ( double Centimeters, long lcid );
__declspec(implementation_key(11922)) VARIANT_BOOL _Application::CheckSpelling ( _bstr_t Word, const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, long lcid );
__declspec(implementation_key(11923)) _variant_t _Application::GetClipboardFormats ( const _variant_t & Index, long lcid );
__declspec(implementation_key(11924)) VARIANT_BOOL _Application::GetDisplayClipboardWindow ( long lcid );
__declspec(implementation_key(11925)) void _Application::PutDisplayClipboardWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11926)) VARIANT_BOOL _Application::GetColorButtons ( );
__declspec(implementation_key(11927)) void _Application::PutColorButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(11928)) enum XlCommandUnderlines _Application::GetCommandUnderlines ( long lcid );
__declspec(implementation_key(11929)) void _Application::PutCommandUnderlines ( long lcid, enum XlCommandUnderlines RHS );
__declspec(implementation_key(11930)) VARIANT_BOOL _Application::GetConstrainNumeric ( long lcid );
__declspec(implementation_key(11931)) void _Application::PutConstrainNumeric ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11932)) _variant_t _Application::ConvertFormula ( const _variant_t & Formula, enum XlReferenceStyle FromReferenceStyle, const _variant_t & ToReferenceStyle, const _variant_t & ToAbsolute, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(11933)) VARIANT_BOOL _Application::GetCopyObjectsWithCells ( long lcid );
__declspec(implementation_key(11934)) void _Application::PutCopyObjectsWithCells ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11935)) enum XlMousePointer _Application::GetCursor ( long lcid );
__declspec(implementation_key(11936)) void _Application::PutCursor ( long lcid, enum XlMousePointer RHS );
__declspec(implementation_key(11937)) long _Application::GetCustomListCount ( long lcid );
__declspec(implementation_key(11938)) enum XlCutCopyMode _Application::GetCutCopyMode ( long lcid );
__declspec(implementation_key(11939)) void _Application::PutCutCopyMode ( long lcid, enum XlCutCopyMode RHS );
__declspec(implementation_key(11940)) long _Application::GetDataEntryMode ( long lcid );
__declspec(implementation_key(11941)) void _Application::PutDataEntryMode ( long lcid, long RHS );
__declspec(implementation_key(11942)) HRESULT _Application::Dummy1 ( );
__declspec(implementation_key(11943)) HRESULT _Application::Dummy2 ( );
__declspec(implementation_key(11944)) HRESULT _Application::Dummy3 ( );
__declspec(implementation_key(11945)) HRESULT _Application::Dummy4 ( );
__declspec(implementation_key(11946)) HRESULT _Application::Dummy5 ( );
__declspec(implementation_key(11947)) HRESULT _Application::Dummy6 ( );
__declspec(implementation_key(11948)) HRESULT _Application::Dummy7 ( );
__declspec(implementation_key(11949)) HRESULT _Application::Dummy8 ( );
__declspec(implementation_key(11950)) HRESULT _Application::Dummy9 ( );
__declspec(implementation_key(11951)) HRESULT _Application::Dummy10 ( );
__declspec(implementation_key(11952)) HRESULT _Application::Dummy11 ( );
__declspec(implementation_key(11953)) _bstr_t _Application::Get_Default ( );
__declspec(implementation_key(11954)) _bstr_t _Application::GetDefaultFilePath ( long lcid );
__declspec(implementation_key(11955)) void _Application::PutDefaultFilePath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(11956)) HRESULT _Application::DeleteChartAutoFormat ( _bstr_t Name, long lcid );
__declspec(implementation_key(11957)) HRESULT _Application::DeleteCustomList ( long ListNum, long lcid );
__declspec(implementation_key(11958)) DialogsPtr _Application::GetDialogs ( );
__declspec(implementation_key(11959)) VARIANT_BOOL _Application::GetDisplayAlerts ( long lcid );
__declspec(implementation_key(11960)) void _Application::PutDisplayAlerts ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11961)) VARIANT_BOOL _Application::GetDisplayFormulaBar ( long lcid );
__declspec(implementation_key(11962)) void _Application::PutDisplayFormulaBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11963)) VARIANT_BOOL _Application::GetDisplayFullScreen ( long lcid );
__declspec(implementation_key(11964)) void _Application::PutDisplayFullScreen ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11965)) VARIANT_BOOL _Application::GetDisplayNoteIndicator ( );
__declspec(implementation_key(11966)) void _Application::PutDisplayNoteIndicator ( VARIANT_BOOL RHS );
__declspec(implementation_key(11967)) enum XlCommentDisplayMode _Application::GetDisplayCommentIndicator ( );
__declspec(implementation_key(11968)) void _Application::PutDisplayCommentIndicator ( enum XlCommentDisplayMode RHS );
__declspec(implementation_key(11969)) VARIANT_BOOL _Application::GetDisplayExcel4Menus ( long lcid );
__declspec(implementation_key(11970)) void _Application::PutDisplayExcel4Menus ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11971)) VARIANT_BOOL _Application::GetDisplayRecentFiles ( );
__declspec(implementation_key(11972)) void _Application::PutDisplayRecentFiles ( VARIANT_BOOL RHS );
__declspec(implementation_key(11973)) VARIANT_BOOL _Application::GetDisplayScrollBars ( long lcid );
__declspec(implementation_key(11974)) void _Application::PutDisplayScrollBars ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11975)) VARIANT_BOOL _Application::GetDisplayStatusBar ( long lcid );
__declspec(implementation_key(11976)) void _Application::PutDisplayStatusBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11977)) HRESULT _Application::DoubleClick ( long lcid );
__declspec(implementation_key(11978)) VARIANT_BOOL _Application::GetEditDirectlyInCell ( long lcid );
__declspec(implementation_key(11979)) void _Application::PutEditDirectlyInCell ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11980)) VARIANT_BOOL _Application::GetEnableAutoComplete ( );
__declspec(implementation_key(11981)) void _Application::PutEnableAutoComplete ( VARIANT_BOOL RHS );
__declspec(implementation_key(11982)) enum XlEnableCancelKey _Application::GetEnableCancelKey ( long lcid );
__declspec(implementation_key(11983)) void _Application::PutEnableCancelKey ( long lcid, enum XlEnableCancelKey RHS );
__declspec(implementation_key(11984)) VARIANT_BOOL _Application::GetEnableSound ( );
__declspec(implementation_key(11985)) void _Application::PutEnableSound ( VARIANT_BOOL RHS );
__declspec(implementation_key(11986)) VARIANT_BOOL _Application::GetEnableTipWizard ( long lcid );
__declspec(implementation_key(11987)) void _Application::PutEnableTipWizard ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11988)) _variant_t _Application::GetFileConverters ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(11989)) Office::FileSearchPtr _Application::GetFileSearch ( );
__declspec(implementation_key(11990)) Office::IFindPtr _Application::GetFileFind ( );
__declspec(implementation_key(11991)) HRESULT _Application::_FindFile ( long lcid );
__declspec(implementation_key(11992)) VARIANT_BOOL _Application::GetFixedDecimal ( long lcid );
__declspec(implementation_key(11993)) void _Application::PutFixedDecimal ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(11994)) long _Application::GetFixedDecimalPlaces ( long lcid );
__declspec(implementation_key(11995)) void _Application::PutFixedDecimalPlaces ( long lcid, long RHS );
__declspec(implementation_key(11996)) _variant_t _Application::GetCustomListContents ( long ListNum, long lcid );
__declspec(implementation_key(11997)) long _Application::GetCustomListNum ( const _variant_t & ListArray, long lcid );
__declspec(implementation_key(11998)) _variant_t _Application::GetOpenFilename ( const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, const _variant_t & MultiSelect, long lcid );
__declspec(implementation_key(11999)) _variant_t _Application::GetSaveAsFilename ( const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, long lcid );
__declspec(implementation_key(12000)) HRESULT _Application::Goto ( const _variant_t & Reference, const _variant_t & Scroll, long lcid );
__declspec(implementation_key(12001)) double _Application::GetHeight ( long lcid );
__declspec(implementation_key(12002)) void _Application::PutHeight ( long lcid, double RHS );
__declspec(implementation_key(12003)) HRESULT _Application::Help ( const _variant_t & HelpFile, const _variant_t & HelpContextID, long lcid );
__declspec(implementation_key(12004)) VARIANT_BOOL _Application::GetIgnoreRemoteRequests ( long lcid );
__declspec(implementation_key(12005)) void _Application::PutIgnoreRemoteRequests ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12006)) double _Application::InchesToPoints ( double Inches, long lcid );
__declspec(implementation_key(12007)) _variant_t _Application::InputBox ( _bstr_t Prompt, const _variant_t & Title, const _variant_t & Default, const _variant_t & Left, const _variant_t & Top, const _variant_t & HelpFile, const _variant_t & HelpContextID, const _variant_t & Type, long lcid );
__declspec(implementation_key(12008)) VARIANT_BOOL _Application::GetInteractive ( long lcid );
__declspec(implementation_key(12009)) void _Application::PutInteractive ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12010)) _variant_t _Application::GetInternational ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12011)) VARIANT_BOOL _Application::GetIteration ( long lcid );
__declspec(implementation_key(12012)) void _Application::PutIteration ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12013)) VARIANT_BOOL _Application::GetLargeButtons ( );
__declspec(implementation_key(12014)) void _Application::PutLargeButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(12015)) double _Application::GetLeft ( long lcid );
__declspec(implementation_key(12016)) void _Application::PutLeft ( long lcid, double RHS );
__declspec(implementation_key(12017)) _bstr_t _Application::GetLibraryPath ( long lcid );
__declspec(implementation_key(12018)) HRESULT _Application::MacroOptions ( const _variant_t & Macro, const _variant_t & Description, const _variant_t & HasMenu, const _variant_t & MenuText, const _variant_t & HasShortcutKey, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & StatusBar, const _variant_t & HelpContextID, const _variant_t & HelpFile, long lcid );
__declspec(implementation_key(12019)) HRESULT _Application::MailLogoff ( long lcid );
__declspec(implementation_key(12020)) HRESULT _Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail, long lcid );
__declspec(implementation_key(12021)) _variant_t _Application::GetMailSession ( long lcid );
__declspec(implementation_key(12022)) enum XlMailSystem _Application::GetMailSystem ( long lcid );
__declspec(implementation_key(12023)) VARIANT_BOOL _Application::GetMathCoprocessorAvailable ( long lcid );
__declspec(implementation_key(12024)) double _Application::GetMaxChange ( long lcid );
__declspec(implementation_key(12025)) void _Application::PutMaxChange ( long lcid, double RHS );
__declspec(implementation_key(12026)) long _Application::GetMaxIterations ( long lcid );
__declspec(implementation_key(12027)) void _Application::PutMaxIterations ( long lcid, long RHS );
__declspec(implementation_key(12028)) long _Application::GetMemoryFree ( long lcid );
__declspec(implementation_key(12029)) long _Application::GetMemoryTotal ( long lcid );
__declspec(implementation_key(12030)) long _Application::GetMemoryUsed ( long lcid );
__declspec(implementation_key(12031)) VARIANT_BOOL _Application::GetMouseAvailable ( long lcid );
__declspec(implementation_key(12032)) VARIANT_BOOL _Application::GetMoveAfterReturn ( long lcid );
__declspec(implementation_key(12033)) void _Application::PutMoveAfterReturn ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12034)) enum XlDirection _Application::GetMoveAfterReturnDirection ( long lcid );
__declspec(implementation_key(12035)) void _Application::PutMoveAfterReturnDirection ( long lcid, enum XlDirection RHS );
__declspec(implementation_key(12036)) RecentFilesPtr _Application::GetRecentFiles ( );
__declspec(implementation_key(12037)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(12038)) _WorkbookPtr _Application::NextLetter ( long lcid );
__declspec(implementation_key(12039)) _bstr_t _Application::GetNetworkTemplatesPath ( long lcid );
__declspec(implementation_key(12040)) ODBCErrorsPtr _Application::GetODBCErrors ( );
__declspec(implementation_key(12041)) long _Application::GetODBCTimeout ( );
__declspec(implementation_key(12042)) void _Application::PutODBCTimeout ( long RHS );
__declspec(implementation_key(12043)) _bstr_t _Application::GetOnCalculate ( long lcid );
__declspec(implementation_key(12044)) void _Application::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12045)) _bstr_t _Application::GetOnData ( long lcid );
__declspec(implementation_key(12046)) void _Application::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12047)) _bstr_t _Application::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(12048)) void _Application::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12049)) _bstr_t _Application::GetOnEntry ( long lcid );
__declspec(implementation_key(12050)) void _Application::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12051)) HRESULT _Application::OnKey ( _bstr_t Key, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(12052)) HRESULT _Application::OnRepeat ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(12053)) _bstr_t _Application::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(12054)) void _Application::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12055)) _bstr_t _Application::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(12056)) void _Application::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12057)) HRESULT _Application::OnTime ( const _variant_t & EarliestTime, _bstr_t Procedure, const _variant_t & LatestTime, const _variant_t & Schedule, long lcid );
__declspec(implementation_key(12058)) HRESULT _Application::OnUndo ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(12059)) _bstr_t _Application::GetOnWindow ( long lcid );
__declspec(implementation_key(12060)) void _Application::PutOnWindow ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12061)) _bstr_t _Application::GetOperatingSystem ( long lcid );
__declspec(implementation_key(12062)) _bstr_t _Application::GetOrganizationName ( long lcid );
__declspec(implementation_key(12063)) _bstr_t _Application::GetPath ( long lcid );
__declspec(implementation_key(12064)) _bstr_t _Application::GetPathSeparator ( long lcid );
__declspec(implementation_key(12065)) _variant_t _Application::GetPreviousSelections ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12066)) VARIANT_BOOL _Application::GetPivotTableSelection ( );
__declspec(implementation_key(12067)) void _Application::PutPivotTableSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(12068)) VARIANT_BOOL _Application::GetPromptForSummaryInfo ( long lcid );
__declspec(implementation_key(12069)) void _Application::PutPromptForSummaryInfo ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12070)) HRESULT _Application::Quit ( );
__declspec(implementation_key(12071)) HRESULT _Application::RecordMacro ( const _variant_t & BasicCode, const _variant_t & XlmCode, long lcid );
__declspec(implementation_key(12072)) VARIANT_BOOL _Application::GetRecordRelative ( long lcid );
__declspec(implementation_key(12073)) enum XlReferenceStyle _Application::GetReferenceStyle ( long lcid );
__declspec(implementation_key(12074)) void _Application::PutReferenceStyle ( long lcid, enum XlReferenceStyle RHS );
__declspec(implementation_key(12075)) _variant_t _Application::GetRegisteredFunctions ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(12076)) VARIANT_BOOL _Application::RegisterXLL ( _bstr_t Filename, long lcid );
__declspec(implementation_key(12077)) HRESULT _Application::Repeat ( long lcid );
__declspec(implementation_key(12078)) HRESULT _Application::ResetTipWizard ( long lcid );
__declspec(implementation_key(12079)) VARIANT_BOOL _Application::GetRollZoom ( );
__declspec(implementation_key(12080)) void _Application::PutRollZoom ( VARIANT_BOOL RHS );
__declspec(implementation_key(12081)) HRESULT _Application::Save ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(12082)) HRESULT _Application::SaveWorkspace ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(12083)) VARIANT_BOOL _Application::GetScreenUpdating ( long lcid );
__declspec(implementation_key(12084)) void _Application::PutScreenUpdating ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12085)) HRESULT _Application::SetDefaultChart ( const _variant_t & FormatName, const _variant_t & Gallery );
__declspec(implementation_key(12086)) long _Application::GetSheetsInNewWorkbook ( long lcid );
__declspec(implementation_key(12087)) void _Application::PutSheetsInNewWorkbook ( long lcid, long RHS );
__declspec(implementation_key(12088)) VARIANT_BOOL _Application::GetShowChartTipNames ( );
__declspec(implementation_key(12089)) void _Application::PutShowChartTipNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(12090)) VARIANT_BOOL _Application::GetShowChartTipValues ( );
__declspec(implementation_key(12091)) void _Application::PutShowChartTipValues ( VARIANT_BOOL RHS );
__declspec(implementation_key(12092)) _bstr_t _Application::GetStandardFont ( long lcid );
__declspec(implementation_key(12093)) void _Application::PutStandardFont ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12094)) double _Application::GetStandardFontSize ( long lcid );
__declspec(implementation_key(12095)) void _Application::PutStandardFontSize ( long lcid, double RHS );
__declspec(implementation_key(12096)) _bstr_t _Application::GetStartupPath ( long lcid );
__declspec(implementation_key(12097)) _variant_t _Application::GetStatusBar ( long lcid );
__declspec(implementation_key(12098)) void _Application::PutStatusBar ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12099)) _bstr_t _Application::GetTemplatesPath ( long lcid );
__declspec(implementation_key(12100)) VARIANT_BOOL _Application::GetShowToolTips ( );
__declspec(implementation_key(12101)) void _Application::PutShowToolTips ( VARIANT_BOOL RHS );
__declspec(implementation_key(12102)) double _Application::GetTop ( long lcid );
__declspec(implementation_key(12103)) void _Application::PutTop ( long lcid, double RHS );
__declspec(implementation_key(12104)) enum XlFileFormat _Application::GetDefaultSaveFormat ( );
__declspec(implementation_key(12105)) void _Application::PutDefaultSaveFormat ( enum XlFileFormat RHS );
__declspec(implementation_key(12106)) _bstr_t _Application::GetTransitionMenuKey ( long lcid );
__declspec(implementation_key(12107)) void _Application::PutTransitionMenuKey ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12108)) long _Application::GetTransitionMenuKeyAction ( long lcid );
__declspec(implementation_key(12109)) void _Application::PutTransitionMenuKeyAction ( long lcid, long RHS );
__declspec(implementation_key(12110)) VARIANT_BOOL _Application::GetTransitionNavigKeys ( long lcid );
__declspec(implementation_key(12111)) void _Application::PutTransitionNavigKeys ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12112)) HRESULT _Application::Undo ( long lcid );
__declspec(implementation_key(12113)) double _Application::GetUsableHeight ( long lcid );
__declspec(implementation_key(12114)) double _Application::GetUsableWidth ( long lcid );
__declspec(implementation_key(12115)) VARIANT_BOOL _Application::GetUserControl ( );
__declspec(implementation_key(12116)) void _Application::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(12117)) _bstr_t _Application::GetUserName ( long lcid );
__declspec(implementation_key(12118)) void _Application::PutUserName ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12119)) _bstr_t _Application::GetValue ( );
__declspec(implementation_key(12120)) VBE6::VBEPtr _Application::GetVBE ( );
__declspec(implementation_key(12121)) _bstr_t _Application::GetVersion ( long lcid );
__declspec(implementation_key(12122)) VARIANT_BOOL _Application::GetVisible ( long lcid );
__declspec(implementation_key(12123)) void _Application::PutVisible ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12124)) HRESULT _Application::Volatile ( const _variant_t & Volatile, long lcid );
__declspec(implementation_key(12125)) HRESULT _Application::_Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(12126)) double _Application::GetWidth ( long lcid );
__declspec(implementation_key(12127)) void _Application::PutWidth ( long lcid, double RHS );
__declspec(implementation_key(12128)) VARIANT_BOOL _Application::GetWindowsForPens ( long lcid );
__declspec(implementation_key(12129)) enum XlWindowState _Application::GetWindowState ( long lcid );
__declspec(implementation_key(12130)) void _Application::PutWindowState ( long lcid, enum XlWindowState RHS );
__declspec(implementation_key(12131)) long _Application::GetUILanguage ( long lcid );
__declspec(implementation_key(12132)) void _Application::PutUILanguage ( long lcid, long RHS );
__declspec(implementation_key(12133)) long _Application::GetDefaultSheetDirection ( long lcid );
__declspec(implementation_key(12134)) void _Application::PutDefaultSheetDirection ( long lcid, long RHS );
__declspec(implementation_key(12135)) long _Application::GetCursorMovement ( long lcid );
__declspec(implementation_key(12136)) void _Application::PutCursorMovement ( long lcid, long RHS );
__declspec(implementation_key(12137)) VARIANT_BOOL _Application::GetControlCharacters ( long lcid );
__declspec(implementation_key(12138)) void _Application::PutControlCharacters ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12139)) _variant_t _Application::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(12140)) VARIANT_BOOL _Application::GetEnableEvents ( );
__declspec(implementation_key(12141)) void _Application::PutEnableEvents ( VARIANT_BOOL RHS );
__declspec(implementation_key(12142)) VARIANT_BOOL _Application::GetDisplayInfoWindow ( );
__declspec(implementation_key(12143)) void _Application::PutDisplayInfoWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(12144)) VARIANT_BOOL _Application::Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(12145)) VARIANT_BOOL _Application::GetExtendList ( );
__declspec(implementation_key(12146)) void _Application::PutExtendList ( VARIANT_BOOL RHS );
__declspec(implementation_key(12147)) OLEDBErrorsPtr _Application::GetOLEDBErrors ( );
__declspec(implementation_key(12148)) _bstr_t _Application::GetPhonetic ( const _variant_t & Text );
__declspec(implementation_key(12149)) Office::COMAddInsPtr _Application::GetCOMAddIns ( );
__declspec(implementation_key(12150)) DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( );
__declspec(implementation_key(12151)) _bstr_t _Application::GetProductCode ( );
__declspec(implementation_key(12152)) _bstr_t _Application::GetUserLibraryPath ( );
__declspec(implementation_key(12153)) VARIANT_BOOL _Application::GetAutoPercentEntry ( );
__declspec(implementation_key(12154)) void _Application::PutAutoPercentEntry ( VARIANT_BOOL RHS );
__declspec(implementation_key(12155)) Office::LanguageSettingsPtr _Application::GetLanguageSettings ( );
__declspec(implementation_key(12156)) VARIANT_BOOL _Application::GetDummy101 ( );
__declspec(implementation_key(12157)) HRESULT _Application::Dummy12 ( );
__declspec(implementation_key(12158)) Office::AnswerWizardPtr _Application::GetAnswerWizard ( );
__declspec(implementation_key(12159)) HRESULT _Application::CalculateFull ( );
__declspec(implementation_key(12160)) VARIANT_BOOL _Application::FindFile ( long lcid );
__declspec(implementation_key(12161)) long _Application::GetCalculationVersion ( );
__declspec(implementation_key(12162)) VARIANT_BOOL _Application::GetShowWindowsInTaskbar ( );
__declspec(implementation_key(12163)) void _Application::PutShowWindowsInTaskbar ( VARIANT_BOOL RHS );
__declspec(implementation_key(12164)) enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( );
__declspec(implementation_key(12165)) void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall RHS );
__declspec(implementation_key(12166)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(12167)) enum XlCreator _Global::GetCreator ( );
__declspec(implementation_key(12168)) _ApplicationPtr _Global::GetParent ( );
__declspec(implementation_key(12169)) RangePtr _Global::GetActiveCell ( );
__declspec(implementation_key(12170)) _ChartPtr _Global::GetActiveChart ( );
__declspec(implementation_key(12171)) DialogSheetPtr _Global::GetActiveDialog ( );
__declspec(implementation_key(12172)) MenuBarPtr _Global::GetActiveMenuBar ( );
__declspec(implementation_key(12173)) _bstr_t _Global::GetActivePrinter ( long lcid );
__declspec(implementation_key(12174)) void _Global::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12175)) IDispatchPtr _Global::GetActiveSheet ( );
__declspec(implementation_key(12176)) WindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(12177)) _WorkbookPtr _Global::GetActiveWorkbook ( );
__declspec(implementation_key(12178)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(12179)) Office::AssistantPtr _Global::GetAssistant ( );
__declspec(implementation_key(12180)) HRESULT _Global::Calculate ( long lcid );
__declspec(implementation_key(12181)) RangePtr _Global::GetCells ( );
__declspec(implementation_key(12182)) SheetsPtr _Global::GetCharts ( );
__declspec(implementation_key(12183)) RangePtr _Global::GetColumns ( );
__declspec(implementation_key(12184)) Office::_CommandBarsPtr _Global::GetCommandBars ( );
__declspec(implementation_key(12185)) long _Global::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(12186)) HRESULT _Global::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(12187)) long _Global::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(12188)) HRESULT _Global::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(12189)) _variant_t _Global::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(12190)) HRESULT _Global::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(12191)) SheetsPtr _Global::GetDialogSheets ( );
__declspec(implementation_key(12192)) _variant_t _Global::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(12193)) _variant_t _Global::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(12194)) _variant_t _Global::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(12195)) RangePtr _Global::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(12196)) MenuBarsPtr _Global::GetMenuBars ( );
__declspec(implementation_key(12197)) ModulesPtr _Global::GetModules ( );
__declspec(implementation_key(12198)) NamesPtr _Global::GetNames ( );
__declspec(implementation_key(12199)) RangePtr _Global::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(12200)) RangePtr _Global::GetRows ( );
__declspec(implementation_key(12201)) _variant_t _Global::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(12202)) _variant_t _Global::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(12203)) IDispatchPtr _Global::GetSelection ( long lcid );
__declspec(implementation_key(12204)) HRESULT _Global::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(12205)) SheetsPtr _Global::GetSheets ( );
__declspec(implementation_key(12206)) MenuPtr _Global::GetShortcutMenus ( long Index );
__declspec(implementation_key(12207)) _WorkbookPtr _Global::GetThisWorkbook ( long lcid );
__declspec(implementation_key(12208)) ToolbarsPtr _Global::GetToolbars ( );
__declspec(implementation_key(12209)) RangePtr _Global::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(12210)) WindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(12211)) WorkbooksPtr _Global::GetWorkbooks ( );
__declspec(implementation_key(12212)) WorksheetFunctionPtr _Global::GetWorksheetFunction ( );
__declspec(implementation_key(12213)) SheetsPtr _Global::GetWorksheets ( );
__declspec(implementation_key(12214)) SheetsPtr _Global::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(12215)) SheetsPtr _Global::GetExcel4MacroSheets ( );
__declspec(implementation_key(12216)) _ApplicationPtr IOLEObjects::GetApplication ( );
__declspec(implementation_key(12217)) enum XlCreator IOLEObjects::GetCreator ( );
__declspec(implementation_key(12218)) IDispatchPtr IOLEObjects::GetParent ( );
__declspec(implementation_key(12219)) _variant_t IOLEObjects::BringToFront ( );
__declspec(implementation_key(12220)) _variant_t IOLEObjects::Copy ( );
__declspec(implementation_key(12221)) _variant_t IOLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(12222)) _variant_t IOLEObjects::Cut ( );
__declspec(implementation_key(12223)) _variant_t IOLEObjects::Delete ( );
__declspec(implementation_key(12224)) IDispatchPtr IOLEObjects::Duplicate ( );
__declspec(implementation_key(12225)) VARIANT_BOOL IOLEObjects::GetEnabled ( );
__declspec(implementation_key(12226)) void IOLEObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(12227)) double IOLEObjects::GetHeight ( );
__declspec(implementation_key(12228)) void IOLEObjects::PutHeight ( double RHS );
__declspec(implementation_key(12229)) double IOLEObjects::GetLeft ( );
__declspec(implementation_key(12230)) void IOLEObjects::PutLeft ( double RHS );
__declspec(implementation_key(12231)) VARIANT_BOOL IOLEObjects::GetLocked ( );
__declspec(implementation_key(12232)) void IOLEObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(12233)) _bstr_t IOLEObjects::GetOnAction ( );
__declspec(implementation_key(12234)) void IOLEObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(12235)) _variant_t IOLEObjects::GetPlacement ( );
__declspec(implementation_key(12236)) void IOLEObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(12237)) VARIANT_BOOL IOLEObjects::GetPrintObject ( );
__declspec(implementation_key(12238)) void IOLEObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(12239)) _variant_t IOLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(12240)) _variant_t IOLEObjects::SendToBack ( );
__declspec(implementation_key(12241)) double IOLEObjects::GetTop ( );
__declspec(implementation_key(12242)) void IOLEObjects::PutTop ( double RHS );
__declspec(implementation_key(12243)) VARIANT_BOOL IOLEObjects::GetVisible ( );
__declspec(implementation_key(12244)) void IOLEObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(12245)) double IOLEObjects::GetWidth ( );
__declspec(implementation_key(12246)) void IOLEObjects::PutWidth ( double RHS );
__declspec(implementation_key(12247)) long IOLEObjects::GetZOrder ( );
__declspec(implementation_key(12248)) ShapeRangePtr IOLEObjects::GetShapeRange ( );
__declspec(implementation_key(12249)) BorderPtr IOLEObjects::GetBorder ( );
__declspec(implementation_key(12250)) InteriorPtr IOLEObjects::GetInterior ( );
__declspec(implementation_key(12251)) VARIANT_BOOL IOLEObjects::GetShadow ( );
__declspec(implementation_key(12252)) void IOLEObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(12253)) VARIANT_BOOL IOLEObjects::GetAutoLoad ( );
__declspec(implementation_key(12254)) void IOLEObjects::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(12255)) _bstr_t IOLEObjects::GetSourceName ( );
__declspec(implementation_key(12256)) void IOLEObjects::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(12257)) _OLEObjectPtr IOLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(12258)) long IOLEObjects::GetCount ( );
__declspec(implementation_key(12259)) GroupObjectPtr IOLEObjects::Group ( );
__declspec(implementation_key(12260)) IDispatchPtr IOLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(12261)) IUnknownPtr IOLEObjects::_NewEnum ( );
#pragma stop_map_region

} // namespace MSExcel

#pragma pack(pop)
