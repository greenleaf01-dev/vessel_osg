// Created by Microsoft (R) C/C++ Compiler Version 14.00.24215.1 (5ae3e2c5).
//
// f:\hitetouchpro_work\test_cross_1\utility\win32\release\msppt9.tli
//
// Wrapper implementations for Win32 type library ./ImportFile/MSPPT9.OLB
// compiler-generated file created 01/25/18 at 14:37:13 - DO NOT EDIT!


//
// interface Collection wrapper method implementations
//

#pragma implementation_key(1)
inline IUnknownPtr MSPPT::Collection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2)
inline _variant_t MSPPT::Collection::_Index ( int index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(3)
inline long MSPPT::Collection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ColorFormat wrapper method implementations
//

#pragma implementation_key(4)
inline IDispatchPtr MSPPT::ColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(5)
inline long MSPPT::ColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline IDispatchPtr MSPPT::ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(7)
inline Office::MsoRGBType MSPPT::ColorFormat::GetPPTRGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_PPTRGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void MSPPT::ColorFormat::PutPPTRGB ( Office::MsoRGBType PPTRGB ) {
    HRESULT _hr = put_PPTRGB(PPTRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline enum Office::MsoColorType MSPPT::ColorFormat::GetType ( ) {
    enum Office::MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline enum MSPPT::PpColorSchemeIndex MSPPT::ColorFormat::GetSchemeColor ( ) {
    enum PpColorSchemeIndex _result;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline void MSPPT::ColorFormat::PutSchemeColor ( enum PpColorSchemeIndex SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(12)
inline MSPPT::_ApplicationPtr MSPPT::View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(13)
inline IDispatchPtr MSPPT::View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(14)
inline enum MSPPT::PpViewType MSPPT::View::GetType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(15)
inline int MSPPT::View::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline void MSPPT::View::PutZoom ( int Zoom ) {
    HRESULT _hr = put_Zoom(Zoom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(17)
inline HRESULT MSPPT::View::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(18)
inline IDispatchPtr MSPPT::View::GetSlide ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(19)
inline void MSPPT::View::PutSlide ( IDispatch * Slide ) {
    HRESULT _hr = put_Slide(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(20)
inline HRESULT MSPPT::View::GotoSlide ( int index ) {
    HRESULT _hr = raw_GotoSlide(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(21)
inline enum Office::MsoTriState MSPPT::View::GetDisplaySlideMiniature ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplaySlideMiniature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(22)
inline void MSPPT::View::PutDisplaySlideMiniature ( enum Office::MsoTriState DisplaySlideMiniature ) {
    HRESULT _hr = put_DisplaySlideMiniature(DisplaySlideMiniature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline enum Office::MsoTriState MSPPT::View::GetZoomToFit ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ZoomToFit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(24)
inline void MSPPT::View::PutZoomToFit ( enum Office::MsoTriState ZoomToFit ) {
    HRESULT _hr = put_ZoomToFit(ZoomToFit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface NamedSlideShow wrapper method implementations
//

#pragma implementation_key(25)
inline MSPPT::_ApplicationPtr MSPPT::NamedSlideShow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(26)
inline IDispatchPtr MSPPT::NamedSlideShow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(27)
inline _bstr_t MSPPT::NamedSlideShow::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(28)
inline HRESULT MSPPT::NamedSlideShow::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(29)
inline _variant_t MSPPT::NamedSlideShow::GetSlideIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SlideIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(30)
inline long MSPPT::NamedSlideShow::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface NamedSlideShows wrapper method implementations
//

#pragma implementation_key(31)
inline MSPPT::_ApplicationPtr MSPPT::NamedSlideShows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(32)
inline IDispatchPtr MSPPT::NamedSlideShows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(33)
inline MSPPT::NamedSlideShowPtr MSPPT::NamedSlideShows::Item ( const _variant_t & index ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

#pragma implementation_key(34)
inline MSPPT::NamedSlideShowPtr MSPPT::NamedSlideShows::Add ( _bstr_t Name, const _variant_t & safeArrayOfSlideIDs ) {
    struct NamedSlideShow * _result = 0;
    HRESULT _hr = raw_Add(Name, safeArrayOfSlideIDs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowPtr(_result, false);
}

//
// interface PrintRange wrapper method implementations
//

#pragma implementation_key(35)
inline MSPPT::_ApplicationPtr MSPPT::PrintRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(36)
inline IDispatchPtr MSPPT::PrintRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(37)
inline int MSPPT::PrintRange::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline int MSPPT::PrintRange::GetEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(39)
inline HRESULT MSPPT::PrintRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PrintRanges wrapper method implementations
//

#pragma implementation_key(40)
inline MSPPT::PrintRangePtr MSPPT::PrintRanges::Add ( int Start, int End ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Add(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(41)
inline MSPPT::_ApplicationPtr MSPPT::PrintRanges::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(42)
inline HRESULT MSPPT::PrintRanges::ClearAll ( ) {
    HRESULT _hr = raw_ClearAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(43)
inline MSPPT::PrintRangePtr MSPPT::PrintRanges::Item ( int index ) {
    struct PrintRange * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangePtr(_result, false);
}

#pragma implementation_key(44)
inline IDispatchPtr MSPPT::PrintRanges::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface PrintOptions wrapper method implementations
//

#pragma implementation_key(45)
inline MSPPT::_ApplicationPtr MSPPT::PrintOptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(46)
inline enum MSPPT::PpPrintColorType MSPPT::PrintOptions::GetPrintColorType ( ) {
    enum PpPrintColorType _result;
    HRESULT _hr = get_PrintColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline void MSPPT::PrintOptions::PutPrintColorType ( enum PpPrintColorType PrintColorType ) {
    HRESULT _hr = put_PrintColorType(PrintColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(48)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetCollate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Collate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void MSPPT::PrintOptions::PutCollate ( enum Office::MsoTriState Collate ) {
    HRESULT _hr = put_Collate(Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetFitToPage ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FitToPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(51)
inline void MSPPT::PrintOptions::PutFitToPage ( enum Office::MsoTriState FitToPage ) {
    HRESULT _hr = put_FitToPage(FitToPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetFrameSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FrameSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(53)
inline void MSPPT::PrintOptions::PutFrameSlides ( enum Office::MsoTriState FrameSlides ) {
    HRESULT _hr = put_FrameSlides(FrameSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline int MSPPT::PrintOptions::GetNumberOfCopies ( ) {
    int _result = 0;
    HRESULT _hr = get_NumberOfCopies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline void MSPPT::PrintOptions::PutNumberOfCopies ( int NumberOfCopies ) {
    HRESULT _hr = put_NumberOfCopies(NumberOfCopies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(56)
inline enum MSPPT::PpPrintOutputType MSPPT::PrintOptions::GetOutputType ( ) {
    enum PpPrintOutputType _result;
    HRESULT _hr = get_OutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(57)
inline void MSPPT::PrintOptions::PutOutputType ( enum PpPrintOutputType OutputType ) {
    HRESULT _hr = put_OutputType(OutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(58)
inline IDispatchPtr MSPPT::PrintOptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(59)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetPrintHiddenSlides ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintHiddenSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(60)
inline void MSPPT::PrintOptions::PutPrintHiddenSlides ( enum Office::MsoTriState PrintHiddenSlides ) {
    HRESULT _hr = put_PrintHiddenSlides(PrintHiddenSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(61)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetPrintInBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintInBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline void MSPPT::PrintOptions::PutPrintInBackground ( enum Office::MsoTriState PrintInBackground ) {
    HRESULT _hr = put_PrintInBackground(PrintInBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(63)
inline enum MSPPT::PpPrintRangeType MSPPT::PrintOptions::GetRangeType ( ) {
    enum PpPrintRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(64)
inline void MSPPT::PrintOptions::PutRangeType ( enum PpPrintRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(65)
inline MSPPT::PrintRangesPtr MSPPT::PrintOptions::GetRanges ( ) {
    struct PrintRanges * _result = 0;
    HRESULT _hr = get_Ranges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintRangesPtr(_result, false);
}

#pragma implementation_key(66)
inline enum Office::MsoTriState MSPPT::PrintOptions::GetPrintFontsAsGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PrintFontsAsGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(67)
inline void MSPPT::PrintOptions::PutPrintFontsAsGraphics ( enum Office::MsoTriState PrintFontsAsGraphics ) {
    HRESULT _hr = put_PrintFontsAsGraphics(PrintFontsAsGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(68)
inline _bstr_t MSPPT::PrintOptions::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void MSPPT::PrintOptions::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline _bstr_t MSPPT::PrintOptions::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(71)
inline void MSPPT::PrintOptions::PutActivePrinter ( _bstr_t ActivePrinter ) {
    HRESULT _hr = put_ActivePrinter(ActivePrinter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline enum MSPPT::PpPrintHandoutOrder MSPPT::PrintOptions::GetHandoutOrder ( ) {
    enum PpPrintHandoutOrder _result;
    HRESULT _hr = get_HandoutOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void MSPPT::PrintOptions::PutHandoutOrder ( enum PpPrintHandoutOrder HandoutOrder ) {
    HRESULT _hr = put_HandoutOrder(HandoutOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AddIn wrapper method implementations
//

#pragma implementation_key(74)
inline MSPPT::_ApplicationPtr MSPPT::AddIn::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(75)
inline IDispatchPtr MSPPT::AddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(76)
inline _bstr_t MSPPT::AddIn::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline _bstr_t MSPPT::AddIn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(78)
inline _bstr_t MSPPT::AddIn::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(79)
inline enum Office::MsoTriState MSPPT::AddIn::GetRegistered ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Registered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(80)
inline void MSPPT::AddIn::PutRegistered ( enum Office::MsoTriState Registered ) {
    HRESULT _hr = put_Registered(Registered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(81)
inline enum Office::MsoTriState MSPPT::AddIn::GetAutoLoad ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLoad(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline void MSPPT::AddIn::PutAutoLoad ( enum Office::MsoTriState AutoLoad ) {
    HRESULT _hr = put_AutoLoad(AutoLoad);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline enum Office::MsoTriState MSPPT::AddIn::GetLoaded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Loaded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline void MSPPT::AddIn::PutLoaded ( enum Office::MsoTriState Loaded ) {
    HRESULT _hr = put_Loaded(Loaded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(85)
inline enum Office::MsoTriState MSPPT::AddIn::GetDisplayAlerts ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(86)
inline void MSPPT::AddIn::PutDisplayAlerts ( enum Office::MsoTriState DisplayAlerts ) {
    HRESULT _hr = put_DisplayAlerts(DisplayAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(87)
inline enum Office::MsoTriState MSPPT::AddIn::GetRegisteredInHKLM ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RegisteredInHKLM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface AddIns wrapper method implementations
//

#pragma implementation_key(88)
inline MSPPT::_ApplicationPtr MSPPT::AddIns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(89)
inline IDispatchPtr MSPPT::AddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(90)
inline MSPPT::AddInPtr MSPPT::AddIns::Item ( VARIANT * index ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(91)
inline MSPPT::AddInPtr MSPPT::AddIns::Add ( _bstr_t FileName ) {
    struct AddIn * _result = 0;
    HRESULT _hr = raw_Add(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInPtr(_result, false);
}

#pragma implementation_key(92)
inline HRESULT MSPPT::AddIns::Remove ( VARIANT * index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Presentations wrapper method implementations
//

#pragma implementation_key(93)
inline MSPPT::_ApplicationPtr MSPPT::Presentations::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(94)
inline IDispatchPtr MSPPT::Presentations::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(95)
inline MSPPT::_PresentationPtr MSPPT::Presentations::Item ( const _variant_t & index ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(96)
inline MSPPT::_PresentationPtr MSPPT::Presentations::Add ( enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Add(WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(97)
inline MSPPT::_PresentationPtr MSPPT::Presentations::Open ( _bstr_t FileName, enum Office::MsoTriState ReadOnly, enum Office::MsoTriState Untitled, enum Office::MsoTriState WithWindow ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = raw_Open(FileName, ReadOnly, Untitled, WithWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

//
// interface Hyperlink wrapper method implementations
//

#pragma implementation_key(98)
inline MSPPT::_ApplicationPtr MSPPT::Hyperlink::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(99)
inline IDispatchPtr MSPPT::Hyperlink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(100)
inline enum Office::MsoHyperlinkType MSPPT::Hyperlink::GetType ( ) {
    enum Office::MsoHyperlinkType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline _bstr_t MSPPT::Hyperlink::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(102)
inline void MSPPT::Hyperlink::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline _bstr_t MSPPT::Hyperlink::GetSubAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SubAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(104)
inline void MSPPT::Hyperlink::PutSubAddress ( _bstr_t SubAddress ) {
    HRESULT _hr = put_SubAddress(SubAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline HRESULT MSPPT::Hyperlink::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(106)
inline _bstr_t MSPPT::Hyperlink::GetEmailSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EmailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(107)
inline void MSPPT::Hyperlink::PutEmailSubject ( _bstr_t EmailSubject ) {
    HRESULT _hr = put_EmailSubject(EmailSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline _bstr_t MSPPT::Hyperlink::GetScreenTip ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScreenTip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(109)
inline void MSPPT::Hyperlink::PutScreenTip ( _bstr_t ScreenTip ) {
    HRESULT _hr = put_ScreenTip(ScreenTip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline _bstr_t MSPPT::Hyperlink::GetTextToDisplay ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextToDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(111)
inline void MSPPT::Hyperlink::PutTextToDisplay ( _bstr_t TextToDisplay ) {
    HRESULT _hr = put_TextToDisplay(TextToDisplay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline enum Office::MsoTriState MSPPT::Hyperlink::GetShowandReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowandReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void MSPPT::Hyperlink::PutShowandReturn ( enum Office::MsoTriState ShowandReturn ) {
    HRESULT _hr = put_ShowandReturn(ShowandReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline HRESULT MSPPT::Hyperlink::Follow ( ) {
    HRESULT _hr = raw_Follow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(115)
inline HRESULT MSPPT::Hyperlink::CreateNewDocument ( _bstr_t FileName, enum Office::MsoTriState EditNow, enum Office::MsoTriState Overwrite ) {
    HRESULT _hr = raw_CreateNewDocument(FileName, EditNow, Overwrite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(116)
inline HRESULT MSPPT::Hyperlink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Hyperlinks wrapper method implementations
//

#pragma implementation_key(117)
inline MSPPT::_ApplicationPtr MSPPT::Hyperlinks::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(118)
inline IDispatchPtr MSPPT::Hyperlinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(119)
inline MSPPT::HyperlinkPtr MSPPT::Hyperlinks::Item ( int index ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

//
// interface PageSetup wrapper method implementations
//

#pragma implementation_key(120)
inline MSPPT::_ApplicationPtr MSPPT::PageSetup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(121)
inline IDispatchPtr MSPPT::PageSetup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(122)
inline int MSPPT::PageSetup::GetFirstSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline void MSPPT::PageSetup::PutFirstSlideNumber ( int FirstSlideNumber ) {
    HRESULT _hr = put_FirstSlideNumber(FirstSlideNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline float MSPPT::PageSetup::GetSlideHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void MSPPT::PageSetup::PutSlideHeight ( float SlideHeight ) {
    HRESULT _hr = put_SlideHeight(SlideHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(126)
inline float MSPPT::PageSetup::GetSlideWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline void MSPPT::PageSetup::PutSlideWidth ( float SlideWidth ) {
    HRESULT _hr = put_SlideWidth(SlideWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(128)
inline enum MSPPT::PpSlideSizeType MSPPT::PageSetup::GetSlideSize ( ) {
    enum PpSlideSizeType _result;
    HRESULT _hr = get_SlideSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(129)
inline void MSPPT::PageSetup::PutSlideSize ( enum PpSlideSizeType SlideSize ) {
    HRESULT _hr = put_SlideSize(SlideSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(130)
inline enum Office::MsoOrientation MSPPT::PageSetup::GetNotesOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_NotesOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(131)
inline void MSPPT::PageSetup::PutNotesOrientation ( enum Office::MsoOrientation NotesOrientation ) {
    HRESULT _hr = put_NotesOrientation(NotesOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(132)
inline enum Office::MsoOrientation MSPPT::PageSetup::GetSlideOrientation ( ) {
    enum Office::MsoOrientation _result;
    HRESULT _hr = get_SlideOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(133)
inline void MSPPT::PageSetup::PutSlideOrientation ( enum Office::MsoOrientation SlideOrientation ) {
    HRESULT _hr = put_SlideOrientation(SlideOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ExtraColors wrapper method implementations
//

#pragma implementation_key(134)
inline MSPPT::_ApplicationPtr MSPPT::ExtraColors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(135)
inline IDispatchPtr MSPPT::ExtraColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(136)
inline Office::MsoRGBType MSPPT::ExtraColors::Item ( int index ) {
    Office::MsoRGBType _result;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline HRESULT MSPPT::ExtraColors::Add ( Office::MsoRGBType Type ) {
    HRESULT _hr = raw_Add(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface RGBColor wrapper method implementations
//

#pragma implementation_key(138)
inline MSPPT::_ApplicationPtr MSPPT::RGBColor::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(139)
inline IDispatchPtr MSPPT::RGBColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(140)
inline Office::MsoRGBType MSPPT::RGBColor::GetPPTRGB ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_PPTRGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline void MSPPT::RGBColor::PutPPTRGB ( Office::MsoRGBType PPTRGB ) {
    HRESULT _hr = put_PPTRGB(PPTRGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorScheme wrapper method implementations
//

#pragma implementation_key(142)
inline MSPPT::_ApplicationPtr MSPPT::ColorScheme::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(143)
inline IDispatchPtr MSPPT::ColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(144)
inline MSPPT::RGBColorPtr MSPPT::ColorScheme::Colors ( enum PpColorSchemeIndex SchemeColor ) {
    struct RGBColor * _result = 0;
    HRESULT _hr = raw_Colors(SchemeColor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RGBColorPtr(_result, false);
}

#pragma implementation_key(145)
inline HRESULT MSPPT::ColorScheme::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ColorSchemes wrapper method implementations
//

#pragma implementation_key(146)
inline MSPPT::_ApplicationPtr MSPPT::ColorSchemes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(147)
inline IDispatchPtr MSPPT::ColorSchemes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(148)
inline MSPPT::ColorSchemePtr MSPPT::ColorSchemes::Item ( int index ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(149)
inline MSPPT::ColorSchemePtr MSPPT::ColorSchemes::Add ( struct ColorScheme * Scheme ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = raw_Add(Scheme, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

//
// interface SoundEffect wrapper method implementations
//

#pragma implementation_key(150)
inline MSPPT::_ApplicationPtr MSPPT::SoundEffect::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(151)
inline IDispatchPtr MSPPT::SoundEffect::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(152)
inline _bstr_t MSPPT::SoundEffect::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(153)
inline void MSPPT::SoundEffect::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(154)
inline enum MSPPT::PpSoundEffectType MSPPT::SoundEffect::GetType ( ) {
    enum PpSoundEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline void MSPPT::SoundEffect::PutType ( enum PpSoundEffectType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(156)
inline HRESULT MSPPT::SoundEffect::ImportFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ImportFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(157)
inline HRESULT MSPPT::SoundEffect::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowTransition wrapper method implementations
//

#pragma implementation_key(158)
inline MSPPT::_ApplicationPtr MSPPT::SlideShowTransition::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(159)
inline IDispatchPtr MSPPT::SlideShowTransition::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(160)
inline enum Office::MsoTriState MSPPT::SlideShowTransition::GetAdvanceOnClick ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(161)
inline void MSPPT::SlideShowTransition::PutAdvanceOnClick ( enum Office::MsoTriState AdvanceOnClick ) {
    HRESULT _hr = put_AdvanceOnClick(AdvanceOnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(162)
inline enum Office::MsoTriState MSPPT::SlideShowTransition::GetAdvanceOnTime ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AdvanceOnTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline void MSPPT::SlideShowTransition::PutAdvanceOnTime ( enum Office::MsoTriState AdvanceOnTime ) {
    HRESULT _hr = put_AdvanceOnTime(AdvanceOnTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(164)
inline float MSPPT::SlideShowTransition::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void MSPPT::SlideShowTransition::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline enum MSPPT::PpEntryEffect MSPPT::SlideShowTransition::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void MSPPT::SlideShowTransition::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline enum Office::MsoTriState MSPPT::SlideShowTransition::GetHidden ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void MSPPT::SlideShowTransition::PutHidden ( enum Office::MsoTriState Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline enum Office::MsoTriState MSPPT::SlideShowTransition::GetLoopSoundUntilNext ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopSoundUntilNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(171)
inline void MSPPT::SlideShowTransition::PutLoopSoundUntilNext ( enum Office::MsoTriState LoopSoundUntilNext ) {
    HRESULT _hr = put_LoopSoundUntilNext(LoopSoundUntilNext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline MSPPT::SoundEffectPtr MSPPT::SlideShowTransition::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(173)
inline enum MSPPT::PpTransitionSpeed MSPPT::SlideShowTransition::GetSpeed ( ) {
    enum PpTransitionSpeed _result;
    HRESULT _hr = get_Speed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(174)
inline void MSPPT::SlideShowTransition::PutSpeed ( enum PpTransitionSpeed Speed ) {
    HRESULT _hr = put_Speed(Speed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SoundFormat wrapper method implementations
//

#pragma implementation_key(175)
inline HRESULT MSPPT::SoundFormat::Play ( ) {
    HRESULT _hr = raw_Play();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline HRESULT MSPPT::SoundFormat::Import ( _bstr_t FileName ) {
    HRESULT _hr = raw_Import(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(177)
inline enum MSPPT::PpSoundFormatType MSPPT::SoundFormat::Export ( _bstr_t FileName ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = raw_Export(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(178)
inline enum MSPPT::PpSoundFormatType MSPPT::SoundFormat::GetType ( ) {
    enum PpSoundFormatType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline _bstr_t MSPPT::SoundFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PlaceholderFormat wrapper method implementations
//

#pragma implementation_key(180)
inline MSPPT::_ApplicationPtr MSPPT::PlaceholderFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(181)
inline IDispatchPtr MSPPT::PlaceholderFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(182)
inline enum MSPPT::PpPlaceholderType MSPPT::PlaceholderFormat::GetType ( ) {
    enum PpPlaceholderType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

#pragma implementation_key(183)
inline IDispatchPtr MSPPT::Adjustments::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(184)
inline long MSPPT::Adjustments::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(185)
inline IDispatchPtr MSPPT::Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(186)
inline int MSPPT::Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline float MSPPT::Adjustments::GetItem ( int index ) {
    float _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(188)
inline void MSPPT::Adjustments::PutItem ( int index, float Val ) {
    HRESULT _hr = put_Item(index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

#pragma implementation_key(189)
inline IDispatchPtr MSPPT::PictureFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(190)
inline long MSPPT::PictureFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(191)
inline IDispatchPtr MSPPT::PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(192)
inline HRESULT MSPPT::PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(193)
inline HRESULT MSPPT::PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline float MSPPT::PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline void MSPPT::PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(196)
inline enum Office::MsoPictureColorType MSPPT::PictureFormat::GetColorType ( ) {
    enum Office::MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void MSPPT::PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline float MSPPT::PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void MSPPT::PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline float MSPPT::PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline void MSPPT::PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(202)
inline float MSPPT::PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void MSPPT::PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline float MSPPT::PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline void MSPPT::PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline float MSPPT::PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void MSPPT::PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(208)
inline Office::MsoRGBType MSPPT::PictureFormat::GetTransparencyColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline void MSPPT::PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline enum Office::MsoTriState MSPPT::PictureFormat::GetTransparentBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void MSPPT::PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FillFormat wrapper method implementations
//

#pragma implementation_key(212)
inline IDispatchPtr MSPPT::FillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(213)
inline long MSPPT::FillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline IDispatchPtr MSPPT::FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(215)
inline HRESULT MSPPT::FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(216)
inline HRESULT MSPPT::FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(217)
inline HRESULT MSPPT::FillFormat::Patterned ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(218)
inline HRESULT MSPPT::FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(219)
inline HRESULT MSPPT::FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(220)
inline HRESULT MSPPT::FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline HRESULT MSPPT::FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(222)
inline HRESULT MSPPT::FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(223)
inline HRESULT MSPPT::FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline MSPPT::ColorFormatPtr MSPPT::FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(225)
inline void MSPPT::FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(226)
inline MSPPT::ColorFormatPtr MSPPT::FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(227)
inline void MSPPT::FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(228)
inline enum Office::MsoGradientColorType MSPPT::FillFormat::GetGradientColorType ( ) {
    enum Office::MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(229)
inline float MSPPT::FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(230)
inline enum Office::MsoGradientStyle MSPPT::FillFormat::GetGradientStyle ( ) {
    enum Office::MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline int MSPPT::FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(232)
inline enum Office::MsoPatternType MSPPT::FillFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline enum Office::MsoPresetGradientType MSPPT::FillFormat::GetPresetGradientType ( ) {
    enum Office::MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(234)
inline enum Office::MsoPresetTexture MSPPT::FillFormat::GetPresetTexture ( ) {
    enum Office::MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline _bstr_t MSPPT::FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(236)
inline enum Office::MsoTextureType MSPPT::FillFormat::GetTextureType ( ) {
    enum Office::MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline float MSPPT::FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline void MSPPT::FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(239)
inline enum Office::MsoFillType MSPPT::FillFormat::GetType ( ) {
    enum Office::MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline enum Office::MsoTriState MSPPT::FillFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(241)
inline void MSPPT::FillFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

#pragma implementation_key(242)
inline IDispatchPtr MSPPT::LineFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(243)
inline long MSPPT::LineFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(244)
inline IDispatchPtr MSPPT::LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(245)
inline MSPPT::ColorFormatPtr MSPPT::LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(246)
inline void MSPPT::LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(247)
inline enum Office::MsoArrowheadLength MSPPT::LineFormat::GetBeginArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(248)
inline void MSPPT::LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(249)
inline enum Office::MsoArrowheadStyle MSPPT::LineFormat::GetBeginArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(250)
inline void MSPPT::LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(251)
inline enum Office::MsoArrowheadWidth MSPPT::LineFormat::GetBeginArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(252)
inline void MSPPT::LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(253)
inline enum Office::MsoLineDashStyle MSPPT::LineFormat::GetDashStyle ( ) {
    enum Office::MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(254)
inline void MSPPT::LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(255)
inline enum Office::MsoArrowheadLength MSPPT::LineFormat::GetEndArrowheadLength ( ) {
    enum Office::MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(256)
inline void MSPPT::LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(257)
inline enum Office::MsoArrowheadStyle MSPPT::LineFormat::GetEndArrowheadStyle ( ) {
    enum Office::MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline void MSPPT::LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(259)
inline enum Office::MsoArrowheadWidth MSPPT::LineFormat::GetEndArrowheadWidth ( ) {
    enum Office::MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(260)
inline void MSPPT::LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(261)
inline MSPPT::ColorFormatPtr MSPPT::LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(262)
inline void MSPPT::LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(263)
inline enum Office::MsoPatternType MSPPT::LineFormat::GetPattern ( ) {
    enum Office::MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline void MSPPT::LineFormat::PutPattern ( enum Office::MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(265)
inline enum Office::MsoLineStyle MSPPT::LineFormat::GetStyle ( ) {
    enum Office::MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline void MSPPT::LineFormat::PutStyle ( enum Office::MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(267)
inline float MSPPT::LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline void MSPPT::LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline enum Office::MsoTriState MSPPT::LineFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void MSPPT::LineFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline float MSPPT::LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void MSPPT::LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShadowFormat wrapper method implementations
//

#pragma implementation_key(273)
inline IDispatchPtr MSPPT::ShadowFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(274)
inline long MSPPT::ShadowFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(275)
inline IDispatchPtr MSPPT::ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(276)
inline HRESULT MSPPT::ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(277)
inline HRESULT MSPPT::ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(278)
inline MSPPT::ColorFormatPtr MSPPT::ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(279)
inline void MSPPT::ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline enum Office::MsoTriState MSPPT::ShadowFormat::GetObscured ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(281)
inline void MSPPT::ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline float MSPPT::ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(283)
inline void MSPPT::ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(284)
inline float MSPPT::ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline void MSPPT::ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(286)
inline float MSPPT::ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline void MSPPT::ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(288)
inline enum Office::MsoShadowType MSPPT::ShadowFormat::GetType ( ) {
    enum Office::MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline void MSPPT::ShadowFormat::PutType ( enum Office::MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(290)
inline enum Office::MsoTriState MSPPT::ShadowFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline void MSPPT::ShadowFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextEffectFormat wrapper method implementations
//

#pragma implementation_key(292)
inline IDispatchPtr MSPPT::TextEffectFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(293)
inline long MSPPT::TextEffectFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline IDispatchPtr MSPPT::TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(295)
inline HRESULT MSPPT::TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(296)
inline enum Office::MsoTextEffectAlignment MSPPT::TextEffectFormat::GetAlignment ( ) {
    enum Office::MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(297)
inline void MSPPT::TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(298)
inline enum Office::MsoTriState MSPPT::TextEffectFormat::GetFontBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(299)
inline void MSPPT::TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(300)
inline enum Office::MsoTriState MSPPT::TextEffectFormat::GetFontItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline void MSPPT::TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(302)
inline _bstr_t MSPPT::TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(303)
inline void MSPPT::TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(304)
inline float MSPPT::TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(305)
inline void MSPPT::TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(306)
inline enum Office::MsoTriState MSPPT::TextEffectFormat::GetKernedPairs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(307)
inline void MSPPT::TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(308)
inline enum Office::MsoTriState MSPPT::TextEffectFormat::GetNormalizedHeight ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(309)
inline void MSPPT::TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(310)
inline enum Office::MsoPresetTextEffectShape MSPPT::TextEffectFormat::GetPresetShape ( ) {
    enum Office::MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(311)
inline void MSPPT::TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(312)
inline enum Office::MsoPresetTextEffect MSPPT::TextEffectFormat::GetPresetTextEffect ( ) {
    enum Office::MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline void MSPPT::TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(314)
inline enum Office::MsoTriState MSPPT::TextEffectFormat::GetRotatedChars ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(315)
inline void MSPPT::TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(316)
inline _bstr_t MSPPT::TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(317)
inline void MSPPT::TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(318)
inline float MSPPT::TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(319)
inline void MSPPT::TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

#pragma implementation_key(320)
inline IDispatchPtr MSPPT::ThreeDFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(321)
inline long MSPPT::ThreeDFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline IDispatchPtr MSPPT::ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(323)
inline HRESULT MSPPT::ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(324)
inline HRESULT MSPPT::ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(325)
inline HRESULT MSPPT::ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(326)
inline HRESULT MSPPT::ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(327)
inline HRESULT MSPPT::ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(328)
inline float MSPPT::ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(329)
inline void MSPPT::ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(330)
inline MSPPT::ColorFormatPtr MSPPT::ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(331)
inline enum Office::MsoExtrusionColorType MSPPT::ThreeDFormat::GetExtrusionColorType ( ) {
    enum Office::MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void MSPPT::ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline enum Office::MsoTriState MSPPT::ThreeDFormat::GetPerspective ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(334)
inline void MSPPT::ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline enum Office::MsoPresetExtrusionDirection MSPPT::ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum Office::MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline enum Office::MsoPresetLightingDirection MSPPT::ThreeDFormat::GetPresetLightingDirection ( ) {
    enum Office::MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline void MSPPT::ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(338)
inline enum Office::MsoPresetLightingSoftness MSPPT::ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum Office::MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline void MSPPT::ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(340)
inline enum Office::MsoPresetMaterial MSPPT::ThreeDFormat::GetPresetMaterial ( ) {
    enum Office::MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline void MSPPT::ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(342)
inline enum Office::MsoPresetThreeDFormat MSPPT::ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum Office::MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline float MSPPT::ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline void MSPPT::ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline float MSPPT::ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline void MSPPT::ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline enum Office::MsoTriState MSPPT::ThreeDFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline void MSPPT::ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

#pragma implementation_key(349)
inline IDispatchPtr MSPPT::CalloutFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(350)
inline long MSPPT::CalloutFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline IDispatchPtr MSPPT::CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(352)
inline HRESULT MSPPT::CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(353)
inline HRESULT MSPPT::CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(354)
inline HRESULT MSPPT::CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(355)
inline HRESULT MSPPT::CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(356)
inline enum Office::MsoTriState MSPPT::CalloutFormat::GetAccent ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void MSPPT::CalloutFormat::PutAccent ( enum Office::MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(358)
inline enum Office::MsoCalloutAngleType MSPPT::CalloutFormat::GetAngle ( ) {
    enum Office::MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(359)
inline void MSPPT::CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(360)
inline enum Office::MsoTriState MSPPT::CalloutFormat::GetAutoAttach ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(361)
inline void MSPPT::CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(362)
inline enum Office::MsoTriState MSPPT::CalloutFormat::GetAutoLength ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(363)
inline enum Office::MsoTriState MSPPT::CalloutFormat::GetBorder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(364)
inline void MSPPT::CalloutFormat::PutBorder ( enum Office::MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline float MSPPT::CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline enum Office::MsoCalloutDropType MSPPT::CalloutFormat::GetDropType ( ) {
    enum Office::MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(367)
inline float MSPPT::CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline void MSPPT::CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(369)
inline float MSPPT::CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(370)
inline enum Office::MsoCalloutType MSPPT::CalloutFormat::GetType ( ) {
    enum Office::MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline void MSPPT::CalloutFormat::PutType ( enum Office::MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

#pragma implementation_key(372)
inline IDispatchPtr MSPPT::ShapeNode::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(373)
inline long MSPPT::ShapeNode::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline IDispatchPtr MSPPT::ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(375)
inline enum Office::MsoEditingType MSPPT::ShapeNode::GetEditingType ( ) {
    enum Office::MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline _variant_t MSPPT::ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(377)
inline enum Office::MsoSegmentType MSPPT::ShapeNode::GetSegmentType ( ) {
    enum Office::MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

#pragma implementation_key(378)
inline IDispatchPtr MSPPT::ShapeNodes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(379)
inline long MSPPT::ShapeNodes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline IDispatchPtr MSPPT::ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(381)
inline int MSPPT::ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline MSPPT::ShapeNodePtr MSPPT::ShapeNodes::Item ( const _variant_t & index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

#pragma implementation_key(383)
inline IUnknownPtr MSPPT::ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(384)
inline HRESULT MSPPT::ShapeNodes::Delete ( int index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(385)
inline HRESULT MSPPT::ShapeNodes::Insert ( int index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(386)
inline HRESULT MSPPT::ShapeNodes::SetEditingType ( int index, enum Office::MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(387)
inline HRESULT MSPPT::ShapeNodes::SetPosition ( int index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(388)
inline HRESULT MSPPT::ShapeNodes::SetSegmentType ( int index, enum Office::MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LinkFormat wrapper method implementations
//

#pragma implementation_key(389)
inline MSPPT::_ApplicationPtr MSPPT::LinkFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(390)
inline IDispatchPtr MSPPT::LinkFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(391)
inline _bstr_t MSPPT::LinkFormat::GetSourceFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(392)
inline void MSPPT::LinkFormat::PutSourceFullName ( _bstr_t SourceFullName ) {
    HRESULT _hr = put_SourceFullName(SourceFullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline enum MSPPT::PpUpdateOption MSPPT::LinkFormat::GetAutoUpdate ( ) {
    enum PpUpdateOption _result;
    HRESULT _hr = get_AutoUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline void MSPPT::LinkFormat::PutAutoUpdate ( enum PpUpdateOption AutoUpdate ) {
    HRESULT _hr = put_AutoUpdate(AutoUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(395)
inline HRESULT MSPPT::LinkFormat::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ObjectVerbs wrapper method implementations
//

#pragma implementation_key(396)
inline MSPPT::_ApplicationPtr MSPPT::ObjectVerbs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(397)
inline IDispatchPtr MSPPT::ObjectVerbs::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(398)
inline _bstr_t MSPPT::ObjectVerbs::Item ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface OLEFormat wrapper method implementations
//

#pragma implementation_key(399)
inline MSPPT::_ApplicationPtr MSPPT::OLEFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(400)
inline IDispatchPtr MSPPT::OLEFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(401)
inline MSPPT::ObjectVerbsPtr MSPPT::OLEFormat::GetObjectVerbs ( ) {
    struct ObjectVerbs * _result = 0;
    HRESULT _hr = get_ObjectVerbs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ObjectVerbsPtr(_result, false);
}

#pragma implementation_key(402)
inline IDispatchPtr MSPPT::OLEFormat::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(403)
inline _bstr_t MSPPT::OLEFormat::GetProgID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(404)
inline enum MSPPT::PpFollowColors MSPPT::OLEFormat::GetFollowColors ( ) {
    enum PpFollowColors _result;
    HRESULT _hr = get_FollowColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline void MSPPT::OLEFormat::PutFollowColors ( enum PpFollowColors FollowColors ) {
    HRESULT _hr = put_FollowColors(FollowColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline HRESULT MSPPT::OLEFormat::DoVerb ( int index ) {
    HRESULT _hr = raw_DoVerb(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(407)
inline HRESULT MSPPT::OLEFormat::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ActionSetting wrapper method implementations
//

#pragma implementation_key(408)
inline MSPPT::_ApplicationPtr MSPPT::ActionSetting::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(409)
inline IDispatchPtr MSPPT::ActionSetting::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(410)
inline enum MSPPT::PpActionType MSPPT::ActionSetting::GetAction ( ) {
    enum PpActionType _result;
    HRESULT _hr = get_Action(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void MSPPT::ActionSetting::PutAction ( enum PpActionType Action ) {
    HRESULT _hr = put_Action(Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline _bstr_t MSPPT::ActionSetting::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(413)
inline void MSPPT::ActionSetting::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline enum Office::MsoTriState MSPPT::ActionSetting::GetAnimateAction ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void MSPPT::ActionSetting::PutAnimateAction ( enum Office::MsoTriState AnimateAction ) {
    HRESULT _hr = put_AnimateAction(AnimateAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline _bstr_t MSPPT::ActionSetting::GetRun ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(417)
inline void MSPPT::ActionSetting::PutRun ( _bstr_t Run ) {
    HRESULT _hr = put_Run(Run);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(418)
inline _bstr_t MSPPT::ActionSetting::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(419)
inline void MSPPT::ActionSetting::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(420)
inline MSPPT::HyperlinkPtr MSPPT::ActionSetting::GetHyperlink ( ) {
    struct Hyperlink * _result = 0;
    HRESULT _hr = get_Hyperlink(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinkPtr(_result, false);
}

#pragma implementation_key(421)
inline MSPPT::SoundEffectPtr MSPPT::ActionSetting::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(422)
inline enum Office::MsoTriState MSPPT::ActionSetting::GetShowandReturn ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowandReturn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(423)
inline void MSPPT::ActionSetting::PutShowandReturn ( enum Office::MsoTriState ShowandReturn ) {
    HRESULT _hr = put_ShowandReturn(ShowandReturn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ActionSettings wrapper method implementations
//

#pragma implementation_key(424)
inline MSPPT::_ApplicationPtr MSPPT::ActionSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(425)
inline IDispatchPtr MSPPT::ActionSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(426)
inline MSPPT::ActionSettingPtr MSPPT::ActionSettings::Item ( enum PpMouseActivation index ) {
    struct ActionSetting * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingPtr(_result, false);
}

//
// interface PlaySettings wrapper method implementations
//

#pragma implementation_key(427)
inline MSPPT::_ApplicationPtr MSPPT::PlaySettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(428)
inline IDispatchPtr MSPPT::PlaySettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(429)
inline _bstr_t MSPPT::PlaySettings::GetActionVerb ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionVerb(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(430)
inline void MSPPT::PlaySettings::PutActionVerb ( _bstr_t ActionVerb ) {
    HRESULT _hr = put_ActionVerb(ActionVerb);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(431)
inline enum Office::MsoTriState MSPPT::PlaySettings::GetHideWhileNotPlaying ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HideWhileNotPlaying(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(432)
inline void MSPPT::PlaySettings::PutHideWhileNotPlaying ( enum Office::MsoTriState HideWhileNotPlaying ) {
    HRESULT _hr = put_HideWhileNotPlaying(HideWhileNotPlaying);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(433)
inline enum Office::MsoTriState MSPPT::PlaySettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(434)
inline void MSPPT::PlaySettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(435)
inline enum Office::MsoTriState MSPPT::PlaySettings::GetPlayOnEntry ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PlayOnEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(436)
inline void MSPPT::PlaySettings::PutPlayOnEntry ( enum Office::MsoTriState PlayOnEntry ) {
    HRESULT _hr = put_PlayOnEntry(PlayOnEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(437)
inline enum Office::MsoTriState MSPPT::PlaySettings::GetRewindMovie ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RewindMovie(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void MSPPT::PlaySettings::PutRewindMovie ( enum Office::MsoTriState RewindMovie ) {
    HRESULT _hr = put_RewindMovie(RewindMovie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline enum Office::MsoTriState MSPPT::PlaySettings::GetPauseAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_PauseAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline void MSPPT::PlaySettings::PutPauseAnimation ( enum Office::MsoTriState PauseAnimation ) {
    HRESULT _hr = put_PauseAnimation(PauseAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline int MSPPT::PlaySettings::GetStopAfterSlides ( ) {
    int _result = 0;
    HRESULT _hr = get_StopAfterSlides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline void MSPPT::PlaySettings::PutStopAfterSlides ( int StopAfterSlides ) {
    HRESULT _hr = put_StopAfterSlides(StopAfterSlides);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface AnimationSettings wrapper method implementations
//

#pragma implementation_key(443)
inline MSPPT::_ApplicationPtr MSPPT::AnimationSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(444)
inline IDispatchPtr MSPPT::AnimationSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(445)
inline MSPPT::ColorFormatPtr MSPPT::AnimationSettings::GetDimColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_DimColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(446)
inline MSPPT::SoundEffectPtr MSPPT::AnimationSettings::GetSoundEffect ( ) {
    struct SoundEffect * _result = 0;
    HRESULT _hr = get_SoundEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundEffectPtr(_result, false);
}

#pragma implementation_key(447)
inline enum MSPPT::PpEntryEffect MSPPT::AnimationSettings::GetEntryEffect ( ) {
    enum PpEntryEffect _result;
    HRESULT _hr = get_EntryEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(448)
inline void MSPPT::AnimationSettings::PutEntryEffect ( enum PpEntryEffect EntryEffect ) {
    HRESULT _hr = put_EntryEffect(EntryEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(449)
inline enum MSPPT::PpAfterEffect MSPPT::AnimationSettings::GetAfterEffect ( ) {
    enum PpAfterEffect _result;
    HRESULT _hr = get_AfterEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(450)
inline void MSPPT::AnimationSettings::PutAfterEffect ( enum PpAfterEffect AfterEffect ) {
    HRESULT _hr = put_AfterEffect(AfterEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(451)
inline int MSPPT::AnimationSettings::GetAnimationOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(452)
inline void MSPPT::AnimationSettings::PutAnimationOrder ( int AnimationOrder ) {
    HRESULT _hr = put_AnimationOrder(AnimationOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(453)
inline enum MSPPT::PpAdvanceMode MSPPT::AnimationSettings::GetAdvanceMode ( ) {
    enum PpAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(454)
inline void MSPPT::AnimationSettings::PutAdvanceMode ( enum PpAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline float MSPPT::AnimationSettings::GetAdvanceTime ( ) {
    float _result = 0;
    HRESULT _hr = get_AdvanceTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void MSPPT::AnimationSettings::PutAdvanceTime ( float AdvanceTime ) {
    HRESULT _hr = put_AdvanceTime(AdvanceTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline MSPPT::PlaySettingsPtr MSPPT::AnimationSettings::GetPlaySettings ( ) {
    struct PlaySettings * _result = 0;
    HRESULT _hr = get_PlaySettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaySettingsPtr(_result, false);
}

#pragma implementation_key(458)
inline enum MSPPT::PpTextLevelEffect MSPPT::AnimationSettings::GetTextLevelEffect ( ) {
    enum PpTextLevelEffect _result;
    HRESULT _hr = get_TextLevelEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline void MSPPT::AnimationSettings::PutTextLevelEffect ( enum PpTextLevelEffect TextLevelEffect ) {
    HRESULT _hr = put_TextLevelEffect(TextLevelEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(460)
inline enum MSPPT::PpTextUnitEffect MSPPT::AnimationSettings::GetTextUnitEffect ( ) {
    enum PpTextUnitEffect _result;
    HRESULT _hr = get_TextUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(461)
inline void MSPPT::AnimationSettings::PutTextUnitEffect ( enum PpTextUnitEffect TextUnitEffect ) {
    HRESULT _hr = put_TextUnitEffect(TextUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(462)
inline enum Office::MsoTriState MSPPT::AnimationSettings::GetAnimate ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Animate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline void MSPPT::AnimationSettings::PutAnimate ( enum Office::MsoTriState Animate ) {
    HRESULT _hr = put_Animate(Animate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(464)
inline enum Office::MsoTriState MSPPT::AnimationSettings::GetAnimateBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(465)
inline void MSPPT::AnimationSettings::PutAnimateBackground ( enum Office::MsoTriState AnimateBackground ) {
    HRESULT _hr = put_AnimateBackground(AnimateBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(466)
inline enum Office::MsoTriState MSPPT::AnimationSettings::GetAnimateTextInReverse ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AnimateTextInReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline void MSPPT::AnimationSettings::PutAnimateTextInReverse ( enum Office::MsoTriState AnimateTextInReverse ) {
    HRESULT _hr = put_AnimateTextInReverse(AnimateTextInReverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(468)
inline enum MSPPT::PpChartUnitEffect MSPPT::AnimationSettings::GetChartUnitEffect ( ) {
    enum PpChartUnitEffect _result;
    HRESULT _hr = get_ChartUnitEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(469)
inline void MSPPT::AnimationSettings::PutChartUnitEffect ( enum PpChartUnitEffect ChartUnitEffect ) {
    HRESULT _hr = put_ChartUnitEffect(ChartUnitEffect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevel wrapper method implementations
//

#pragma implementation_key(470)
inline MSPPT::_ApplicationPtr MSPPT::RulerLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(471)
inline IDispatchPtr MSPPT::RulerLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(472)
inline float MSPPT::RulerLevel::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void MSPPT::RulerLevel::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline float MSPPT::RulerLevel::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void MSPPT::RulerLevel::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels wrapper method implementations
//

#pragma implementation_key(476)
inline MSPPT::_ApplicationPtr MSPPT::RulerLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(477)
inline IDispatchPtr MSPPT::RulerLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(478)
inline MSPPT::RulerLevelPtr MSPPT::RulerLevels::Item ( int index ) {
    struct RulerLevel * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelPtr(_result, false);
}

//
// interface TabStop wrapper method implementations
//

#pragma implementation_key(479)
inline MSPPT::_ApplicationPtr MSPPT::TabStop::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(480)
inline IDispatchPtr MSPPT::TabStop::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(481)
inline enum MSPPT::PpTabStopType MSPPT::TabStop::GetType ( ) {
    enum PpTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline void MSPPT::TabStop::PutType ( enum PpTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(483)
inline float MSPPT::TabStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(484)
inline void MSPPT::TabStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(485)
inline HRESULT MSPPT::TabStop::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TabStops wrapper method implementations
//

#pragma implementation_key(486)
inline MSPPT::_ApplicationPtr MSPPT::TabStops::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(487)
inline IDispatchPtr MSPPT::TabStops::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(488)
inline MSPPT::TabStopPtr MSPPT::TabStops::Item ( int index ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

#pragma implementation_key(489)
inline float MSPPT::TabStops::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline void MSPPT::TabStops::PutDefaultSpacing ( float DefaultSpacing ) {
    HRESULT _hr = put_DefaultSpacing(DefaultSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(491)
inline MSPPT::TabStopPtr MSPPT::TabStops::Add ( enum PpTabStopType Type, float Position ) {
    struct TabStop * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopPtr(_result, false);
}

//
// interface Ruler wrapper method implementations
//

#pragma implementation_key(492)
inline MSPPT::_ApplicationPtr MSPPT::Ruler::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(493)
inline IDispatchPtr MSPPT::Ruler::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(494)
inline MSPPT::TabStopsPtr MSPPT::Ruler::GetTabStops ( ) {
    struct TabStops * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStopsPtr(_result, false);
}

#pragma implementation_key(495)
inline MSPPT::RulerLevelsPtr MSPPT::Ruler::GetLevels ( ) {
    struct RulerLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevelsPtr(_result, false);
}

//
// interface Font wrapper method implementations
//

#pragma implementation_key(496)
inline MSPPT::_ApplicationPtr MSPPT::Font::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(497)
inline IDispatchPtr MSPPT::Font::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(498)
inline MSPPT::ColorFormatPtr MSPPT::Font::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(499)
inline enum Office::MsoTriState MSPPT::Font::GetBold ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(500)
inline void MSPPT::Font::PutBold ( enum Office::MsoTriState Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline enum Office::MsoTriState MSPPT::Font::GetItalic ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline void MSPPT::Font::PutItalic ( enum Office::MsoTriState Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(503)
inline enum Office::MsoTriState MSPPT::Font::GetShadow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(504)
inline void MSPPT::Font::PutShadow ( enum Office::MsoTriState Shadow ) {
    HRESULT _hr = put_Shadow(Shadow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline enum Office::MsoTriState MSPPT::Font::GetEmboss ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Emboss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline void MSPPT::Font::PutEmboss ( enum Office::MsoTriState Emboss ) {
    HRESULT _hr = put_Emboss(Emboss);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline enum Office::MsoTriState MSPPT::Font::GetUnderline ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline void MSPPT::Font::PutUnderline ( enum Office::MsoTriState Underline ) {
    HRESULT _hr = put_Underline(Underline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline enum Office::MsoTriState MSPPT::Font::GetSubscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline void MSPPT::Font::PutSubscript ( enum Office::MsoTriState Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(511)
inline enum Office::MsoTriState MSPPT::Font::GetSuperscript ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(512)
inline void MSPPT::Font::PutSuperscript ( enum Office::MsoTriState Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(513)
inline float MSPPT::Font::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(514)
inline void MSPPT::Font::PutBaselineOffset ( float BaselineOffset ) {
    HRESULT _hr = put_BaselineOffset(BaselineOffset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(515)
inline enum Office::MsoTriState MSPPT::Font::GetEmbedded ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline enum Office::MsoTriState MSPPT::Font::GetEmbeddable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(517)
inline float MSPPT::Font::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline void MSPPT::Font::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(519)
inline _bstr_t MSPPT::Font::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(520)
inline void MSPPT::Font::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(521)
inline _bstr_t MSPPT::Font::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(522)
inline void MSPPT::Font::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(523)
inline _bstr_t MSPPT::Font::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(524)
inline void MSPPT::Font::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(525)
inline enum Office::MsoTriState MSPPT::Font::GetAutoRotateNumbers ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AutoRotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(526)
inline void MSPPT::Font::PutAutoRotateNumbers ( enum Office::MsoTriState AutoRotateNumbers ) {
    HRESULT _hr = put_AutoRotateNumbers(AutoRotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(527)
inline _bstr_t MSPPT::Font::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(528)
inline void MSPPT::Font::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(529)
inline _bstr_t MSPPT::Font::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(530)
inline void MSPPT::Font::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Fonts wrapper method implementations
//

#pragma implementation_key(531)
inline MSPPT::_ApplicationPtr MSPPT::Fonts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(532)
inline IDispatchPtr MSPPT::Fonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(533)
inline MSPPT::FontPtr MSPPT::Fonts::Item ( const _variant_t & index ) {
    struct Font * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(534)
inline HRESULT MSPPT::Fonts::Replace ( _bstr_t Original, _bstr_t Replacement ) {
    HRESULT _hr = raw_Replace(Original, Replacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface HeaderFooter wrapper method implementations
//

#pragma implementation_key(535)
inline MSPPT::_ApplicationPtr MSPPT::HeaderFooter::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(536)
inline IDispatchPtr MSPPT::HeaderFooter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(537)
inline enum Office::MsoTriState MSPPT::HeaderFooter::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(538)
inline void MSPPT::HeaderFooter::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(539)
inline _bstr_t MSPPT::HeaderFooter::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(540)
inline void MSPPT::HeaderFooter::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(541)
inline enum Office::MsoTriState MSPPT::HeaderFooter::GetUseFormat ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(542)
inline void MSPPT::HeaderFooter::PutUseFormat ( enum Office::MsoTriState UseFormat ) {
    HRESULT _hr = put_UseFormat(UseFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(543)
inline enum MSPPT::PpDateTimeFormat MSPPT::HeaderFooter::GetFormat ( ) {
    enum PpDateTimeFormat _result;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline void MSPPT::HeaderFooter::PutFormat ( enum PpDateTimeFormat Format ) {
    HRESULT _hr = put_Format(Format);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface HeadersFooters wrapper method implementations
//

#pragma implementation_key(545)
inline MSPPT::_ApplicationPtr MSPPT::HeadersFooters::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(546)
inline IDispatchPtr MSPPT::HeadersFooters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(547)
inline MSPPT::HeaderFooterPtr MSPPT::HeadersFooters::GetDateAndTime ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_DateAndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(548)
inline MSPPT::HeaderFooterPtr MSPPT::HeadersFooters::GetSlideNumber ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(549)
inline MSPPT::HeaderFooterPtr MSPPT::HeadersFooters::GetHeader ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(550)
inline MSPPT::HeaderFooterPtr MSPPT::HeadersFooters::GetFooter ( ) {
    struct HeaderFooter * _result = 0;
    HRESULT _hr = get_Footer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeaderFooterPtr(_result, false);
}

#pragma implementation_key(551)
inline enum Office::MsoTriState MSPPT::HeadersFooters::GetDisplayOnTitleSlide ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayOnTitleSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(552)
inline void MSPPT::HeadersFooters::PutDisplayOnTitleSlide ( enum Office::MsoTriState DisplayOnTitleSlide ) {
    HRESULT _hr = put_DisplayOnTitleSlide(DisplayOnTitleSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(553)
inline HRESULT MSPPT::HeadersFooters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PPAlert wrapper method implementations
//

#pragma implementation_key(554)
inline MSPPT::_ApplicationPtr MSPPT::PPAlert::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(555)
inline IDispatchPtr MSPPT::PPAlert::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(556)
inline HRESULT MSPPT::PPAlert::Run ( _bstr_t Title, int Type, _bstr_t Text, _bstr_t leftBtn, _bstr_t middleBtn, _bstr_t rightBtn ) {
    HRESULT _hr = raw_Run(Title, Type, Text, leftBtn, middleBtn, rightBtn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(557)
inline int MSPPT::PPAlert::GetPressedButton ( ) {
    int _result = 0;
    HRESULT _hr = get_PressedButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline _bstr_t MSPPT::PPAlert::GetOnButton ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnButton(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(559)
inline void MSPPT::PPAlert::PutOnButton ( _bstr_t OnButton ) {
    HRESULT _hr = put_OnButton(OnButton);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPStrings wrapper method implementations
//

#pragma implementation_key(560)
inline _bstr_t MSPPT::PPStrings::Item ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(561)
inline _bstr_t MSPPT::PPStrings::Add ( _bstr_t String ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Add(String, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline HRESULT MSPPT::PPStrings::Insert ( _bstr_t String, int Position ) {
    HRESULT _hr = raw_Insert(String, Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(563)
inline HRESULT MSPPT::PPStrings::Delete ( int index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Tags wrapper method implementations
//

#pragma implementation_key(564)
inline MSPPT::_ApplicationPtr MSPPT::Tags::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(565)
inline IDispatchPtr MSPPT::Tags::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(566)
inline _bstr_t MSPPT::Tags::Item ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(567)
inline HRESULT MSPPT::Tags::Add ( _bstr_t Name, _bstr_t Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(568)
inline HRESULT MSPPT::Tags::Delete ( _bstr_t Name ) {
    HRESULT _hr = raw_Delete(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(569)
inline HRESULT MSPPT::Tags::AddBinary ( _bstr_t Name, _bstr_t FilePath ) {
    HRESULT _hr = raw_AddBinary(Name, FilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(570)
inline long MSPPT::Tags::BinaryValue ( _bstr_t Name ) {
    long _result = 0;
    HRESULT _hr = raw_BinaryValue(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline _bstr_t MSPPT::Tags::Name ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Name(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(572)
inline _bstr_t MSPPT::Tags::Value ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface PPControl wrapper method implementations
//

#pragma implementation_key(573)
inline MSPPT::_ApplicationPtr MSPPT::PPControl::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(574)
inline IDispatchPtr MSPPT::PPControl::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(575)
inline enum Office::MsoTriState MSPPT::PPControl::GetEnable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Enable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(576)
inline void MSPPT::PPControl::PutEnable ( enum Office::MsoTriState Enable ) {
    HRESULT _hr = put_Enable(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(577)
inline enum Office::MsoTriState MSPPT::PPControl::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(578)
inline void MSPPT::PPControl::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(579)
inline enum Office::MsoTriState MSPPT::PPControl::GetFocus ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Focus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(580)
inline void MSPPT::PPControl::PutFocus ( enum Office::MsoTriState Focus ) {
    HRESULT _hr = put_Focus(Focus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(581)
inline _bstr_t MSPPT::PPControl::GetLabel ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Label(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(582)
inline void MSPPT::PPControl::PutLabel ( _bstr_t Label ) {
    HRESULT _hr = put_Label(Label);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(583)
inline int MSPPT::PPControl::GetHelpId ( ) {
    int _result = 0;
    HRESULT _hr = get_HelpId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void MSPPT::PPControl::PutHelpId ( int HelpId ) {
    HRESULT _hr = put_HelpId(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline float MSPPT::PPControl::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(586)
inline void MSPPT::PPControl::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(587)
inline float MSPPT::PPControl::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline void MSPPT::PPControl::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(589)
inline float MSPPT::PPControl::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline void MSPPT::PPControl::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline float MSPPT::PPControl::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void MSPPT::PPControl::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline long MSPPT::PPControl::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline _bstr_t MSPPT::PPControl::GetOnSetFocus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSetFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(595)
inline void MSPPT::PPControl::PutOnSetFocus ( _bstr_t OnSetFocus ) {
    HRESULT _hr = put_OnSetFocus(OnSetFocus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(596)
inline _bstr_t MSPPT::PPControl::GetOnKillFocus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnKillFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(597)
inline void MSPPT::PPControl::PutOnKillFocus ( _bstr_t OnKillFocus ) {
    HRESULT _hr = put_OnKillFocus(OnKillFocus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(598)
inline MSPPT::TagsPtr MSPPT::PPControl::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(599)
inline _bstr_t MSPPT::PPControl::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(600)
inline void MSPPT::PPControl::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPPushButton wrapper method implementations
//

#pragma implementation_key(601)
inline HRESULT MSPPT::PPPushButton::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(602)
inline enum Office::MsoTriState MSPPT::PPPushButton::GetIsDefault ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline void MSPPT::PPPushButton::PutIsDefault ( enum Office::MsoTriState IsDefault ) {
    HRESULT _hr = put_IsDefault(IsDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(604)
inline enum Office::MsoTriState MSPPT::PPPushButton::GetIsEscape ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsEscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(605)
inline void MSPPT::PPPushButton::PutIsEscape ( enum Office::MsoTriState IsEscape ) {
    HRESULT _hr = put_IsEscape(IsEscape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(606)
inline _bstr_t MSPPT::PPPushButton::GetOnPressed ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnPressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(607)
inline void MSPPT::PPPushButton::PutOnPressed ( _bstr_t OnPressed ) {
    HRESULT _hr = put_OnPressed(OnPressed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPToggleButton wrapper method implementations
//

#pragma implementation_key(608)
inline enum Office::MsoTriState MSPPT::PPToggleButton::GetState ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void MSPPT::PPToggleButton::PutState ( enum Office::MsoTriState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline int MSPPT::PPToggleButton::GetResourceID ( ) {
    int _result = 0;
    HRESULT _hr = get_ResourceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void MSPPT::PPToggleButton::PutResourceID ( int ResourceID ) {
    HRESULT _hr = put_ResourceID(ResourceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline HRESULT MSPPT::PPToggleButton::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(613)
inline _bstr_t MSPPT::PPToggleButton::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(614)
inline void MSPPT::PPToggleButton::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPBitmapButton wrapper method implementations
//

#pragma implementation_key(615)
inline HRESULT MSPPT::PPBitmapButton::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(616)
inline int MSPPT::PPBitmapButton::GetResourceID ( ) {
    int _result = 0;
    HRESULT _hr = get_ResourceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void MSPPT::PPBitmapButton::PutResourceID ( int ResourceID ) {
    HRESULT _hr = put_ResourceID(ResourceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline _bstr_t MSPPT::PPBitmapButton::GetOnPressed ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnPressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(619)
inline void MSPPT::PPBitmapButton::PutOnPressed ( _bstr_t OnPressed ) {
    HRESULT _hr = put_OnPressed(OnPressed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline enum Office::MsoTriState MSPPT::PPBitmapButton::GetIsDefault ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void MSPPT::PPBitmapButton::PutIsDefault ( enum Office::MsoTriState IsDefault ) {
    HRESULT _hr = put_IsDefault(IsDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline enum Office::MsoTriState MSPPT::PPBitmapButton::GetIsEscape ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsEscape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void MSPPT::PPBitmapButton::PutIsEscape ( enum Office::MsoTriState IsEscape ) {
    HRESULT _hr = put_IsEscape(IsEscape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPListBox wrapper method implementations
//

#pragma implementation_key(624)
inline MSPPT::PPStringsPtr MSPPT::PPListBox::GetStrings ( ) {
    struct PPStrings * _result = 0;
    HRESULT _hr = get_Strings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPStringsPtr(_result, false);
}

#pragma implementation_key(625)
inline enum MSPPT::PpListBoxSelectionStyle MSPPT::PPListBox::GetSelectionStyle ( ) {
    enum PpListBoxSelectionStyle _result;
    HRESULT _hr = get_SelectionStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(626)
inline void MSPPT::PPListBox::PutSelectionStyle ( enum PpListBoxSelectionStyle SelectionStyle ) {
    HRESULT _hr = put_SelectionStyle(SelectionStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline HRESULT MSPPT::PPListBox::SetTabStops ( const _variant_t & safeArrayTabStops ) {
    HRESULT _hr = raw_SetTabStops(safeArrayTabStops);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(628)
inline int MSPPT::PPListBox::GetFocusItem ( ) {
    int _result = 0;
    HRESULT _hr = get_FocusItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(629)
inline void MSPPT::PPListBox::PutFocusItem ( int FocusItem ) {
    HRESULT _hr = put_FocusItem(FocusItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline int MSPPT::PPListBox::GetTopItem ( ) {
    int _result = 0;
    HRESULT _hr = get_TopItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(631)
inline _bstr_t MSPPT::PPListBox::GetOnSelectionChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSelectionChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(632)
inline void MSPPT::PPListBox::PutOnSelectionChange ( _bstr_t OnSelectionChange ) {
    HRESULT _hr = put_OnSelectionChange(OnSelectionChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(633)
inline _bstr_t MSPPT::PPListBox::GetOnDoubleClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(634)
inline void MSPPT::PPListBox::PutOnDoubleClick ( _bstr_t OnDoubleClick ) {
    HRESULT _hr = put_OnDoubleClick(OnDoubleClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(635)
inline enum Office::MsoTriState MSPPT::PPListBox::GetIsSelected ( int index ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsSelected(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline void MSPPT::PPListBox::PutIsSelected ( int index, enum Office::MsoTriState IsSelected ) {
    HRESULT _hr = put_IsSelected(index, IsSelected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(637)
inline HRESULT MSPPT::PPListBox::Abbreviate ( enum PpListBoxAbbreviationStyle Style ) {
    HRESULT _hr = raw_Abbreviate(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(638)
inline enum MSPPT::PpListBoxAbbreviationStyle MSPPT::PPListBox::GetIsAbbreviated ( ) {
    enum PpListBoxAbbreviationStyle _result;
    HRESULT _hr = get_IsAbbreviated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PPCheckBox wrapper method implementations
//

#pragma implementation_key(639)
inline enum Office::MsoTriState MSPPT::PPCheckBox::GetState ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline void MSPPT::PPCheckBox::PutState ( enum Office::MsoTriState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(641)
inline HRESULT MSPPT::PPCheckBox::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(642)
inline _bstr_t MSPPT::PPCheckBox::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(643)
inline void MSPPT::PPCheckBox::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPStaticText wrapper method implementations
//

#pragma implementation_key(644)
inline enum Office::MsoTriState MSPPT::PPStaticText::GetUseForegroundColor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(645)
inline void MSPPT::PPStaticText::PutUseForegroundColor ( enum Office::MsoTriState UseForegroundColor ) {
    HRESULT _hr = put_UseForegroundColor(UseForegroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline enum Office::MsoTriState MSPPT::PPStaticText::GetUseBackgroundColor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline void MSPPT::PPStaticText::PutUseBackgroundColor ( enum Office::MsoTriState UseBackgroundColor ) {
    HRESULT _hr = put_UseBackgroundColor(UseBackgroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(648)
inline Office::MsoRGBType MSPPT::PPStaticText::GetForegroundColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_ForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(649)
inline void MSPPT::PPStaticText::PutForegroundColor ( Office::MsoRGBType ForegroundColor ) {
    HRESULT _hr = put_ForegroundColor(ForegroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(650)
inline Office::MsoRGBType MSPPT::PPStaticText::GetBackgroundColor ( ) {
    Office::MsoRGBType _result;
    HRESULT _hr = get_BackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(651)
inline void MSPPT::PPStaticText::PutBackgroundColor ( Office::MsoRGBType BackgroundColor ) {
    HRESULT _hr = put_BackgroundColor(BackgroundColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPEditText wrapper method implementations
//

#pragma implementation_key(652)
inline enum Office::MsoTriState MSPPT::PPEditText::GetMultiLine ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_MultiLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(653)
inline void MSPPT::PPEditText::PutMultiLine ( enum Office::MsoTriState MultiLine ) {
    HRESULT _hr = put_MultiLine(MultiLine);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline enum Office::MsoTriState MSPPT::PPEditText::GetVerticalScrollBar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalScrollBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(655)
inline void MSPPT::PPEditText::PutVerticalScrollBar ( enum Office::MsoTriState VerticalScrollBar ) {
    HRESULT _hr = put_VerticalScrollBar(VerticalScrollBar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(656)
inline enum Office::MsoTriState MSPPT::PPEditText::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(657)
inline void MSPPT::PPEditText::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(658)
inline enum Office::MsoTriState MSPPT::PPEditText::GetReadOnly ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline void MSPPT::PPEditText::PutReadOnly ( enum Office::MsoTriState ReadOnly ) {
    HRESULT _hr = put_ReadOnly(ReadOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(660)
inline _bstr_t MSPPT::PPEditText::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(661)
inline void MSPPT::PPEditText::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(662)
inline int MSPPT::PPEditText::GetMaxLength ( ) {
    int _result = 0;
    HRESULT _hr = get_MaxLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(663)
inline void MSPPT::PPEditText::PutMaxLength ( int MaxLength ) {
    HRESULT _hr = put_MaxLength(MaxLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(664)
inline _bstr_t MSPPT::PPEditText::GetOnAChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(665)
inline void MSPPT::PPEditText::PutOnAChange ( _bstr_t OnAChange ) {
    HRESULT _hr = put_OnAChange(OnAChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPIcon wrapper method implementations
//

#pragma implementation_key(666)
inline int MSPPT::PPIcon::GetResourceID ( ) {
    int _result = 0;
    HRESULT _hr = get_ResourceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(667)
inline void MSPPT::PPIcon::PutResourceID ( int ResourceID ) {
    HRESULT _hr = put_ResourceID(ResourceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPBitmap wrapper method implementations
//

#pragma implementation_key(668)
inline int MSPPT::PPBitmap::GetResourceID ( ) {
    int _result = 0;
    HRESULT _hr = get_ResourceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline void MSPPT::PPBitmap::PutResourceID ( int ResourceID ) {
    HRESULT _hr = put_ResourceID(ResourceID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(670)
inline _bstr_t MSPPT::PPBitmap::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(671)
inline void MSPPT::PPBitmap::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPSpinner wrapper method implementations
//

#pragma implementation_key(672)
inline int MSPPT::PPSpinner::GetMinimum ( ) {
    int _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void MSPPT::PPSpinner::PutMinimum ( int Minimum ) {
    HRESULT _hr = put_Minimum(Minimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline int MSPPT::PPSpinner::GetMaximum ( ) {
    int _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void MSPPT::PPSpinner::PutMaximum ( int Maximum ) {
    HRESULT _hr = put_Maximum(Maximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline int MSPPT::PPSpinner::GetIncrement ( ) {
    int _result = 0;
    HRESULT _hr = get_Increment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(677)
inline void MSPPT::PPSpinner::PutIncrement ( int Increment ) {
    HRESULT _hr = put_Increment(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline int MSPPT::PPSpinner::GetPageChange ( ) {
    int _result = 0;
    HRESULT _hr = get_PageChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(679)
inline void MSPPT::PPSpinner::PutPageChange ( int PageChange ) {
    HRESULT _hr = put_PageChange(PageChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(680)
inline int MSPPT::PPSpinner::GetCurrentValue ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline void MSPPT::PPSpinner::PutCurrentValue ( int CurrentValue ) {
    HRESULT _hr = put_CurrentValue(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(682)
inline _bstr_t MSPPT::PPSpinner::GetOnAChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(683)
inline void MSPPT::PPSpinner::PutOnAChange ( _bstr_t OnAChange ) {
    HRESULT _hr = put_OnAChange(OnAChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPScrollBar wrapper method implementations
//

#pragma implementation_key(684)
inline int MSPPT::PPScrollBar::GetMinimum ( ) {
    int _result = 0;
    HRESULT _hr = get_Minimum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(685)
inline void MSPPT::PPScrollBar::PutMinimum ( int Minimum ) {
    HRESULT _hr = put_Minimum(Minimum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline int MSPPT::PPScrollBar::GetMaximum ( ) {
    int _result = 0;
    HRESULT _hr = get_Maximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(687)
inline void MSPPT::PPScrollBar::PutMaximum ( int Maximum ) {
    HRESULT _hr = put_Maximum(Maximum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(688)
inline int MSPPT::PPScrollBar::GetIncrement ( ) {
    int _result = 0;
    HRESULT _hr = get_Increment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline void MSPPT::PPScrollBar::PutIncrement ( int Increment ) {
    HRESULT _hr = put_Increment(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline int MSPPT::PPScrollBar::GetPageChange ( ) {
    int _result = 0;
    HRESULT _hr = get_PageChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline void MSPPT::PPScrollBar::PutPageChange ( int PageChange ) {
    HRESULT _hr = put_PageChange(PageChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(692)
inline int MSPPT::PPScrollBar::GetCurrentValue ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(693)
inline void MSPPT::PPScrollBar::PutCurrentValue ( int CurrentValue ) {
    HRESULT _hr = put_CurrentValue(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(694)
inline _bstr_t MSPPT::PPScrollBar::GetOnScroll ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnScroll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(695)
inline void MSPPT::PPScrollBar::PutOnScroll ( _bstr_t OnScroll ) {
    HRESULT _hr = put_OnScroll(OnScroll);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPDropDown wrapper method implementations
//

#pragma implementation_key(696)
inline MSPPT::PPStringsPtr MSPPT::PPDropDown::GetStrings ( ) {
    struct PPStrings * _result = 0;
    HRESULT _hr = get_Strings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPStringsPtr(_result, false);
}

#pragma implementation_key(697)
inline int MSPPT::PPDropDown::GetFocusItem ( ) {
    int _result = 0;
    HRESULT _hr = get_FocusItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline void MSPPT::PPDropDown::PutFocusItem ( int FocusItem ) {
    HRESULT _hr = put_FocusItem(FocusItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline _bstr_t MSPPT::PPDropDown::GetOnSelectionChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSelectionChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(700)
inline void MSPPT::PPDropDown::PutOnSelectionChange ( _bstr_t OnSelectionChange ) {
    HRESULT _hr = put_OnSelectionChange(OnSelectionChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPDropDownEdit wrapper method implementations
//

#pragma implementation_key(701)
inline MSPPT::PPStringsPtr MSPPT::PPDropDownEdit::GetStrings ( ) {
    struct PPStrings * _result = 0;
    HRESULT _hr = get_Strings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPStringsPtr(_result, false);
}

#pragma implementation_key(702)
inline int MSPPT::PPDropDownEdit::GetFocusItem ( ) {
    int _result = 0;
    HRESULT _hr = get_FocusItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void MSPPT::PPDropDownEdit::PutFocusItem ( int FocusItem ) {
    HRESULT _hr = put_FocusItem(FocusItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline _bstr_t MSPPT::PPDropDownEdit::GetOnSelectionChange ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnSelectionChange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(705)
inline void MSPPT::PPDropDownEdit::PutOnSelectionChange ( _bstr_t OnSelectionChange ) {
    HRESULT _hr = put_OnSelectionChange(OnSelectionChange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(706)
inline _bstr_t MSPPT::PPDropDownEdit::GetOnEdit ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnEdit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(707)
inline void MSPPT::PPDropDownEdit::PutOnEdit ( _bstr_t OnEdit ) {
    HRESULT _hr = put_OnEdit(OnEdit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPSlideMiniature wrapper method implementations
//

#pragma implementation_key(708)
inline HRESULT MSPPT::PPSlideMiniature::SetImage ( struct _Slide * Slide ) {
    HRESULT _hr = raw_SetImage(Slide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(709)
inline int MSPPT::PPSlideMiniature::GetSelected ( ) {
    int _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline void MSPPT::PPSlideMiniature::PutSelected ( int Selected ) {
    HRESULT _hr = put_Selected(Selected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline _bstr_t MSPPT::PPSlideMiniature::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(712)
inline void MSPPT::PPSlideMiniature::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline _bstr_t MSPPT::PPSlideMiniature::GetOnDoubleClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(714)
inline void MSPPT::PPSlideMiniature::PutOnDoubleClick ( _bstr_t OnDoubleClick ) {
    HRESULT _hr = put_OnDoubleClick(OnDoubleClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPRadioButton wrapper method implementations
//

#pragma implementation_key(715)
inline enum Office::MsoTriState MSPPT::PPRadioButton::GetState ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void MSPPT::PPRadioButton::PutState ( enum Office::MsoTriState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline HRESULT MSPPT::PPRadioButton::Click ( ) {
    HRESULT _hr = raw_Click();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(718)
inline HRESULT MSPPT::PPRadioButton::DoubleClick ( ) {
    HRESULT _hr = raw_DoubleClick();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(719)
inline _bstr_t MSPPT::PPRadioButton::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(720)
inline void MSPPT::PPRadioButton::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(721)
inline _bstr_t MSPPT::PPRadioButton::GetOnDoubleClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnDoubleClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(722)
inline void MSPPT::PPRadioButton::PutOnDoubleClick ( _bstr_t OnDoubleClick ) {
    HRESULT _hr = put_OnDoubleClick(OnDoubleClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPRadioCluster wrapper method implementations
//

#pragma implementation_key(723)
inline MSPPT::PPRadioButtonPtr MSPPT::PPRadioCluster::Item ( const _variant_t & index ) {
    struct PPRadioButton * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPRadioButtonPtr(_result, false);
}

#pragma implementation_key(724)
inline MSPPT::PPRadioButtonPtr MSPPT::PPRadioCluster::Add ( float Left, float Top, float Width, float Height ) {
    struct PPRadioButton * _result = 0;
    HRESULT _hr = raw_Add(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPRadioButtonPtr(_result, false);
}

#pragma implementation_key(725)
inline int MSPPT::PPRadioCluster::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(726)
inline MSPPT::PPRadioButtonPtr MSPPT::PPRadioCluster::GetSelected ( ) {
    struct PPRadioButton * _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPRadioButtonPtr(_result, false);
}

#pragma implementation_key(727)
inline _bstr_t MSPPT::PPRadioCluster::GetOnClick ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnClick(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(728)
inline void MSPPT::PPRadioCluster::PutOnClick ( _bstr_t OnClick ) {
    HRESULT _hr = put_OnClick(OnClick);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPControls wrapper method implementations
//

#pragma implementation_key(729)
inline MSPPT::_ApplicationPtr MSPPT::PPControls::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(730)
inline MSPPT::PPControlPtr MSPPT::PPControls::Item ( const _variant_t & index ) {
    struct PPControl * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPControlPtr(_result, false);
}

#pragma implementation_key(731)
inline MSPPT::PPPushButtonPtr MSPPT::PPControls::AddPushButton ( float Left, float Top, float Width, float Height ) {
    struct PPPushButton * _result = 0;
    HRESULT _hr = raw_AddPushButton(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPPushButtonPtr(_result, false);
}

#pragma implementation_key(732)
inline MSPPT::PPToggleButtonPtr MSPPT::PPControls::AddToggleButton ( float Left, float Top, float Width, float Height ) {
    struct PPToggleButton * _result = 0;
    HRESULT _hr = raw_AddToggleButton(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPToggleButtonPtr(_result, false);
}

#pragma implementation_key(733)
inline MSPPT::PPBitmapButtonPtr MSPPT::PPControls::AddBitmapButton ( float Left, float Top, float Width, float Height ) {
    struct PPBitmapButton * _result = 0;
    HRESULT _hr = raw_AddBitmapButton(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPBitmapButtonPtr(_result, false);
}

#pragma implementation_key(734)
inline MSPPT::PPListBoxPtr MSPPT::PPControls::AddListBox ( float Left, float Top, float Width, float Height ) {
    struct PPListBox * _result = 0;
    HRESULT _hr = raw_AddListBox(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPListBoxPtr(_result, false);
}

#pragma implementation_key(735)
inline MSPPT::PPCheckBoxPtr MSPPT::PPControls::AddCheckBox ( float Left, float Top, float Width, float Height ) {
    struct PPCheckBox * _result = 0;
    HRESULT _hr = raw_AddCheckBox(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPCheckBoxPtr(_result, false);
}

#pragma implementation_key(736)
inline MSPPT::PPRadioClusterPtr MSPPT::PPControls::AddRadioCluster ( float Left, float Top, float Width, float Height ) {
    struct PPRadioCluster * _result = 0;
    HRESULT _hr = raw_AddRadioCluster(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPRadioClusterPtr(_result, false);
}

#pragma implementation_key(737)
inline MSPPT::PPStaticTextPtr MSPPT::PPControls::AddStaticText ( float Left, float Top, float Width, float Height ) {
    struct PPStaticText * _result = 0;
    HRESULT _hr = raw_AddStaticText(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPStaticTextPtr(_result, false);
}

#pragma implementation_key(738)
inline MSPPT::PPEditTextPtr MSPPT::PPControls::AddEditText ( float Left, float Top, float Width, float Height, const _variant_t & VerticalScrollBar ) {
    struct PPEditText * _result = 0;
    HRESULT _hr = raw_AddEditText(Left, Top, Width, Height, VerticalScrollBar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPEditTextPtr(_result, false);
}

#pragma implementation_key(739)
inline MSPPT::PPIconPtr MSPPT::PPControls::AddIcon ( float Left, float Top, float Width, float Height ) {
    struct PPIcon * _result = 0;
    HRESULT _hr = raw_AddIcon(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPIconPtr(_result, false);
}

#pragma implementation_key(740)
inline MSPPT::PPBitmapPtr MSPPT::PPControls::AddBitmap ( float Left, float Top, float Width, float Height ) {
    struct PPBitmap * _result = 0;
    HRESULT _hr = raw_AddBitmap(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPBitmapPtr(_result, false);
}

#pragma implementation_key(741)
inline MSPPT::PPSpinnerPtr MSPPT::PPControls::AddSpinner ( float Left, float Top, float Width, float Height ) {
    struct PPSpinner * _result = 0;
    HRESULT _hr = raw_AddSpinner(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPSpinnerPtr(_result, false);
}

#pragma implementation_key(742)
inline MSPPT::PPScrollBarPtr MSPPT::PPControls::AddScrollBar ( enum PpScrollBarStyle Style, float Left, float Top, float Width, float Height ) {
    struct PPScrollBar * _result = 0;
    HRESULT _hr = raw_AddScrollBar(Style, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPScrollBarPtr(_result, false);
}

#pragma implementation_key(743)
inline MSPPT::PPGroupBoxPtr MSPPT::PPControls::AddGroupBox ( float Left, float Top, float Width, float Height ) {
    struct PPGroupBox * _result = 0;
    HRESULT _hr = raw_AddGroupBox(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPGroupBoxPtr(_result, false);
}

#pragma implementation_key(744)
inline MSPPT::PPDropDownPtr MSPPT::PPControls::AddDropDown ( float Left, float Top, float Width, float Height ) {
    struct PPDropDown * _result = 0;
    HRESULT _hr = raw_AddDropDown(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDropDownPtr(_result, false);
}

#pragma implementation_key(745)
inline MSPPT::PPDropDownEditPtr MSPPT::PPControls::AddDropDownEdit ( float Left, float Top, float Width, float Height ) {
    struct PPDropDownEdit * _result = 0;
    HRESULT _hr = raw_AddDropDownEdit(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDropDownEditPtr(_result, false);
}

#pragma implementation_key(746)
inline MSPPT::PPSlideMiniaturePtr MSPPT::PPControls::AddMiniature ( float Left, float Top, float Width, float Height ) {
    struct PPSlideMiniature * _result = 0;
    HRESULT _hr = raw_AddMiniature(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPSlideMiniaturePtr(_result, false);
}

#pragma implementation_key(747)
inline MSPPT::PPFramePtr MSPPT::PPControls::AddFrame ( float Left, float Top, float Width, float Height ) {
    struct PPFrame * _result = 0;
    HRESULT _hr = raw_AddFrame(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPFramePtr(_result, false);
}

#pragma implementation_key(748)
inline enum Office::MsoTriState MSPPT::PPControls::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(749)
inline void MSPPT::PPControls::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPTabSheet wrapper method implementations
//

#pragma implementation_key(750)
inline MSPPT::_ApplicationPtr MSPPT::PPTabSheet::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(751)
inline IDispatchPtr MSPPT::PPTabSheet::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(752)
inline _bstr_t MSPPT::PPTabSheet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline void MSPPT::PPTabSheet::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline HRESULT MSPPT::PPTabSheet::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(755)
inline float MSPPT::PPTabSheet::GetClientLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline float MSPPT::PPTabSheet::GetClientTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(757)
inline float MSPPT::PPTabSheet::GetClientWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(758)
inline float MSPPT::PPTabSheet::GetClientHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(759)
inline MSPPT::PPControlsPtr MSPPT::PPTabSheet::GetControls ( ) {
    struct PPControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPControlsPtr(_result, false);
}

#pragma implementation_key(760)
inline MSPPT::TagsPtr MSPPT::PPTabSheet::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(761)
inline _bstr_t MSPPT::PPTabSheet::GetOnActivate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnActivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(762)
inline void MSPPT::PPTabSheet::PutOnActivate ( _bstr_t OnActivate ) {
    HRESULT _hr = put_OnActivate(OnActivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPTabSheets wrapper method implementations
//

#pragma implementation_key(763)
inline MSPPT::PPTabSheetPtr MSPPT::PPTabSheets::Item ( const _variant_t & index ) {
    struct PPTabSheet * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPTabSheetPtr(_result, false);
}

#pragma implementation_key(764)
inline MSPPT::PPTabSheetPtr MSPPT::PPTabSheets::Add ( _bstr_t Name ) {
    struct PPTabSheet * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPTabSheetPtr(_result, false);
}

#pragma implementation_key(765)
inline MSPPT::PPTabSheetPtr MSPPT::PPTabSheets::GetActiveSheet ( ) {
    struct PPTabSheet * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPTabSheetPtr(_result, false);
}

#pragma implementation_key(766)
inline _bstr_t MSPPT::PPTabSheets::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(767)
inline void MSPPT::PPTabSheets::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPDialog wrapper method implementations
//

#pragma implementation_key(768)
inline MSPPT::_ApplicationPtr MSPPT::PPDialog::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(769)
inline IDispatchPtr MSPPT::PPDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(770)
inline enum MSPPT::PpDialogStyle MSPPT::PPDialog::GetStyle ( ) {
    enum PpDialogStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline enum MSPPT::PpDialogMode MSPPT::PPDialog::GetMode ( ) {
    enum PpDialogMode _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline void MSPPT::PPDialog::PutMode ( enum PpDialogMode Mode ) {
    HRESULT _hr = put_Mode(Mode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline int MSPPT::PPDialog::GetHelpId ( ) {
    int _result = 0;
    HRESULT _hr = get_HelpId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(774)
inline void MSPPT::PPDialog::PutHelpId ( int HelpId ) {
    HRESULT _hr = put_HelpId(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(775)
inline enum Office::MsoTriState MSPPT::PPDialog::GetHideOnIdle ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HideOnIdle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(776)
inline void MSPPT::PPDialog::PutHideOnIdle ( enum Office::MsoTriState HideOnIdle ) {
    HRESULT _hr = put_HideOnIdle(HideOnIdle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(777)
inline _bstr_t MSPPT::PPDialog::GetresourceDLL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_resourceDLL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(778)
inline void MSPPT::PPDialog::PutresourceDLL ( _bstr_t resourceDLL ) {
    HRESULT _hr = put_resourceDLL(resourceDLL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(779)
inline _bstr_t MSPPT::PPDialog::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(780)
inline void MSPPT::PPDialog::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(781)
inline float MSPPT::PPDialog::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline void MSPPT::PPDialog::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(783)
inline float MSPPT::PPDialog::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline void MSPPT::PPDialog::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(785)
inline float MSPPT::PPDialog::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline void MSPPT::PPDialog::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline float MSPPT::PPDialog::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void MSPPT::PPDialog::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline float MSPPT::PPDialog::GetClientLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline float MSPPT::PPDialog::GetClientTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline float MSPPT::PPDialog::GetClientWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(792)
inline float MSPPT::PPDialog::GetClientHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ClientHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(793)
inline enum Office::MsoTriState MSPPT::PPDialog::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline void MSPPT::PPDialog::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(795)
inline MSPPT::PPControlsPtr MSPPT::PPDialog::GetControls ( ) {
    struct PPControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPControlsPtr(_result, false);
}

#pragma implementation_key(796)
inline MSPPT::TagsPtr MSPPT::PPDialog::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(797)
inline _bstr_t MSPPT::PPDialog::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(798)
inline void MSPPT::PPDialog::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(799)
inline MSPPT::PPTabSheetsPtr MSPPT::PPDialog::GetSheets ( ) {
    struct PPTabSheets * _result = 0;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPTabSheetsPtr(_result, false);
}

#pragma implementation_key(800)
inline MSPPT::PPTabControlPtr MSPPT::PPDialog::GetTabControl ( ) {
    struct PPTabControl * _result = 0;
    HRESULT _hr = get_TabControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPTabControlPtr(_result, false);
}

#pragma implementation_key(801)
inline int MSPPT::PPDialog::GetDelayTime ( ) {
    int _result = 0;
    HRESULT _hr = get_DelayTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(802)
inline void MSPPT::PPDialog::PutDelayTime ( int DelayTime ) {
    HRESULT _hr = put_DelayTime(DelayTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(803)
inline int MSPPT::PPDialog::SaveDialog ( _bstr_t FileName ) {
    int _result = 0;
    HRESULT _hr = raw_SaveDialog(FileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(804)
inline HRESULT MSPPT::PPDialog::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(805)
inline long MSPPT::PPDialog::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(806)
inline _bstr_t MSPPT::PPDialog::GetOnTerminate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnTerminate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(807)
inline void MSPPT::PPDialog::PutOnTerminate ( _bstr_t OnTerminate ) {
    HRESULT _hr = put_OnTerminate(OnTerminate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline _bstr_t MSPPT::PPDialog::GetOnIdle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnIdle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(809)
inline void MSPPT::PPDialog::PutOnIdle ( _bstr_t OnIdle ) {
    HRESULT _hr = put_OnIdle(OnIdle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline _bstr_t MSPPT::PPDialog::GetOnMouseDown ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnMouseDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(811)
inline void MSPPT::PPDialog::PutOnMouseDown ( _bstr_t OnMouseDown ) {
    HRESULT _hr = put_OnMouseDown(OnMouseDown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(812)
inline _bstr_t MSPPT::PPDialog::GetOnMouseUp ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnMouseUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(813)
inline void MSPPT::PPDialog::PutOnMouseUp ( _bstr_t OnMouseUp ) {
    HRESULT _hr = put_OnMouseUp(OnMouseUp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(814)
inline _bstr_t MSPPT::PPDialog::GetOnKeyPressed ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnKeyPressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline void MSPPT::PPDialog::PutOnKeyPressed ( _bstr_t OnKeyPressed ) {
    HRESULT _hr = put_OnKeyPressed(OnKeyPressed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline _bstr_t MSPPT::PPDialog::GetOnTimer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnTimer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(817)
inline void MSPPT::PPDialog::PutOnTimer ( _bstr_t OnTimer ) {
    HRESULT _hr = put_OnTimer(OnTimer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline _bstr_t MSPPT::PPDialog::GetOnActivate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnActivate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(819)
inline void MSPPT::PPDialog::PutOnActivate ( _bstr_t OnActivate ) {
    HRESULT _hr = put_OnActivate(OnActivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PPDialogs wrapper method implementations
//

#pragma implementation_key(820)
inline MSPPT::_ApplicationPtr MSPPT::PPDialogs::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(821)
inline MSPPT::PPDialogPtr MSPPT::PPDialogs::Item ( const _variant_t & index ) {
    struct PPDialog * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogPtr(_result, false);
}

#pragma implementation_key(822)
inline MSPPT::PPDialogPtr MSPPT::PPDialogs::AddDialog ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Modal, IUnknown * ParentWindow, enum PpDialogPositioning Position, enum Office::MsoTriState DisplayHelp ) {
    struct PPDialog * _result = 0;
    HRESULT _hr = raw_AddDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogPtr(_result, false);
}

#pragma implementation_key(823)
inline MSPPT::PPDialogPtr MSPPT::PPDialogs::AddTabDialog ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Modal, IUnknown * ParentWindow, enum PpDialogPositioning Position, enum Office::MsoTriState DisplayHelp ) {
    struct PPDialog * _result = 0;
    HRESULT _hr = raw_AddTabDialog(Left, Top, Width, Height, Modal, ParentWindow, Position, DisplayHelp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogPtr(_result, false);
}

#pragma implementation_key(824)
inline MSPPT::PPDialogPtr MSPPT::PPDialogs::LoadDialog ( _bstr_t resourceDLL, int nResID, enum Office::MsoTriState bModal, IUnknown * ParentWindow, enum PpDialogPositioning Position ) {
    struct PPDialog * _result = 0;
    HRESULT _hr = raw_LoadDialog(resourceDLL, nResID, bModal, ParentWindow, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogPtr(_result, false);
}

#pragma implementation_key(825)
inline MSPPT::PPAlertPtr MSPPT::PPDialogs::AddAlert ( ) {
    struct PPAlert * _result = 0;
    HRESULT _hr = raw_AddAlert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPAlertPtr(_result, false);
}

#pragma implementation_key(826)
inline MSPPT::TagsPtr MSPPT::PPDialogs::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(827)
inline _bstr_t MSPPT::PPDialogs::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(828)
inline void MSPPT::PPDialogs::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(829)
inline enum MSPPT::PpAlertButton MSPPT::PPDialogs::RunCharacterAlert ( _bstr_t Text, enum PpAlertType Type, enum PpAlertIcon icon, IUnknown * ParentWindow ) {
    enum PpAlertButton _result;
    HRESULT _hr = raw_RunCharacterAlert(Text, Type, icon, ParentWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface FileDialogFileList wrapper method implementations
//

#pragma implementation_key(830)
inline MSPPT::_ApplicationPtr MSPPT::FileDialogFileList::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(831)
inline IDispatchPtr MSPPT::FileDialogFileList::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(832)
inline _bstr_t MSPPT::FileDialogFileList::Item ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(833)
inline _bstr_t MSPPT::FileDialogFileList::DisplayName ( int index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DisplayName(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogExtension wrapper method implementations
//

#pragma implementation_key(834)
inline MSPPT::_ApplicationPtr MSPPT::FileDialogExtension::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(835)
inline IDispatchPtr MSPPT::FileDialogExtension::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(836)
inline _bstr_t MSPPT::FileDialogExtension::GetExtensions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(837)
inline void MSPPT::FileDialogExtension::PutExtensions ( _bstr_t Extensions ) {
    HRESULT _hr = put_Extensions(Extensions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(838)
inline _bstr_t MSPPT::FileDialogExtension::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(839)
inline void MSPPT::FileDialogExtension::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FileDialogExtensionList wrapper method implementations
//

#pragma implementation_key(840)
inline MSPPT::_ApplicationPtr MSPPT::FileDialogExtensionList::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(841)
inline IDispatchPtr MSPPT::FileDialogExtensionList::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(842)
inline MSPPT::FileDialogExtensionPtr MSPPT::FileDialogExtensionList::Item ( int index ) {
    struct FileDialogExtension * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogExtensionPtr(_result, false);
}

#pragma implementation_key(843)
inline MSPPT::FileDialogExtensionPtr MSPPT::FileDialogExtensionList::Add ( _bstr_t Extension, _bstr_t Description ) {
    struct FileDialogExtension * _result = 0;
    HRESULT _hr = raw_Add(Extension, Description, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogExtensionPtr(_result, false);
}

//
// interface FileDialog wrapper method implementations
//

#pragma implementation_key(844)
inline MSPPT::_ApplicationPtr MSPPT::FileDialog::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(845)
inline IDispatchPtr MSPPT::FileDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(846)
inline MSPPT::FileDialogExtensionListPtr MSPPT::FileDialog::GetExtensions ( ) {
    struct FileDialogExtensionList * _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogExtensionListPtr(_result, false);
}

#pragma implementation_key(847)
inline _bstr_t MSPPT::FileDialog::GetDefaultDirectoryRegKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultDirectoryRegKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(848)
inline void MSPPT::FileDialog::PutDefaultDirectoryRegKey ( _bstr_t DefaultDirectoryRegKey ) {
    HRESULT _hr = put_DefaultDirectoryRegKey(DefaultDirectoryRegKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline _bstr_t MSPPT::FileDialog::GetDialogTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DialogTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline void MSPPT::FileDialog::PutDialogTitle ( _bstr_t DialogTitle ) {
    HRESULT _hr = put_DialogTitle(DialogTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline _bstr_t MSPPT::FileDialog::GetActionButtonName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActionButtonName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline void MSPPT::FileDialog::PutActionButtonName ( _bstr_t ActionButtonName ) {
    HRESULT _hr = put_ActionButtonName(ActionButtonName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(853)
inline enum Office::MsoTriState MSPPT::FileDialog::GetIsMultiSelect ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsMultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline void MSPPT::FileDialog::PutIsMultiSelect ( enum Office::MsoTriState IsMultiSelect ) {
    HRESULT _hr = put_IsMultiSelect(IsMultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(855)
inline enum Office::MsoTriState MSPPT::FileDialog::GetIsPrintEnabled ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsPrintEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(856)
inline void MSPPT::FileDialog::PutIsPrintEnabled ( enum Office::MsoTriState IsPrintEnabled ) {
    HRESULT _hr = put_IsPrintEnabled(IsPrintEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(857)
inline enum Office::MsoTriState MSPPT::FileDialog::GetIsReadOnlyEnabled ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsReadOnlyEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void MSPPT::FileDialog::PutIsReadOnlyEnabled ( enum Office::MsoTriState IsReadOnlyEnabled ) {
    HRESULT _hr = put_IsReadOnlyEnabled(IsReadOnlyEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline enum Office::MsoTriState MSPPT::FileDialog::GetDirectoriesOnly ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DirectoriesOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline void MSPPT::FileDialog::PutDirectoriesOnly ( enum Office::MsoTriState DirectoriesOnly ) {
    HRESULT _hr = put_DirectoriesOnly(DirectoriesOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(861)
inline enum MSPPT::PpFileDialogView MSPPT::FileDialog::GetInitialView ( ) {
    enum PpFileDialogView _result;
    HRESULT _hr = get_InitialView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(862)
inline void MSPPT::FileDialog::PutInitialView ( enum PpFileDialogView InitialView ) {
    HRESULT _hr = put_InitialView(InitialView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline HRESULT MSPPT::FileDialog::Launch ( IUnknown * pUnk ) {
    HRESULT _hr = raw_Launch(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(864)
inline _bstr_t MSPPT::FileDialog::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(865)
inline void MSPPT::FileDialog::PutOnAction ( _bstr_t OnAction ) {
    HRESULT _hr = put_OnAction(OnAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline MSPPT::FileDialogFileListPtr MSPPT::FileDialog::GetFiles ( ) {
    struct FileDialogFileList * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFileListPtr(_result, false);
}

#pragma implementation_key(867)
inline enum Office::MsoTriState MSPPT::FileDialog::GetUseODMADlgs ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseODMADlgs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline void MSPPT::FileDialog::PutUseODMADlgs ( enum Office::MsoTriState UseODMADlgs ) {
    HRESULT _hr = put_UseODMADlgs(UseODMADlgs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MouseTracker wrapper method implementations
//

#pragma implementation_key(869)
inline HRESULT MSPPT::MouseTracker::OnTrack ( float X, float Y ) {
    HRESULT _hr = raw_OnTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(870)
inline HRESULT MSPPT::MouseTracker::EndTrack ( float X, float Y ) {
    HRESULT _hr = raw_EndTrack(X, Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowView wrapper method implementations
//

#pragma implementation_key(871)
inline MSPPT::_ApplicationPtr MSPPT::SlideShowView::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(872)
inline IDispatchPtr MSPPT::SlideShowView::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(873)
inline int MSPPT::SlideShowView::GetZoom ( ) {
    int _result = 0;
    HRESULT _hr = get_Zoom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(874)
inline MSPPT::_SlidePtr MSPPT::SlideShowView::GetSlide ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_Slide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(875)
inline enum MSPPT::PpSlideShowPointerType MSPPT::SlideShowView::GetPointerType ( ) {
    enum PpSlideShowPointerType _result;
    HRESULT _hr = get_PointerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline void MSPPT::SlideShowView::PutPointerType ( enum PpSlideShowPointerType PointerType ) {
    HRESULT _hr = put_PointerType(PointerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(877)
inline enum MSPPT::PpSlideShowState MSPPT::SlideShowView::GetState ( ) {
    enum PpSlideShowState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void MSPPT::SlideShowView::PutState ( enum PpSlideShowState State ) {
    HRESULT _hr = put_State(State);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline enum Office::MsoTriState MSPPT::SlideShowView::GetAcceleratorsEnabled ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AcceleratorsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void MSPPT::SlideShowView::PutAcceleratorsEnabled ( enum Office::MsoTriState AcceleratorsEnabled ) {
    HRESULT _hr = put_AcceleratorsEnabled(AcceleratorsEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline float MSPPT::SlideShowView::GetPresentationElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_PresentationElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline float MSPPT::SlideShowView::GetSlideElapsedTime ( ) {
    float _result = 0;
    HRESULT _hr = get_SlideElapsedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(883)
inline void MSPPT::SlideShowView::PutSlideElapsedTime ( float SlideElapsedTime ) {
    HRESULT _hr = put_SlideElapsedTime(SlideElapsedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(884)
inline MSPPT::_SlidePtr MSPPT::SlideShowView::GetLastSlideViewed ( ) {
    struct _Slide * _result = 0;
    HRESULT _hr = get_LastSlideViewed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(885)
inline enum MSPPT::PpSlideShowAdvanceMode MSPPT::SlideShowView::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline MSPPT::ColorFormatPtr MSPPT::SlideShowView::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(887)
inline enum Office::MsoTriState MSPPT::SlideShowView::GetIsNamedShow ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsNamedShow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline _bstr_t MSPPT::SlideShowView::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline HRESULT MSPPT::SlideShowView::DrawLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    HRESULT _hr = raw_DrawLine(BeginX, BeginY, EndX, EndY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(890)
inline HRESULT MSPPT::SlideShowView::EraseDrawing ( ) {
    HRESULT _hr = raw_EraseDrawing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(891)
inline HRESULT MSPPT::SlideShowView::First ( ) {
    HRESULT _hr = raw_First();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(892)
inline HRESULT MSPPT::SlideShowView::Last ( ) {
    HRESULT _hr = raw_Last();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(893)
inline HRESULT MSPPT::SlideShowView::Next ( ) {
    HRESULT _hr = raw_Next();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(894)
inline HRESULT MSPPT::SlideShowView::Previous ( ) {
    HRESULT _hr = raw_Previous();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(895)
inline HRESULT MSPPT::SlideShowView::GotoSlide ( int index, enum Office::MsoTriState ResetSlide ) {
    HRESULT _hr = raw_GotoSlide(index, ResetSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(896)
inline HRESULT MSPPT::SlideShowView::GotoNamedShow ( _bstr_t SlideShowName ) {
    HRESULT _hr = raw_GotoNamedShow(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(897)
inline HRESULT MSPPT::SlideShowView::EndNamedShow ( ) {
    HRESULT _hr = raw_EndNamedShow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(898)
inline HRESULT MSPPT::SlideShowView::ResetSlideTime ( ) {
    HRESULT _hr = raw_ResetSlideTime();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(899)
inline HRESULT MSPPT::SlideShowView::Exit ( ) {
    HRESULT _hr = raw_Exit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(900)
inline HRESULT MSPPT::SlideShowView::InstallTracker ( struct MouseTracker * pTracker, enum Office::MsoTriState Presenter ) {
    HRESULT _hr = raw_InstallTracker(pTracker, Presenter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(901)
inline int MSPPT::SlideShowView::GetCurrentShowPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_CurrentShowPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SlideShowWindow wrapper method implementations
//

#pragma implementation_key(902)
inline MSPPT::_ApplicationPtr MSPPT::SlideShowWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(903)
inline IDispatchPtr MSPPT::SlideShowWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(904)
inline MSPPT::SlideShowViewPtr MSPPT::SlideShowWindow::GetView ( ) {
    struct SlideShowView * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowViewPtr(_result, false);
}

#pragma implementation_key(905)
inline MSPPT::_PresentationPtr MSPPT::SlideShowWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(906)
inline enum Office::MsoTriState MSPPT::SlideShowWindow::GetIsFullScreen ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IsFullScreen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline float MSPPT::SlideShowWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void MSPPT::SlideShowWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline float MSPPT::SlideShowWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(910)
inline void MSPPT::SlideShowWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline float MSPPT::SlideShowWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(912)
inline void MSPPT::SlideShowWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(913)
inline float MSPPT::SlideShowWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline void MSPPT::SlideShowWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(915)
inline long MSPPT::SlideShowWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline enum Office::MsoTriState MSPPT::SlideShowWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline HRESULT MSPPT::SlideShowWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SlideShowWindows wrapper method implementations
//

#pragma implementation_key(918)
inline MSPPT::_ApplicationPtr MSPPT::SlideShowWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(919)
inline IDispatchPtr MSPPT::SlideShowWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(920)
inline MSPPT::SlideShowWindowPtr MSPPT::SlideShowWindows::Item ( int index ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

//
// interface SlideShowSettings wrapper method implementations
//

#pragma implementation_key(921)
inline MSPPT::_ApplicationPtr MSPPT::SlideShowSettings::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(922)
inline IDispatchPtr MSPPT::SlideShowSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(923)
inline MSPPT::ColorFormatPtr MSPPT::SlideShowSettings::GetPointerColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_PointerColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

#pragma implementation_key(924)
inline MSPPT::NamedSlideShowsPtr MSPPT::SlideShowSettings::GetNamedSlideShows ( ) {
    struct NamedSlideShows * _result = 0;
    HRESULT _hr = get_NamedSlideShows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return NamedSlideShowsPtr(_result, false);
}

#pragma implementation_key(925)
inline int MSPPT::SlideShowSettings::GetStartingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_StartingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void MSPPT::SlideShowSettings::PutStartingSlide ( int StartingSlide ) {
    HRESULT _hr = put_StartingSlide(StartingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline int MSPPT::SlideShowSettings::GetEndingSlide ( ) {
    int _result = 0;
    HRESULT _hr = get_EndingSlide(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void MSPPT::SlideShowSettings::PutEndingSlide ( int EndingSlide ) {
    HRESULT _hr = put_EndingSlide(EndingSlide);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline enum MSPPT::PpSlideShowAdvanceMode MSPPT::SlideShowSettings::GetAdvanceMode ( ) {
    enum PpSlideShowAdvanceMode _result;
    HRESULT _hr = get_AdvanceMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void MSPPT::SlideShowSettings::PutAdvanceMode ( enum PpSlideShowAdvanceMode AdvanceMode ) {
    HRESULT _hr = put_AdvanceMode(AdvanceMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline MSPPT::SlideShowWindowPtr MSPPT::SlideShowSettings::Run ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(932)
inline enum Office::MsoTriState MSPPT::SlideShowSettings::GetLoopUntilStopped ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LoopUntilStopped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline void MSPPT::SlideShowSettings::PutLoopUntilStopped ( enum Office::MsoTriState LoopUntilStopped ) {
    HRESULT _hr = put_LoopUntilStopped(LoopUntilStopped);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(934)
inline enum MSPPT::PpSlideShowType MSPPT::SlideShowSettings::GetShowType ( ) {
    enum PpSlideShowType _result;
    HRESULT _hr = get_ShowType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(935)
inline void MSPPT::SlideShowSettings::PutShowType ( enum PpSlideShowType ShowType ) {
    HRESULT _hr = put_ShowType(ShowType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(936)
inline enum Office::MsoTriState MSPPT::SlideShowSettings::GetShowWithNarration ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithNarration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(937)
inline void MSPPT::SlideShowSettings::PutShowWithNarration ( enum Office::MsoTriState ShowWithNarration ) {
    HRESULT _hr = put_ShowWithNarration(ShowWithNarration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(938)
inline enum Office::MsoTriState MSPPT::SlideShowSettings::GetShowWithAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWithAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void MSPPT::SlideShowSettings::PutShowWithAnimation ( enum Office::MsoTriState ShowWithAnimation ) {
    HRESULT _hr = put_ShowWithAnimation(ShowWithAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline _bstr_t MSPPT::SlideShowSettings::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(941)
inline void MSPPT::SlideShowSettings::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline enum MSPPT::PpSlideShowRangeType MSPPT::SlideShowSettings::GetRangeType ( ) {
    enum PpSlideShowRangeType _result;
    HRESULT _hr = get_RangeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void MSPPT::SlideShowSettings::PutRangeType ( enum PpSlideShowRangeType RangeType ) {
    HRESULT _hr = put_RangeType(RangeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MouseDownHandler wrapper method implementations
//

#pragma implementation_key(944)
inline HRESULT MSPPT::MouseDownHandler::OnMouseDown ( IUnknown * activeWin ) {
    HRESULT _hr = raw_OnMouseDown(activeWin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OCXExtender wrapper method implementations
//

#pragma implementation_key(945)
inline VARIANT_BOOL MSPPT::OCXExtender::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline void MSPPT::OCXExtender::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(947)
inline float MSPPT::OCXExtender::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline void MSPPT::OCXExtender::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(949)
inline float MSPPT::OCXExtender::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(950)
inline void MSPPT::OCXExtender::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(951)
inline float MSPPT::OCXExtender::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline void MSPPT::OCXExtender::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(953)
inline float MSPPT::OCXExtender::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline void MSPPT::OCXExtender::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(955)
inline int MSPPT::OCXExtender::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline _bstr_t MSPPT::OCXExtender::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(957)
inline void MSPPT::OCXExtender::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline _bstr_t MSPPT::OCXExtender::GetAltHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AltHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(959)
inline void MSPPT::OCXExtender::PutAltHTML ( _bstr_t AltHTML ) {
    HRESULT _hr = put_AltHTML(AltHTML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface OCXExtenderEvents wrapper method implementations
//

#pragma implementation_key(960)
inline HRESULT MSPPT::OCXExtenderEvents::GotFocus ( ) {
    HRESULT _hr = raw_GotFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(961)
inline HRESULT MSPPT::OCXExtenderEvents::LostFocus ( ) {
    HRESULT _hr = raw_LostFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BulletFormat wrapper method implementations
//

#pragma implementation_key(962)
inline MSPPT::_ApplicationPtr MSPPT::BulletFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(963)
inline IDispatchPtr MSPPT::BulletFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(964)
inline enum Office::MsoTriState MSPPT::BulletFormat::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void MSPPT::BulletFormat::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline int MSPPT::BulletFormat::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(967)
inline void MSPPT::BulletFormat::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline float MSPPT::BulletFormat::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline void MSPPT::BulletFormat::PutRelativeSize ( float RelativeSize ) {
    HRESULT _hr = put_RelativeSize(RelativeSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline enum Office::MsoTriState MSPPT::BulletFormat::GetUseTextColor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline void MSPPT::BulletFormat::PutUseTextColor ( enum Office::MsoTriState UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline enum Office::MsoTriState MSPPT::BulletFormat::GetUseTextFont ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(973)
inline void MSPPT::BulletFormat::PutUseTextFont ( enum Office::MsoTriState UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline MSPPT::FontPtr MSPPT::BulletFormat::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(975)
inline enum MSPPT::PpBulletType MSPPT::BulletFormat::GetType ( ) {
    enum PpBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void MSPPT::BulletFormat::PutType ( enum PpBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline enum MSPPT::PpNumberedBulletStyle MSPPT::BulletFormat::GetStyle ( ) {
    enum PpNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(978)
inline void MSPPT::BulletFormat::PutStyle ( enum PpNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(979)
inline int MSPPT::BulletFormat::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline void MSPPT::BulletFormat::PutStartValue ( int StartValue ) {
    HRESULT _hr = put_StartValue(StartValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline HRESULT MSPPT::BulletFormat::Picture ( _bstr_t Picture ) {
    HRESULT _hr = raw_Picture(Picture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(982)
inline int MSPPT::BulletFormat::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ParagraphFormat wrapper method implementations
//

#pragma implementation_key(983)
inline MSPPT::_ApplicationPtr MSPPT::ParagraphFormat::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(984)
inline IDispatchPtr MSPPT::ParagraphFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(985)
inline enum MSPPT::PpParagraphAlignment MSPPT::ParagraphFormat::GetAlignment ( ) {
    enum PpParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline void MSPPT::ParagraphFormat::PutAlignment ( enum PpParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(987)
inline MSPPT::BulletFormatPtr MSPPT::ParagraphFormat::GetBullet ( ) {
    struct BulletFormat * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormatPtr(_result, false);
}

#pragma implementation_key(988)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetLineRuleBefore ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void MSPPT::ParagraphFormat::PutLineRuleBefore ( enum Office::MsoTriState LineRuleBefore ) {
    HRESULT _hr = put_LineRuleBefore(LineRuleBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetLineRuleAfter ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline void MSPPT::ParagraphFormat::PutLineRuleAfter ( enum Office::MsoTriState LineRuleAfter ) {
    HRESULT _hr = put_LineRuleAfter(LineRuleAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(992)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetLineRuleWithin ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline void MSPPT::ParagraphFormat::PutLineRuleWithin ( enum Office::MsoTriState LineRuleWithin ) {
    HRESULT _hr = put_LineRuleWithin(LineRuleWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(994)
inline float MSPPT::ParagraphFormat::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline void MSPPT::ParagraphFormat::PutSpaceBefore ( float SpaceBefore ) {
    HRESULT _hr = put_SpaceBefore(SpaceBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(996)
inline float MSPPT::ParagraphFormat::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void MSPPT::ParagraphFormat::PutSpaceAfter ( float SpaceAfter ) {
    HRESULT _hr = put_SpaceAfter(SpaceAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline float MSPPT::ParagraphFormat::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void MSPPT::ParagraphFormat::PutSpaceWithin ( float SpaceWithin ) {
    HRESULT _hr = put_SpaceWithin(SpaceWithin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline enum MSPPT::PpBaselineAlignment MSPPT::ParagraphFormat::GetBaseLineAlignment ( ) {
    enum PpBaselineAlignment _result;
    HRESULT _hr = get_BaseLineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline void MSPPT::ParagraphFormat::PutBaseLineAlignment ( enum PpBaselineAlignment BaseLineAlignment ) {
    HRESULT _hr = put_BaseLineAlignment(BaseLineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1002)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetFarEastLineBreakControl ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FarEastLineBreakControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1003)
inline void MSPPT::ParagraphFormat::PutFarEastLineBreakControl ( enum Office::MsoTriState FarEastLineBreakControl ) {
    HRESULT _hr = put_FarEastLineBreakControl(FarEastLineBreakControl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1004)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1005)
inline void MSPPT::ParagraphFormat::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1006)
inline enum Office::MsoTriState MSPPT::ParagraphFormat::GetHangingPunctuation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline void MSPPT::ParagraphFormat::PutHangingPunctuation ( enum Office::MsoTriState HangingPunctuation ) {
    HRESULT _hr = put_HangingPunctuation(HangingPunctuation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1008)
inline enum MSPPT::PpDirection MSPPT::ParagraphFormat::GetTextDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1009)
inline void MSPPT::ParagraphFormat::PutTextDirection ( enum PpDirection TextDirection ) {
    HRESULT _hr = put_TextDirection(TextDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextRange wrapper method implementations
//

#pragma implementation_key(1010)
inline MSPPT::_ApplicationPtr MSPPT::TextRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1011)
inline IDispatchPtr MSPPT::TextRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1012)
inline MSPPT::ActionSettingsPtr MSPPT::TextRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(1013)
inline long MSPPT::TextRange::GetStart ( ) {
    long _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1014)
inline long MSPPT::TextRange::GetLength ( ) {
    long _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1015)
inline float MSPPT::TextRange::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1016)
inline float MSPPT::TextRange::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1017)
inline float MSPPT::TextRange::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline float MSPPT::TextRange::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline MSPPT::TextRangePtr MSPPT::TextRange::Paragraphs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1020)
inline MSPPT::TextRangePtr MSPPT::TextRange::Sentences ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1021)
inline MSPPT::TextRangePtr MSPPT::TextRange::Words ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1022)
inline MSPPT::TextRangePtr MSPPT::TextRange::Characters ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1023)
inline MSPPT::TextRangePtr MSPPT::TextRange::Lines ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1024)
inline MSPPT::TextRangePtr MSPPT::TextRange::Runs ( int Start, int Length ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1025)
inline MSPPT::TextRangePtr MSPPT::TextRange::TrimText ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1026)
inline _bstr_t MSPPT::TextRange::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1027)
inline void MSPPT::TextRange::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1028)
inline MSPPT::TextRangePtr MSPPT::TextRange::InsertAfter ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1029)
inline MSPPT::TextRangePtr MSPPT::TextRange::InsertBefore ( _bstr_t NewText ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1030)
inline MSPPT::TextRangePtr MSPPT::TextRange::InsertDateTime ( enum PpDateTimeFormat DateTimeFormat, enum Office::MsoTriState InsertAsField ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertDateTime(DateTimeFormat, InsertAsField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1031)
inline MSPPT::TextRangePtr MSPPT::TextRange::InsertSlideNumber ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1032)
inline MSPPT::TextRangePtr MSPPT::TextRange::InsertSymbol ( _bstr_t FontName, int CharNumber, enum Office::MsoTriState Unicode ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1033)
inline MSPPT::FontPtr MSPPT::TextRange::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

#pragma implementation_key(1034)
inline MSPPT::ParagraphFormatPtr MSPPT::TextRange::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1035)
inline int MSPPT::TextRange::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void MSPPT::TextRange::PutIndentLevel ( int IndentLevel ) {
    HRESULT _hr = put_IndentLevel(IndentLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline HRESULT MSPPT::TextRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1038)
inline HRESULT MSPPT::TextRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1039)
inline HRESULT MSPPT::TextRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1040)
inline HRESULT MSPPT::TextRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1041)
inline MSPPT::TextRangePtr MSPPT::TextRange::Paste ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1042)
inline HRESULT MSPPT::TextRange::ChangeCase ( enum PpChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1043)
inline HRESULT MSPPT::TextRange::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1044)
inline HRESULT MSPPT::TextRange::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1045)
inline MSPPT::TextRangePtr MSPPT::TextRange::Find ( _bstr_t FindWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1046)
inline MSPPT::TextRangePtr MSPPT::TextRange::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum Office::MsoTriState MatchCase, enum Office::MsoTriState WholeWords ) {
    struct TextRange * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1047)
inline HRESULT MSPPT::TextRange::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1048)
inline enum Office::MsoLanguageID MSPPT::TextRange::GetLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1049)
inline void MSPPT::TextRange::PutLanguageID ( enum Office::MsoLanguageID LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1050)
inline HRESULT MSPPT::TextRange::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1051)
inline HRESULT MSPPT::TextRange::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextFrame wrapper method implementations
//

#pragma implementation_key(1052)
inline IDispatchPtr MSPPT::TextFrame::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1053)
inline long MSPPT::TextFrame::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline IDispatchPtr MSPPT::TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1055)
inline float MSPPT::TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline void MSPPT::TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline float MSPPT::TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void MSPPT::TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline float MSPPT::TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void MSPPT::TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline float MSPPT::TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void MSPPT::TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline enum Office::MsoTextOrientation MSPPT::TextFrame::GetOrientation ( ) {
    enum Office::MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void MSPPT::TextFrame::PutOrientation ( enum Office::MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline enum Office::MsoTriState MSPPT::TextFrame::GetHasText ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline MSPPT::TextRangePtr MSPPT::TextFrame::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

#pragma implementation_key(1067)
inline MSPPT::RulerPtr MSPPT::TextFrame::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(1068)
inline enum Office::MsoHorizontalAnchor MSPPT::TextFrame::GetHorizontalAnchor ( ) {
    enum Office::MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1069)
inline void MSPPT::TextFrame::PutHorizontalAnchor ( enum Office::MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1070)
inline enum Office::MsoVerticalAnchor MSPPT::TextFrame::GetVerticalAnchor ( ) {
    enum Office::MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1071)
inline void MSPPT::TextFrame::PutVerticalAnchor ( enum Office::MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1072)
inline enum MSPPT::PpAutoSize MSPPT::TextFrame::GetAutoSize ( ) {
    enum PpAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1073)
inline void MSPPT::TextFrame::PutAutoSize ( enum PpAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1074)
inline enum Office::MsoTriState MSPPT::TextFrame::GetWordWrap ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1075)
inline void MSPPT::TextFrame::PutWordWrap ( enum Office::MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1076)
inline HRESULT MSPPT::TextFrame::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextStyleLevel wrapper method implementations
//

#pragma implementation_key(1077)
inline MSPPT::_ApplicationPtr MSPPT::TextStyleLevel::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1078)
inline IDispatchPtr MSPPT::TextStyleLevel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1079)
inline MSPPT::ParagraphFormatPtr MSPPT::TextStyleLevel::GetParagraphFormat ( ) {
    struct ParagraphFormat * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormatPtr(_result, false);
}

#pragma implementation_key(1080)
inline MSPPT::FontPtr MSPPT::TextStyleLevel::GetFont ( ) {
    struct Font * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontPtr(_result, false);
}

//
// interface TextStyleLevels wrapper method implementations
//

#pragma implementation_key(1081)
inline MSPPT::_ApplicationPtr MSPPT::TextStyleLevels::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1082)
inline IDispatchPtr MSPPT::TextStyleLevels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1083)
inline MSPPT::TextStyleLevelPtr MSPPT::TextStyleLevels::Item ( int Level ) {
    struct TextStyleLevel * _result = 0;
    HRESULT _hr = raw_Item(Level, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelPtr(_result, false);
}

//
// interface TextStyle wrapper method implementations
//

#pragma implementation_key(1084)
inline MSPPT::_ApplicationPtr MSPPT::TextStyle::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1085)
inline IDispatchPtr MSPPT::TextStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1086)
inline MSPPT::RulerPtr MSPPT::TextStyle::GetRuler ( ) {
    struct Ruler * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerPtr(_result, false);
}

#pragma implementation_key(1087)
inline MSPPT::TextFramePtr MSPPT::TextStyle::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(1088)
inline MSPPT::TextStyleLevelsPtr MSPPT::TextStyle::GetLevels ( ) {
    struct TextStyleLevels * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStyleLevelsPtr(_result, false);
}

//
// interface TextStyles wrapper method implementations
//

#pragma implementation_key(1089)
inline MSPPT::_ApplicationPtr MSPPT::TextStyles::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1090)
inline IDispatchPtr MSPPT::TextStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1091)
inline MSPPT::TextStylePtr MSPPT::TextStyles::Item ( enum PpTextStyleType Type ) {
    struct TextStyle * _result = 0;
    HRESULT _hr = raw_Item(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylePtr(_result, false);
}

//
// interface Borders wrapper method implementations
//

#pragma implementation_key(1092)
inline MSPPT::_ApplicationPtr MSPPT::Borders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1093)
inline IDispatchPtr MSPPT::Borders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1094)
inline MSPPT::LineFormatPtr MSPPT::Borders::Item ( enum PpBorderType BorderType ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = raw_Item(BorderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

//
// interface Pane wrapper method implementations
//

#pragma implementation_key(1095)
inline IDispatchPtr MSPPT::Pane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1096)
inline HRESULT MSPPT::Pane::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1097)
inline enum Office::MsoTriState MSPPT::Pane::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline MSPPT::_ApplicationPtr MSPPT::Pane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1099)
inline enum MSPPT::PpViewType MSPPT::Pane::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(1100)
inline MSPPT::_ApplicationPtr MSPPT::Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1101)
inline MSPPT::PanePtr MSPPT::Panes::Item ( int index ) {
    struct Pane * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(1102)
inline IDispatchPtr MSPPT::Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DefaultWebOptions wrapper method implementations
//

#pragma implementation_key(1103)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline void MSPPT::DefaultWebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1105)
inline enum MSPPT::PpFrameColors MSPPT::DefaultWebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1106)
inline void MSPPT::DefaultWebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1107)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline void MSPPT::DefaultWebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1109)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1110)
inline void MSPPT::DefaultWebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1111)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1112)
inline void MSPPT::DefaultWebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1114)
inline void MSPPT::DefaultWebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline void MSPPT::DefaultWebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1118)
inline void MSPPT::DefaultWebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1119)
inline enum Office::MsoScreenSize MSPPT::DefaultWebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline void MSPPT::DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1121)
inline enum Office::MsoEncoding MSPPT::DefaultWebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1122)
inline void MSPPT::DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1123)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetUpdateLinksOnSave ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UpdateLinksOnSave(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline void MSPPT::DefaultWebOptions::PutUpdateLinksOnSave ( enum Office::MsoTriState UpdateLinksOnSave ) {
    HRESULT _hr = put_UpdateLinksOnSave(UpdateLinksOnSave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_CheckIfOfficeIsHTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline void MSPPT::DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( enum Office::MsoTriState CheckIfOfficeIsHTMLEditor ) {
    HRESULT _hr = put_CheckIfOfficeIsHTMLEditor(CheckIfOfficeIsHTMLEditor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1127)
inline enum Office::MsoTriState MSPPT::DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AlwaysSaveInDefaultEncoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1128)
inline void MSPPT::DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( enum Office::MsoTriState AlwaysSaveInDefaultEncoding ) {
    HRESULT _hr = put_AlwaysSaveInDefaultEncoding(AlwaysSaveInDefaultEncoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1129)
inline Office::WebPageFontsPtr MSPPT::DefaultWebOptions::GetFonts ( ) {
    struct Office::WebPageFonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::WebPageFontsPtr(_result, false);
}

#pragma implementation_key(1130)
inline _bstr_t MSPPT::DefaultWebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface WebOptions wrapper method implementations
//

#pragma implementation_key(1131)
inline enum Office::MsoTriState MSPPT::WebOptions::GetIncludeNavigation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_IncludeNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void MSPPT::WebOptions::PutIncludeNavigation ( enum Office::MsoTriState IncludeNavigation ) {
    HRESULT _hr = put_IncludeNavigation(IncludeNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline enum MSPPT::PpFrameColors MSPPT::WebOptions::GetFrameColors ( ) {
    enum PpFrameColors _result;
    HRESULT _hr = get_FrameColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline void MSPPT::WebOptions::PutFrameColors ( enum PpFrameColors FrameColors ) {
    HRESULT _hr = put_FrameColors(FrameColors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline enum Office::MsoTriState MSPPT::WebOptions::GetResizeGraphics ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ResizeGraphics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline void MSPPT::WebOptions::PutResizeGraphics ( enum Office::MsoTriState ResizeGraphics ) {
    HRESULT _hr = put_ResizeGraphics(ResizeGraphics);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1137)
inline enum Office::MsoTriState MSPPT::WebOptions::GetShowSlideAnimation ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowSlideAnimation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1138)
inline void MSPPT::WebOptions::PutShowSlideAnimation ( enum Office::MsoTriState ShowSlideAnimation ) {
    HRESULT _hr = put_ShowSlideAnimation(ShowSlideAnimation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1139)
inline enum Office::MsoTriState MSPPT::WebOptions::GetOrganizeInFolder ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_OrganizeInFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1140)
inline void MSPPT::WebOptions::PutOrganizeInFolder ( enum Office::MsoTriState OrganizeInFolder ) {
    HRESULT _hr = put_OrganizeInFolder(OrganizeInFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline enum Office::MsoTriState MSPPT::WebOptions::GetUseLongFileNames ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_UseLongFileNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void MSPPT::WebOptions::PutUseLongFileNames ( enum Office::MsoTriState UseLongFileNames ) {
    HRESULT _hr = put_UseLongFileNames(UseLongFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline enum Office::MsoTriState MSPPT::WebOptions::GetRelyOnVML ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_RelyOnVML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline void MSPPT::WebOptions::PutRelyOnVML ( enum Office::MsoTriState RelyOnVML ) {
    HRESULT _hr = put_RelyOnVML(RelyOnVML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1145)
inline enum Office::MsoTriState MSPPT::WebOptions::GetAllowPNG ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_AllowPNG(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1146)
inline void MSPPT::WebOptions::PutAllowPNG ( enum Office::MsoTriState AllowPNG ) {
    HRESULT _hr = put_AllowPNG(AllowPNG);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline enum Office::MsoScreenSize MSPPT::WebOptions::GetScreenSize ( ) {
    enum Office::MsoScreenSize _result;
    HRESULT _hr = get_ScreenSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void MSPPT::WebOptions::PutScreenSize ( enum Office::MsoScreenSize ScreenSize ) {
    HRESULT _hr = put_ScreenSize(ScreenSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline enum Office::MsoEncoding MSPPT::WebOptions::GetEncoding ( ) {
    enum Office::MsoEncoding _result;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void MSPPT::WebOptions::PutEncoding ( enum Office::MsoEncoding Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline _bstr_t MSPPT::WebOptions::GetFolderSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1152)
inline HRESULT MSPPT::WebOptions::UseDefaultFolderSuffix ( ) {
    HRESULT _hr = raw_UseDefaultFolderSuffix();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObject wrapper method implementations
//

#pragma implementation_key(1153)
inline MSPPT::_ApplicationPtr MSPPT::PublishObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1154)
inline IDispatchPtr MSPPT::PublishObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1155)
inline enum MSPPT::PpHTMLVersion MSPPT::PublishObject::GetHTMLVersion ( ) {
    enum PpHTMLVersion _result;
    HRESULT _hr = get_HTMLVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void MSPPT::PublishObject::PutHTMLVersion ( enum PpHTMLVersion HTMLVersion ) {
    HRESULT _hr = put_HTMLVersion(HTMLVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1157)
inline enum MSPPT::PpPublishSourceType MSPPT::PublishObject::GetSourceType ( ) {
    enum PpPublishSourceType _result;
    HRESULT _hr = get_SourceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1158)
inline void MSPPT::PublishObject::PutSourceType ( enum PpPublishSourceType SourceType ) {
    HRESULT _hr = put_SourceType(SourceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1159)
inline int MSPPT::PublishObject::GetRangeStart ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline void MSPPT::PublishObject::PutRangeStart ( int RangeStart ) {
    HRESULT _hr = put_RangeStart(RangeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1161)
inline int MSPPT::PublishObject::GetRangeEnd ( ) {
    int _result = 0;
    HRESULT _hr = get_RangeEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1162)
inline void MSPPT::PublishObject::PutRangeEnd ( int RangeEnd ) {
    HRESULT _hr = put_RangeEnd(RangeEnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1163)
inline _bstr_t MSPPT::PublishObject::GetSlideShowName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SlideShowName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1164)
inline void MSPPT::PublishObject::PutSlideShowName ( _bstr_t SlideShowName ) {
    HRESULT _hr = put_SlideShowName(SlideShowName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1165)
inline enum Office::MsoTriState MSPPT::PublishObject::GetSpeakerNotes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_SpeakerNotes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1166)
inline void MSPPT::PublishObject::PutSpeakerNotes ( enum Office::MsoTriState SpeakerNotes ) {
    HRESULT _hr = put_SpeakerNotes(SpeakerNotes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1167)
inline _bstr_t MSPPT::PublishObject::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1168)
inline void MSPPT::PublishObject::PutFileName ( _bstr_t FileName ) {
    HRESULT _hr = put_FileName(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1169)
inline HRESULT MSPPT::PublishObject::Publish ( ) {
    HRESULT _hr = raw_Publish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PublishObjects wrapper method implementations
//

#pragma implementation_key(1170)
inline MSPPT::_ApplicationPtr MSPPT::PublishObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1171)
inline IDispatchPtr MSPPT::PublishObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1172)
inline MSPPT::PublishObjectPtr MSPPT::PublishObjects::Item ( int index ) {
    struct PublishObject * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectPtr(_result, false);
}

//
// interface Marker wrapper method implementations
//

#pragma implementation_key(1173)
inline enum MSPPT::PpMarkerType MSPPT::Marker::GetMarkerType ( ) {
    enum PpMarkerType _result;
    HRESULT _hr = get_MarkerType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void MSPPT::Marker::PutMarkerType ( enum PpMarkerType MarkerType ) {
    HRESULT _hr = put_MarkerType(MarkerType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline int MSPPT::Marker::GetTime ( ) {
    int _result = 0;
    HRESULT _hr = get_Time(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(1176)
inline MSPPT::PresentationsPtr MSPPT::_Application::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(1177)
inline MSPPT::DocumentWindowsPtr MSPPT::_Application::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(1178)
inline MSPPT::PPDialogsPtr MSPPT::_Application::GetDialogs ( ) {
    struct PPDialogs * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogsPtr(_result, false);
}

#pragma implementation_key(1179)
inline MSPPT::DocumentWindowPtr MSPPT::_Application::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1180)
inline MSPPT::_PresentationPtr MSPPT::_Application::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(1181)
inline MSPPT::SlideShowWindowsPtr MSPPT::_Application::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(1182)
inline Office::_CommandBarsPtr MSPPT::_Application::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1183)
inline _bstr_t MSPPT::_Application::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1184)
inline _bstr_t MSPPT::_Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1185)
inline _bstr_t MSPPT::_Application::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1186)
inline void MSPPT::_Application::PutCaption ( _bstr_t Caption ) {
    HRESULT _hr = put_Caption(Caption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1187)
inline Office::AssistantPtr MSPPT::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(1188)
inline Office::FileSearchPtr MSPPT::_Application::GetFileSearch ( ) {
    struct Office::FileSearch * _result = 0;
    HRESULT _hr = get_FileSearch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::FileSearchPtr(_result, false);
}

#pragma implementation_key(1189)
inline Office::IFindPtr MSPPT::_Application::GetFileFind ( ) {
    struct Office::IFind * _result = 0;
    HRESULT _hr = get_FileFind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::IFindPtr(_result, false);
}

#pragma implementation_key(1190)
inline _bstr_t MSPPT::_Application::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1191)
inline _bstr_t MSPPT::_Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1192)
inline _bstr_t MSPPT::_Application::GetOperatingSystem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OperatingSystem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1193)
inline _bstr_t MSPPT::_Application::GetActivePrinter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivePrinter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1194)
inline long MSPPT::_Application::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1195)
inline MSPPT::AddInsPtr MSPPT::_Application::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(1196)
inline VBE6::VBEPtr MSPPT::_Application::GetVBE ( ) {
    struct VBE6::VBE * _result = 0;
    HRESULT _hr = get_VBE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBE6::VBEPtr(_result, false);
}

#pragma implementation_key(1197)
inline HRESULT MSPPT::_Application::Help ( _bstr_t HelpFile, int ContextID ) {
    HRESULT _hr = raw_Help(HelpFile, ContextID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1198)
inline HRESULT MSPPT::_Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1199)
inline _variant_t MSPPT::_Application::Run ( _bstr_t MacroName, SAFEARRAY * * safeArrayOfParams ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Run(MacroName, safeArrayOfParams, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1200)
inline MSPPT::FileDialogPtr MSPPT::_Application::FileDialog ( enum PpFileDialogType Type ) {
    struct FileDialog * _result = 0;
    HRESULT _hr = raw_FileDialog(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogPtr(_result, false);
}

#pragma implementation_key(1201)
inline HRESULT MSPPT::_Application::LaunchSpelling ( struct DocumentWindow * pWindow ) {
    HRESULT _hr = raw_LaunchSpelling(pWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1202)
inline float MSPPT::_Application::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1203)
inline void MSPPT::_Application::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1204)
inline float MSPPT::_Application::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1205)
inline void MSPPT::_Application::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1206)
inline float MSPPT::_Application::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1207)
inline void MSPPT::_Application::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1208)
inline float MSPPT::_Application::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline void MSPPT::_Application::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1210)
inline enum MSPPT::PpWindowState MSPPT::_Application::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1211)
inline void MSPPT::_Application::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1212)
inline enum Office::MsoTriState MSPPT::_Application::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1213)
inline void MSPPT::_Application::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline long MSPPT::_Application::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1215)
inline enum Office::MsoTriState MSPPT::_Application::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1216)
inline HRESULT MSPPT::_Application::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1217)
inline Office::AnswerWizardPtr MSPPT::_Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(1218)
inline Office::COMAddInsPtr MSPPT::_Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

#pragma implementation_key(1219)
inline _bstr_t MSPPT::_Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1220)
inline MSPPT::DefaultWebOptionsPtr MSPPT::_Application::GetDefaultWebOptions ( ) {
    struct DefaultWebOptions * _result = 0;
    HRESULT _hr = get_DefaultWebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DefaultWebOptionsPtr(_result, false);
}

#pragma implementation_key(1221)
inline Office::LanguageSettingsPtr MSPPT::_Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(1222)
inline Office::MsoDebugOptionsPtr MSPPT::_Application::GetMsoDebugOptions ( ) {
    struct Office::MsoDebugOptions * _result = 0;
    HRESULT _hr = get_MsoDebugOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::MsoDebugOptionsPtr(_result, false);
}

#pragma implementation_key(1223)
inline enum Office::MsoTriState MSPPT::_Application::GetShowWindowsInTaskbar ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ShowWindowsInTaskbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline void MSPPT::_Application::PutShowWindowsInTaskbar ( enum Office::MsoTriState ShowWindowsInTaskbar ) {
    HRESULT _hr = put_ShowWindowsInTaskbar(ShowWindowsInTaskbar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1225)
inline MSPPT::MarkerPtr MSPPT::_Application::GetMarker ( ) {
    struct Marker * _result = 0;
    HRESULT _hr = get_Marker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MarkerPtr(_result, false);
}

#pragma implementation_key(1226)
inline enum Office::MsoFeatureInstall MSPPT::_Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1227)
inline void MSPPT::_Application::PutFeatureInstall ( enum Office::MsoFeatureInstall FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1228)
inline VARIANT_BOOL MSPPT::_Application::GetOptionFlag ( long Option, VARIANT_BOOL Persist ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetOptionFlag(Option, Persist, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1229)
inline HRESULT MSPPT::_Application::SetOptionFlag ( long Option, VARIANT_BOOL State, VARIANT_BOOL Persist ) {
    HRESULT _hr = raw_SetOptionFlag(Option, State, Persist);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Global wrapper method implementations
//

#pragma implementation_key(1230)
inline MSPPT::_PresentationPtr MSPPT::_Global::GetActivePresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_ActivePresentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(1231)
inline MSPPT::DocumentWindowPtr MSPPT::_Global::GetActiveWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = get_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1232)
inline MSPPT::AddInsPtr MSPPT::_Global::GetAddIns ( ) {
    struct AddIns * _result = 0;
    HRESULT _hr = get_AddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddInsPtr(_result, false);
}

#pragma implementation_key(1233)
inline MSPPT::_ApplicationPtr MSPPT::_Global::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1234)
inline Office::AssistantPtr MSPPT::_Global::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(1235)
inline MSPPT::PPDialogsPtr MSPPT::_Global::GetDialogs ( ) {
    struct PPDialogs * _result = 0;
    HRESULT _hr = get_Dialogs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PPDialogsPtr(_result, false);
}

#pragma implementation_key(1236)
inline MSPPT::PresentationsPtr MSPPT::_Global::GetPresentations ( ) {
    struct Presentations * _result = 0;
    HRESULT _hr = get_Presentations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PresentationsPtr(_result, false);
}

#pragma implementation_key(1237)
inline MSPPT::SlideShowWindowsPtr MSPPT::_Global::GetSlideShowWindows ( ) {
    struct SlideShowWindows * _result = 0;
    HRESULT _hr = get_SlideShowWindows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowsPtr(_result, false);
}

#pragma implementation_key(1238)
inline MSPPT::DocumentWindowsPtr MSPPT::_Global::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(1239)
inline Office::_CommandBarsPtr MSPPT::_Global::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1240)
inline Office::AnswerWizardPtr MSPPT::_Global::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(1241)
inline MSPPT::_ApplicationPtr MSPPT::Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1242)
inline IDispatchPtr MSPPT::Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1243)
inline HRESULT MSPPT::Selection::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1244)
inline HRESULT MSPPT::Selection::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1245)
inline HRESULT MSPPT::Selection::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1246)
inline HRESULT MSPPT::Selection::Unselect ( ) {
    HRESULT _hr = raw_Unselect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1247)
inline enum MSPPT::PpSelectionType MSPPT::Selection::GetType ( ) {
    enum PpSelectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1248)
inline MSPPT::SlideRangePtr MSPPT::Selection::GetSlideRange ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_SlideRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1249)
inline MSPPT::ShapeRangePtr MSPPT::Selection::GetShapeRange ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_ShapeRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1250)
inline MSPPT::TextRangePtr MSPPT::Selection::GetTextRange ( ) {
    struct TextRange * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRangePtr(_result, false);
}

//
// interface DocumentWindow wrapper method implementations
//

#pragma implementation_key(1251)
inline MSPPT::_ApplicationPtr MSPPT::DocumentWindow::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1252)
inline IDispatchPtr MSPPT::DocumentWindow::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1253)
inline MSPPT::SelectionPtr MSPPT::DocumentWindow::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(1254)
inline MSPPT::ViewPtr MSPPT::DocumentWindow::GetView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(1255)
inline MSPPT::_PresentationPtr MSPPT::DocumentWindow::GetPresentation ( ) {
    struct _Presentation * _result = 0;
    HRESULT _hr = get_Presentation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _PresentationPtr(_result, false);
}

#pragma implementation_key(1256)
inline enum MSPPT::PpViewType MSPPT::DocumentWindow::GetViewType ( ) {
    enum PpViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1257)
inline void MSPPT::DocumentWindow::PutViewType ( enum PpViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline enum Office::MsoTriState MSPPT::DocumentWindow::GetBlackAndWhite ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BlackAndWhite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void MSPPT::DocumentWindow::PutBlackAndWhite ( enum Office::MsoTriState BlackAndWhite ) {
    HRESULT _hr = put_BlackAndWhite(BlackAndWhite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1260)
inline enum Office::MsoTriState MSPPT::DocumentWindow::GetActive ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Active(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1261)
inline enum MSPPT::PpWindowState MSPPT::DocumentWindow::GetWindowState ( ) {
    enum PpWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1262)
inline void MSPPT::DocumentWindow::PutWindowState ( enum PpWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1263)
inline _bstr_t MSPPT::DocumentWindow::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1264)
inline float MSPPT::DocumentWindow::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline void MSPPT::DocumentWindow::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline float MSPPT::DocumentWindow::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline void MSPPT::DocumentWindow::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline float MSPPT::DocumentWindow::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1269)
inline void MSPPT::DocumentWindow::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline float MSPPT::DocumentWindow::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline void MSPPT::DocumentWindow::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline HRESULT MSPPT::DocumentWindow::FitToPage ( ) {
    HRESULT _hr = raw_FitToPage();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1273)
inline HRESULT MSPPT::DocumentWindow::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1274)
inline HRESULT MSPPT::DocumentWindow::LargeScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_LargeScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1275)
inline HRESULT MSPPT::DocumentWindow::SmallScroll ( int Down, int Up, int ToRight, int ToLeft ) {
    HRESULT _hr = raw_SmallScroll(Down, Up, ToRight, ToLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1276)
inline MSPPT::DocumentWindowPtr MSPPT::DocumentWindow::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1277)
inline HRESULT MSPPT::DocumentWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1278)
inline long MSPPT::DocumentWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1279)
inline MSPPT::PanePtr MSPPT::DocumentWindow::GetActivePane ( ) {
    struct Pane * _result = 0;
    HRESULT _hr = get_ActivePane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanePtr(_result, false);
}

#pragma implementation_key(1280)
inline MSPPT::PanesPtr MSPPT::DocumentWindow::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(1281)
inline long MSPPT::DocumentWindow::GetSplitVertical ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1282)
inline void MSPPT::DocumentWindow::PutSplitVertical ( long SplitVertical ) {
    HRESULT _hr = put_SplitVertical(SplitVertical);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1283)
inline long MSPPT::DocumentWindow::GetSplitHorizontal ( ) {
    long _result = 0;
    HRESULT _hr = get_SplitHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline void MSPPT::DocumentWindow::PutSplitHorizontal ( long SplitHorizontal ) {
    HRESULT _hr = put_SplitHorizontal(SplitHorizontal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1285)
inline IDispatchPtr MSPPT::DocumentWindow::RangeFromPoint ( int X, int Y ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RangeFromPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1286)
inline int MSPPT::DocumentWindow::PointsToScreenPixelsX ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsX(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1287)
inline int MSPPT::DocumentWindow::PointsToScreenPixelsY ( float Points ) {
    int _result = 0;
    HRESULT _hr = raw_PointsToScreenPixelsY(Points, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1288)
inline HRESULT MSPPT::DocumentWindow::ScrollIntoView ( float Left, float Top, float Width, float Height, enum Office::MsoTriState Start ) {
    HRESULT _hr = raw_ScrollIntoView(Left, Top, Width, Height, Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentWindows wrapper method implementations
//

#pragma implementation_key(1289)
inline MSPPT::_ApplicationPtr MSPPT::DocumentWindows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1290)
inline IDispatchPtr MSPPT::DocumentWindows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1291)
inline MSPPT::DocumentWindowPtr MSPPT::DocumentWindows::Item ( int index ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1292)
inline HRESULT MSPPT::DocumentWindows::Arrange ( enum PpArrangeStyle arrangeStyle ) {
    HRESULT _hr = raw_Arrange(arrangeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface EApplication wrapper method implementations
//

#pragma implementation_key(1293)
inline HRESULT MSPPT::EApplication::WindowSelectionChange ( struct Selection * Sel ) {
    HRESULT _hr = raw_WindowSelectionChange(Sel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1294)
inline HRESULT MSPPT::EApplication::WindowBeforeRightClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeRightClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1295)
inline HRESULT MSPPT::EApplication::WindowBeforeDoubleClick ( struct Selection * Sel, VARIANT_BOOL * Cancel ) {
    HRESULT _hr = raw_WindowBeforeDoubleClick(Sel, Cancel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1296)
inline HRESULT MSPPT::EApplication::PresentationClose ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationClose(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1297)
inline HRESULT MSPPT::EApplication::PresentationSave ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationSave(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1298)
inline HRESULT MSPPT::EApplication::PresentationOpen ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationOpen(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1299)
inline HRESULT MSPPT::EApplication::NewPresentation ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_NewPresentation(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1300)
inline HRESULT MSPPT::EApplication::PresentationNewSlide ( struct _Slide * Sld ) {
    HRESULT _hr = raw_PresentationNewSlide(Sld);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1301)
inline HRESULT MSPPT::EApplication::WindowActivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowActivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1302)
inline HRESULT MSPPT::EApplication::WindowDeactivate ( struct _Presentation * Pres, struct DocumentWindow * Wn ) {
    HRESULT _hr = raw_WindowDeactivate(Pres, Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1303)
inline HRESULT MSPPT::EApplication::SlideShowBegin ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowBegin(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1304)
inline HRESULT MSPPT::EApplication::SlideShowNextBuild ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextBuild(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1305)
inline HRESULT MSPPT::EApplication::SlideShowNextSlide ( struct SlideShowWindow * Wn ) {
    HRESULT _hr = raw_SlideShowNextSlide(Wn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1306)
inline HRESULT MSPPT::EApplication::SlideShowEnd ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_SlideShowEnd(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1307)
inline HRESULT MSPPT::EApplication::PresentationPrint ( struct _Presentation * Pres ) {
    HRESULT _hr = raw_PresentationPrint(Pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Slides wrapper method implementations
//

#pragma implementation_key(1308)
inline MSPPT::_ApplicationPtr MSPPT::Slides::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1309)
inline IDispatchPtr MSPPT::Slides::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1310)
inline MSPPT::_SlidePtr MSPPT::Slides::Item ( const _variant_t & index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1311)
inline MSPPT::_SlidePtr MSPPT::Slides::FindBySlideID ( long SlideID ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_FindBySlideID(SlideID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1312)
inline MSPPT::_SlidePtr MSPPT::Slides::Add ( int index, enum PpSlideLayout Layout ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Add(index, Layout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1313)
inline int MSPPT::Slides::InsertFromFile ( _bstr_t FileName, int index, int SlideStart, int SlideEnd ) {
    int _result = 0;
    HRESULT _hr = raw_InsertFromFile(FileName, index, SlideStart, SlideEnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1314)
inline MSPPT::SlideRangePtr MSPPT::Slides::Range ( const _variant_t & index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Range(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1315)
inline MSPPT::SlideRangePtr MSPPT::Slides::Paste ( int index ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Paste(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

//
// interface _Slide wrapper method implementations
//

#pragma implementation_key(1316)
inline MSPPT::_ApplicationPtr MSPPT::_Slide::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1317)
inline IDispatchPtr MSPPT::_Slide::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1318)
inline MSPPT::ShapesPtr MSPPT::_Slide::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(1319)
inline MSPPT::HeadersFootersPtr MSPPT::_Slide::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(1320)
inline MSPPT::SlideShowTransitionPtr MSPPT::_Slide::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(1321)
inline MSPPT::ColorSchemePtr MSPPT::_Slide::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(1322)
inline void MSPPT::_Slide::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline MSPPT::ShapeRangePtr MSPPT::_Slide::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1324)
inline _bstr_t MSPPT::_Slide::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1325)
inline void MSPPT::_Slide::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1326)
inline long MSPPT::_Slide::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline int MSPPT::_Slide::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline HRESULT MSPPT::_Slide::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1329)
inline HRESULT MSPPT::_Slide::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1330)
inline HRESULT MSPPT::_Slide::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1331)
inline enum MSPPT::PpSlideLayout MSPPT::_Slide::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1332)
inline void MSPPT::_Slide::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1333)
inline MSPPT::SlideRangePtr MSPPT::_Slide::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1334)
inline HRESULT MSPPT::_Slide::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1335)
inline MSPPT::TagsPtr MSPPT::_Slide::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(1336)
inline int MSPPT::_Slide::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline int MSPPT::_Slide::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline enum Office::MsoTriState MSPPT::_Slide::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1339)
inline void MSPPT::_Slide::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1340)
inline enum Office::MsoTriState MSPPT::_Slide::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1341)
inline void MSPPT::_Slide::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1342)
inline MSPPT::SlideRangePtr MSPPT::_Slide::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1343)
inline MSPPT::_MasterPtr MSPPT::_Slide::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1344)
inline MSPPT::HyperlinksPtr MSPPT::_Slide::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1345)
inline HRESULT MSPPT::_Slide::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1346)
inline Office::ScriptsPtr MSPPT::_Slide::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

//
// interface SlideRange wrapper method implementations
//

#pragma implementation_key(1347)
inline MSPPT::_ApplicationPtr MSPPT::SlideRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1348)
inline IDispatchPtr MSPPT::SlideRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1349)
inline MSPPT::ShapesPtr MSPPT::SlideRange::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(1350)
inline MSPPT::HeadersFootersPtr MSPPT::SlideRange::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(1351)
inline MSPPT::SlideShowTransitionPtr MSPPT::SlideRange::GetSlideShowTransition ( ) {
    struct SlideShowTransition * _result = 0;
    HRESULT _hr = get_SlideShowTransition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowTransitionPtr(_result, false);
}

#pragma implementation_key(1352)
inline MSPPT::ColorSchemePtr MSPPT::SlideRange::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(1353)
inline void MSPPT::SlideRange::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1354)
inline MSPPT::ShapeRangePtr MSPPT::SlideRange::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1355)
inline _bstr_t MSPPT::SlideRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1356)
inline void MSPPT::SlideRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1357)
inline long MSPPT::SlideRange::GetSlideID ( ) {
    long _result = 0;
    HRESULT _hr = get_SlideID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1358)
inline int MSPPT::SlideRange::GetPrintSteps ( ) {
    int _result = 0;
    HRESULT _hr = get_PrintSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1359)
inline HRESULT MSPPT::SlideRange::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1360)
inline HRESULT MSPPT::SlideRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1361)
inline HRESULT MSPPT::SlideRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1362)
inline enum MSPPT::PpSlideLayout MSPPT::SlideRange::GetLayout ( ) {
    enum PpSlideLayout _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void MSPPT::SlideRange::PutLayout ( enum PpSlideLayout Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline MSPPT::SlideRangePtr MSPPT::SlideRange::Duplicate ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1365)
inline HRESULT MSPPT::SlideRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1366)
inline MSPPT::TagsPtr MSPPT::SlideRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(1367)
inline int MSPPT::SlideRange::GetSlideIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1368)
inline int MSPPT::SlideRange::GetSlideNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_SlideNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1369)
inline enum Office::MsoTriState MSPPT::SlideRange::GetDisplayMasterShapes ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayMasterShapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1370)
inline void MSPPT::SlideRange::PutDisplayMasterShapes ( enum Office::MsoTriState DisplayMasterShapes ) {
    HRESULT _hr = put_DisplayMasterShapes(DisplayMasterShapes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1371)
inline enum Office::MsoTriState MSPPT::SlideRange::GetFollowMasterBackground ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_FollowMasterBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1372)
inline void MSPPT::SlideRange::PutFollowMasterBackground ( enum Office::MsoTriState FollowMasterBackground ) {
    HRESULT _hr = put_FollowMasterBackground(FollowMasterBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline MSPPT::SlideRangePtr MSPPT::SlideRange::GetNotesPage ( ) {
    struct SlideRange * _result = 0;
    HRESULT _hr = get_NotesPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideRangePtr(_result, false);
}

#pragma implementation_key(1374)
inline MSPPT::_MasterPtr MSPPT::SlideRange::GetMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_Master(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1375)
inline MSPPT::HyperlinksPtr MSPPT::SlideRange::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1376)
inline HRESULT MSPPT::SlideRange::Export ( _bstr_t FileName, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(FileName, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1377)
inline MSPPT::_SlidePtr MSPPT::SlideRange::Item ( const _variant_t & index ) {
    struct _Slide * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SlidePtr(_result, false);
}

#pragma implementation_key(1378)
inline IUnknownPtr MSPPT::SlideRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1379)
inline _variant_t MSPPT::SlideRange::_Index ( int index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1380)
inline long MSPPT::SlideRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1381)
inline Office::ScriptsPtr MSPPT::SlideRange::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

//
// interface _Master wrapper method implementations
//

#pragma implementation_key(1382)
inline MSPPT::_ApplicationPtr MSPPT::_Master::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1383)
inline IDispatchPtr MSPPT::_Master::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1384)
inline MSPPT::ShapesPtr MSPPT::_Master::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

#pragma implementation_key(1385)
inline MSPPT::HeadersFootersPtr MSPPT::_Master::GetHeadersFooters ( ) {
    struct HeadersFooters * _result = 0;
    HRESULT _hr = get_HeadersFooters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HeadersFootersPtr(_result, false);
}

#pragma implementation_key(1386)
inline MSPPT::ColorSchemePtr MSPPT::_Master::GetColorScheme ( ) {
    struct ColorScheme * _result = 0;
    HRESULT _hr = get_ColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemePtr(_result, false);
}

#pragma implementation_key(1387)
inline void MSPPT::_Master::PutColorScheme ( struct ColorScheme * ColorScheme ) {
    HRESULT _hr = put_ColorScheme(ColorScheme);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline MSPPT::ShapeRangePtr MSPPT::_Master::GetBackground ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1389)
inline _bstr_t MSPPT::_Master::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1390)
inline void MSPPT::_Master::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1391)
inline HRESULT MSPPT::_Master::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1392)
inline float MSPPT::_Master::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1393)
inline float MSPPT::_Master::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1394)
inline MSPPT::TextStylesPtr MSPPT::_Master::GetTextStyles ( ) {
    struct TextStyles * _result = 0;
    HRESULT _hr = get_TextStyles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextStylesPtr(_result, false);
}

#pragma implementation_key(1395)
inline MSPPT::HyperlinksPtr MSPPT::_Master::GetHyperlinks ( ) {
    struct Hyperlinks * _result = 0;
    HRESULT _hr = get_Hyperlinks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HyperlinksPtr(_result, false);
}

#pragma implementation_key(1396)
inline Office::ScriptsPtr MSPPT::_Master::GetScripts ( ) {
    struct Office::Scripts * _result = 0;
    HRESULT _hr = get_Scripts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptsPtr(_result, false);
}

//
// interface Shapes wrapper method implementations
//

#pragma implementation_key(1397)
inline IDispatchPtr MSPPT::Shapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1398)
inline long MSPPT::Shapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1399)
inline IDispatchPtr MSPPT::Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1400)
inline int MSPPT::Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1401)
inline MSPPT::ShapePtr MSPPT::Shapes::Item ( const _variant_t & index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1402)
inline IUnknownPtr MSPPT::Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1403)
inline MSPPT::ShapePtr MSPPT::Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1404)
inline MSPPT::ShapePtr MSPPT::Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1405)
inline MSPPT::ShapePtr MSPPT::Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1406)
inline MSPPT::ShapePtr MSPPT::Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1407)
inline MSPPT::ShapePtr MSPPT::Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1408)
inline MSPPT::ShapePtr MSPPT::Shapes::AddPicture ( _bstr_t FileName, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1409)
inline MSPPT::ShapePtr MSPPT::Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1410)
inline MSPPT::ShapePtr MSPPT::Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1411)
inline MSPPT::ShapePtr MSPPT::Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1412)
inline MSPPT::ShapePtr MSPPT::Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1413)
inline MSPPT::FreeformBuilderPtr MSPPT::Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

#pragma implementation_key(1414)
inline HRESULT MSPPT::Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1415)
inline MSPPT::ShapeRangePtr MSPPT::Shapes::Range ( const _variant_t & index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1416)
inline enum Office::MsoTriState MSPPT::Shapes::GetHasTitle ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1417)
inline MSPPT::ShapePtr MSPPT::Shapes::AddTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1418)
inline MSPPT::ShapePtr MSPPT::Shapes::GetTitle ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1419)
inline MSPPT::PlaceholdersPtr MSPPT::Shapes::GetPlaceholders ( ) {
    struct Placeholders * _result = 0;
    HRESULT _hr = get_Placeholders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholdersPtr(_result, false);
}

#pragma implementation_key(1420)
inline MSPPT::ShapePtr MSPPT::Shapes::AddOLEObject ( float Left, float Top, float Width, float Height, _bstr_t ClassName, _bstr_t FileName, enum Office::MsoTriState DisplayAsIcon, _bstr_t IconFileName, int IconIndex, _bstr_t IconLabel, enum Office::MsoTriState Link ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddOLEObject(Left, Top, Width, Height, ClassName, FileName, DisplayAsIcon, IconFileName, IconIndex, IconLabel, Link, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1421)
inline MSPPT::ShapePtr MSPPT::Shapes::AddComment ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddComment(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1422)
inline MSPPT::ShapePtr MSPPT::Shapes::AddPlaceholder ( enum PpPlaceholderType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPlaceholder(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1423)
inline MSPPT::ShapePtr MSPPT::Shapes::AddMediaObject ( _bstr_t FileName, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddMediaObject(FileName, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1424)
inline MSPPT::ShapeRangePtr MSPPT::Shapes::Paste ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1425)
inline MSPPT::ShapePtr MSPPT::Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface Placeholders wrapper method implementations
//

#pragma implementation_key(1426)
inline MSPPT::_ApplicationPtr MSPPT::Placeholders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1427)
inline IDispatchPtr MSPPT::Placeholders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1428)
inline MSPPT::ShapePtr MSPPT::Placeholders::Item ( int index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface FreeformBuilder wrapper method implementations
//

#pragma implementation_key(1429)
inline IDispatchPtr MSPPT::FreeformBuilder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1430)
inline long MSPPT::FreeformBuilder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1431)
inline IDispatchPtr MSPPT::FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1432)
inline HRESULT MSPPT::FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1433)
inline MSPPT::ShapePtr MSPPT::FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

#pragma implementation_key(1434)
inline IDispatchPtr MSPPT::Shape::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1435)
inline long MSPPT::Shape::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1436)
inline IDispatchPtr MSPPT::Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1437)
inline HRESULT MSPPT::Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1438)
inline HRESULT MSPPT::Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1439)
inline HRESULT MSPPT::Shape::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1440)
inline HRESULT MSPPT::Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1441)
inline HRESULT MSPPT::Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1442)
inline HRESULT MSPPT::Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1443)
inline HRESULT MSPPT::Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1444)
inline HRESULT MSPPT::Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1445)
inline HRESULT MSPPT::Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1446)
inline HRESULT MSPPT::Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1447)
inline HRESULT MSPPT::Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1448)
inline MSPPT::ShapeRangePtr MSPPT::Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1449)
inline HRESULT MSPPT::Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1450)
inline MSPPT::AdjustmentsPtr MSPPT::Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(1451)
inline enum Office::MsoAutoShapeType MSPPT::Shape::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1452)
inline void MSPPT::Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1453)
inline enum Office::MsoBlackWhiteMode MSPPT::Shape::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline void MSPPT::Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1455)
inline MSPPT::CalloutFormatPtr MSPPT::Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(1456)
inline int MSPPT::Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1457)
inline enum Office::MsoTriState MSPPT::Shape::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1458)
inline MSPPT::ConnectorFormatPtr MSPPT::Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(1459)
inline MSPPT::FillFormatPtr MSPPT::Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1460)
inline MSPPT::GroupShapesPtr MSPPT::Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(1461)
inline float MSPPT::Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1462)
inline void MSPPT::Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1463)
inline enum Office::MsoTriState MSPPT::Shape::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1464)
inline float MSPPT::Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1465)
inline void MSPPT::Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1466)
inline MSPPT::LineFormatPtr MSPPT::Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1467)
inline enum Office::MsoTriState MSPPT::Shape::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1468)
inline void MSPPT::Shape::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1469)
inline _bstr_t MSPPT::Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1470)
inline void MSPPT::Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1471)
inline MSPPT::ShapeNodesPtr MSPPT::Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(1472)
inline float MSPPT::Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline void MSPPT::Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1474)
inline MSPPT::PictureFormatPtr MSPPT::Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1475)
inline MSPPT::ShadowFormatPtr MSPPT::Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1476)
inline MSPPT::TextEffectFormatPtr MSPPT::Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(1477)
inline MSPPT::TextFramePtr MSPPT::Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(1478)
inline MSPPT::ThreeDFormatPtr MSPPT::Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1479)
inline float MSPPT::Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline void MSPPT::Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline enum Office::MsoShapeType MSPPT::Shape::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1482)
inline enum Office::MsoTriState MSPPT::Shape::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline _variant_t MSPPT::Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1484)
inline enum Office::MsoTriState MSPPT::Shape::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline void MSPPT::Shape::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1486)
inline float MSPPT::Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1487)
inline void MSPPT::Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1488)
inline int MSPPT::Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1489)
inline MSPPT::OLEFormatPtr MSPPT::Shape::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(1490)
inline MSPPT::LinkFormatPtr MSPPT::Shape::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(1491)
inline MSPPT::PlaceholderFormatPtr MSPPT::Shape::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(1492)
inline MSPPT::AnimationSettingsPtr MSPPT::Shape::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(1493)
inline MSPPT::ActionSettingsPtr MSPPT::Shape::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(1494)
inline MSPPT::TagsPtr MSPPT::Shape::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(1495)
inline HRESULT MSPPT::Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1496)
inline HRESULT MSPPT::Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1497)
inline HRESULT MSPPT::Shape::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1498)
inline MSPPT::ShapeRangePtr MSPPT::Shape::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1499)
inline enum MSPPT::PpMediaType MSPPT::Shape::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline enum Office::MsoTriState MSPPT::Shape::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1501)
inline MSPPT::SoundFormatPtr MSPPT::Shape::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(1502)
inline Office::ScriptPtr MSPPT::Shape::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(1503)
inline _bstr_t MSPPT::Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1504)
inline void MSPPT::Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline enum Office::MsoTriState MSPPT::Shape::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline MSPPT::TablePtr MSPPT::Shape::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1507)
inline HRESULT MSPPT::Shape::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface GroupShapes wrapper method implementations
//

#pragma implementation_key(1508)
inline IDispatchPtr MSPPT::GroupShapes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1509)
inline long MSPPT::GroupShapes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline IDispatchPtr MSPPT::GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1511)
inline int MSPPT::GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline MSPPT::ShapePtr MSPPT::GroupShapes::Item ( const _variant_t & index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1513)
inline IUnknownPtr MSPPT::GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ConnectorFormat wrapper method implementations
//

#pragma implementation_key(1514)
inline IDispatchPtr MSPPT::ConnectorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1515)
inline long MSPPT::ConnectorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1516)
inline IDispatchPtr MSPPT::ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1517)
inline HRESULT MSPPT::ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1518)
inline HRESULT MSPPT::ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1519)
inline HRESULT MSPPT::ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1520)
inline HRESULT MSPPT::ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1521)
inline enum Office::MsoTriState MSPPT::ConnectorFormat::GetBeginConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline MSPPT::ShapePtr MSPPT::ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1523)
inline int MSPPT::ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1524)
inline enum Office::MsoTriState MSPPT::ConnectorFormat::GetEndConnected ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline MSPPT::ShapePtr MSPPT::ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1526)
inline int MSPPT::ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1527)
inline enum Office::MsoConnectorType MSPPT::ConnectorFormat::GetType ( ) {
    enum Office::MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1528)
inline void MSPPT::ConnectorFormat::PutType ( enum Office::MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Presentation wrapper method implementations
//

#pragma implementation_key(1529)
inline MSPPT::_ApplicationPtr MSPPT::_Presentation::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1530)
inline IDispatchPtr MSPPT::_Presentation::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1531)
inline MSPPT::_MasterPtr MSPPT::_Presentation::GetSlideMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_SlideMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1532)
inline MSPPT::_MasterPtr MSPPT::_Presentation::GetTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_TitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1533)
inline enum Office::MsoTriState MSPPT::_Presentation::GetHasTitleMaster ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline MSPPT::_MasterPtr MSPPT::_Presentation::AddTitleMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = raw_AddTitleMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1535)
inline HRESULT MSPPT::_Presentation::ApplyTemplate ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyTemplate(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1536)
inline _bstr_t MSPPT::_Presentation::GetTemplateName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TemplateName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1537)
inline MSPPT::_MasterPtr MSPPT::_Presentation::GetNotesMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_NotesMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1538)
inline MSPPT::_MasterPtr MSPPT::_Presentation::GetHandoutMaster ( ) {
    struct _Master * _result = 0;
    HRESULT _hr = get_HandoutMaster(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MasterPtr(_result, false);
}

#pragma implementation_key(1539)
inline MSPPT::SlidesPtr MSPPT::_Presentation::GetSlides ( ) {
    struct Slides * _result = 0;
    HRESULT _hr = get_Slides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlidesPtr(_result, false);
}

#pragma implementation_key(1540)
inline MSPPT::PageSetupPtr MSPPT::_Presentation::GetPageSetup ( ) {
    struct PageSetup * _result = 0;
    HRESULT _hr = get_PageSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PageSetupPtr(_result, false);
}

#pragma implementation_key(1541)
inline MSPPT::ColorSchemesPtr MSPPT::_Presentation::GetColorSchemes ( ) {
    struct ColorSchemes * _result = 0;
    HRESULT _hr = get_ColorSchemes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorSchemesPtr(_result, false);
}

#pragma implementation_key(1542)
inline MSPPT::ExtraColorsPtr MSPPT::_Presentation::GetExtraColors ( ) {
    struct ExtraColors * _result = 0;
    HRESULT _hr = get_ExtraColors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExtraColorsPtr(_result, false);
}

#pragma implementation_key(1543)
inline MSPPT::SlideShowSettingsPtr MSPPT::_Presentation::GetSlideShowSettings ( ) {
    struct SlideShowSettings * _result = 0;
    HRESULT _hr = get_SlideShowSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowSettingsPtr(_result, false);
}

#pragma implementation_key(1544)
inline MSPPT::FontsPtr MSPPT::_Presentation::GetFonts ( ) {
    struct Fonts * _result = 0;
    HRESULT _hr = get_Fonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FontsPtr(_result, false);
}

#pragma implementation_key(1545)
inline MSPPT::DocumentWindowsPtr MSPPT::_Presentation::GetWindows ( ) {
    struct DocumentWindows * _result = 0;
    HRESULT _hr = get_Windows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowsPtr(_result, false);
}

#pragma implementation_key(1546)
inline MSPPT::TagsPtr MSPPT::_Presentation::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(1547)
inline MSPPT::ShapePtr MSPPT::_Presentation::GetDefaultShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_DefaultShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1548)
inline IDispatchPtr MSPPT::_Presentation::GetBuiltInDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_BuiltInDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1549)
inline IDispatchPtr MSPPT::_Presentation::GetCustomDocumentProperties ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CustomDocumentProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1550)
inline VBE6::_VBProjectPtr MSPPT::_Presentation::GetVBProject ( ) {
    struct VBE6::_VBProject * _result = 0;
    HRESULT _hr = get_VBProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return VBE6::_VBProjectPtr(_result, false);
}

#pragma implementation_key(1551)
inline enum Office::MsoTriState MSPPT::_Presentation::GetReadOnly ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline _bstr_t MSPPT::_Presentation::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1553)
inline _bstr_t MSPPT::_Presentation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1554)
inline _bstr_t MSPPT::_Presentation::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1555)
inline enum Office::MsoTriState MSPPT::_Presentation::GetSaved ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline void MSPPT::_Presentation::PutSaved ( enum Office::MsoTriState Saved ) {
    HRESULT _hr = put_Saved(Saved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1557)
inline enum MSPPT::PpDirection MSPPT::_Presentation::GetLayoutDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_LayoutDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1558)
inline void MSPPT::_Presentation::PutLayoutDirection ( enum PpDirection LayoutDirection ) {
    HRESULT _hr = put_LayoutDirection(LayoutDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1559)
inline MSPPT::DocumentWindowPtr MSPPT::_Presentation::NewWindow ( ) {
    struct DocumentWindow * _result = 0;
    HRESULT _hr = raw_NewWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentWindowPtr(_result, false);
}

#pragma implementation_key(1560)
inline HRESULT MSPPT::_Presentation::FollowHyperlink ( _bstr_t Address, _bstr_t SubAddress, VARIANT_BOOL NewWindow, VARIANT_BOOL AddHistory, _bstr_t ExtraInfo, enum Office::MsoExtraInfoMethod Method, _bstr_t HeaderInfo ) {
    HRESULT _hr = raw_FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1561)
inline HRESULT MSPPT::_Presentation::AddToFavorites ( ) {
    HRESULT _hr = raw_AddToFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1562)
inline HRESULT MSPPT::_Presentation::Unused ( ) {
    HRESULT _hr = raw_Unused();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1563)
inline MSPPT::PrintOptionsPtr MSPPT::_Presentation::GetPrintOptions ( ) {
    struct PrintOptions * _result = 0;
    HRESULT _hr = get_PrintOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PrintOptionsPtr(_result, false);
}

#pragma implementation_key(1564)
inline HRESULT MSPPT::_Presentation::PrintOut ( int From, int To, _bstr_t PrintToFile, int Copies, enum Office::MsoTriState Collate ) {
    HRESULT _hr = raw_PrintOut(From, To, PrintToFile, Copies, Collate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1565)
inline HRESULT MSPPT::_Presentation::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1566)
inline HRESULT MSPPT::_Presentation::SaveAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1567)
inline HRESULT MSPPT::_Presentation::SaveCopyAs ( _bstr_t FileName, enum PpSaveAsFileType FileFormat, enum Office::MsoTriState EmbedTrueTypeFonts ) {
    HRESULT _hr = raw_SaveCopyAs(FileName, FileFormat, EmbedTrueTypeFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1568)
inline HRESULT MSPPT::_Presentation::Export ( _bstr_t Path, _bstr_t FilterName, int ScaleWidth, int ScaleHeight ) {
    HRESULT _hr = raw_Export(Path, FilterName, ScaleWidth, ScaleHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1569)
inline HRESULT MSPPT::_Presentation::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1570)
inline HRESULT MSPPT::_Presentation::SetUndoText ( _bstr_t Text ) {
    HRESULT _hr = raw_SetUndoText(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1571)
inline IDispatchPtr MSPPT::_Presentation::GetContainer ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Container(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1572)
inline enum Office::MsoTriState MSPPT::_Presentation::GetDisplayComments ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_DisplayComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1573)
inline void MSPPT::_Presentation::PutDisplayComments ( enum Office::MsoTriState DisplayComments ) {
    HRESULT _hr = put_DisplayComments(DisplayComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1574)
inline enum MSPPT::PpFarEastLineBreakLevel MSPPT::_Presentation::GetFarEastLineBreakLevel ( ) {
    enum PpFarEastLineBreakLevel _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline void MSPPT::_Presentation::PutFarEastLineBreakLevel ( enum PpFarEastLineBreakLevel FarEastLineBreakLevel ) {
    HRESULT _hr = put_FarEastLineBreakLevel(FarEastLineBreakLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline _bstr_t MSPPT::_Presentation::GetNoLineBreakBefore ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1577)
inline void MSPPT::_Presentation::PutNoLineBreakBefore ( _bstr_t NoLineBreakBefore ) {
    HRESULT _hr = put_NoLineBreakBefore(NoLineBreakBefore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1578)
inline _bstr_t MSPPT::_Presentation::GetNoLineBreakAfter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NoLineBreakAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1579)
inline void MSPPT::_Presentation::PutNoLineBreakAfter ( _bstr_t NoLineBreakAfter ) {
    HRESULT _hr = put_NoLineBreakAfter(NoLineBreakAfter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline HRESULT MSPPT::_Presentation::UpdateLinks ( ) {
    HRESULT _hr = raw_UpdateLinks();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1581)
inline MSPPT::SlideShowWindowPtr MSPPT::_Presentation::GetSlideShowWindow ( ) {
    struct SlideShowWindow * _result = 0;
    HRESULT _hr = get_SlideShowWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SlideShowWindowPtr(_result, false);
}

#pragma implementation_key(1582)
inline enum Office::MsoFarEastLineBreakLanguageID MSPPT::_Presentation::GetFarEastLineBreakLanguage ( ) {
    enum Office::MsoFarEastLineBreakLanguageID _result;
    HRESULT _hr = get_FarEastLineBreakLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline void MSPPT::_Presentation::PutFarEastLineBreakLanguage ( enum Office::MsoFarEastLineBreakLanguageID FarEastLineBreakLanguage ) {
    HRESULT _hr = put_FarEastLineBreakLanguage(FarEastLineBreakLanguage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline HRESULT MSPPT::_Presentation::WebPagePreview ( ) {
    HRESULT _hr = raw_WebPagePreview();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1585)
inline enum Office::MsoLanguageID MSPPT::_Presentation::GetDefaultLanguageID ( ) {
    enum Office::MsoLanguageID _result;
    HRESULT _hr = get_DefaultLanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1586)
inline void MSPPT::_Presentation::PutDefaultLanguageID ( enum Office::MsoLanguageID DefaultLanguageID ) {
    HRESULT _hr = put_DefaultLanguageID(DefaultLanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1587)
inline Office::_CommandBarsPtr MSPPT::_Presentation::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(1588)
inline MSPPT::PublishObjectsPtr MSPPT::_Presentation::GetPublishObjects ( ) {
    struct PublishObjects * _result = 0;
    HRESULT _hr = get_PublishObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PublishObjectsPtr(_result, false);
}

#pragma implementation_key(1589)
inline MSPPT::WebOptionsPtr MSPPT::_Presentation::GetWebOptions ( ) {
    struct WebOptions * _result = 0;
    HRESULT _hr = get_WebOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebOptionsPtr(_result, false);
}

#pragma implementation_key(1590)
inline Office::HTMLProjectPtr MSPPT::_Presentation::GetHTMLProject ( ) {
    struct Office::HTMLProject * _result = 0;
    HRESULT _hr = get_HTMLProject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::HTMLProjectPtr(_result, false);
}

#pragma implementation_key(1591)
inline HRESULT MSPPT::_Presentation::ReloadAs ( enum Office::MsoEncoding cp ) {
    HRESULT _hr = raw_ReloadAs(cp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1592)
inline HRESULT MSPPT::_Presentation::MakeIntoTemplate ( enum Office::MsoTriState IsDesignTemplate ) {
    HRESULT _hr = raw_MakeIntoTemplate(IsDesignTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1593)
inline enum Office::MsoTriState MSPPT::_Presentation::GetEnvelopeVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_EnvelopeVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline void MSPPT::_Presentation::PutEnvelopeVisible ( enum Office::MsoTriState EnvelopeVisible ) {
    HRESULT _hr = put_EnvelopeVisible(EnvelopeVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1595)
inline HRESULT MSPPT::_Presentation::sblt ( _bstr_t s ) {
    HRESULT _hr = raw_sblt(s);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1596)
inline enum Office::MsoTriState MSPPT::_Presentation::GetVBASigned ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VBASigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Cell wrapper method implementations
//

#pragma implementation_key(1597)
inline MSPPT::_ApplicationPtr MSPPT::Cell::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1598)
inline IDispatchPtr MSPPT::Cell::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1599)
inline MSPPT::ShapePtr MSPPT::Cell::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1600)
inline MSPPT::BordersPtr MSPPT::Cell::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

#pragma implementation_key(1601)
inline HRESULT MSPPT::Cell::Merge ( struct Cell * MergeTo ) {
    HRESULT _hr = raw_Merge(MergeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1602)
inline HRESULT MSPPT::Cell::Split ( int NumRows, int NumColumns ) {
    HRESULT _hr = raw_Split(NumRows, NumColumns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1603)
inline HRESULT MSPPT::Cell::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1604)
inline VARIANT_BOOL MSPPT::Cell::GetSelected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Selected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CellRange wrapper method implementations
//

#pragma implementation_key(1605)
inline MSPPT::_ApplicationPtr MSPPT::CellRange::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1606)
inline IDispatchPtr MSPPT::CellRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1607)
inline MSPPT::CellPtr MSPPT::CellRange::Item ( int index ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1608)
inline MSPPT::BordersPtr MSPPT::CellRange::GetBorders ( ) {
    struct Borders * _result = 0;
    HRESULT _hr = get_Borders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BordersPtr(_result, false);
}

//
// interface Column wrapper method implementations
//

#pragma implementation_key(1609)
inline MSPPT::_ApplicationPtr MSPPT::Column::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1610)
inline IDispatchPtr MSPPT::Column::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1611)
inline MSPPT::CellRangePtr MSPPT::Column::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(1612)
inline HRESULT MSPPT::Column::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1613)
inline HRESULT MSPPT::Column::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1614)
inline float MSPPT::Column::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1615)
inline void MSPPT::Column::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Columns wrapper method implementations
//

#pragma implementation_key(1616)
inline MSPPT::_ApplicationPtr MSPPT::Columns::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1617)
inline IDispatchPtr MSPPT::Columns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1618)
inline MSPPT::ColumnPtr MSPPT::Columns::Item ( int index ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

#pragma implementation_key(1619)
inline MSPPT::ColumnPtr MSPPT::Columns::Add ( int BeforeColumn ) {
    struct Column * _result = 0;
    HRESULT _hr = raw_Add(BeforeColumn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnPtr(_result, false);
}

//
// interface Row wrapper method implementations
//

#pragma implementation_key(1620)
inline MSPPT::_ApplicationPtr MSPPT::Row::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1621)
inline IDispatchPtr MSPPT::Row::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1622)
inline MSPPT::CellRangePtr MSPPT::Row::GetCells ( ) {
    struct CellRange * _result = 0;
    HRESULT _hr = get_Cells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellRangePtr(_result, false);
}

#pragma implementation_key(1623)
inline HRESULT MSPPT::Row::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1624)
inline HRESULT MSPPT::Row::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1625)
inline float MSPPT::Row::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1626)
inline void MSPPT::Row::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Rows wrapper method implementations
//

#pragma implementation_key(1627)
inline MSPPT::_ApplicationPtr MSPPT::Rows::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1628)
inline IDispatchPtr MSPPT::Rows::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1629)
inline MSPPT::RowPtr MSPPT::Rows::Item ( int index ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

#pragma implementation_key(1630)
inline MSPPT::RowPtr MSPPT::Rows::Add ( int BeforeRow ) {
    struct Row * _result = 0;
    HRESULT _hr = raw_Add(BeforeRow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowPtr(_result, false);
}

//
// interface Table wrapper method implementations
//

#pragma implementation_key(1631)
inline MSPPT::_ApplicationPtr MSPPT::Table::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1632)
inline IDispatchPtr MSPPT::Table::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1633)
inline MSPPT::ColumnsPtr MSPPT::Table::GetColumns ( ) {
    struct Columns * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColumnsPtr(_result, false);
}

#pragma implementation_key(1634)
inline MSPPT::RowsPtr MSPPT::Table::GetRows ( ) {
    struct Rows * _result = 0;
    HRESULT _hr = get_Rows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RowsPtr(_result, false);
}

#pragma implementation_key(1635)
inline MSPPT::CellPtr MSPPT::Table::Cell ( int Row, int Column ) {
    struct Cell * _result = 0;
    HRESULT _hr = raw_Cell(Row, Column, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CellPtr(_result, false);
}

#pragma implementation_key(1636)
inline enum MSPPT::PpDirection MSPPT::Table::GetTableDirection ( ) {
    enum PpDirection _result;
    HRESULT _hr = get_TableDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1637)
inline void MSPPT::Table::PutTableDirection ( enum PpDirection TableDirection ) {
    HRESULT _hr = put_TableDirection(TableDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1638)
inline HRESULT MSPPT::Table::MergeBorders ( ) {
    HRESULT _hr = raw_MergeBorders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ShapeRange wrapper method implementations
//

#pragma implementation_key(1639)
inline IDispatchPtr MSPPT::ShapeRange::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1640)
inline long MSPPT::ShapeRange::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline IDispatchPtr MSPPT::ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1642)
inline HRESULT MSPPT::ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1643)
inline HRESULT MSPPT::ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1644)
inline HRESULT MSPPT::ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1645)
inline HRESULT MSPPT::ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1646)
inline HRESULT MSPPT::ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1647)
inline HRESULT MSPPT::ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1648)
inline HRESULT MSPPT::ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1649)
inline HRESULT MSPPT::ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1650)
inline HRESULT MSPPT::ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1651)
inline HRESULT MSPPT::ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, enum Office::MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1652)
inline HRESULT MSPPT::ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1653)
inline MSPPT::ShapeRangePtr MSPPT::ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1654)
inline HRESULT MSPPT::ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1655)
inline MSPPT::AdjustmentsPtr MSPPT::ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

#pragma implementation_key(1656)
inline enum Office::MsoAutoShapeType MSPPT::ShapeRange::GetAutoShapeType ( ) {
    enum Office::MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1657)
inline void MSPPT::ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1658)
inline enum Office::MsoBlackWhiteMode MSPPT::ShapeRange::GetBlackWhiteMode ( ) {
    enum Office::MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1659)
inline void MSPPT::ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1660)
inline MSPPT::CalloutFormatPtr MSPPT::ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

#pragma implementation_key(1661)
inline int MSPPT::ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1662)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetConnector ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1663)
inline MSPPT::ConnectorFormatPtr MSPPT::ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

#pragma implementation_key(1664)
inline MSPPT::FillFormatPtr MSPPT::ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

#pragma implementation_key(1665)
inline MSPPT::GroupShapesPtr MSPPT::ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

#pragma implementation_key(1666)
inline float MSPPT::ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1667)
inline void MSPPT::ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1668)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetHorizontalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1669)
inline float MSPPT::ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void MSPPT::ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline MSPPT::LineFormatPtr MSPPT::ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

#pragma implementation_key(1672)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetLockAspectRatio ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1673)
inline void MSPPT::ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1674)
inline _bstr_t MSPPT::ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1675)
inline void MSPPT::ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1676)
inline MSPPT::ShapeNodesPtr MSPPT::ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

#pragma implementation_key(1677)
inline float MSPPT::ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1678)
inline void MSPPT::ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1679)
inline MSPPT::PictureFormatPtr MSPPT::ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

#pragma implementation_key(1680)
inline MSPPT::ShadowFormatPtr MSPPT::ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

#pragma implementation_key(1681)
inline MSPPT::TextEffectFormatPtr MSPPT::ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

#pragma implementation_key(1682)
inline MSPPT::TextFramePtr MSPPT::ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

#pragma implementation_key(1683)
inline MSPPT::ThreeDFormatPtr MSPPT::ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

#pragma implementation_key(1684)
inline float MSPPT::ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1685)
inline void MSPPT::ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1686)
inline enum Office::MsoShapeType MSPPT::ShapeRange::GetType ( ) {
    enum Office::MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetVerticalFlip ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline _variant_t MSPPT::ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1689)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetVisible ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void MSPPT::ShapeRange::PutVisible ( enum Office::MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline float MSPPT::ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline void MSPPT::ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1693)
inline int MSPPT::ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1694)
inline MSPPT::OLEFormatPtr MSPPT::ShapeRange::GetOLEFormat ( ) {
    struct OLEFormat * _result = 0;
    HRESULT _hr = get_OLEFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OLEFormatPtr(_result, false);
}

#pragma implementation_key(1695)
inline MSPPT::LinkFormatPtr MSPPT::ShapeRange::GetLinkFormat ( ) {
    struct LinkFormat * _result = 0;
    HRESULT _hr = get_LinkFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkFormatPtr(_result, false);
}

#pragma implementation_key(1696)
inline MSPPT::PlaceholderFormatPtr MSPPT::ShapeRange::GetPlaceholderFormat ( ) {
    struct PlaceholderFormat * _result = 0;
    HRESULT _hr = get_PlaceholderFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PlaceholderFormatPtr(_result, false);
}

#pragma implementation_key(1697)
inline MSPPT::AnimationSettingsPtr MSPPT::ShapeRange::GetAnimationSettings ( ) {
    struct AnimationSettings * _result = 0;
    HRESULT _hr = get_AnimationSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnimationSettingsPtr(_result, false);
}

#pragma implementation_key(1698)
inline MSPPT::ActionSettingsPtr MSPPT::ShapeRange::GetActionSettings ( ) {
    struct ActionSettings * _result = 0;
    HRESULT _hr = get_ActionSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionSettingsPtr(_result, false);
}

#pragma implementation_key(1699)
inline MSPPT::TagsPtr MSPPT::ShapeRange::GetTags ( ) {
    struct Tags * _result = 0;
    HRESULT _hr = get_Tags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TagsPtr(_result, false);
}

#pragma implementation_key(1700)
inline HRESULT MSPPT::ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1701)
inline HRESULT MSPPT::ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1702)
inline HRESULT MSPPT::ShapeRange::Select ( enum Office::MsoTriState Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1703)
inline MSPPT::ShapeRangePtr MSPPT::ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

#pragma implementation_key(1704)
inline enum MSPPT::PpMediaType MSPPT::ShapeRange::GetMediaType ( ) {
    enum PpMediaType _result;
    HRESULT _hr = get_MediaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetHasTextFrame ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline MSPPT::SoundFormatPtr MSPPT::ShapeRange::GetSoundFormat ( ) {
    struct SoundFormat * _result = 0;
    HRESULT _hr = get_SoundFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoundFormatPtr(_result, false);
}

#pragma implementation_key(1707)
inline MSPPT::ShapePtr MSPPT::ShapeRange::Item ( const _variant_t & index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1708)
inline IUnknownPtr MSPPT::ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1709)
inline _variant_t MSPPT::ShapeRange::_Index ( int index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Index(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1710)
inline long MSPPT::ShapeRange::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline MSPPT::ShapePtr MSPPT::ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1712)
inline MSPPT::ShapePtr MSPPT::ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

#pragma implementation_key(1713)
inline HRESULT MSPPT::ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1714)
inline HRESULT MSPPT::ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1715)
inline HRESULT MSPPT::ShapeRange::GetPolygonalRepresentation ( unsigned long maxPointsInBuffer, float * pPoints, unsigned long * numPointsInPolygon, enum Office::MsoTriState * IsOpen ) {
    HRESULT _hr = raw_GetPolygonalRepresentation(maxPointsInBuffer, pPoints, numPointsInPolygon, IsOpen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1716)
inline Office::ScriptPtr MSPPT::ShapeRange::GetScript ( ) {
    struct Office::Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::ScriptPtr(_result, false);
}

#pragma implementation_key(1717)
inline _bstr_t MSPPT::ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1718)
inline void MSPPT::ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline enum Office::MsoTriState MSPPT::ShapeRange::GetHasTable ( ) {
    enum Office::MsoTriState _result;
    HRESULT _hr = get_HasTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline MSPPT::TablePtr MSPPT::ShapeRange::GetTable ( ) {
    struct Table * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TablePtr(_result, false);
}

#pragma implementation_key(1721)
inline HRESULT MSPPT::ShapeRange::Export ( _bstr_t PathName, enum PpShapeFormat Filter, int ScaleWidth, int ScaleHeight, enum PpExportMode ExportMode ) {
    HRESULT _hr = raw_Export(PathName, Filter, ScaleWidth, ScaleHeight, ExportMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
